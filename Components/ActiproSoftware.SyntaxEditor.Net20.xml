<?xml version="1.0"?><doc><assembly><name>ActiproSoftware.SyntaxEditor.Net20</name></assembly><members><member name="T:ActiproSoftware.Products.SyntaxEditor.AssemblyInfo"><summary>
            Provides a class for retrieving information about the <c>ActiproSoftware.SyntaxEditor</c> assembly.
            </summary></member><member name="P:ActiproSoftware.Products.SyntaxEditor.AssemblyInfo.Components"><summary>
            Gets an array containing the components that must be licensed to be used in production applications.
            </summary><value>An array containing the components that must be licensed to be used in production applications.</value></member><member name="P:ActiproSoftware.Products.SyntaxEditor.AssemblyInfo.Instance"><summary>
            Gets the instance of the <see cref="T:ActiproSoftware.Products.AssemblyInfo" /> class for this assembly.
            </summary><value>The instance of the <see cref="T:ActiproSoftware.Products.AssemblyInfo" /> class for this assembly.</value></member><member name="P:ActiproSoftware.Products.SyntaxEditor.AssemblyInfo.LicenseFormProductLogo"><summary>
            Gets the product logo <see cref="T:System.Drawing.Image" /> to display on the license form.
            </summary><value>The <see cref="T:System.Drawing.Image" /> resource that was retrieved.</value></member><member name="P:ActiproSoftware.Products.SyntaxEditor.AssemblyInfo.LicenseType"><summary>
            Gets the type of license that is available for the assembly.
            </summary><value>A <see cref="T:ActiproSoftware.Products.AssemblyLicenseType" /> specifying the type of license that is available for the assembly.</value></member><member name="P:ActiproSoftware.Products.SyntaxEditor.AssemblyInfo.Platform"><summary>
            Gets the target platform for the assembly.
            </summary><value>A <see cref="T:ActiproSoftware.Products.AssemblyPlatform" /> specifying the target platform for the assembly.</value></member><member name="P:ActiproSoftware.Products.SyntaxEditor.AssemblyInfo.ProductCode"><summary>
            Gets the product code of the assembly.
            </summary><value>A three-letter product code of the assembly.</value></member><member name="P:ActiproSoftware.Products.SyntaxEditor.AssemblyInfo.RedistributableFiles"><summary>
            Gets an array containing the names of files that are permitted to be redistributed 
            with your projects after you have licensed the product.
            </summary><value>
            An array containing the names of files that are permitted to be redistributed 
            with your projects after you have licensed the product
            </value></member><member name="P:ActiproSoftware.Products.SyntaxEditor.AssemblyInfo.Resources"><summary>
            Gets a <see cref="T:ActiproSoftware.Products.SyntaxEditor.Resources" /> that provides access to the resources of the assembly.
            </summary><value>
            A <see cref="T:ActiproSoftware.Products.SyntaxEditor.Resources" /> that provides access to the resources of the assembly.
            </value></member><member name="T:ActiproSoftware.Products.SyntaxEditor.CursorResource"><summary>
            Specifies the type of cursor resource that may be retrieved.
            </summary></member><member name="F:ActiproSoftware.Products.SyntaxEditor.CursorResource.IncrementalSearchForward"><summary>
            Incremental search forward.
            </summary></member><member name="F:ActiproSoftware.Products.SyntaxEditor.CursorResource.IncrementalSearchBackward"><summary>
            Incremental search backward.
            </summary></member><member name="T:ActiproSoftware.Products.SyntaxEditor.IconResource"><summary>
            Specifies the type of icon resource that may be retrieved.
            </summary></member><member name="F:ActiproSoftware.Products.SyntaxEditor.IconResource.PrivateConstant"><summary>
            A private constant.
            </summary></member><member name="F:ActiproSoftware.Products.SyntaxEditor.IconResource.InternalConstant"><summary>
            An internal constant.
            </summary></member><member name="F:ActiproSoftware.Products.SyntaxEditor.IconResource.ProtectedConstant"><summary>
            A protected constant.
            </summary></member><member name="F:ActiproSoftware.Products.SyntaxEditor.IconResource.PublicConstant"><summary>
            A public constant.
            </summary></member><member name="F:ActiproSoftware.Products.SyntaxEditor.IconResource.PrivateEvent"><summary>
            A private event.
            </summary></member><member name="F:ActiproSoftware.Products.SyntaxEditor.IconResource.InternalEvent"><summary>
            An internal event.
            </summary></member><member name="F:ActiproSoftware.Products.SyntaxEditor.IconResource.ProtectedEvent"><summary>
            A protected event.
            </summary></member><member name="F:ActiproSoftware.Products.SyntaxEditor.IconResource.PublicEvent"><summary>
            A public event.
            </summary></member><member name="F:ActiproSoftware.Products.SyntaxEditor.IconResource.PrivateField"><summary>
            A private field.
            </summary></member><member name="F:ActiproSoftware.Products.SyntaxEditor.IconResource.InternalField"><summary>
            An internal field.
            </summary></member><member name="F:ActiproSoftware.Products.SyntaxEditor.IconResource.ProtectedField"><summary>
            A protected field.
            </summary></member><member name="F:ActiproSoftware.Products.SyntaxEditor.IconResource.PublicField"><summary>
            A public field.
            </summary></member><member name="F:ActiproSoftware.Products.SyntaxEditor.IconResource.PrivateMethod"><summary>
            A private method.
            </summary></member><member name="F:ActiproSoftware.Products.SyntaxEditor.IconResource.InternalMethod"><summary>
            An internal method.
            </summary></member><member name="F:ActiproSoftware.Products.SyntaxEditor.IconResource.ProtectedMethod"><summary>
            A protected method.
            </summary></member><member name="F:ActiproSoftware.Products.SyntaxEditor.IconResource.PublicMethod"><summary>
            A public method.
            </summary></member><member name="F:ActiproSoftware.Products.SyntaxEditor.IconResource.PrivateProperty"><summary>
            A private property.
            </summary></member><member name="F:ActiproSoftware.Products.SyntaxEditor.IconResource.InternalProperty"><summary>
            An internal property.
            </summary></member><member name="F:ActiproSoftware.Products.SyntaxEditor.IconResource.ProtectedProperty"><summary>
            A protected property.
            </summary></member><member name="F:ActiproSoftware.Products.SyntaxEditor.IconResource.PublicProperty"><summary>
            A public property.
            </summary></member><member name="F:ActiproSoftware.Products.SyntaxEditor.IconResource.Operator"><summary>
            An operator.
            </summary></member><member name="F:ActiproSoftware.Products.SyntaxEditor.IconResource.Assembly"><summary>
            An assembly.
            </summary></member><member name="F:ActiproSoftware.Products.SyntaxEditor.IconResource.Namespace"><summary>
            A namespace.
            </summary></member><member name="F:ActiproSoftware.Products.SyntaxEditor.IconResource.PrivateClass"><summary>
            A private class.
            </summary></member><member name="F:ActiproSoftware.Products.SyntaxEditor.IconResource.InternalClass"><summary>
            An internal class.
            </summary></member><member name="F:ActiproSoftware.Products.SyntaxEditor.IconResource.ProtectedClass"><summary>
            A protected class.
            </summary></member><member name="F:ActiproSoftware.Products.SyntaxEditor.IconResource.PublicClass"><summary>
            A public class.
            </summary></member><member name="F:ActiproSoftware.Products.SyntaxEditor.IconResource.PrivateStructure"><summary>
            A private structure.
            </summary></member><member name="F:ActiproSoftware.Products.SyntaxEditor.IconResource.InternalStructure"><summary>
            An internal structure.
            </summary></member><member name="F:ActiproSoftware.Products.SyntaxEditor.IconResource.ProtectedStructure"><summary>
            A protected structure.
            </summary></member><member name="F:ActiproSoftware.Products.SyntaxEditor.IconResource.PublicStructure"><summary>
            A public structure.
            </summary></member><member name="F:ActiproSoftware.Products.SyntaxEditor.IconResource.PrivateInterface"><summary>
            A private interface.
            </summary></member><member name="F:ActiproSoftware.Products.SyntaxEditor.IconResource.InternalInterface"><summary>
            An internal interface.
            </summary></member><member name="F:ActiproSoftware.Products.SyntaxEditor.IconResource.ProtectedInterface"><summary>
            A protected interface.
            </summary></member><member name="F:ActiproSoftware.Products.SyntaxEditor.IconResource.PublicInterface"><summary>
            A public interface.
            </summary></member><member name="F:ActiproSoftware.Products.SyntaxEditor.IconResource.PrivateEnumeration"><summary>
            A private enumeration.
            </summary></member><member name="F:ActiproSoftware.Products.SyntaxEditor.IconResource.InternalEnumeration"><summary>
            An internal enumeration.
            </summary></member><member name="F:ActiproSoftware.Products.SyntaxEditor.IconResource.ProtectedEnumeration"><summary>
            A protected enumeration.
            </summary></member><member name="F:ActiproSoftware.Products.SyntaxEditor.IconResource.PublicEnumeration"><summary>
            A public enumeration.
            </summary></member><member name="F:ActiproSoftware.Products.SyntaxEditor.IconResource.PrivateDelegate"><summary>
            A private delegate.
            </summary></member><member name="F:ActiproSoftware.Products.SyntaxEditor.IconResource.InternalDelegate"><summary>
            An internal delegate.
            </summary></member><member name="F:ActiproSoftware.Products.SyntaxEditor.IconResource.ProtectedDelegate"><summary>
            A protected delegate.
            </summary></member><member name="F:ActiproSoftware.Products.SyntaxEditor.IconResource.PublicDelegate"><summary>
            A public delegate.
            </summary></member><member name="F:ActiproSoftware.Products.SyntaxEditor.IconResource.XmlTag"><summary>
            An XML tag.
            </summary></member><member name="F:ActiproSoftware.Products.SyntaxEditor.IconResource.XmlAttribute"><summary>
            An XML attribute.
            </summary></member><member name="F:ActiproSoftware.Products.SyntaxEditor.IconResource.XmlComment"><summary>
            An XML comment.
            </summary></member><member name="F:ActiproSoftware.Products.SyntaxEditor.IconResource.XmlDeclaration"><summary>
            An XML declaration.
            </summary></member><member name="F:ActiproSoftware.Products.SyntaxEditor.IconResource.XmlProcessingInstruction"><summary>
            An XML processing instruction.
            </summary></member><member name="F:ActiproSoftware.Products.SyntaxEditor.IconResource.XmlCDataSection"><summary>
            An XML CDATA section.
            </summary></member><member name="F:ActiproSoftware.Products.SyntaxEditor.IconResource.Warning"><summary>
            A warning.
            </summary></member><member name="F:ActiproSoftware.Products.SyntaxEditor.IconResource.EnumerationItem"><summary>
            An enumeration item.
            </summary></member><member name="F:ActiproSoftware.Products.SyntaxEditor.IconResource.Keyword"><summary>
            A keyword.
            </summary></member><member name="F:ActiproSoftware.Products.SyntaxEditor.IconResource.CodeSnippet"><summary>
            A code snippet.
            </summary></member><member name="F:ActiproSoftware.Products.SyntaxEditor.IconResource.Folder"><summary>
            A folder.
            </summary></member><member name="F:ActiproSoftware.Products.SyntaxEditor.IconResource.GenericArgument"><summary>
            A generic argument.
            </summary></member><member name="F:ActiproSoftware.Products.SyntaxEditor.IconResource.InternalStandardModule"><summary>
            An internal standard module.
            </summary></member><member name="F:ActiproSoftware.Products.SyntaxEditor.IconResource.PublicStandardModule"><summary>
            A public standard module.
            </summary></member><member name="F:ActiproSoftware.Products.SyntaxEditor.IconResource.PrivateExtensionMethod"><summary>
            A private extension method.
            </summary></member><member name="F:ActiproSoftware.Products.SyntaxEditor.IconResource.InternalExtensionMethod"><summary>
            An internal extension method.
            </summary></member><member name="F:ActiproSoftware.Products.SyntaxEditor.IconResource.ProtectedExtensionMethod"><summary>
            A protected extension method.
            </summary></member><member name="F:ActiproSoftware.Products.SyntaxEditor.IconResource.PublicExtensionMethod"><summary>
            A public extension method.
            </summary></member><member name="T:ActiproSoftware.Products.SyntaxEditor.ImageResource"><summary>
            Specifies the type of icon resource that may be retrieved.
            </summary></member><member name="F:ActiproSoftware.Products.SyntaxEditor.ImageResource.LicenseFormProductLogo"><summary>
            The product logo to display on the license form.
            </summary></member><member name="T:ActiproSoftware.Products.SyntaxEditor.Resources"><summary>
            Provides a class for accessing the resources of an assembly.
            </summary></member><member name="M:ActiproSoftware.Products.SyntaxEditor.Resources.GetCursor(ActiproSoftware.Products.SyntaxEditor.CursorResource)"><summary>
            Gets a <see cref="T:System.Windows.Forms.Cursor" /> from the resources.
            </summary><param name="cursor">The type of the cursor resource to get.</param><returns>The <see cref="T:System.Windows.Forms.Cursor" /> resource that was retrieved.</returns></member><member name="M:ActiproSoftware.Products.SyntaxEditor.Resources.GetIcon(ActiproSoftware.Products.SyntaxEditor.IconResource)"><summary>
            Gets a <see cref="T:System.Drawing.Icon" /> from the resources.
            </summary><param name="icon">The type of the icon resource to get.</param><returns>The <see cref="T:System.Drawing.Icon" /> resource that was retrieved.</returns></member><member name="M:ActiproSoftware.Products.SyntaxEditor.Resources.GetImage(ActiproSoftware.Products.SyntaxEditor.ImageResource)"><summary>
            Gets a <see cref="T:System.Drawing.Image" /> from the resources.
            </summary><param name="image">The type of the image resource to get.</param><returns>The <see cref="T:System.Drawing.Image" /> resource that was retrieved.</returns></member><member name="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage"><summary>
            Provides the base requirements for a syntax-highlighting language definition to be used with a <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor" /> control.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.AddChildLanguages(ActiproSoftware.SyntaxEditor.SyntaxLanguageCollection,System.Boolean)"><summary>
            Adds all child languages into the specified language collection.
            </summary><param name="languages">The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguageCollection" /> into which the child languages should be added.</param><param name="recurse">Whether to recurse.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.ResetAutomaticOutliningBehavior"><summary>
            Resets the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.AutomaticOutliningBehavior" /> property to its default value.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.ShouldSerializeAutomaticOutliningBehavior"><summary>
            Indicates whether the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.AutomaticOutliningBehavior" /> property should be persisted.
            </summary><returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.CodeBlockSelectionContract(ActiproSoftware.SyntaxEditor.SyntaxEditor)"><summary>
            Contracts the code block selection level.
            </summary><param name="syntaxEditor">The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor" /> whose selection will be modified.</param><returns><c>true</c> if the selection is modified; otherwise, <c>false</c>.
            </returns><remarks>
            This method will only change the selection if it is used after a call to <see cref="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.CodeBlockSelectionExpand(ActiproSoftware.SyntaxEditor.SyntaxEditor)" />.
            In that case it will restore the selection to the state it was at before the previous expand occurred.
            It can be called multiple times if multiple expands occurred.
            Only call this method if the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.CodeBlockSelectionSupported" /> property is set to <c>true</c>.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.CodeBlockSelectionExpand(ActiproSoftware.SyntaxEditor.SyntaxEditor)"><summary>
            Expands the code block selection level.
            </summary><param name="syntaxEditor">The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor" /> whose selection will be modified.</param><returns><c>true</c> if the selection is modified; otherwise, <c>false</c>.
            </returns><remarks>
            When executed, the selection will change to be over the offset range of the code block that contains the current selection.
            This method can be called multiple times to walk up the hierarchy of code blocks.
            Only call this method if the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.CodeBlockSelectionSupported" /> property is set to <c>true</c>.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.CreateDocumentEndToken(System.Int32,ActiproSoftware.SyntaxEditor.ILexicalState)"><summary>
            Creates an <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that represents the end of a document.
            </summary><param name="startOffset">The start offset of the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.</param><param name="lexicalState">The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that contains the token.</param><returns>An <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that represents the end of a document.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.CreateInvalidToken(System.Int32,System.Int32,ActiproSoftware.SyntaxEditor.ILexicalState)"><summary>
            Creates an <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that represents an invalid range of text.
            </summary><param name="startOffset">The start offset of the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.</param><param name="length">The length of the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.</param><param name="lexicalState">The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that contains the token.</param><returns>An <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that represents an invalid range of text.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.ResetErrorDisplayEnabled"><summary>
            Resets the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.ErrorDisplayEnabled" /> property to its default value.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.ShouldSerializeErrorDisplayEnabled"><summary>
            Indicates whether the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.ErrorDisplayEnabled" /> property should be persisted.
            </summary><returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.FormatDocument(ActiproSoftware.SyntaxEditor.Document)"><summary>
            Formats the code in the entire <see cref="T:ActiproSoftware.SyntaxEditor.Document" />.
            </summary><param name="document">The <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> to format.</param><remarks>
            Only call this method if the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.FormattingSupported" /> property is set to <c>true</c>.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.FormatSelection(ActiproSoftware.SyntaxEditor.SyntaxEditor)"><summary>
            Formats the selected text in the selected view of the <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor" />.
            </summary><param name="syntaxEditor">The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor" /> whose selected view's selection will be formatted.</param><remarks>
            Only call this method if the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.FormattingSupported" /> property is set to <c>true</c>.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.FormatTextRange(ActiproSoftware.SyntaxEditor.Document,ActiproSoftware.SyntaxEditor.TextRange)"><summary>
            Formats the code in the specified <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> of the <see cref="T:ActiproSoftware.SyntaxEditor.Document" />.
            </summary><param name="document">The <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> to format.</param><param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> to format.</param><remarks>
            Only call this method if the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.FormattingSupported" /> property is set to <c>true</c>.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.GetHighlightingStyle(ActiproSoftware.SyntaxEditor.IToken)"><summary>
            Returns the <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyle" /> for the specified <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.
            </summary><param name="token">The <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> to examine.</param><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyle" /> for the specified <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.GetLanguageCollection(ActiproSoftware.SyntaxEditor.SyntaxLanguage)"><summary>
            Gets a collection of <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> objects including the specified language
            and all of its child languages.
            </summary><param name="rootLanguage">The root <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> to examine.</param><returns>
            A <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguageCollection" /> containing <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> objects.
            </returns><remarks>This procedure will recurse to find all instances of child languages.</remarks></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.GetTokenString(System.Int32)"><summary>
            Gets the token string representation for the specified token ID.
            </summary><param name="tokenID">The ID of the token to examine.</param><returns>The token string representation for the specified token ID.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.IntelliPromptCompleteWord(ActiproSoftware.SyntaxEditor.SyntaxEditor)"><summary>
            Performs an auto-complete if the <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor" /> context with which the IntelliPrompt member list is initialized causes a single selection.
            Otherwise, displays a member list in the <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor" />.
            </summary><param name="syntaxEditor">The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor" /> that will display the IntelliPrompt member list.</param><returns><c>true</c> if an auto-complete occurred or if an IntelliPrompt member list is displayed; otherwise, <c>false</c>.
            </returns><remarks>
            Only call this method if the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.IntelliPromptMemberListSupported" /> property is set to <c>true</c>.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.ResetLineCommentDelimiter"><summary>
            Resets the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.LineCommentDelimiter" /> property to its default value.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.ShouldSerializeLineCommentDelimiter"><summary>
            Indicates whether the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.LineCommentDelimiter" /> property should be persisted.
            </summary><returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.OnChanged(ActiproSoftware.SyntaxEditor.SyntaxLanguageEventArgs)"><summary>
            Raises the <c>Changed</c> event.
            </summary><param name="e">A <c>SyntaxLanguageEventArgs</c> that contains the event data.</param><remarks>
            The <c>OnChanged</c> method also allows derived classes to handle the event without attaching a delegate. 
            This is the preferred technique for handling the event in a derived class.
            <para>
            When overriding <c>OnChanged</c> in a derived class, be sure to call the base class's 
            <c>OnChanged</c> method so that registered delegates receive the event.
            </para></remarks></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.OnDocumentAutomaticOutliningComplete(ActiproSoftware.SyntaxEditor.Document,ActiproSoftware.SyntaxEditor.DocumentModificationEventArgs)"><summary>
            Occurs after automatic outlining is performed on a <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> that uses this language.
            </summary><param name="document">The <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> that is being modified.</param><param name="e">A <c>DocumentModificationEventArgs</c> that contains the event data.</param><remarks>
            A <see cref="T:ActiproSoftware.SyntaxEditor.DocumentModification" /> may or may not be passed in the event arguments, depending on if the outlining
            is performed in the main thread.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.OnDocumentFilenameChanged(ActiproSoftware.SyntaxEditor.Document,System.EventArgs)"><summary>
            Occurs after the <see cref="P:ActiproSoftware.SyntaxEditor.Document.Filename" /> property is changed on a <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> that uses this language.
            </summary><param name="document">The <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> that is being modified.</param><param name="e">An <c>EventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.OnDocumentFilenameChanging(ActiproSoftware.SyntaxEditor.Document,System.EventArgs)"><summary>
            Occurs before the <see cref="P:ActiproSoftware.SyntaxEditor.Document.Filename" /> property is changed on a <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> that uses this language.
            </summary><param name="document">The <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> that is being modified.</param><param name="e">An <c>EventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.OnDocumentPreTextChanging(ActiproSoftware.SyntaxEditor.Document,ActiproSoftware.SyntaxEditor.DocumentModificationEventArgs)"><summary>
            Occurs before a modification occurs to the text of a <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> that uses this language, allowing it to be cancelled.
            </summary><param name="document">The <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> that is being modified.</param><param name="e">A <c>DocumentModificationEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.OnDocumentSemanticParseDataChanged(ActiproSoftware.SyntaxEditor.Document,System.EventArgs)"><summary>
            Occurs after the value of the <see cref="P:ActiproSoftware.SyntaxEditor.Document.SemanticParseData" /> property has changed
            on a <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> that uses this language.
            </summary><param name="document">The <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> that is being modified.</param><param name="e">A <c>EventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.OnDocumentTextChanged(ActiproSoftware.SyntaxEditor.Document,ActiproSoftware.SyntaxEditor.DocumentModificationEventArgs)"><summary>
            Occurs after a modification occurs to the text of a <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> that uses this language.
            </summary><param name="document">The <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> that is being modified.</param><param name="e">A <c>DocumentModificationEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.OnDocumentTextChanging(ActiproSoftware.SyntaxEditor.Document,ActiproSoftware.SyntaxEditor.DocumentModificationEventArgs)"><summary>
            Occurs before a modification occurs to the text of a <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> that uses this language.
            </summary><param name="document">The <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> that is being modified.</param><param name="e">A <c>DocumentModificationEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.OnSyntaxEditorIntelliPromptMemberListClosed(ActiproSoftware.SyntaxEditor.SyntaxEditor,System.ComponentModel.CancelEventArgs)"><summary>
            Occurs after the IntelliPrompt member list is closed.
            </summary><param name="syntaxEditor">The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor" /> that will raise the event.</param><param name="e">An <c>CancelEventArgs</c> that contains the event data.</param><remarks>
            The <see cref="T:System.ComponentModel.CancelEventArgs" /> indicates whether auto-complete was cancelled during the 
            <see cref="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.IntelliPromptMemberListClosing" /> event.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.OnSyntaxEditorIntelliPromptMemberListClosing(ActiproSoftware.SyntaxEditor.SyntaxEditor,System.ComponentModel.CancelEventArgs)"><summary>
            Occurs when the IntelliPrompt member list is closing, allowing it to be cancelled.
            </summary><param name="syntaxEditor">The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor" /> that will raise the event.</param><param name="e">An <c>CancelEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.OnSyntaxEditorIntelliPromptMemberListItemDescriptionRequested(ActiproSoftware.SyntaxEditor.SyntaxEditor,System.EventArgs)"><summary>
            Occurs when a description tip is about to be displayed for the selected IntelliPrompt member list item,
            but the item has no description set.
            </summary><param name="syntaxEditor">The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor" /> that will raise the event.</param><param name="e">An <c>EventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.OnSyntaxEditorIntelliPromptParameterInfoParameterIndexChanged(ActiproSoftware.SyntaxEditor.SyntaxEditor,System.EventArgs)"><summary>
            Occurs after the parameter index of the IntelliPrompt parameter info is changed while the parameter info is visible.
            </summary><param name="syntaxEditor">The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor" /> that will raise the event.</param><param name="e">An <c>EventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.OnSyntaxEditorIntelliPromptParameterInfoSelectedIndexChanged(ActiproSoftware.SyntaxEditor.SyntaxEditor,System.EventArgs)"><summary>
            Occurs after the selected index of the IntelliPrompt parameter info is changed while the parameter info is visible.
            </summary><param name="syntaxEditor">The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor" /> that will raise the event.</param><param name="e">An <c>EventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.OnSyntaxEditorIntelliPromptTipImageRequested(ActiproSoftware.SyntaxEditor.SyntaxEditor,ActiproSoftware.SyntaxEditor.IntelliPromptTipImageRequestedEventArgs)"><summary>
            Occurs when an IntelliPrompt popup requests an <c>Image</c> to display in a tooltip.
            </summary><param name="syntaxEditor">The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor" /> that will raise the event.</param><param name="e">An <c>IntelliPromptTipImageRequestedEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.OnSyntaxEditorIntelliPromptTipLinkClick(ActiproSoftware.SyntaxEditor.SyntaxEditor,ActiproSoftware.SyntaxEditor.IntelliPromptTipLinkClickEventArgs)"><summary>
            Occurs when a link on an IntelliPrompt popup tooltip is clicked.
            </summary><param name="syntaxEditor">The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor" /> that will raise the event.</param><param name="e">An <c>IntelliPromptTipLinkClickEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.OnSyntaxEditorKeyTyped(ActiproSoftware.SyntaxEditor.SyntaxEditor,ActiproSoftware.SyntaxEditor.KeyTypedEventArgs)"><summary>
            Occurs before a <see cref="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.KeyTyped" /> event is raised 
            for a <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor" /> that has a <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> using this language.
            </summary><param name="syntaxEditor">The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor" /> that will raise the event.</param><param name="e">A <c>KeyTypedEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.OnSyntaxEditorKeyTyping(ActiproSoftware.SyntaxEditor.SyntaxEditor,ActiproSoftware.SyntaxEditor.KeyTypingEventArgs)"><summary>
            Occurs before a <see cref="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.KeyTyping" /> event is raised 
            for a <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor" /> that has a <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> using this language.
            </summary><param name="syntaxEditor">The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor" /> that will raise the event.</param><param name="e">A <c>KeyTypingEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.OnSyntaxEditorSelectionChanged(ActiproSoftware.SyntaxEditor.SyntaxEditor,ActiproSoftware.SyntaxEditor.SelectionEventArgs)"><summary>
            Occurs when a <see cref="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.SelectionChanged" /> event is raised 
            for a <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor" /> that has a <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> using this language.
            </summary><param name="syntaxEditor">The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor" /> that will raise the event.</param><param name="e">A <c>SelectionEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.OnSyntaxEditorSmartIndent(ActiproSoftware.SyntaxEditor.SyntaxEditor,ActiproSoftware.SyntaxEditor.SmartIndentEventArgs)"><summary>
            Occurs when a <see cref="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.SmartIndent" /> event is raised 
            for a <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor" /> that has a <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> using this language.
            </summary><param name="syntaxEditor">The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor" /> that will raise the event.</param><param name="e">A <c>SmartIndentEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.OnSyntaxEditorTriggerActivated(ActiproSoftware.SyntaxEditor.SyntaxEditor,ActiproSoftware.SyntaxEditor.TriggerEventArgs)"><summary>
            Occurs after a <see cref="T:ActiproSoftware.SyntaxEditor.Trigger" /> is activated
            for a <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor" /> that has a <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> using this language.
            </summary><param name="syntaxEditor">The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor" /> that will raise the event.</param><param name="e">An <c>TriggerEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.OnSyntaxEditorUserInterfaceUpdate(ActiproSoftware.SyntaxEditor.SyntaxEditor,System.EventArgs)"><summary>
            Occurs before a <see cref="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.UserInterfaceUpdate" /> event is raised 
            for a <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor" /> that has a <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> using this language.
            </summary><param name="syntaxEditor">The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor" /> that will raise the event.</param><param name="e">An <c>EventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.OnSyntaxEditorViewBracketHighlightingUpdate(ActiproSoftware.SyntaxEditor.SyntaxEditor,ActiproSoftware.SyntaxEditor.EditorViewBracketHighlightingEventArgs)"><summary>
            Occurs before a <see cref="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.ViewBracketHighlightingUpdate" /> event is raised 
            for a <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor" /> that has a <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> using this language.
            </summary><param name="syntaxEditor">The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor" /> that will raise the event.</param><param name="e">An <c>EditorViewBracketHighlightingEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.OnSyntaxEditorViewMouseDown(ActiproSoftware.SyntaxEditor.SyntaxEditor,ActiproSoftware.SyntaxEditor.EditorViewMouseEventArgs)"><summary>
            Occurs when a mouse button is pressed over an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" />.
            </summary><param name="syntaxEditor">The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor" /> that will raise the event.</param><param name="e">An <c>EditorViewMouseEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.OnSyntaxEditorViewMouseHover(ActiproSoftware.SyntaxEditor.SyntaxEditor,ActiproSoftware.SyntaxEditor.EditorViewMouseEventArgs)"><summary>
            Occurs when the mouse is hovered over an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" />.
            </summary><param name="syntaxEditor">The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor" /> that will raise the event.</param><param name="e">An <c>EditorViewMouseEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.PerformAutomaticOutlining(ActiproSoftware.SyntaxEditor.Document,ActiproSoftware.SyntaxEditor.TextRange)"><summary>
            Performs automatic outlining over the specified <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> of the <see cref="T:ActiproSoftware.SyntaxEditor.Document" />.
            </summary><param name="document">The <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> to examine.</param><param name="parseTextRange">A <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> indicating the offset range to parse.</param><returns>A <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> containing the offset range that was modified by outlining.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.PerformLexicalParse(ActiproSoftware.SyntaxEditor.Document,ActiproSoftware.SyntaxEditor.TextRange,ActiproSoftware.SyntaxEditor.ILexicalParseTarget)"><summary>
            Lexically parses the specified <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> of the <see cref="T:ActiproSoftware.SyntaxEditor.Document" />.
            </summary><param name="document">The <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> to examine.</param><param name="parseTextRange">A <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> indicating the offset range to parse.</param><param name="parseTarget">The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalParseTarget" /> that receives the parsing output.</param><returns>A <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> containing the offset range that was modified.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.PerformSemanticParse(ActiproSoftware.SyntaxEditor.Document,ActiproSoftware.SyntaxEditor.TextRange,ActiproSoftware.SyntaxEditor.SemanticParseFlags)"><summary>
            Semantically parses the specified <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> of the <see cref="T:ActiproSoftware.SyntaxEditor.Document" />.
            </summary><param name="document">The <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> to examine.</param><param name="parseTextRange">A <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> indicating the offset range to parse.</param><param name="flags">A <see cref="T:ActiproSoftware.SyntaxEditor.SemanticParseFlags" /> that indicates semantic parse flags.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.SetOutliningNodeCollapsedText(ActiproSoftware.SyntaxEditor.OutliningNode)"><summary>
            Sets the <see cref="P:ActiproSoftware.SyntaxEditor.OutliningNode.CollapsedText" /> property for the specified <see cref="T:ActiproSoftware.SyntaxEditor.OutliningNode" />
            prior to the node being collapsed.
            </summary><param name="node">The <see cref="T:ActiproSoftware.SyntaxEditor.OutliningNode" /> that is requesting collapsed text.</param><remarks>
            The default implementation of this method does nothing.  In that case, the node will use default collapsed text.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.ShowIntelliPromptInsertSnippetPopup(ActiproSoftware.SyntaxEditor.SyntaxEditor,System.String,ActiproSoftware.SyntaxEditor.CodeSnippetTypes)"><summary>
            Shows the IntelliPrompt code snippet <c>Insert Snippet</c> popup.
            </summary><param name="syntaxEditor">The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor" /> that will display the popup.</param><param name="labelText">The text of the label on the popup.</param><param name="type">A <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippetTypes" /> indicating the type of code snippets to include.</param><returns><c>true</c> if the popup is displayed; otherwise, <c>false</c>.
            </returns><remarks>
            Only call this method if the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.IntelliPromptCodeSnippetsSupported" /> property is set to <c>true</c>.
            The popup is not displayed if there is nothing that matches the specified <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippetTypes" /> filter.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.ShowIntelliPromptMemberList(ActiproSoftware.SyntaxEditor.SyntaxEditor)"><summary>
            Displays an IntelliPrompt member list in a <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor" /> based on the current context.
            </summary><param name="syntaxEditor">The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor" /> that will display the IntelliPrompt member list.</param><returns><c>true</c> if an IntelliPrompt member list is displayed; otherwise, <c>false</c>.
            </returns><remarks>
            Only call this method if the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.IntelliPromptMemberListSupported" /> property is set to <c>true</c>.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.ShowIntelliPromptParameterInfo(ActiproSoftware.SyntaxEditor.SyntaxEditor)"><summary>
            Displays IntelliPrompt parameter info in a <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor" /> based on the current context.
            </summary><param name="syntaxEditor">The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor" /> that will display the IntelliPrompt parameter info.</param><returns><c>true</c> if IntelliPrompt parameter info is displayed; otherwise, <c>false</c>.
            </returns><remarks>
            Only call this method if the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.IntelliPromptParameterInfoSupported" /> property is set to <c>true</c>.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.ShowIntelliPromptQuickInfo(ActiproSoftware.SyntaxEditor.SyntaxEditor)"><summary>
            Displays IntelliPrompt quick info in a <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor" /> based on the current context.
            </summary><param name="syntaxEditor">The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor" /> that will display the IntelliPrompt quick info.</param><returns><c>true</c> if IntelliPrompt quick info is displayed; otherwise, <c>false</c>.
            </returns><remarks>
            Only call this method if the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.IntelliPromptQuickInfoSupported" /> property is set to <c>true</c>.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.#ctor(System.String)"><summary>
            Initializes a new instance of the <c>SyntaxLanguage</c> class. 
            </summary><param name="key">The key of the language.</param></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.AutomaticOutliningBehavior"><summary>
            Gets or sets when automatic outlining should be performed.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.AutomaticOutliningBehavior" /> indicating when automatic outlining should be performed.</value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.AutoReplace"><summary>
            Gets an object that provides auto-replace functionality.
            </summary><value>
            An <see cref="T:ActiproSoftware.SyntaxEditor.AutoReplaceEntryCollection" /> that provides auto-replace functionality.
            </value><remarks>
            Language-specific auto-replace entries are checked before global editor auto-replace entries.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.BackColor"><summary>
            Gets or sets the background color of all tokens in the language.
            </summary><value>A <c>Color</c> indicating the background color of all tokens in the language.</value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.ChildLanguages"><summary>
            Gets the collection of child languages directly referenced by this language.
            </summary><value>
            A <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguageCollection" /> containing <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> objects.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.CodeBlockSelectionSupported"><summary>
            Gets whether code block selection features are supported by the language.
            </summary><value><c>true</c> if code block selection features are supported by the language; otherwise, <c>false</c>.
            </value><remarks>
            If this property is <c>true</c>, then the <see cref="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.CodeBlockSelectionExpand(ActiproSoftware.SyntaxEditor.SyntaxEditor)" /> and <see cref="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.CodeBlockSelectionContract(ActiproSoftware.SyntaxEditor.SyntaxEditor)" /> methods may be used.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.DefaultLexicalState"><summary>
            Gets or sets the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that is entered when the language is entered.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that is entered when the language is entered.</value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.ErrorDisplayEnabled"><summary>
            Gets or sets whether automatic error display is enabled.
            </summary><value><c>true</c> if automatic error display is enabled; otherwise, <c>false</c>.
            </value><remarks>
            When enabled, if a <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> that uses this language has a <see cref="P:ActiproSoftware.SyntaxEditor.Document.SemanticParseData" />
            property containing an <see cref="T:ActiproSoftware.SyntaxEditor.ICompilationUnit" />, error indicators from that <see cref="T:ActiproSoftware.SyntaxEditor.ICompilationUnit" /> will be automatically added.
            This only occurs if the <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> is being edited within a <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor" /> control.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.ExampleText"><summary>
            Gets or sets the example text for the language.
            </summary><value>The example text for the language.</value><remarks>
            Example text may be used when designing languages to test whether the language design is correct.
            It generally shows all combinations of text lexemes that needs to be tokenized.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.FormattingSupported"><summary>
            Gets whether code formatting features are supported by the language.
            </summary><value><c>true</c> if code formatting features are supported by the language; otherwise, <c>false</c>.
            </value><remarks>
            If this property is <c>true</c>, then the <see cref="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.FormatDocument(ActiproSoftware.SyntaxEditor.Document)" />, <see cref="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.FormatSelection(ActiproSoftware.SyntaxEditor.SyntaxEditor)" />, and <see cref="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.FormatTextRange(ActiproSoftware.SyntaxEditor.Document,ActiproSoftware.SyntaxEditor.TextRange)" /> methods may be used.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.HighlightingStyles"><summary>
            Gets the collection of highlighting styles.
            </summary><value>
            A <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyleCollection" /> containing <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyle" /> objects.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.IntelliPromptCodeSnippetsSupported"><summary>
            Gets whether IntelliPrompt code snippet features are supported by the language.
            </summary><value><c>true</c> if IntelliPrompt code snippet features are supported by the language; otherwise, <c>false</c>.
            </value><remarks>
            If this property is <c>true</c>, then the <see cref="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.ShowIntelliPromptInsertSnippetPopup(ActiproSoftware.SyntaxEditor.SyntaxEditor,System.String,ActiproSoftware.SyntaxEditor.CodeSnippetTypes)" /> method may be used.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.IntelliPromptMemberListSupported"><summary>
            Gets whether IntelliPrompt member list features are supported by the language.
            </summary><value><c>true</c> if IntelliPrompt member list features are supported by the language; otherwise, <c>false</c>.
            </value><remarks>
            If this property is <c>true</c>, then the <see cref="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.IntelliPromptCompleteWord(ActiproSoftware.SyntaxEditor.SyntaxEditor)" /> and <see cref="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.ShowIntelliPromptMemberList(ActiproSoftware.SyntaxEditor.SyntaxEditor)" /> methods may be used.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.IntelliPromptParameterInfoSupported"><summary>
            Gets whether IntelliPrompt parameter info features are supported by the language.
            </summary><value><c>true</c> if IntelliPrompt parameter info features are supported by the language; otherwise, <c>false</c>.
            </value><remarks>
            If this property is <c>true</c>, then the <see cref="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.ShowIntelliPromptParameterInfo(ActiproSoftware.SyntaxEditor.SyntaxEditor)" /> method may be used.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.IntelliPromptQuickInfoSupported"><summary>
            Gets whether IntelliPrompt quick info features are supported by the language.
            </summary><value><c>true</c> if IntelliPrompt quick info features are supported by the language; otherwise, <c>false</c>.
            </value><remarks>
            If this property is <c>true</c>, then the <see cref="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.ShowIntelliPromptQuickInfo(ActiproSoftware.SyntaxEditor.SyntaxEditor)" /> method may be used.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.IsUpdating"><summary>
            Gets or sets whether the language is updating.
            </summary><value><c>true</c> if the language is updating; otherwise, <c>false</c>.
            </value><remarks>
            This flag should be set before run-time changes are made to the language and cleared immediately once the changes are complete.
            Any <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> objects that are using the language will be automatically updated when the update is complete.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.Key"><summary>
            Gets a string-based key that identifies the language.
            </summary><value>A string-based key that identifies the language.</value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.LexicalStates"><summary>
            Gets the collection of lexical states.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.LexicalStateCollection" /> containing the lexical states.</value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.LineCommentDelimiter"><summary>
            Gets or sets the delimiter to use when commenting and uncommenting lines.
            </summary><value>The delimiter to use when commenting and uncommenting lines.</value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.PlainText"><summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> that implements a default plain text parser.
            </summary><value>
            A <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> that implements a default plain text parser.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.Properties"><summary>
            Gets the collection of string-based properties for the language.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguagePropertyCollection" /> containing the properties.</value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.Site"><summary>
            Gets or sets the <see cref="T:System.ComponentModel.ISite" /> of the <see cref="T:System.ComponentModel.Component" />.
            </summary><value>The <see cref="T:System.ComponentModel.ISite" /> of the <see cref="T:System.ComponentModel.Component" />.</value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.SmartIndentSupported"><summary>
            Gets whether smart indent features are supported by the language.
            </summary><value><c>true</c> if smart indent features are supported by the language; otherwise, <c>false</c>.
            </value><remarks>
            If this property is <c>true</c>, then the language has implemented smart indent handler code in <see cref="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.OnSyntaxEditorSmartIndent(ActiproSoftware.SyntaxEditor.SyntaxEditor,ActiproSoftware.SyntaxEditor.SmartIndentEventArgs)" />.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.Tag"><summary>
            Gets or sets the object that contains user-defined data about the object.
            </summary><value>
            An <see cref="T:System.Object" /> that contains user-defined data about the control. The default is <see langword="null" />.
            </value><remarks>
            Any type derived from the <see cref="T:System.Object" /> class can be assigned to this property. 
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.TextStatistics"><summary>
            Gets a <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.TextStatistics" /> for the language that can be used to provide numerous statistics about text
            such as word, sentence, character counts as well as readability scores and possibly language-specific statistics.
            </summary><value>The <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.TextStatistics" /> for the language.</value><remarks>
            To customize the statistics, override this method to return a <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.TextStatistics" /> object with customized code for the language.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.Triggers"><summary>
            Gets the collection of <see cref="T:ActiproSoftware.SyntaxEditor.Trigger" /> objects defined for the language.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.TriggerCollection" /> specifying the <see cref="T:ActiproSoftware.SyntaxEditor.Trigger" /> objects for the language.</value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.UserInterfaceUpdateDelay"><summary>
            Gets or sets the delay (in milliseconds) after a document's text is changed before the <see cref="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.OnSyntaxEditorUserInterfaceUpdate(ActiproSoftware.SyntaxEditor.SyntaxEditor,System.EventArgs)" /> method is fired.
            </summary><value>The delay (in milliseconds) after a document's text is changed before the <see cref="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.OnSyntaxEditorUserInterfaceUpdate(ActiproSoftware.SyntaxEditor.SyntaxEditor,System.EventArgs)" /> method is fired.</value><remarks>
            Use this setting to control how many lines forward to lexically parse after a modification is made.
            It must be set to at least <c>0</c>.  For most languages this value does not need to change.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.WordBreakFinder"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.IWordBreakFinder" /> that is capable of locating word breaks for the language.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.IWordBreakFinder" /> that is capable of locating word breaks for the language.</value></member><member name="E:ActiproSoftware.SyntaxEditor.SyntaxLanguage.Changed"><summary>
            Occurs after the <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> has been changed.
            </summary><eventdata>
            The event handler receives an argument of type <c>SyntaxLanguageEventArgs</c> containing data related to this event.
            </eventdata></member><member name="T:ActiproSoftware.SyntaxEditor.MergableSyntaxLanguage"><summary>
            Represents an abstract base language definition that provides features for a mergable language.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.MergableSyntaxLanguage.CreateToken(System.Int32,System.Int32,ActiproSoftware.SyntaxEditor.LexicalParseFlags,ActiproSoftware.SyntaxEditor.IToken,ActiproSoftware.SyntaxEditor.ITokenLexicalParseData)"><summary>
            Creates an <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that represents the range of text with the specified lexical parse data.
            </summary><param name="startOffset">The start offset of the token.</param><param name="length">The length of the token.</param><param name="lexicalParseFlags">The <see cref="T:ActiproSoftware.SyntaxEditor.LexicalParseFlags" /> for the token.</param><param name="parentToken">The <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that starts the current state scope specified by the <see cref="P:ActiproSoftware.SyntaxEditor.IToken.LexicalState" /> property.</param><param name="lexicalParseData">The <see cref="T:ActiproSoftware.SyntaxEditor.ITokenLexicalParseData" /> that contains lexical parse information about the token.</param><returns></returns></member><member name="M:ActiproSoftware.SyntaxEditor.MergableSyntaxLanguage.OnChanged(ActiproSoftware.SyntaxEditor.SyntaxLanguageEventArgs)"><summary>
            Raises the <c>Changed</c> event.
            </summary><param name="e">A <c>SyntaxLanguageEventArgs</c> that contains the event data.</param><remarks>
            The <c>OnChanged</c> method also allows derived classes to handle the event without attaching a delegate. 
            This is the preferred technique for handling the event in a derived class.
            <para>
            When overriding <c>OnChanged</c> in a derived class, be sure to call the base class's 
            <c>OnChanged</c> method so that registered delegates receive the event.
            </para></remarks></member><member name="M:ActiproSoftware.SyntaxEditor.MergableSyntaxLanguage.PerformLexicalParse(ActiproSoftware.SyntaxEditor.Document,ActiproSoftware.SyntaxEditor.TextRange,ActiproSoftware.SyntaxEditor.ILexicalParseTarget)"><summary>
            Lexically parses the specified <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> of the <see cref="T:ActiproSoftware.SyntaxEditor.Document" />.
            </summary><param name="document">The <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> to examine.</param><param name="parseTextRange">A <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> indicating the offset range to parse.</param><param name="parseTarget">The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalParseTarget" /> that receives the parsing output.</param><returns>A <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> containing the offset range that was modified.</returns><remarks>
            Do not override this method.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.MergableSyntaxLanguage.PerformSemanticParse(ActiproSoftware.SyntaxEditor.MergableLexicalParserManager)"><summary>
            Semantically parses the text in the <see cref="T:ActiproSoftware.SyntaxEditor.MergableLexicalParserManager" />.
            </summary><param name="manager">The <see cref="T:ActiproSoftware.SyntaxEditor.MergableLexicalParserManager" /> that is managing the mergable language and the text to parse.</param><returns>An object that contains the results of the semantic parsing operation.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.MergableSyntaxLanguage.#ctor(System.String)"><summary>
            Initializes a new instance of the <c>MergableSyntaxLanguage</c> class.
            </summary><param name="key">The key of the language.</param></member><member name="P:ActiproSoftware.SyntaxEditor.MergableSyntaxLanguage.LexicalParserLineLookAhead"><summary>
            Gets or sets the number of lines to lexical parse through when a modification is made.
            </summary><value>The number of lines to lexical parse through when a modification is made.</value><remarks>
            Use this setting to control how many lines forward to lexically parse after a modification is made.
            It must be set to at least <c>0</c>.  For most languages this value does not need to change.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.MergableSyntaxLanguage.LexicalParserLineLookBehind"><summary>
            Gets or sets the number of lines back to start lexical parsing from when a modification is made.
            </summary><value>The number of lines back to start lexical parsing from when a modification is made.</value><remarks>
            Use this setting to control how many lines back to lexically parse after a modification is made.
            It must be set to at least <c>1</c>.  For most languages this value does not need to change.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.MergableSyntaxLanguage.MergableLexicalParser"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.IMergableLexicalParser" /> that can be used for lexical parsing of the language.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.IMergableLexicalParser" /> that can be used for lexical parsing of the language.</value></member><member name="P:ActiproSoftware.SyntaxEditor.MergableSyntaxLanguage.WordBreakFinder"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.IWordBreakFinder" /> that is capable of locating word breaks for the language.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.IWordBreakFinder" /> that is capable of locating word breaks for the language.</value></member><member name="T:ActiproSoftware.SyntaxEditor.IMergableLexicalParser"><summary>
            Provides the base requirements for a lexical parser for a language that supports merging with other languages.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.IMergableLexicalParser.GetLexicalStateDefaultTokenLexicalParseData(ActiproSoftware.SyntaxEditor.ITextBufferReader,ActiproSoftware.SyntaxEditor.ILexicalState)"><summary>
            Returns a single-character <see cref="T:ActiproSoftware.SyntaxEditor.ITokenLexicalParseData" /> representing the lexical parse data for the
            default token in the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> and seeks forward one position in the <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader" /></summary><param name="reader">An <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader" /> that is reading a text source.</param><param name="lexicalState">The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that specifies the current context.</param><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.ITokenLexicalParseData" /> for default text in the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" />.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.IMergableLexicalParser.GetNextTokenLexicalParseData(ActiproSoftware.SyntaxEditor.ITextBufferReader,ActiproSoftware.SyntaxEditor.ILexicalState,ActiproSoftware.SyntaxEditor.ITokenLexicalParseData@)"><summary>
            Performs a lexical parse to return the next <see cref="T:ActiproSoftware.SyntaxEditor.ITokenLexicalParseData" /> 
            from a <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader" /> and seeks past it if there is a match.
            </summary><param name="reader">An <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader" /> that is reading a text source.</param><param name="lexicalState">The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that specifies the current context.</param><param name="lexicalParseData">Returns the next <see cref="T:ActiproSoftware.SyntaxEditor.ITokenLexicalParseData" /> from a <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader" />.</param><returns>A <see cref="T:ActiproSoftware.SyntaxEditor.MatchType" /> indicating the type of match that was made.</returns></member><member name="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicSyntaxLanguage"><summary>
            Represents a syntax highlighting language that is defined using an XML lexical grammar or created programmatically.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicSyntaxLanguage.CreateDocumentEndToken(System.Int32,ActiproSoftware.SyntaxEditor.ILexicalState)"><summary>
            Creates an <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that represents the end of a document.
            </summary><param name="startOffset">The start offset of the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.</param><param name="lexicalState">The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that contains the token.</param><returns>An <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that represents the end of a document.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicSyntaxLanguage.CreateInvalidToken(System.Int32,System.Int32,ActiproSoftware.SyntaxEditor.ILexicalState)"><summary>
            Creates an <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that represents an invalid range of text.
            </summary><param name="startOffset">The start offset of the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.</param><param name="length">The length of the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.</param><param name="lexicalState">The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that contains the token.</param><returns>An <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that represents an invalid range of text.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicSyntaxLanguage.CreateToken(System.Int32,System.Int32,ActiproSoftware.SyntaxEditor.LexicalParseFlags,ActiproSoftware.SyntaxEditor.IToken,ActiproSoftware.SyntaxEditor.ITokenLexicalParseData)"><summary>
            Creates an <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that represents the range of text with the specified lexical parse data.
            </summary><param name="startOffset">The start offset of the token.</param><param name="length">The length of the token.</param><param name="lexicalParseFlags">The <see cref="T:ActiproSoftware.SyntaxEditor.LexicalParseFlags" /> for the token.</param><param name="parentToken">The <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that starts the current state scope specified by the <see cref="P:ActiproSoftware.SyntaxEditor.IToken.LexicalState" /> property.</param><param name="lexicalParseData">The <see cref="T:ActiproSoftware.SyntaxEditor.ITokenLexicalParseData" /> that contains lexical parse information about the token.</param><returns></returns></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicSyntaxLanguage.GetHighlightingStyle(ActiproSoftware.SyntaxEditor.IToken)"><summary>
            Returns the <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyle" /> for the specified <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.
            </summary><param name="token">The <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> to examine.</param><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyle" /> for the specified <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicSyntaxLanguage.LoadFromXml(System.String,System.Int32)"><summary>
            Loads a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicSyntaxLanguage" /> from a language definition XML file.
            </summary><param name="path">The full path to the language definition file to load.</param><param name="encryptionKey">
            The encryption key to use for descrambling the data.
            An encryption key of <c>0</c> means not to decrypt the data.
            </param><returns>A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicSyntaxLanguage" /> representing the language that was loaded.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicSyntaxLanguage.LoadFromXml(System.IO.Stream,System.Int32)"><summary>
            Deserializes a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicSyntaxLanguage" /> from a language definition XML stream.
            </summary><param name="stream">A <see cref="T:System.IO.Stream" /> containing the data to deserialize.</param><param name="encryptionKey">
            The encryption key to use for descrambling the data.
            An encryption key of <c>0</c> means not to decrypt the data.
            </param><returns>A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicSyntaxLanguage" /> representing the language that was loaded.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicSyntaxLanguage.OnChanged(ActiproSoftware.SyntaxEditor.SyntaxLanguageEventArgs)"><summary>
            Raises the <c>Changed</c> event.
            </summary><param name="e">A <c>SyntaxLanguageEventArgs</c> that contains the event data.</param><remarks>
            The <c>OnChanged</c> method also allows derived classes to handle the event without attaching a delegate. 
            This is the preferred technique for handling the event in a derived class.
            <para>
            When overriding <c>OnChanged</c> in a derived class, be sure to call the base class's 
            <c>OnChanged</c> method so that registered delegates receive the event.
            </para></remarks></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicSyntaxLanguage.SaveToXml(System.String,System.Int32)"><summary>
            Saves the <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> to a language definition XML file.
            </summary><param name="path">The full path to the language definition file to save.</param><param name="encryptionKey">
            The encryption key to use for scrambling the data.
            An encryption key of <c>0</c> means not to encrypt the data, but can only be used if
            the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicSyntaxLanguage.Secure" /> property is set to <see langword="false" />.
            </param></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicSyntaxLanguage.SaveToXml(System.IO.Stream,System.Int32)"><summary>
            Serializes the <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> to a language definition XML stream.
            </summary><param name="stream">The <see cref="T:System.IO.Stream" /> into which the language should be serialized.</param><param name="encryptionKey">
            The encryption key to use for scrambling the data.
            An encryption key of <c>0</c> means not to encrypt the data, but can only be used if
            the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicSyntaxLanguage.Secure" /> property is set to <see langword="false" />.
            </param></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicSyntaxLanguage.#ctor"><summary>
            This constructor is for designer use only and should never be called by your code.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicSyntaxLanguage.#ctor(System.ComponentModel.IContainer)"><summary>
            This constructor is for designer use only and should never be called by your code.
            </summary><param name="container">An <see cref="T:System.ComponentModel.IContainer"></see> that represents the container for the component.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicSyntaxLanguage.#ctor(System.String,System.Boolean)"><summary>
            Initializes a new instance of the <c>DynamicSyntaxLanguage</c> class. 
            </summary><param name="key">The key of the language.</param><param name="secure">Whether the language is secure.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicSyntaxLanguage.#ctor(System.Reflection.Assembly,System.String,System.Int32)"><summary>
            Initializes a new instance of the <c>DynamicSyntaxLanguage</c> class. 
            </summary><param name="assembly">The <see cref="T:System.Reflection.Assembly" /> that contains the manifest resource.</param><param name="manifestResourceName">The full name of the manifest resource XML language definition to load into the language.</param><param name="encryptionKey">
            The encryption key to use for descrambling the data.
            An encryption key of <c>0</c> means not to decrypt the data.
            </param></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicSyntaxLanguage.DefinitionXml"><summary>
            This property is for designer use only and should never be called by your code.
            </summary><value>The language definition XML represented by this language.</value></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicSyntaxLanguage.LexicalMacros"><summary>
            Gets the collection of lexical macros.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalMacroCollection" /> containing the lexical macros.</value></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicSyntaxLanguage.LexicalStateIDType"><summary>
            Gets or sets the <see cref="T:System.Type" /> to use when writing out lexical state <c>ID</c> attribute values to an XML language definition.
            </summary><value>The <see cref="T:System.Type" /> to use when writing out lexical state <c>ID</c> attribute values to an XML language definition.</value><remarks>
            If simple numeric values are desired for lexical state <c>ID</c> output, leave this property set to <see langword="null" />.
            Otherwise, a constant or enumeration member in the <see cref="T:System.Type" /> will be looked for that matches the key of
            each token and has the lexical state <c>ID</c> value and that will be written out instead of the actual lexical state <c>ID</c> value.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicSyntaxLanguage.MergableLexicalParser"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.IMergableLexicalParser" /> that can be used for lexical parsing of the language.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.IMergableLexicalParser" /> that can be used for lexical parsing of the language.</value></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicSyntaxLanguage.Secure"><summary>
            Gets whether the language is secure or can be saved in unencrypted XML format.
            </summary><value><c>true</c> if the language can be saved in unencrypted XML format; otherwise, <c>false</c>.
            </value><remarks>
            This property may only be set in the XML language definition.
            If set to <c>false</c>, the language and all its child languages may be saved in unencrypted XML format by
            calling the <see cref="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicSyntaxLanguage.SaveToXml(System.String,System.Int32)" /> method with an encryption key of <c>0</c>.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicSyntaxLanguage.TokenIDType"><summary>
            Gets or sets the <see cref="T:System.Type" /> to use when writing out <c>TokenID</c> attribute values to an XML language definition.
            </summary><value>The <see cref="T:System.Type" /> to use when writing out <c>TokenID</c> attribute values to an XML language definition.</value><remarks>
            If simple numeric values are desired for <c>TokenID</c> output, leave this property set to <see langword="null" />.
            Otherwise, a constant or enumeration member in the <see cref="T:System.Type" /> will be looked for that matches the key of
            each token and has the <c>TokenID</c> value and that will be written out instead of the actual <c>TokenID</c> value.
            </remarks></member><member name="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicOutliningSyntaxLanguage"><summary>
            Represents a syntax highlighting language that is defined using an XML lexical grammar or created programmatically, 
            and has some helper methods for performing automatic outlining.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicOutliningSyntaxLanguage.GetTokenOutliningAction(ActiproSoftware.SyntaxEditor.TokenStream,System.String@,ActiproSoftware.SyntaxEditor.OutliningNodeAction@)"><summary>
            Returns token parsing information for automatic outlining that determines if the current <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />
            in the <see cref="T:ActiproSoftware.SyntaxEditor.TokenStream" /> starts or ends an outlining node.
            </summary><param name="tokenStream">A <see cref="T:ActiproSoftware.SyntaxEditor.TokenStream" /> that is positioned at the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> requiring outlining data.</param><param name="outliningKey">Returns the outlining node key to assign.  A <see langword="null" /> should be returned if the token doesn't start or end a node.</param><param name="tokenAction">Returns the <see cref="T:ActiproSoftware.SyntaxEditor.OutliningNodeAction" /> to take for the token.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicOutliningSyntaxLanguage.PerformAutomaticOutlining(ActiproSoftware.SyntaxEditor.Document,ActiproSoftware.SyntaxEditor.TextRange)"><summary>
            Performs automatic outlining over the specified <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> of the <see cref="T:ActiproSoftware.SyntaxEditor.Document" />.
            </summary><param name="document">The <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> to examine.</param><param name="parseTextRange">A <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> indicating the offset range to parse.</param><returns>A <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> containing the offset range that was modified by outlining.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicOutliningSyntaxLanguage.#ctor"><summary>
            This constructor is for designer use only and should never be called by your code.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicOutliningSyntaxLanguage.#ctor(System.String,System.Boolean)"><summary>
            Initializes a new instance of the <c>DynamicOutliningSyntaxLanguage</c> class. 
            </summary><param name="key">The key of the language.</param><param name="secure">Whether the language is secure.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicOutliningSyntaxLanguage.#ctor(System.Reflection.Assembly,System.String,System.Int32)"><summary>
            Initializes a new instance of the <c>DynamicOutliningSyntaxLanguage</c> class. 
            </summary><param name="assembly">The <see cref="T:System.Reflection.Assembly" /> that contains the manifest resource.</param><param name="manifestResourceName">The full name of the manifest resource XML language definition to load into the language.</param><param name="encryptionKey">
            The encryption key to use for descrambling the data.
            An encryption key of <c>0</c> means not to decrypt the data.
            </param></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicOutliningSyntaxLanguage.AutoOutlineLanguageTransitions"><summary>
            Gets whether to automatically outline language transitions.
            </summary><value><c>true</c> if language transitions should be automatically outlined; otherwise, <c>false</c>.
            The default value is <c>true</c>.
            </value><remarks>Override this property and return <c>false</c> if you wish to change the default behavior.</remarks></member><member name="T:ActiproSoftware.SyntaxEditor.ITokenLexicalParseData"><summary>
            Provides the base requirements for an object that provides lexical parse data for a <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> for a mergable language.
            </summary></member><member name="P:ActiproSoftware.SyntaxEditor.ITokenLexicalParseData.HighlightingStyle"><summary>
            Gets the <see cref="P:ActiproSoftware.SyntaxEditor.ITokenLexicalParseData.HighlightingStyle" /> to use for drawing the token, if the token is aware of it.
            </summary><value>The <see cref="P:ActiproSoftware.SyntaxEditor.ITokenLexicalParseData.HighlightingStyle" /> to use for drawing the token, if the token is aware of it.</value><remarks>
            In some languages, the token may not be aware of what highlighting style is used to draw it.
            In those cases, only the language itself knows what highlighting style to use for the token.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.ITokenLexicalParseData.IsContentDivider"><summary>
            Gets whether the token is a content divider.
            </summary><value><c>true</c> if the token is a content divider; otherwise <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.ITokenLexicalParseData.IsWhitespace"><summary>
            Gets whether the token represents whitespace.
            </summary><value><c>true</c> if the token represents whitespace; otherwise <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.ITokenLexicalParseData.LexicalScope"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalScope" />, if any, that defines the token.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalScope" />, if any, that defines the token.</value><remarks>
            If this value is <see langword="null" />, the token was not defined by a lexical scope.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.ITokenLexicalParseData.LexicalState"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that contains the token.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that contains the token.</value></member><member name="P:ActiproSoftware.SyntaxEditor.ITokenLexicalParseData.Language"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> that contains the token.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> that contains the token.</value></member><member name="P:ActiproSoftware.SyntaxEditor.ITokenLexicalParseData.TokenID"><summary>
            Gets the token ID assigned to the token.
            </summary><value>The token ID assigned to the token.</value></member><member name="P:ActiproSoftware.SyntaxEditor.ITokenLexicalParseData.TokenKey"><summary>
            Gets the token key assigned to the token, if it is known.
            </summary><value>The token key assigned to the token, if it is known.</value></member><member name="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.ILexicalPatternTokenLexicalParseData"><summary>
            Provides the base requirements for an object that provides lexical parse data from a <see cref="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.ILexicalPatternTokenLexicalParseData.LexicalPattern" />
            for a <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> for a mergable language.
            </summary></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.ILexicalPatternTokenLexicalParseData.LexicalPattern"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPattern" /> that defined the token.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPattern" /> that defined the token.</value></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.ILexicalPatternTokenLexicalParseData.LexicalPatternGroup"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup" /> that defined the token.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup" /> that defined the token.</value></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.EditCommand"><summary>
            Defines the base requirements for an edit command.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.EditCommand.CanExecute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Returns whether the command can execute.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param><returns><c>true</c> if the command can execute; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.EditCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.EditCommand.ReadFromXml(System.Xml.XmlReader)"><summary>
            Deserializes the data for the <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommand" /> from XML.
            </summary><param name="reader">The <see cref="T:System.Xml.XmlReader" /> to use.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.EditCommand.WriteToXml(System.Xml.XmlWriter)"><summary>
            Serializes the data for the <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommand" /> to XML.
            </summary><param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to use.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.EditCommand.#ctor"><summary>
            Initializes a new instance of the <c>EditCommand</c> class. 
            </summary><remarks>
            The default constructor initializes all fields to their default values.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.Commands.EditCommand.CanRecordInMacro"><summary>
            Gets whether the command can be recorded in a macro.
            </summary><value><c>true</c> if the command can be recorded in a macro; otherwise, <c>false</c>.
            </value></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.ScrollDownCommand"><summary>
            Scrolls down a line.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.ScrollDownCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.ScrollLeftCommand"><summary>
            Scrolls left a column.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.ScrollLeftCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.ScrollLineToVisibleBottomCommand"><summary>
            Scrolls the current display line to the bottom of the view.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.ScrollLineToVisibleBottomCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.ScrollLineToVisibleMiddleCommand"><summary>
            Scrolls the current display line to the middle of the view.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.ScrollLineToVisibleMiddleCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.ScrollLineToVisibleTopCommand"><summary>
            Scrolls the current display line to the top of the view.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.ScrollLineToVisibleTopCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.ScrollPageDownCommand"><summary>
            Scrolls down a page.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.ScrollPageDownCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.ScrollPageUpCommand"><summary>
            Scrolls up a page.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.ScrollPageUpCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.ScrollRightCommand"><summary>
            Scrolls right a column.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.ScrollRightCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.ScrollToDocumentEndCommand"><summary>
            Scrolls to the end of the document.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.ScrollToDocumentEndCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.ScrollToDocumentStartCommand"><summary>
            Scrolls to the start of the document.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.ScrollToDocumentStartCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.ScrollUpCommand"><summary>
            Scrolls up a line.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.ScrollUpCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.IntelliPromptCompleteWordCommand"><summary>
            Performs an auto-complete if the <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> supports an IntelliPrompt member list at the current offset.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.IntelliPromptCompleteWordCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.ShowIntelliPromptParameterInfoCommand"><summary>
            Displays IntelliPrompt parameter info in a <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor" /> based on the current context.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.ShowIntelliPromptParameterInfoCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="T:ActiproSoftware.SyntaxEditor.FontDropDownList"><summary>
            Represents a drop-down list control for selecting a <see cref="T:System.Drawing.Font" />.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.FontDropDownList.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)"><summary>
            Raises the <c>DrawItem</c> event.
            </summary><param name="e">A <c>DrawItemEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.FontDropDownList.#ctor"><summary>
            Initializes a new instance of the <c>FontDropDownList</c> class. 
            </summary><remarks>
            The default constructor initializes all fields to their default values.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.FontDropDownList.DisplayMember"><summary>
            Gets or sets the property to display for this <see cref="T:System.Windows.Forms.ComboBox" />. 
            </summary><value>The property to display for this <see cref="T:System.Windows.Forms.ComboBox" />.</value></member><member name="P:ActiproSoftware.SyntaxEditor.FontDropDownList.DrawMode"><summary>
            Gets or sets a value indicating whether your code or the operating system will handle drawing of elements in the list. 
            </summary><value>A value indicating whether your code or the operating system will handle drawing of elements in the list.</value></member><member name="P:ActiproSoftware.SyntaxEditor.FontDropDownList.DropDownStyle"><summary>
            Gets or sets the style of the combo box.
            </summary><value>The style of the combo box.</value></member><member name="P:ActiproSoftware.SyntaxEditor.FontDropDownList.ExcludeVariableWidthFonts"><summary>
            Gets or sets whether to exclude variable-width fonts from the list.
            </summary><value><c>true</c> if variable-width fonts should be excluded from the list; otherwise, <c>false</c>.
            The default value is <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.FontDropDownList.Items"><summary>
            Gets an object representing the collection of the items contained in this <see cref="T:System.Windows.Forms.ComboBox" />. 
            </summary><value>An object representing the collection of the items contained in this <see cref="T:System.Windows.Forms.ComboBox" />.</value></member><member name="P:ActiproSoftware.SyntaxEditor.FontDropDownList.MaxDropDownItems"><summary>
            Gets or sets the maximum number of items to be shown in the drop-down portion of the combo box.
            </summary><value>The maximum number of items to be shown in the drop-down portion of the combo box.</value></member><member name="P:ActiproSoftware.SyntaxEditor.FontDropDownList.UsePreviewInItemRendering"><summary>
            Gets or sets whether to preview the fonts in the drop-down items.
            </summary><value><c>true</c> if the drop-down items should preview the fonts; otherwise, <c>false</c>.
            The default value is <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.FontDropDownList.ValueMember"><summary>
            Gets or sets the property to use as the actual value for the items in this <see cref="T:System.Windows.Forms.ComboBox" />. 
            </summary><value>The property to use as the actual value for the items in this <see cref="T:System.Windows.Forms.ComboBox" />.</value></member><member name="T:ActiproSoftware.SyntaxEditor.FontDropDownList.FontFamilyData"><summary>
            Represents a class that stores data about a font family.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.FontDropDownList.FontFamilyData.#ctor(System.String,System.Boolean)"><summary>
            Initializes a new instance of the <c>FontFamilyData</c> class. 
            </summary><param name="name">The name of the font family.</param><param name="isFixedWidth">Whether the font family is a fixed-width font.</param></member><member name="P:ActiproSoftware.SyntaxEditor.FontDropDownList.FontFamilyData.IsFixedWidth"><summary>
            Gets whether the font family is a fixed-width font.
            </summary><value><c>true</c> if the font family is a fixed-width font; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.FontDropDownList.FontFamilyData.Name"><summary>
            Gets the name of the font family.
            </summary><value>The name of the font family.</value></member><member name="T:ActiproSoftware.SyntaxEditor.FindReplaceStatusChangeType"><summary>
            Specifies the type of event that occurred for a find/replace status event.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.FindReplaceStatusChangeType.Ready"><summary>
            The find/replace operation has completed, generally by a find/replace form close.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.FindReplaceStatusChangeType.Find"><summary>
            A find operation is in progress.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.FindReplaceStatusChangeType.Replace"><summary>
            A replace operation is in progress.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.FindReplaceStatusChangeType.PastDocumentEnd"><summary>
            The find or replace operation went past the document end.
            </summary></member><member name="T:ActiproSoftware.SyntaxEditor.FindReplaceStatusChangeEventArgs"><summary>
            Provides data for find/replace status change events.
            </summary><remarks>
            This class is used with the <see cref="T:ActiproSoftware.SyntaxEditor.FindReplaceStatusChangeEventHandler" /> delegate.
            </remarks><seealso cref="T:ActiproSoftware.SyntaxEditor.FindReplaceStatusChangeEventHandler" /></member><member name="M:ActiproSoftware.SyntaxEditor.FindReplaceStatusChangeEventArgs.#ctor(ActiproSoftware.SyntaxEditor.FindReplaceStatusChangeType,ActiproSoftware.SyntaxEditor.FindReplaceOptions)"><summary>
            Initializes a new instance of the <c>FindReplaceStatusChangeEventArgs</c> class.
            </summary><param name="changeType">A <see cref="T:ActiproSoftware.SyntaxEditor.FindReplaceStatusChangeType" /> specifying the type of status change that occurred.</param><param name="options">A <see cref="T:ActiproSoftware.SyntaxEditor.FindReplaceOptions" /> that contains the find/replace options in use.</param></member><member name="P:ActiproSoftware.SyntaxEditor.FindReplaceStatusChangeEventArgs.ChangeType"><summary>
            Gets the type of status change that occurred.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.FindReplaceStatusChangeType" /> specifying the type of event that occurred.</value></member><member name="P:ActiproSoftware.SyntaxEditor.FindReplaceStatusChangeEventArgs.Options"><summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.FindReplaceOptions" /> that contains the find/replace options in use.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.FindReplaceOptions" /> that contains the find/replace options in use.</value></member><member name="T:ActiproSoftware.SyntaxEditor.FindReplaceStatusChangeEventHandler"><summary>
            Represents the method that will handle find/replace status change events.
            </summary><param name="sender">Sender of the event.</param><param name="e">A <see cref="T:ActiproSoftware.SyntaxEditor.FindReplaceStatusChangeEventArgs" /> containing event data.</param><remarks>
            When you create a <c>FindReplaceStatusChangeEventHandler</c> delegate, you identify the method that will handle the event. 
            To associate the event with your event handler, add an instance of the delegate to the event. 
            The event handler is called whenever the event occurs, unless you remove the delegate.
            </remarks><seealso cref="T:ActiproSoftware.SyntaxEditor.FindReplaceStatusChangeEventArgs" /></member><member name="T:ActiproSoftware.SyntaxEditor.Indicator"><summary>
            Provides the base class for an indicator.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Indicator.DrawGlyph(System.Windows.Forms.PaintEventArgs,System.Drawing.Rectangle)"><summary>
            Draws the glyph associated with the indicator.
            </summary><param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param><param name="bounds">A <c>Rectangle</c> specifying the bounds in which to draw.</param><remarks>
            This method should be implemented by indicators that have a glyph.
            Ensure that the indicator's <see cref="P:ActiproSoftware.SyntaxEditor.Indicator.HasGlyph" /> property returns <c>true</c> if this method is implemented.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.Indicator.#ctor(System.String)"><summary>
            Initializes a new instance of the <c>Indicator</c> class.
            </summary><param name="name">The name to identify the type of indicator.</param></member><member name="P:ActiproSoftware.SyntaxEditor.Indicator.CanNavigateTo"><summary>
            Gets or sets whether the indicator can be navigated to.
            </summary><value><c>true</c> if the indicator can be navigated to; otherwise, <c>false</c>.
            </value><remarks>
            Some indicators may draw themselves differently if they cannot be navigated to.
            When changing this property on those types of indicators, 
            be sure to invalidate the SyntaxEditor control since it will not be automatically repainted.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.Indicator.DisplayPriority"><summary>
            Gets the priority of display level for the indicator.
            </summary><value>The priority of display level for the indicator.</value><remarks>
            Indicators with the lowest priority numbers are painted first with other indicators 
            painted on top in increasing priority order.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.Indicator.HasFontChange"><summary>
            Gets whether the span indicator contains a font-related change.
            </summary><value><c>true</c> if the span indicator contains a font-related change; otherwise, <c>false</c>.
            </value><remarks>
            This property lets <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor" /> know whether display lines need to be recalculated
            when the span indicator is added.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.Indicator.HasGlyph"><summary>
            Gets whether the indicator has a glyph that appears in the indicator margin.
            </summary><value><c>true</c> if the indicator has a glyph that appears in the indicator margin; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.Indicator.IsBound"><summary>
            Gets whether the indicator is bound to a <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicatorLayer" />.
            </summary><value><c>true</c> if the indicator is bound to a <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicatorLayer" />; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.Indicator.Name"><summary>
            Gets the name of the indicator.
            </summary><value>The name of the indicator.</value><remarks>
            Names identify types of indicators, e.g. Bookmark, Breakpoint, etc.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.Indicator.Tag"><summary>
            Gets or sets the object that contains user-defined data about the object.
            </summary><value>
            An <see cref="T:System.Object" /> that contains user-defined data about the control. The default is <see langword="null" />.
            </value><remarks>
            Any type derived from the <see cref="T:System.Object" /> class can be assigned to this property. 
            </remarks></member><member name="T:ActiproSoftware.SyntaxEditor.ITextRange"><summary>
            Provides the base requirements for an object that has range of two offset values within a text document.
            </summary></member><member name="P:ActiproSoftware.SyntaxEditor.ITextRange.TextRange"><summary>
            Gets or sets a <see cref="P:ActiproSoftware.SyntaxEditor.ITextRange.TextRange" /> that specifies the text range of the object.
            </summary><value>A <see cref="P:ActiproSoftware.SyntaxEditor.ITextRange.TextRange" /> that specifies the text range of the object.</value></member><member name="T:ActiproSoftware.SyntaxEditor.SpanIndicator"><summary>
            Represents a span indicator which has an optional glyph in the indicator margin and supports text area formatting and additional marks.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.SpanIndicator.ApplyHighlightingStyleAdornments(ActiproSoftware.SyntaxEditor.HighlightingStyleResolver)"><summary>
            Applies the adornments of the span indicator to the specified <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyleResolver" />.
            </summary><param name="resolver">The <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyleResolver" /> to modify.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SpanIndicator.ApplyHighlightingStyleColors(ActiproSoftware.SyntaxEditor.HighlightingStyleResolver)"><summary>
            Applies the foreground and background colors of the span indicator to the specified <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyleResolver" />.
            </summary><param name="resolver">The <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyleResolver" /> to modify.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SpanIndicator.ApplyHighlightingStyleFont(ActiproSoftware.SyntaxEditor.HighlightingStyleResolver)"><summary>
            Applies the font changes of the span indicator to the specified <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyleResolver" />.
            </summary><param name="resolver">The <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyleResolver" /> to modify.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SpanIndicator.DrawGlyph(System.Windows.Forms.PaintEventArgs,System.Drawing.Rectangle)"><summary>
            Draws the glyph associated with the indicator.
            </summary><param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param><param name="bounds">A <c>Rectangle</c> specifying the bounds in which to draw.</param><remarks>
            This method should be implemented by indicators that have a glyph.
            Ensure that the indicator's <see cref="P:ActiproSoftware.SyntaxEditor.SpanIndicator.HasGlyph" /> property returns <c>true</c> if this method is implemented.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.SpanIndicator.DrawMarks(System.Windows.Forms.PaintEventArgs,ActiproSoftware.SyntaxEditor.EditorView,System.Drawing.Rectangle,System.Int32,ActiproSoftware.SyntaxEditor.TextRange)"><summary>
            Draws the marks associated with the indicator on a single display line.
            </summary><param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param><param name="view">The <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> that is being drawn.</param><param name="bounds">A <c>Rectangle</c> specifying the bounds in which to draw on the display line.</param><param name="displayLineIndex">The index of the display line being painted.</param><param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.ITextRange" /> over which to draw.</param><remarks>This method should be implemented by indicators that have adornments.</remarks></member><member name="M:ActiproSoftware.SyntaxEditor.SpanIndicator.ToString"><summary>
            Converts the object to a <c>String</c>.
            </summary><returns>
            A string whose value represents this object.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.SpanIndicator.#ctor(System.String)"><summary>
            Initializes a new instance of the <c>SpanIndicator</c> class.
            </summary><param name="name">The name to identify the type of indicator.</param></member><member name="P:ActiproSoftware.SyntaxEditor.SpanIndicator.AllowZeroLength"><summary>
            Gets whether to allow the span indicator to be inserted with a zero length.
            </summary><value><c>true</c> if the span indicator should be allowed to be inserted with a zero length; otherwise, <c>false</c>.
            </value><remarks>
            The default value is the value of the <see cref="P:ActiproSoftware.SyntaxEditor.SpanIndicator.ExpandOnBoundaries" /> property.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.SpanIndicator.DisplayPriority"><summary>
            Gets the priority of display level for the indicator, which comes from the <see cref="P:ActiproSoftware.SyntaxEditor.SpanIndicatorLayer.DisplayPriority" />
            of the layer in which the indicator is bound.
            </summary><value>The priority of display level for the indicator.</value><remarks>
            Indicators with the lowest priority numbers are painted first with other indicators 
            painted on top in increasing priority order.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.SpanIndicator.ExpandOnBoundaries"><summary>
            Gets whether to expand the span indicator when typing is performed on the boundary of the indicator.
            </summary><value><c>true</c> if the span indicator should expand; otherwise, <c>false</c>.
            </value><remarks>
            The default value is <c>false</c>.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.SpanIndicator.HasGlyph"><summary>
            Gets whether the indicator has a glyph that appears in the indicator margin.
            </summary><value><c>true</c> if the indicator has a glyph that appears in the indicator margin; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.SpanIndicator.IsBound"><summary>
            Gets whether the indicator is bound to a <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicatorLayer" />.
            </summary><value><c>true</c> if the indicator is bound to a <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicatorLayer" />; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.SpanIndicator.Layer"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicatorLayer" /> that contains the indicator.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicatorLayer" /> that contains the indicator.</value></member><member name="P:ActiproSoftware.SyntaxEditor.SpanIndicator.TextRange"><summary>
            Gets a <see cref="P:ActiproSoftware.SyntaxEditor.SpanIndicator.TextRange" /> that specifies the text range of the object.
            </summary><value>A <see cref="P:ActiproSoftware.SyntaxEditor.SpanIndicator.TextRange" /> that specifies the text range of the object.</value></member><member name="T:ActiproSoftware.SyntaxEditor.CurrentStatementSpanIndicator"><summary>
            Represents a current statement span indicator.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.CurrentStatementSpanIndicator.ApplyHighlightingStyleColors(ActiproSoftware.SyntaxEditor.HighlightingStyleResolver)"><summary>
            Applies the foreground and background colors of the span indicator to the specified <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyleResolver" />.
            </summary><param name="resolver">The <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyleResolver" /> to modify.</param></member><member name="M:ActiproSoftware.SyntaxEditor.CurrentStatementSpanIndicator.DrawGlyph(System.Windows.Forms.PaintEventArgs,System.Drawing.Rectangle)"><summary>
            Draws the glyph associated with the indicator.
            </summary><param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param><param name="bounds">A <c>Rectangle</c> specifying the bounds in which to draw.</param><remarks>
            This method should be implemented by indicators that have a glyph.
            Ensure that the indicator's <see cref="P:ActiproSoftware.SyntaxEditor.CurrentStatementSpanIndicator.HasGlyph" /> property returns <c>true</c> if this method is implemented.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.CurrentStatementSpanIndicator.#ctor"><summary>
            Initializes a new instance of the <c>CurrentStatementSpanIndicator</c> class.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.CurrentStatementSpanIndicator.#ctor(System.String,System.Drawing.Color,System.Drawing.Color)"><summary>
            Initializes a new instance of the <c>CurrentStatementSpanIndicator</c> class.
            </summary><param name="name">The name to identify the type of indicator.</param><param name="foreColor">The <see cref="T:System.Drawing.Color" /> to use when drawing the foreground of the indicator.</param><param name="backColor">The <see cref="T:System.Drawing.Color" /> to use when drawing the background of the indicator.</param></member><member name="P:ActiproSoftware.SyntaxEditor.CurrentStatementSpanIndicator.BackColor"><summary>
            Gets or sets the <see cref="T:System.Drawing.Color" /> to use when drawing the background of the indicator.
            </summary><value>The <see cref="T:System.Drawing.Color" /> to use when drawing the background of the indicator.</value></member><member name="P:ActiproSoftware.SyntaxEditor.CurrentStatementSpanIndicator.DefaultName"><summary>
            Gets the default name for the indicator.
            </summary><value>The default name for the indicator.</value></member><member name="P:ActiproSoftware.SyntaxEditor.CurrentStatementSpanIndicator.ForeColor"><summary>
            Gets or sets the <see cref="T:System.Drawing.Color" /> to use when drawing the foreground of the indicator.
            </summary><value>The <see cref="T:System.Drawing.Color" /> to use when drawing the foreground of the indicator.</value></member><member name="P:ActiproSoftware.SyntaxEditor.CurrentStatementSpanIndicator.HasFontChange"><summary>
            Gets whether the span indicator contains a font-related change.
            </summary><value><c>true</c> if the span indicator contains a font-related change; otherwise, <c>false</c>.
            </value><remarks>
            This property lets <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor" /> know whether display lines need to be recalculated
            when the span indicator is added.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.CurrentStatementSpanIndicator.HasGlyph"><summary>
            Gets whether the indicator has a glyph that appears in the indicator margin.
            </summary><value><c>true</c> if the indicator has a glyph that appears in the indicator margin; otherwise, <c>false</c>.
            </value></member><member name="T:ActiproSoftware.SyntaxEditor.DisappearingSpanIndicator"><summary>
            Represents a span indicator that disappears after the specified amount of time.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.DisappearingSpanIndicator.ApplyHighlightingStyleColors(ActiproSoftware.SyntaxEditor.HighlightingStyleResolver)"><summary>
            Applies the foreground and background colors of the span indicator to the specified <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyleResolver" />.
            </summary><param name="resolver">The <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyleResolver" /> to modify.</param></member><member name="M:ActiproSoftware.SyntaxEditor.DisappearingSpanIndicator.ApplyHighlightingStyleFont(ActiproSoftware.SyntaxEditor.HighlightingStyleResolver)"><summary>
            Applies the font changes of the span indicator to the specified <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyleResolver" />.
            </summary><param name="resolver">The <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyleResolver" /> to modify.</param></member><member name="M:ActiproSoftware.SyntaxEditor.DisappearingSpanIndicator.#ctor(System.Int32)"><summary>
            Initializes a new instance of the <c>BreakpointSpanIndicator</c> class.
            </summary><param name="milliseconds">The length in time to display the indicator (in milliseconds).</param></member><member name="M:ActiproSoftware.SyntaxEditor.DisappearingSpanIndicator.#ctor(System.String,System.Drawing.Color,System.Drawing.Color,System.Int32)"><summary>
            Initializes a new instance of the <c>BreakpointSpanIndicator</c> class.
            </summary><param name="name">The name to identify the type of indicator.</param><param name="foreColor">The <see cref="T:System.Drawing.Color" /> to use when drawing the foreground of the indicator.</param><param name="backColor">The <see cref="T:System.Drawing.Color" /> to use when drawing the background of the indicator.</param><param name="milliseconds">The length in time to display the indicator (in milliseconds).</param></member><member name="P:ActiproSoftware.SyntaxEditor.DisappearingSpanIndicator.BackColor"><summary>
            Gets or sets the <see cref="T:System.Drawing.Color" /> to use when drawing the background of the indicator.
            </summary><value>The <see cref="T:System.Drawing.Color" /> to use when drawing the background of the indicator.</value></member><member name="P:ActiproSoftware.SyntaxEditor.DisappearingSpanIndicator.DefaultName"><summary>
            Gets the default name for the indicator.
            </summary><value>The default name for the indicator.</value></member><member name="P:ActiproSoftware.SyntaxEditor.DisappearingSpanIndicator.ForeColor"><summary>
            Gets or sets the <see cref="T:System.Drawing.Color" /> to use when drawing the foreground of the indicator.
            </summary><value>The <see cref="T:System.Drawing.Color" /> to use when drawing the foreground of the indicator.</value></member><member name="P:ActiproSoftware.SyntaxEditor.DisappearingSpanIndicator.HasFontChange"><summary>
            Gets whether the span indicator contains a font-related change.
            </summary><value><c>true</c> if the span indicator contains a font-related change; otherwise, <c>false</c>.
            </value><remarks>
            This property lets <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor" /> know whether display lines need to be recalculated
            when the span indicator is added.
            </remarks></member><member name="T:ActiproSoftware.SyntaxEditor.DocumentLineSpanIndicatorCollection"><summary>
            Represents collection of <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicator" /> objects that overlap at least one character on a <see cref="T:ActiproSoftware.SyntaxEditor.DocumentLine" />.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.DocumentLineSpanIndicatorCollection.Clear"><summary>
            Removes all <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicator" /> objects from the collection. 
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.DocumentLineSpanIndicatorCollection.Clear(System.String)"><summary>
            Removes all <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicator" /> objects with the specified <see cref="P:ActiproSoftware.SyntaxEditor.Indicator.Name" /> from the <see cref="T:ActiproSoftware.SyntaxEditor.Document" />. 
            </summary><param name="name">The name of the type of indicators to remove.</param></member><member name="M:ActiproSoftware.SyntaxEditor.DocumentLineSpanIndicatorCollection.Contains(ActiproSoftware.SyntaxEditor.SpanIndicator)"><summary>
            Returns whether the collection contains the specified <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicator" />.
            </summary><param name="indicator">The <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicator" /> to look for.</param><returns><c>true</c> if the collection contains the specified <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicator" />; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.DocumentLineSpanIndicatorCollection.Contains(System.String)"><summary>
            Returns whether the collection contains a <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicator" /> with the specified name.
            </summary><param name="name">The name of the <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicator" /> to look for.</param><returns><c>true</c> if the collection contains a <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicator" /> with the specified name; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.DocumentLineSpanIndicatorCollection.CopyTo(System.Array,System.Int32)"><summary>
            Copies the elements of the collection to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index. 
            </summary><param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from the collection. The <see cref="T:System.Array" /> must have zero-based indexing.</param><param name="index">The zero-based index in array at which copying begins.</param></member><member name="M:ActiproSoftware.SyntaxEditor.DocumentLineSpanIndicatorCollection.GetEnumerator"><summary>
            Retrieves an <c>IEnumerator</c> object for the entire collection.
            </summary><returns>An <c>IEnumerator</c> object for the entire collection</returns><remarks>
            Enumerators are intended to be used only to read data in the collection. 
            Enumerators cannot be used to modify the underlying collection.
            <para>
            The enumerator does not have exclusive access to the collection.
            </para><para>
            When an enumerator is instantiated, it takes a snapshot of the current state of the collection. 
            If changes are made to the collection, such as adding, modifying or deleting elements, the 
            snapshot gets out of sync and the enumerator throws an <c>InvalidOperationException</c>. 
            Two enumerators instantiated from the same collection at the same time can have 
            different snapshots of the collection.
            </para></remarks></member><member name="M:ActiproSoftware.SyntaxEditor.DocumentLineSpanIndicatorCollection.IndexOf(ActiproSoftware.SyntaxEditor.SpanIndicator)"><summary>
            Returns the index of the specified <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicator" /> in the collection.
            </summary><param name="indicator">The <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicator" /> to look for.</param><returns>
            If found, the index where the <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicator" /> is in the collection; otherwise, <c>-1</c>. 
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.DocumentLineSpanIndicatorCollection.IndexOf(System.String)"><summary>
            Finds the index of the <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicator" /> with the specified name within the collection.
            </summary><param name="name">The name of the <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicator" /> to look for.</param><returns>The index of the <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicator" /> with the specified name within the collection.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.DocumentLineSpanIndicatorCollection.Remove(ActiproSoftware.SyntaxEditor.SpanIndicator)"><summary>
            Removes the specified <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicator" /> from the collection. 
            </summary><param name="indicator">The <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicator" /> to remove.</param></member><member name="M:ActiproSoftware.SyntaxEditor.DocumentLineSpanIndicatorCollection.RemoveAt(System.Int32)"><summary>
            Removes the <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicator" /> at the specified index from the collection. 
            </summary><param name="index">The index of the <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicator" /> to remove.</param></member><member name="P:ActiproSoftware.SyntaxEditor.DocumentLineSpanIndicatorCollection.Count"><summary>
            Gets the number of <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicator" /> objects in the collection.
            </summary><value>The number of <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicator" /> objects in the collection.</value></member><member name="P:ActiproSoftware.SyntaxEditor.DocumentLineSpanIndicatorCollection.Item(System.Int32)"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicator" /> at the specified index. 
            <para>
            [C#] In C#, this property is the indexer for the <c>SpanIndicatorCollection</c> class. 
            </para></summary><param name="index">The index of the <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicator" /> to return.</param><value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicator" /> at the specified index. 
            </value></member><member name="T:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListPreFilterEventArgs"><summary>
            Event arguments for member list pre-filtering events.
            </summary><remarks>
            This class is used with the <see cref="T:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListPreFilterEventHandler" /> delegate.
            </remarks><seealso cref="T:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListPreFilterEventHandler" /></member><member name="M:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListPreFilterEventArgs.#ctor(ActiproSoftware.SyntaxEditor.SyntaxEditor,System.Object,System.Collections.Hashtable)"><summary>
            Initializes a new instance of the <c>IntelliPromptMemberListPreFilterEventArgs</c> class.
            </summary><param name="syntaxEditor">The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor" /> that will display the member list.</param><param name="context">The context for which the member list is being displayed.</param><param name="items">The <see cref="T:System.Collections.Hashtable" /> of <see cref="T:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListItem" /> objects that is keyed on each item's name.</param></member><member name="P:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListPreFilterEventArgs.Context"><summary>
            Gets the context for which the member list is being displayed.
            </summary><value>The context for which the member list is being displayed.</value></member><member name="P:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListPreFilterEventArgs.Items"><summary>
            Gets the <see cref="T:System.Collections.Hashtable" /> of <see cref="T:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListItem" /> objects that is keyed on each item's name.
            </summary><value>The <see cref="T:System.Collections.Hashtable" /> of <see cref="T:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListItem" /> objects that is keyed on each item's name.</value></member><member name="P:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListPreFilterEventArgs.SyntaxEditor"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor" /> that will display the member list.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor" /> that will display the member list.</value></member><member name="T:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListPreFilterEventHandler"><summary>
            Represents the method that will handle member list pre-filtering events.
            </summary><param name="sender">Sender of the event.</param><param name="e">A <see cref="T:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListPreFilterEventArgs" /> containing event data.</param><remarks>
            When you create a <c>IntelliPromptMemberListPreFilterEventHandler</c> delegate, you identify the method that will handle the event. 
            To associate the event with your event handler, add an instance of the delegate to the event. 
            The event handler is called whenever the event occurs, unless you remove the delegate.
            </remarks><seealso cref="T:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListPreFilterEventArgs" /></member><member name="T:ActiproSoftware.SyntaxEditor.IntelliPromptTipLinkClickEventHandler"><summary>
            Represents the method that will handle events for hyperlink clicks on an IntelliPrompt popup tooltip.
            </summary><param name="sender">Sender of the event.</param><param name="e">An <see cref="T:ActiproSoftware.SyntaxEditor.IntelliPromptTipLinkClickEventArgs" /> containing event data.</param><remarks>
            When you create an <c>IntelliPromptTipLinkClickEventHandler</c> delegate, you identify the method that will handle the event. 
            To associate the event with your event handler, add an instance of the delegate to the event. 
            The event handler is called whenever the event occurs, unless you remove the delegate.
            </remarks><seealso cref="T:ActiproSoftware.SyntaxEditor.IntelliPromptTipLinkClickEventArgs" /></member><member name="T:ActiproSoftware.SyntaxEditor.IntelliPromptTipLinkClickEventArgs"><summary>
            Provides data for events that handle hyperlink clicks on an IntelliPrompt popup tooltip.
            </summary><remarks>
            This class is used with the <see cref="T:ActiproSoftware.SyntaxEditor.IntelliPromptTipLinkClickEventHandler" /> delegate.
            </remarks><seealso cref="T:ActiproSoftware.SyntaxEditor.IntelliPromptTipLinkClickEventHandler" /></member><member name="M:ActiproSoftware.SyntaxEditor.IntelliPromptTipLinkClickEventArgs.#ctor(System.String)"><summary>
            Initializes a new instance of the <c>IntelliPromptTipLinkClickEventArgs</c> class.
            </summary><param name="hRef">The HREF of the link that was clicked.</param></member><member name="P:ActiproSoftware.SyntaxEditor.IntelliPromptTipLinkClickEventArgs.HRef"><summary>
            Gets the HREF of the link that was clicked.
            </summary><value>The HREF of the link that was clicked.</value></member><member name="T:ActiproSoftware.SyntaxEditor.IntelliPromptTipImageRequestedEventArgs"><summary>
            Provides data for events that request an <see cref="T:System.Drawing.Image" /> for an IntelliPrompt popup tooltip.
            </summary><remarks>
            This class is used with the <see cref="T:ActiproSoftware.SyntaxEditor.IntelliPromptTipImageRequestedEventHandler" /> delegate.
            </remarks><seealso cref="T:ActiproSoftware.SyntaxEditor.IntelliPromptTipImageRequestedEventHandler" /></member><member name="M:ActiproSoftware.SyntaxEditor.IntelliPromptTipImageRequestedEventArgs.#ctor(System.String)"><summary>
            Initializes a new instance of the <c>IntelliPromptTipImageRequestedEventArgs</c> class.
            </summary><param name="source">The source URI of the <see cref="T:System.Drawing.Image" /> being requested.</param></member><member name="P:ActiproSoftware.SyntaxEditor.IntelliPromptTipImageRequestedEventArgs.Image"><summary>
            Gets or sets the <see cref="T:System.Drawing.Image" /> to display in the popup tooltip.
            </summary><value>The <see cref="T:System.Drawing.Image" /> to display in the popup tooltip.</value></member><member name="P:ActiproSoftware.SyntaxEditor.IntelliPromptTipImageRequestedEventArgs.Source"><summary>
            Gets the source URI of the <see cref="T:System.Drawing.Image" /> being requested.
            </summary><value>The source URI of the <see cref="T:System.Drawing.Image" /> being requested.</value></member><member name="T:ActiproSoftware.SyntaxEditor.IntelliPromptTipImageRequestedEventHandler"><summary>
            Represents the method that will handle events that request an <see cref="T:System.Drawing.Image" /> for an IntelliPrompt popup tooltip.
            </summary><param name="sender">Sender of the event.</param><param name="e">An <see cref="T:ActiproSoftware.SyntaxEditor.IntelliPromptTipImageRequestedEventArgs" /> containing event data.</param><remarks>
            When you create an <c>IntelliPromptTipImageRequestedEventHandler</c> delegate, you identify the method that will handle the event. 
            To associate the event with your event handler, add an instance of the delegate to the event. 
            The event handler is called whenever the event occurs, unless you remove the delegate.
            </remarks><seealso cref="T:ActiproSoftware.SyntaxEditor.IntelliPromptTipImageRequestedEventArgs" /></member><member name="T:ActiproSoftware.SyntaxEditor.CollapsibleNodeOutliningParserData"><summary>
            Stores input data about a <see cref="T:ActiproSoftware.SyntaxEditor.ICollapsibleNode" /> that is sent to a <see cref="T:ActiproSoftware.SyntaxEditor.CollapsibleNodeOutliningParser" />.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.CollapsibleNodeOutliningParserData.CompareTo(System.Object)"><summary>
            Compares the current instance with another object of the same type.
            </summary><param name="obj">An object to compare with this instance.</param><returns>
            A 32-bit signed integer that indicates the relative order of the comparands.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.CollapsibleNodeOutliningParserData.#ctor(System.Int32,ActiproSoftware.SyntaxEditor.OutliningNodeAction,ActiproSoftware.SyntaxEditor.ICollapsibleNode)"><summary>
            Initializes a new instance of the <c>CollapsibleNodeOutliningParserData</c> class. 
            </summary><param name="offset">The offset at which the data appears.</param><param name="action">The <see cref="T:ActiproSoftware.SyntaxEditor.OutliningNodeAction" /> to take at the offset.</param><param name="node">The <see cref="T:ActiproSoftware.SyntaxEditor.ICollapsibleNode" /> that is performing the action.</param></member><member name="T:ActiproSoftware.SyntaxEditor.CollapsibleNodeOutliningParser"><summary>
            Provides a class that builds an <see cref="T:ActiproSoftware.SyntaxEditor.OutliningNode" /> tree for a <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> based 
            on a list of <see cref="T:ActiproSoftware.SyntaxEditor.CollapsibleNodeOutliningParserData" /> objects.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.CollapsibleNodeOutliningParser.Add(ActiproSoftware.SyntaxEditor.CollapsibleNodeOutliningParserData)"><summary>
            Adds a <see cref="T:ActiproSoftware.SyntaxEditor.CollapsibleNodeOutliningParserData" /> to the collection of data that will be used for parsing outlining nodes.
            </summary><param name="parserData">The <see cref="T:ActiproSoftware.SyntaxEditor.CollapsibleNodeOutliningParserData" /> to add.</param></member><member name="M:ActiproSoftware.SyntaxEditor.CollapsibleNodeOutliningParser.AddFromAstNode(ActiproSoftware.SyntaxEditor.IAstNode)"><summary>
            Adds <see cref="T:ActiproSoftware.SyntaxEditor.CollapsibleNodeOutliningParserData" /> objects to the collection of data that will be used for parsing outlining nodes
            basd on the specified <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode" /> and its child nodes.
            </summary><param name="node">The root <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode" /> to examine for collapsible nodes.</param></member><member name="M:ActiproSoftware.SyntaxEditor.CollapsibleNodeOutliningParser.UpdateOutlining(ActiproSoftware.SyntaxEditor.Document,ActiproSoftware.SyntaxEditor.TextRange,ActiproSoftware.SyntaxEditor.IAstNode)"><summary>
            Updates the outlining node tree for the specified <see cref="T:ActiproSoftware.SyntaxEditor.Document" />.
            </summary><param name="document">The <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> to examine.</param><param name="parseTextRange">A <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> indicating the offset range to parse.</param><param name="node">The root <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode" /> to examine for collapsible nodes.</param><returns>
            A <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> indicating the range of offsets that were encapsulated by the outlining parsing.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.CollapsibleNodeOutliningParser.UpdateOutlining(ActiproSoftware.SyntaxEditor.Document,ActiproSoftware.SyntaxEditor.TextRange)"><summary>
            Updates the outlining node tree for the specified <see cref="T:ActiproSoftware.SyntaxEditor.Document" />.
            </summary><param name="document">The <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> to examine.</param><param name="parseTextRange">A <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> indicating the offset range to parse.</param><returns>
            A <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> indicating the range of offsets that were encapsulated by the outlining parsing.
            </returns></member><member name="T:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentSemanticParserGeneratorOutputLanguage"><summary>
            Specifies the output language for the <see cref="T:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentSemanticParserGenerator" />.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentSemanticParserGeneratorOutputLanguage.CSharp"><summary>
            C#.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentSemanticParserGeneratorOutputLanguage.VB"><summary>
            VB.NET.
            </summary></member><member name="T:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentSemanticParserGeneratorOutput"><summary>
            Represents the output from a <see cref="T:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentSemanticParserGenerator" />.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentSemanticParserGeneratorOutput.ToString"><summary>
            Creates and returns a string representation of the current object.
            </summary><returns>A string representation of the current object.</returns></member><member name="P:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentSemanticParserGeneratorOutput.AstCodes"><summary>
            Gets the <see cref="T:System.Collections.Hashtable" /> of code for AST classes.
            </summary><value>The <see cref="T:System.Collections.Hashtable" /> of code for AST classes.</value></member><member name="P:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentSemanticParserGeneratorOutput.AstNamespace"><summary>
            Gets or sets the namespace of the AST classes.
            </summary><value>The namespace of the AST classes.</value></member><member name="P:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentSemanticParserGeneratorOutput.AstNodeCode"><summary>
            Gets or sets the code for the AST node class.
            </summary><value>The code for the AST node class.</value></member><member name="P:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentSemanticParserGeneratorOutput.AstNodeTypeCode"><summary>
            Gets or sets the code for the AST node type enumeration.
            </summary><value>The code for the AST node type enumeration.</value></member><member name="P:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentSemanticParserGeneratorOutput.AstNodeTypeEnumTypeName"><summary>
            Gets or sets the type name of the AST node type enumeration.
            </summary><value>The type name of the AST node type enumeration.</value></member><member name="P:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentSemanticParserGeneratorOutput.AstVisitorCode"><summary>
            Gets or sets the code for the AST visitor class.
            </summary><value>The code for the AST visitor class.</value></member><member name="P:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentSemanticParserGeneratorOutput.ImportedNamespaces"><summary>
            Gets the <see cref="T:System.Collections.Specialized.StringCollection" /> of imported namespaces.
            </summary><value>The <see cref="T:System.Collections.Specialized.StringCollection" /> of imported namespaces.</value></member><member name="P:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentSemanticParserGeneratorOutput.LexicalStateIDClassCode"><summary>
            Gets or sets the code for the lexical state ID class.
            </summary><value>The code for the lexical state ID class.</value></member><member name="P:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentSemanticParserGeneratorOutput.OutputLanguage"><summary>
            Gets or sets a <see cref="T:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentSemanticParserGeneratorOutputLanguage" /> that indicates the language of the generated output.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentSemanticParserGeneratorOutputLanguage" /> that indicates the language of the generated output.</value></member><member name="P:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentSemanticParserGeneratorOutput.SemanticParserCode"><summary>
            Gets or sets the code for the semantic parser class.
            </summary><value>The code for the semantic parser class.</value></member><member name="P:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentSemanticParserGeneratorOutput.SemanticParserNamespace"><summary>
            Gets or sets the namespace of the semantic parser classes.
            </summary><value>The namespace of the semantic parser classes.</value></member><member name="P:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentSemanticParserGeneratorOutput.TokenIDClassCode"><summary>
            Gets or sets the code for the token ID class.
            </summary><value>The code for the token ID class.</value></member><member name="T:ActiproSoftware.SyntaxEditor.ParserGenerator.IRecursiveDescentLexicalParser"><summary>
            Provides the base requirements for a recursive descent lexical parser.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.ParserGenerator.IRecursiveDescentLexicalParser.GetLookAheadToken(System.Int32)"><summary>
            Returns the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that is the specified number of positions past the current token.
            </summary><param name="count">The number of positions past the current token to examine.</param><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that is the specified number of positions past the current token.</returns><remarks>
            A parameter value of <c>1</c> will return the value of the <see cref="P:ActiproSoftware.SyntaxEditor.ParserGenerator.IRecursiveDescentLexicalParser.LookAheadToken" /> method without actually seeking past the next token.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.ParserGenerator.IRecursiveDescentLexicalParser.GetNextToken"><summary>
            Returns the next <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> and seeks past it.
            </summary><returns>The next <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.ParserGenerator.IRecursiveDescentLexicalParser.GetSubstring(System.Int32,System.Int32)"><summary>
            Returns a substring from the text buffer using <see cref="F:ActiproSoftware.SyntaxEditor.LineTerminator.Newline" /> for line ends.
            </summary><param name="offset">The offset at which to retrieve the text.</param><param name="length">The number of characters to return.</param><returns>The substring from the text buffer using <see cref="F:ActiproSoftware.SyntaxEditor.LineTerminator.Newline" /> for line ends.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.ParserGenerator.IRecursiveDescentLexicalParser.GetTokenString(System.Int32)"><summary>
            Gets the token string representation for the specified token ID.
            </summary><param name="tokenID">The ID of the token to examine.</param><returns>The token string representation for the specified token ID.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.ParserGenerator.IRecursiveDescentLexicalParser.Peek"><summary>
            Returns the next <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> in the current peek operation.
            </summary><returns>The next <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> in the current peek operation.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.ParserGenerator.IRecursiveDescentLexicalParser.StartPeek"><summary>
            Starts a multiple token look-ahead operation.
            </summary><remarks>
            The <see cref="M:ActiproSoftware.SyntaxEditor.ParserGenerator.IRecursiveDescentLexicalParser.StopPeek" /> method must be called when the look-ahead operation is complete.
            The <see cref="P:ActiproSoftware.SyntaxEditor.ParserGenerator.IRecursiveDescentLexicalParser.PeekToken" /> will be initialized to the <see cref="P:ActiproSoftware.SyntaxEditor.ParserGenerator.IRecursiveDescentLexicalParser.LookAheadToken" />.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.ParserGenerator.IRecursiveDescentLexicalParser.StopPeek"><summary>
            Stops a multiple token look-ahead operation.
            </summary><remarks>
            This method must be called once for every corresponding <see cref="M:ActiproSoftware.SyntaxEditor.ParserGenerator.IRecursiveDescentLexicalParser.StartPeek" /> call.
            The <see cref="P:ActiproSoftware.SyntaxEditor.ParserGenerator.IRecursiveDescentLexicalParser.PeekToken" /> will be cleared.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.ParserGenerator.IRecursiveDescentLexicalParser.IsAtEnd"><summary>
            Gets whether the current <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> is at the end of the text buffer.
            </summary><value><c>true</c> if the current <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> is at the end of the text buffer; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.ParserGenerator.IRecursiveDescentLexicalParser.LookAheadToken"><summary>
            Returns the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that is immediately after the current token.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that is immediately after the current token.</value></member><member name="P:ActiproSoftware.SyntaxEditor.ParserGenerator.IRecursiveDescentLexicalParser.LookAheadTokenIsOnDifferentLine"><summary>
            Gets whether the <see cref="P:ActiproSoftware.SyntaxEditor.ParserGenerator.IRecursiveDescentLexicalParser.LookAheadToken" /> is on a different line than the <see cref="P:ActiproSoftware.SyntaxEditor.ParserGenerator.IRecursiveDescentLexicalParser.Token" />.
            </summary><returns><c>true</c> if the <see cref="P:ActiproSoftware.SyntaxEditor.ParserGenerator.IRecursiveDescentLexicalParser.LookAheadToken" /> is on a different line than the <see cref="P:ActiproSoftware.SyntaxEditor.ParserGenerator.IRecursiveDescentLexicalParser.Token" />; otherwise, <c>false</c>.
            </returns></member><member name="P:ActiproSoftware.SyntaxEditor.ParserGenerator.IRecursiveDescentLexicalParser.PeekToken"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that is currently being looked at by a peek operation.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that is currently being looked at by a peek operation.</value></member><member name="P:ActiproSoftware.SyntaxEditor.ParserGenerator.IRecursiveDescentLexicalParser.Token"><summary>
            Gets the current <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.
            </summary><value>The current <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.</value></member><member name="T:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentLexicalParser"><summary>
            Provides the base class for a recursive descent lexical parser implementation.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentLexicalParser.GetLookAheadToken(System.Int32)"><summary>
            Returns the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that is the specified number of positions past the current token.
            </summary><param name="count">The number of positions past the current token to examine.</param><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that is the specified number of positions past the current token.</returns><remarks>
            A parameter value of <c>1</c> will return the value of the <see cref="P:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentLexicalParser.LookAheadToken" /> method without actually seeking past the next token.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentLexicalParser.GetNextToken"><summary>
            Returns the next <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> and seeks past it.
            </summary><returns>The next <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentLexicalParser.GetNextTokenCore"><summary>
            Returns the next <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> and seeks past it.
            </summary><returns>The next <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentLexicalParser.GetSubstring(System.Int32,System.Int32)"><summary>
            Returns a substring from the text buffer using <see cref="F:ActiproSoftware.SyntaxEditor.LineTerminator.Newline" /> for line ends.
            </summary><param name="offset">The offset at which to retrieve the text.</param><param name="length">The number of characters to return.</param><returns>The substring from the text buffer using <see cref="F:ActiproSoftware.SyntaxEditor.LineTerminator.Newline" /> for line ends.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentLexicalParser.GetTokenString(System.Int32)"><summary>
            Gets the token string representation for the specified token ID.
            </summary><param name="tokenID">The ID of the token to examine.</param><returns>The token string representation for the specified token ID.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentLexicalParser.InitializeTokens"><summary>
            Initializes the tokens before the first read.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentLexicalParser.Peek"><summary>
            Returns the next <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> in the current peek operation.
            </summary><returns>The next <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> in the current peek operation.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentLexicalParser.ProcessChildLanguage"><summary>
            Iterates through all the tokens for a child language and returns the next <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> in the current language.
            </summary><returns>The next <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> in the current language.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentLexicalParser.StartPeek"><summary>
            Starts a multiple token look-ahead operation.
            </summary><remarks>
            The <see cref="M:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentLexicalParser.StopPeek" /> method must be called when the look-ahead operation is complete.
            The <see cref="P:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentLexicalParser.PeekToken" /> will be initialized to the <see cref="P:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentLexicalParser.LookAheadToken" /> if this is the first peek operation.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentLexicalParser.StopPeek"><summary>
            Stops a multiple token look-ahead operation.
            </summary><remarks>
            This method must be called once for every corresponding <see cref="M:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentLexicalParser.StartPeek" /> call.
            The <see cref="P:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentLexicalParser.PeekToken" /> will be cleared.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentLexicalParser.#ctor(ActiproSoftware.SyntaxEditor.ITextBufferReader)"><summary>
            Initializes a new instance of the <c>RecursiveDescentLexicalParser</c> class.
            </summary><param name="reader">The <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader" /> to use for reading.</param></member><member name="P:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentLexicalParser.IsAtEnd"><summary>
            Gets whether the current <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> is at the end of the text buffer.
            </summary><value><c>true</c> if the current <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> is at the end of the text buffer; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentLexicalParser.LookAheadToken"><summary>
            Returns the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that is immediately after the current token.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that is immediately after the current token.</value></member><member name="P:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentLexicalParser.LookAheadTokenIsOnDifferentLine"><summary>
            Gets whether the <see cref="P:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentLexicalParser.LookAheadToken" /> is on a different line than the <see cref="P:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentLexicalParser.Token" />.
            </summary><returns><c>true</c> if the <see cref="P:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentLexicalParser.LookAheadToken" /> is on a different line than the <see cref="P:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentLexicalParser.Token" />; otherwise, <c>false</c>.
            </returns></member><member name="P:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentLexicalParser.PeekToken"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that is currently being looked at by a peek operation.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that is currently being looked at by a peek operation.</value></member><member name="P:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentLexicalParser.TextBufferReader"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader" /> to use for reading.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader" /> to use for reading.</value></member><member name="P:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentLexicalParser.Token"><summary>
            Gets the current <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.
            </summary><value>The current <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.</value></member><member name="T:ActiproSoftware.SyntaxEditor.ParserGenerator.MergableRecursiveDescentLexicalParser"><summary>
            Represents a mergable language recursive descent lexical parser implementation.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.ParserGenerator.MergableRecursiveDescentLexicalParser.GetNextTokenCore"><summary>
            Returns the next <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> and seeks past it.
            </summary><returns>The next <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.ParserGenerator.MergableRecursiveDescentLexicalParser.GetTokenString(System.Int32)"><summary>
            Gets the token string representation for the specified token ID.
            </summary><param name="tokenID">The ID of the token to examine.</param><returns>The token string representation for the specified token ID.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.ParserGenerator.MergableRecursiveDescentLexicalParser.ProcessChildLanguage"><summary>
            Iterates through all the tokens for a child language and returns the next <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> in the current language.
            </summary><returns>The next <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> in the current language.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.ParserGenerator.MergableRecursiveDescentLexicalParser.#ctor(ActiproSoftware.SyntaxEditor.MergableSyntaxLanguage,ActiproSoftware.SyntaxEditor.MergableLexicalParserManager)"><summary>
            Initializes a new instance of the <c>MergableRecursiveDescentLexicalParser</c> class.
            </summary><param name="language">The <see cref="T:ActiproSoftware.SyntaxEditor.MergableSyntaxLanguage" /> to use.</param><param name="manager">The <see cref="T:ActiproSoftware.SyntaxEditor.MergableLexicalParserManager" /> to use for coordinating merged languages.</param></member><member name="P:ActiproSoftware.SyntaxEditor.ParserGenerator.MergableRecursiveDescentLexicalParser.IsAtEnd"><summary>
            Gets whether the current <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> is at the end of the text buffer.
            </summary><value><c>true</c> if the current <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> is at the end of the text buffer; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.ParserGenerator.MergableRecursiveDescentLexicalParser.Language"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.MergableSyntaxLanguage" /> to use.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.MergableSyntaxLanguage" /> to use.</value></member><member name="P:ActiproSoftware.SyntaxEditor.ParserGenerator.MergableRecursiveDescentLexicalParser.Manager"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.MergableLexicalParserManager" /> to use for coordinating merged languages.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.MergableLexicalParserManager" /> to use for coordinating merged languages.</value></member><member name="T:ActiproSoftware.SyntaxEditor.IToken"><summary>
            Represents the base requirements for a token that has been assigned to a span of document text by a lexical parser.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.IToken.Clone(System.Int32,System.Int32)"><summary>
            Clones the data in the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.
            </summary><param name="startOffset">The <see cref="P:ActiproSoftware.SyntaxEditor.IToken.StartOffset" /> of the cloned object.</param><param name="length">The length of the cloned object.</param><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that was created.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.IToken.Contains(System.Int32)"><summary>
            Returns whether the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> contains the specified offset.
            </summary><param name="offset">The offset to examine.</param><returns><c>true</c> if the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> contains the specified offset; otherwise, <c>false</c>.
            </returns><remarks>
            This method returns <c>false</c> if the offset falls on the <see cref="P:ActiproSoftware.SyntaxEditor.IToken.EndOffset" /> offset
            since this method indicates if the offset is encompassed by the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.IToken.HasFlag(ActiproSoftware.SyntaxEditor.LexicalParseFlags)"><summary>
            Returns whether the parse data has the specified <see cref="T:ActiproSoftware.SyntaxEditor.LexicalParseFlags" /> flag.
            </summary><param name="flag">The <see cref="T:ActiproSoftware.SyntaxEditor.LexicalParseFlags" /> to check for.</param><returns><c>true</c> if the parse data has the specified <see cref="T:ActiproSoftware.SyntaxEditor.LexicalParseFlags" /> flag; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.IToken.ParseDataEquals(ActiproSoftware.SyntaxEditor.IToken)"><summary>
            Returns whether the parse data in this <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> is the same as the parse data in the specified <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.
            </summary><param name="token">The <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> with which to compare.</param><returns><c>true</c> if the parse data is the same in both <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> objects; otherwise, <c>false</c>.
            </returns><remarks>
            This method is called during lexical parsing to determine whether this token is equivalent in parse data to the specified <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.
            If it is not properly implemented then custom lexical parsing in non-mergable languages may not update tokens correctly.
            For non-mergable languages, this method needs to be implemented to compare things like token ID and lexical state ID between
            the two tokens.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.IToken.SetFlag(ActiproSoftware.SyntaxEditor.LexicalParseFlags,System.Boolean)"><summary>
            Sets or clears the specified <see cref="T:ActiproSoftware.SyntaxEditor.LexicalParseFlags" /> flag.
            </summary><param name="flag">The <see cref="T:ActiproSoftware.SyntaxEditor.LexicalParseFlags" /> to set or clear.</param><param name="setBit">Whether to set the flag; otherwise, the flag is cleared.</param><remarks>This method should only be called by lexical parsers.</remarks></member><member name="P:ActiproSoftware.SyntaxEditor.IToken.AutoCaseCorrectText"><summary>
            Gets the text that should be used for this <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> when performing an auto case correction operation on it.
            </summary><value>The text that should be used for this <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> when performing an auto case correction operation on it.</value><remarks>
            Return a <see langword="null" /> value to indicate that there is no auto case correction text available.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.IToken.ContentDividerType"><summary>
            Gets or sets the type of content divider to apply to the token.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.TokenContentDividerType" /> indicating the type of content divider to apply to the token.</value></member><member name="P:ActiproSoftware.SyntaxEditor.IToken.ContentDividerTypeResolved"><summary>
            Gets the resolved type of content divider to apply to the token.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.TokenContentDividerType" /> indicating the type of content divider to apply to the token.</value><remarks>
            If the value of the <see cref="P:ActiproSoftware.SyntaxEditor.IToken.ContentDividerType" /> property is <c>TokenContentDividerType.LexicalPatternGroup</c>,
            this property returns the type of content divider defined by the dynamic language 
            <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup" />.
            Otherwise it should return the value of the <see cref="P:ActiproSoftware.SyntaxEditor.IToken.ContentDividerType" />.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.IToken.DeclaringLexicalState"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that declares pattern that matched the token.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that declares pattern that matched the token.</value></member><member name="P:ActiproSoftware.SyntaxEditor.IToken.EndOffset"><summary>
            Gets the offset after the last character in the token.
            </summary><value>The offset after the last character in the token.</value></member><member name="P:ActiproSoftware.SyntaxEditor.IToken.HighlightingStyle"><summary>
            Gets the <see cref="P:ActiproSoftware.SyntaxEditor.IToken.HighlightingStyle" /> to use for drawing the token, if the token is aware of it.
            </summary><value>The <see cref="P:ActiproSoftware.SyntaxEditor.IToken.HighlightingStyle" /> to use for drawing the token, if the token is aware of it.</value><remarks>
            In some languages, the token may not be aware of what highlighting style is used to draw it.
            In those cases, only the language itself knows what highlighting style to use for the token.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.IToken.ID"><summary>
            Gets the ID assigned to the token.
            </summary><value>The ID assigned to the token.</value></member><member name="P:ActiproSoftware.SyntaxEditor.IToken.IsComment"><summary>
            Gets whether the token represents a comment.
            </summary><value><c>true</c> if the token represents a comment; otherwise <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.IToken.IsDocumentEnd"><summary>
            Gets whether the token marks the end of the document.
            </summary><value><c>true</c> if the token marks the end of the document; otherwise <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.IToken.IsInvalid"><summary>
            Gets whether the token marks an invalid range of text.
            </summary><value><c>true</c> if the token marks invalid range of text; otherwise <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.IToken.IsPaired"><summary>
            Gets whether the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> is paired to another <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.
            </summary><value><c>true</c> if the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> is paired to another <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />; otherwise, <c>false</c>.
            </value><remarks>
            A token pair is generally a pair of brackets.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.IToken.IsPairedEnd"><summary>
            Gets whether the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> is the end <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> of an <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> pair.
            </summary><value><c>true</c> if the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> is the end <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> of an <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> pair; otherwise, <c>false</c>.
            </value><remarks>
            A token pair is generally a pair of brackets.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.IToken.IsPairedStart"><summary>
            Gets whether the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> is the start <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> of an <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> pair.
            </summary><value><c>true</c> if the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> is the start <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> of an <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> pair; otherwise, <c>false</c>.
            </value><remarks>
            A token pair is generally a pair of brackets.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.IToken.IsWhitespace"><summary>
            Gets whether the token represents whitespace.
            </summary><value><c>true</c> if the token represents whitespace; otherwise <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.IToken.Key"><summary>
            Gets the key assigned to the token.
            </summary><value>The key assigned to the token.</value></member><member name="P:ActiproSoftware.SyntaxEditor.IToken.Language"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> that contains the token.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> that contains the token.</value></member><member name="P:ActiproSoftware.SyntaxEditor.IToken.Length"><summary>
            Gets or sets the absolute length of the token.
            </summary><value>The absolute length of the token.</value><remarks>
            The setter for this property is for internal use only.  Altering its value will corrupt the <see cref="T:ActiproSoftware.SyntaxEditor.Document" /><see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> collection.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.IToken.LexicalScope"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalScope" />, if any, that defines the token.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalScope" />, if any, that defines the token.</value><remarks>
            If this value is <see langword="null" />, the token was not defined by a lexical scope.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.IToken.LexicalState"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that contains the token.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that contains the token.</value></member><member name="P:ActiproSoftware.SyntaxEditor.IToken.LexicalStateID"><summary>
            Gets the ID assigned to the lexical state.
            </summary><value>The ID assigned to the lexical state.</value></member><member name="P:ActiproSoftware.SyntaxEditor.IToken.MatchingTokenID"><summary>
            Gets the ID of the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that matches this <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> if this token is paired.
            </summary><value>The ID of the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that matches this <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> if this token is paired.</value></member><member name="P:ActiproSoftware.SyntaxEditor.IToken.NestingDepth"><summary>
            Gets the nesting depth of the token.
            </summary><value>The nesting depth of the token.</value></member><member name="P:ActiproSoftware.SyntaxEditor.IToken.ParentToken"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that starts the current state scope specified by the <see cref="P:ActiproSoftware.SyntaxEditor.IToken.LexicalState" /> property.
            </summary><value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that starts the current state scope specified by the <see cref="P:ActiproSoftware.SyntaxEditor.IToken.LexicalState" /> property.
            </value><remarks>
            This value may be <see langword="null" /> if the state in the <see cref="P:ActiproSoftware.SyntaxEditor.IToken.LexicalState" /> property is the root state
            in the document.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.IToken.StartOffset"><summary>
            Gets or sets the offset of the first character in the token.
            </summary><value>The offset of the first character in the token.</value></member><member name="P:ActiproSoftware.SyntaxEditor.IToken.TextRange"><summary>
            Gets a <see cref="P:ActiproSoftware.SyntaxEditor.IToken.TextRange" /> that specifies the text range of the token.
            </summary><value>A <see cref="P:ActiproSoftware.SyntaxEditor.IToken.TextRange" /> that specifies the text range of the token.</value></member><member name="T:ActiproSoftware.SyntaxEditor.TokenBase"><summary>
            Represents the base class for an <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> implementation.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.TokenBase.Clone(System.Int32,System.Int32)"><summary>
            Clones the data in the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.
            </summary><param name="startOffset">The <see cref="P:ActiproSoftware.SyntaxEditor.TokenBase.StartOffset" /> of the cloned object.</param><param name="length">The length of the cloned object.</param><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that was created.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.TokenBase.Contains(System.Int32)"><summary>
            Returns whether the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> contains the specified offset.
            </summary><param name="offset">The offset to examine.</param><returns><c>true</c> if the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> contains the specified offset; otherwise, <c>false</c>.
            </returns><remarks>
            This method returns <c>false</c> if the offset falls on the <see cref="P:ActiproSoftware.SyntaxEditor.TokenBase.EndOffset" /> offset
            since this method indicates if the offset is encompassed by the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.TokenBase.HasFlag(ActiproSoftware.SyntaxEditor.LexicalParseFlags)"><summary>
            Returns whether the parse data has the specified <see cref="T:ActiproSoftware.SyntaxEditor.LexicalParseFlags" /> flag.
            </summary><param name="flag">The <see cref="T:ActiproSoftware.SyntaxEditor.LexicalParseFlags" /> to check for.</param><returns><c>true</c> if the parse data has the specified <see cref="T:ActiproSoftware.SyntaxEditor.LexicalParseFlags" /> flag; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.TokenBase.ParseDataEquals(ActiproSoftware.SyntaxEditor.IToken)"><summary>
            Returns whether the parse data in this <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> is the same as the parse data in the specified <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.
            </summary><param name="token">The <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> with which to compare.</param><returns><c>true</c> if the parse data is the same in both <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> objects; otherwise, <c>false</c>.
            </returns><remarks>
            This method is called during lexical parsing to determine whether this token is equivalent in parse data to the specified <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.
            If it is not properly implemented then custom lexical parsing in non-mergable languages may not update tokens correctly.
            For non-mergable languages, this method needs to be implemented to compare things like token ID and lexical state ID between
            the two tokens.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.TokenBase.SetFlag(ActiproSoftware.SyntaxEditor.LexicalParseFlags,System.Boolean)"><summary>
            Sets or clears the specified <see cref="T:ActiproSoftware.SyntaxEditor.LexicalParseFlags" /> flag.
            </summary><param name="flag">The <see cref="T:ActiproSoftware.SyntaxEditor.LexicalParseFlags" /> to set or clear.</param><param name="setBit">Whether to set the flag; otherwise, the flag is cleared.</param><remarks>This method should only be called by lexical parsers.</remarks></member><member name="M:ActiproSoftware.SyntaxEditor.TokenBase.ToString"><summary>
            Creates and returns a string representation of the current object.
            </summary><returns>A string representation of the current object.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.TokenBase.ToString(System.String)"><summary>
            Creates and returns a string representation of the current object.
            </summary><param name="tokenDescription">The description of the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.</param><returns>A string representation of the current object.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.TokenBase.#ctor(System.Int32)"><summary>
            Initializes a new instance of the <c>TokenBase</c> class.
            </summary><param name="startOffset">The start offset of the token.</param></member><member name="P:ActiproSoftware.SyntaxEditor.TokenBase.AutoCaseCorrectText"><summary>
            Gets the text that should be used for this <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> when performing an auto case correction operation on it.
            </summary><value>The text that should be used for this <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> when performing an auto case correction operation on it.</value><remarks>
            Return a <see langword="null" /> value to indicate that there is no auto case correction text available.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.TokenBase.ContentDividerType"><summary>
            Gets or sets the type of content divider to apply to the token.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.TokenContentDividerType" /> indicating the type of content divider to apply to the token.</value></member><member name="P:ActiproSoftware.SyntaxEditor.TokenBase.ContentDividerTypeResolved"><summary>
            Gets the resolved type of content divider to apply to the token.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.TokenContentDividerType" /> indicating the type of content divider to apply to the token.</value><remarks>
            If the value of the <see cref="P:ActiproSoftware.SyntaxEditor.TokenBase.ContentDividerType" /> property is <c>TokenContentDividerType.LexicalPatternGroup</c>,
            this property returns the type of content divider defined by the dynamic language 
            <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup" />.
            Otherwise it should return the value of the <see cref="P:ActiproSoftware.SyntaxEditor.TokenBase.ContentDividerType" />.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.TokenBase.DeclaringLexicalState"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that declares pattern that matched the token.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that declares pattern that matched the token.</value></member><member name="P:ActiproSoftware.SyntaxEditor.TokenBase.EndOffset"><summary>
            Gets the offset after the last character in the token.
            </summary><value>The offset after the last character in the token.</value></member><member name="P:ActiproSoftware.SyntaxEditor.TokenBase.HighlightingStyle"><summary>
            Gets the <see cref="P:ActiproSoftware.SyntaxEditor.TokenBase.HighlightingStyle" /> to use for drawing the token, if the token is aware of it.
            </summary><value>The <see cref="P:ActiproSoftware.SyntaxEditor.TokenBase.HighlightingStyle" /> to use for drawing the token, if the token is aware of it.</value><remarks>
            In some languages, the token may not be aware of what highlighting style is used to draw it.
            In those cases, only the language itself knows what highlighting style to use for the token.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.TokenBase.ID"><summary>
            Gets the ID assigned to the token.
            </summary><value>The ID assigned to the token.</value></member><member name="P:ActiproSoftware.SyntaxEditor.TokenBase.IsComment"><summary>
            Gets whether the token represents a comment.
            </summary><value><c>true</c> if the token represents a comment; otherwise <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.TokenBase.IsDocumentEnd"><summary>
            Gets whether the token marks the end of the document.
            </summary><value><c>true</c> if the token marks the end of the document; otherwise <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.TokenBase.IsInvalid"><summary>
            Gets whether the token marks an invalid range of text.
            </summary><value><c>true</c> if the token marks invalid range of text; otherwise <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.TokenBase.IsPaired"><summary>
            Gets whether the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> is paired to another <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.
            </summary><value><c>true</c> if the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> is paired to another <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />; otherwise, <c>false</c>.
            </value><remarks>
            A token pair is generally a pair of brackets.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.TokenBase.IsPairedEnd"><summary>
            Gets whether the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> is the end <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> of an <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> pair.
            </summary><value><c>true</c> if the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> is the end <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> of an <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> pair; otherwise, <c>false</c>.
            </value><remarks>
            A token pair is generally a pair of brackets.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.TokenBase.IsPairedStart"><summary>
            Gets whether the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> is the start <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> of an <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> pair.
            </summary><value><c>true</c> if the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> is the start <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> of an <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> pair; otherwise, <c>false</c>.
            </value><remarks>
            A token pair is generally a pair of brackets.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.TokenBase.IsWhitespace"><summary>
            Gets whether the token represents whitespace.
            </summary><value><c>true</c> if the token represents whitespace; otherwise <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.TokenBase.Key"><summary>
            Gets the key assigned to the token.
            </summary><value>The key assigned to the token.</value></member><member name="P:ActiproSoftware.SyntaxEditor.TokenBase.Language"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> that contains the token.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> that contains the token.</value></member><member name="P:ActiproSoftware.SyntaxEditor.TokenBase.Length"><summary>
            Gets or sets the absolute length of the token.
            </summary><value>The absolute length of the token.</value><remarks>
            The setter for this property is for internal use only.  Altering its value will corrupt the <see cref="T:ActiproSoftware.SyntaxEditor.Document" /><see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> collection.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.TokenBase.LexicalScope"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalScope" />, if any, that defines the token.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalScope" />, if any, that defines the token.</value><remarks>
            If this value is <see langword="null" />, the token was not defined by a lexical scope.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.TokenBase.LexicalState"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that contains the token.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that contains the token.</value></member><member name="P:ActiproSoftware.SyntaxEditor.TokenBase.LexicalStateID"><summary>
            Gets the ID assigned to the lexical state.
            </summary><value>The ID assigned to the lexical state.</value></member><member name="P:ActiproSoftware.SyntaxEditor.TokenBase.MatchingTokenID"><summary>
            Gets the ID of the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that matches this <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> if this token is paired.
            </summary><value>The ID of the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that matches this <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> if this token is paired.</value></member><member name="P:ActiproSoftware.SyntaxEditor.TokenBase.NestingDepth"><summary>
            Gets the nesting depth of the token.
            </summary><value>The nesting depth of the token.</value></member><member name="P:ActiproSoftware.SyntaxEditor.TokenBase.ParentToken"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that starts the current state scope specified by the <see cref="P:ActiproSoftware.SyntaxEditor.TokenBase.LexicalState" /> property.
            </summary><value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that starts the current state scope specified by the <see cref="P:ActiproSoftware.SyntaxEditor.TokenBase.LexicalState" /> property.
            </value><remarks>
            This value may be <see langword="null" /> if the state in the <see cref="P:ActiproSoftware.SyntaxEditor.TokenBase.LexicalState" /> property is the root state
            in the document.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.TokenBase.StartOffset"><summary>
            Gets or sets the offset of the first character in the token.
            </summary><value>The offset of the first character in the token.</value></member><member name="P:ActiproSoftware.SyntaxEditor.TokenBase.TextRange"><summary>
            Gets a <see cref="P:ActiproSoftware.SyntaxEditor.TokenBase.TextRange" /> that specifies the text range of the token.
            </summary><value>A <see cref="P:ActiproSoftware.SyntaxEditor.TokenBase.TextRange" /> that specifies the text range of the token.</value></member><member name="T:ActiproSoftware.SyntaxEditor.MergableToken"><summary>
            Represents the default implementation of a <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that can be used with a <see cref="T:ActiproSoftware.SyntaxEditor.MergableSyntaxLanguage" />.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.MergableToken.Clone(System.Int32,System.Int32)"><summary>
            Clones the data in the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.
            </summary><param name="startOffset">The <see cref="P:ActiproSoftware.SyntaxEditor.IToken.StartOffset" /> of the cloned object.</param><param name="length">The length of the cloned object.</param><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that was created.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.MergableToken.HasFlag(ActiproSoftware.SyntaxEditor.LexicalParseFlags)"><summary>
            Returns whether the parse data has the specified <see cref="P:ActiproSoftware.SyntaxEditor.MergableToken.LexicalParseFlags" /> flag.
            </summary><param name="flag">The <see cref="P:ActiproSoftware.SyntaxEditor.MergableToken.LexicalParseFlags" /> to check for.</param><returns><c>true</c> if the parse data has the specified <see cref="P:ActiproSoftware.SyntaxEditor.MergableToken.LexicalParseFlags" /> flag; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.MergableToken.ParseDataEquals(ActiproSoftware.SyntaxEditor.IToken)"><summary>
            Returns whether the parse data in this <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> is the same as the parse data in the specified <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.
            </summary><param name="token">The <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> with which to compare.</param><returns><c>true</c> if the parse data is the same in both <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> objects; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.MergableToken.SetFlag(ActiproSoftware.SyntaxEditor.LexicalParseFlags,System.Boolean)"><summary>
            Sets or clears the specified <see cref="P:ActiproSoftware.SyntaxEditor.MergableToken.LexicalParseFlags" /> flag.
            </summary><param name="flag">The <see cref="P:ActiproSoftware.SyntaxEditor.MergableToken.LexicalParseFlags" /> to set or clear.</param><param name="setBit">Whether to set the flag; otherwise, the flag is cleared.</param><remarks>This method should only be called by lexical parsers.</remarks></member><member name="M:ActiproSoftware.SyntaxEditor.MergableToken.#ctor(System.Int32,System.Int32,ActiproSoftware.SyntaxEditor.LexicalParseFlags,ActiproSoftware.SyntaxEditor.IToken,ActiproSoftware.SyntaxEditor.ITokenLexicalParseData)"><summary>
            Initializes a new instance of the <c>MergableToken</c> class.
            </summary><param name="startOffset">The start offset of the token.</param><param name="length">The length of the token.</param><param name="lexicalParseFlags">The <see cref="P:ActiproSoftware.SyntaxEditor.MergableToken.LexicalParseFlags" /> for the token.</param><param name="parentToken">The <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that starts the current state scope specified by the <see cref="P:ActiproSoftware.SyntaxEditor.MergableToken.LexicalState" /> property.</param><param name="lexicalParseData">The <see cref="T:ActiproSoftware.SyntaxEditor.ITokenLexicalParseData" /> that contains lexical parse information about the token.</param></member><member name="P:ActiproSoftware.SyntaxEditor.MergableToken.ContentDividerType"><summary>
            Gets or sets the type of content divider to apply to the token.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.TokenContentDividerType" /> indicating the type of content divider to apply to the token.</value></member><member name="P:ActiproSoftware.SyntaxEditor.MergableToken.ContentDividerTypeResolved"><summary>
            Gets the resolved type of content divider to apply to the token.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.TokenContentDividerType" /> indicating the type of content divider to apply to the token.</value><remarks>
            If the value of the <see cref="P:ActiproSoftware.SyntaxEditor.MergableToken.ContentDividerType" /> property is <c>TokenContentDividerType.LexicalPatternGroup</c>,
            this property returns the type of content divider defined by the dynamic language 
            <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup" />.
            Otherwise it returns the value of the <see cref="P:ActiproSoftware.SyntaxEditor.MergableToken.ContentDividerType" />.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.MergableToken.DeclaringLexicalState"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that declares pattern that matched the token.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that declares pattern that matched the token.</value></member><member name="P:ActiproSoftware.SyntaxEditor.MergableToken.HighlightingStyle"><summary>
            Gets the <see cref="P:ActiproSoftware.SyntaxEditor.MergableToken.HighlightingStyle" /> to use for drawing the token, if the token is aware of it.
            </summary><value>The <see cref="P:ActiproSoftware.SyntaxEditor.MergableToken.HighlightingStyle" /> to use for drawing the token, if the token is aware of it.</value><remarks>
            In some languages, the token may not be aware of what highlighting style is used to draw it.
            In those cases, only the language itself knows what highlighting style to use for the token.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.MergableToken.ID"><summary>
            Gets the ID assigned to the token.
            </summary><value>The ID assigned to the token.</value></member><member name="P:ActiproSoftware.SyntaxEditor.MergableToken.IsWhitespace"><summary>
            Gets whether the token represents whitespace.
            </summary><value><c>true</c> if the token represents whitespace; otherwise <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.MergableToken.Key"><summary>
            Gets the key assigned to the token.
            </summary><value>The key assigned to the token.</value></member><member name="P:ActiproSoftware.SyntaxEditor.MergableToken.Language"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> that contains the token.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> that contains the token.</value></member><member name="P:ActiproSoftware.SyntaxEditor.MergableToken.Length"><summary>
            Gets or sets the absolute length of the token.
            </summary><value>The absolute length of the token.</value><remarks>
            The setter for this property is for internal use only.  Altering its value will corrupt the <see cref="T:ActiproSoftware.SyntaxEditor.Document" /><see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> collection.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.MergableToken.LexicalParseData"><summary>
            Gets an <see cref="T:ActiproSoftware.SyntaxEditor.ITokenLexicalParseData" /> that contains lexical parse information for the token.
            </summary><value>An <see cref="T:ActiproSoftware.SyntaxEditor.ITokenLexicalParseData" /> that contains lexical parse information for the token.</value></member><member name="P:ActiproSoftware.SyntaxEditor.MergableToken.LexicalParseFlags"><summary>
            Gets a <see cref="P:ActiproSoftware.SyntaxEditor.MergableToken.LexicalParseFlags" /> indicating lexical parse flags for the token.
            </summary><value>A <see cref="P:ActiproSoftware.SyntaxEditor.MergableToken.LexicalParseFlags" /> indicating lexical parse flags for the token.</value></member><member name="P:ActiproSoftware.SyntaxEditor.MergableToken.LexicalScope"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalScope" />, if any, that defines the token.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalScope" />, if any, that defines the token.</value><remarks>
            If this value is <see langword="null" />, the token was not defined by a lexical scope.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.MergableToken.LexicalState"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that contains the token.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that contains the token.</value></member><member name="P:ActiproSoftware.SyntaxEditor.MergableToken.NestingDepth"><summary>
            Gets the nesting depth of the token.
            </summary><value>The nesting depth of the token.</value></member><member name="P:ActiproSoftware.SyntaxEditor.MergableToken.ParentToken"><summary>
            Gets or sets the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that starts the current state scope specified by the <see cref="P:ActiproSoftware.SyntaxEditor.MergableToken.LexicalState" /> property.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that starts the current state scope specified by the <see cref="P:ActiproSoftware.SyntaxEditor.MergableToken.LexicalState" /> property.</value><remarks>
            This value may be <see langword="null" /> if the state in the <see cref="P:ActiproSoftware.SyntaxEditor.MergableToken.LexicalState" /> property is the root state
            in the document.
            </remarks></member><member name="T:ActiproSoftware.SyntaxEditor.SmartTagSpanIndicator"><summary>
            Represents a smart tag span indicator.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.SmartTagSpanIndicator.DrawMarks(System.Windows.Forms.PaintEventArgs,ActiproSoftware.SyntaxEditor.EditorView,System.Drawing.Rectangle,System.Int32,ActiproSoftware.SyntaxEditor.TextRange)"><summary>
            Draws the marks associated with the indicator on a single display line.
            </summary><param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param><param name="view">The <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> that is being drawn.</param><param name="bounds">A <c>Rectangle</c> specifying the bounds in which to draw on the display line.</param><param name="displayLineIndex">The index of the display line being painted.</param><param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.ITextRange" /> over which to draw.</param><remarks>This method should be implemented by indicators that have adornments.</remarks></member><member name="M:ActiproSoftware.SyntaxEditor.SmartTagSpanIndicator.#ctor(ActiproSoftware.SyntaxEditor.SmartTag)"><summary>
            Initializes a new instance of the <c>BreakpointSpanIndicator</c> class.
            </summary><param name="smartTag">The <see cref="P:ActiproSoftware.SyntaxEditor.SmartTagSpanIndicator.SmartTag" /> wrapped by this indicator.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SmartTagSpanIndicator.#ctor(ActiproSoftware.SyntaxEditor.SmartTag,System.Drawing.Color)"><summary>
            Initializes a new instance of the <c>BreakpointSpanIndicator</c> class.
            </summary><param name="smartTag">The <see cref="P:ActiproSoftware.SyntaxEditor.SmartTagSpanIndicator.SmartTag" /> wrapped by this indicator.</param><param name="borderColor">The <see cref="T:System.Drawing.Color" /> to use when drawing the border of the indicator.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SmartTagSpanIndicator.#ctor(System.String,ActiproSoftware.SyntaxEditor.SmartTag,System.Drawing.Color)"><summary>
            Initializes a new instance of the <c>BreakpointSpanIndicator</c> class.
            </summary><param name="name">The name to identify the type of indicator.</param><param name="smartTag">The <see cref="P:ActiproSoftware.SyntaxEditor.SmartTagSpanIndicator.SmartTag" /> wrapped by this indicator.</param><param name="borderColor">The <see cref="T:System.Drawing.Color" /> to use when drawing the border of the indicator.</param></member><member name="P:ActiproSoftware.SyntaxEditor.SmartTagSpanIndicator.BorderColor"><summary>
            Gets or sets the <see cref="T:System.Drawing.Color" /> to use when drawing the border of the indicator.
            </summary><value>The <see cref="T:System.Drawing.Color" /> to use when drawing the border of the indicator.</value></member><member name="P:ActiproSoftware.SyntaxEditor.SmartTagSpanIndicator.DefaultName"><summary>
            Gets the default name for the indicator.
            </summary><value>The default name for the indicator.</value></member><member name="P:ActiproSoftware.SyntaxEditor.SmartTagSpanIndicator.HasFontChange"><summary>
            Gets whether the span indicator contains a font-related change.
            </summary><value><c>true</c> if the span indicator contains a font-related change; otherwise, <c>false</c>.
            </value><remarks>
            This property lets <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor" /> know whether display lines need to be recalculated
            when the span indicator is added.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.SmartTagSpanIndicator.SmartTag"><summary>
            Gets the <see cref="P:ActiproSoftware.SyntaxEditor.SmartTagSpanIndicator.SmartTag" /> that is represented by this indicator.
            </summary><value>The <see cref="P:ActiproSoftware.SyntaxEditor.SmartTagSpanIndicator.SmartTag" /> that is represented by this indicator.</value></member><member name="T:ActiproSoftware.SyntaxEditor.SmartTag"><summary>
            Represents a smart tag.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.SmartTag.#ctor(System.String,System.Drawing.Image,System.String)"><summary>
            Initializes a new instance of the <c>SmartTag</c> class.
            </summary><param name="key">A string-based key that identifies the smart tag.</param><param name="image">The <see cref="T:System.Drawing.Image" /> to display in a popup when the smart tag is activated.</param><param name="toolTipText">The tooltip text for the smart tag.</param></member><member name="P:ActiproSoftware.SyntaxEditor.SmartTag.Image"><summary>
            Gets or sets the <see cref="T:System.Drawing.Image" /> to display in a popup when the smart tag is activated.
            </summary><value>The <see cref="T:System.Drawing.Image" /> to display in a popup when the smart tag is activated.</value></member><member name="P:ActiproSoftware.SyntaxEditor.SmartTag.Key"><summary>
            Gets a string-based key that identifies the smart tag.
            </summary><value>A string-based key that identifies the smart tag.</value></member><member name="P:ActiproSoftware.SyntaxEditor.SmartTag.Tag"><summary>
            Gets or sets the object that contains user-defined data about the object.
            </summary><value>
            An <see cref="T:System.Object" /> that contains user-defined data about the control. The default is <see langword="null" />.
            </value><remarks>
            Any type derived from the <see cref="T:System.Object" /> class can be assigned to this property. 
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.SmartTag.ToolTipText"><summary>
            Gets or sets the tooltip text for the smart tag.
            </summary><value>The tooltip text for the smart tag.</value></member><member name="T:ActiproSoftware.SyntaxEditor.IntelliPromptSmartTag"><summary>
            Provides control for the IntelliPrompt smart tag.
            </summary><remarks>
            The <see cref="T:ActiproSoftware.SyntaxEditor.SmartTag" /> objects currently being managed are wrapped by <see cref="T:ActiproSoftware.SyntaxEditor.SmartTagSpanIndicator" />
            objects in the special span indicator layer with a key of the <c>SpanIndicatorLayer.SmartTagsKey</c> constant.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.IntelliPromptSmartTag.Add(ActiproSoftware.SyntaxEditor.SmartTag,ActiproSoftware.SyntaxEditor.TextRange)"><summary>
            Adds a <see cref="T:ActiproSoftware.SyntaxEditor.SmartTag" /> to the collection of tracked smart tags for the document.
            </summary><param name="smartTag">The <see cref="T:ActiproSoftware.SyntaxEditor.SmartTag" /> to add.</param><param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> over which a smart tag indicator will be placed.</param></member><member name="M:ActiproSoftware.SyntaxEditor.IntelliPromptSmartTag.Add(ActiproSoftware.SyntaxEditor.SmartTag,ActiproSoftware.SyntaxEditor.TextRange,ActiproSoftware.SyntaxEditor.SmartTagSpanIndicator)"><summary>
            Adds a <see cref="T:ActiproSoftware.SyntaxEditor.SmartTag" /> to the collection of tracked smart tags for the document, and uses a custom <see cref="T:ActiproSoftware.SyntaxEditor.SmartTagSpanIndicator" />.
            </summary><param name="smartTag">The <see cref="T:ActiproSoftware.SyntaxEditor.SmartTag" /> to add.</param><param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> over which a smart tag indicator will be placed.</param><param name="indicator">The <see cref="T:ActiproSoftware.SyntaxEditor.SmartTagSpanIndicator" /> to use for display of the smart tag.</param></member><member name="M:ActiproSoftware.SyntaxEditor.IntelliPromptSmartTag.Clear"><summary>
            Clears any tracked smart tags from the document.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.IntelliPromptSmartTag.Dispose(System.Boolean)"><summary>
            Releases the unmanaged resources used by the object and optionally releases the managed resources.
            </summary><param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources. 
            </param><remarks>
            This method is called by the public <c>Dispose</c> method and the <c>Finalize</c> method. 
            <c>Dispose</c> invokes this method with the <paramref name="disposing" /> parameter set to <c>true</c>. 
            <c>Finalize</c> invokes this method with <paramref name="disposing" /> set to <c>false</c>.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.IntelliPromptSmartTag.Hide"><summary>
            Hides any active smart tag popup.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.IntelliPromptSmartTag.Remove(ActiproSoftware.SyntaxEditor.SmartTag)"><summary>
            Hides the specified <see cref="T:ActiproSoftware.SyntaxEditor.SmartTag" /> if it is visible and removes it from the tracked smart tags in the document.
            </summary><param name="smartTag">The <see cref="T:ActiproSoftware.SyntaxEditor.SmartTag" /> to hide and remove.</param></member><member name="M:ActiproSoftware.SyntaxEditor.IntelliPromptSmartTag.Show(System.Int32,ActiproSoftware.SyntaxEditor.SmartTag)"><summary>
            Shows the specified <see cref="T:ActiproSoftware.SyntaxEditor.SmartTag" /> popup.
            </summary><param name="offset">The offset at which to show the <see cref="T:ActiproSoftware.SyntaxEditor.SmartTag" />.</param><param name="smartTag">The <see cref="T:ActiproSoftware.SyntaxEditor.SmartTag" /> to show.</param><remarks>
            The smart tag being displayed will be available in the <see cref="P:ActiproSoftware.SyntaxEditor.IntelliPromptSmartTag.ActiveSmartTag" /> property while it is displayed.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.IntelliPromptSmartTag.ActiveSmartTag"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.SmartTag" /> that is currently active.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.SmartTag" /> that is currently active.</value></member><member name="P:ActiproSoftware.SyntaxEditor.IntelliPromptSmartTag.AutoHideTimeout"><summary>
            Gets or sets the timeout, in milliseconds, before a visible smart tag popup auto-hides if the mouse is not over it.
            </summary><value>The timeout, in milliseconds, before a visible smart tag popup auto-hides if the mouse is not over it.</value><remarks>
            Specify a value of <c>0</c> to not auto-hide the smart tag.  The default value is <c>5000</c>.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.IntelliPromptSmartTag.Bounds"><summary>
            Gets the size and location of the popup.
            </summary><value>A <see cref="T:System.Drawing.Rectangle" /> indicating the size and location of the popup.</value></member><member name="P:ActiproSoftware.SyntaxEditor.IntelliPromptSmartTag.ClearOnDocumentModification"><summary>
            Gets or sets whether to clear any tracked smart tags from the document when a document modification occurs.
            </summary><value><c>true</c> if any tracked smart tags should be cleared from the document when a document modification occurs; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.IntelliPromptSmartTag.Count"><summary>
            Gets the number of smart tags that are currently being tracked in the document.
            </summary><value>The number of smart tags that are currently being tracked in the document.</value></member><member name="P:ActiproSoftware.SyntaxEditor.IntelliPromptSmartTag.DesktopBounds"><summary>
            Gets the size and location of the popup on the desktop.
            </summary><value>A <see cref="T:System.Drawing.Rectangle" /> indicating the size and location of the popup.</value></member><member name="P:ActiproSoftware.SyntaxEditor.IntelliPromptSmartTag.IsPopupDisplayed"><summary>
            Gets or sets whether a popup menu is displayed in response to a smart tag click.
            </summary><value><c>true</c> if a popup menu is displayed in response to a smart tag click; otherwise, <c>false</c>.
            </value><remarks>
            This should only be set to <c>true</c> in cases where the <see cref="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.IntelliPromptSmartTagClicked" /> event
            displays a non-modal menu.  Upon the menu's close it should be reset to <c>false</c>.
            While <c>true</c>, it will keep the drop-down arrow displayed and will prevent the smart tag from auto-hiding.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.IntelliPromptSmartTag.MultipleSmartTagsEnabled"><summary>
            Gets or sets whether to allow multiple smart tags to be tracked in a document.
            </summary><value><c>true</c> if mulitiple smart tags can be tracked in a document; otherwise, <c>false</c>.
            </value><remarks>
            If set to <c>false</c>, only a single <see cref="T:ActiproSoftware.SyntaxEditor.SmartTag" /> can be tracked at any time.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.IntelliPromptSmartTag.Tag"><summary>
            Gets or sets the object that contains user-defined data about the object.
            </summary><value>
            An <see cref="T:System.Object" /> that contains user-defined data about the control. The default is <see langword="null" />.
            </value><remarks>
            Any type derived from the <see cref="T:System.Object" /> class can be assigned to this property. 
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.IntelliPromptSmartTag.Visible"><summary>
            Gets whether a <see cref="T:ActiproSoftware.SyntaxEditor.SmartTag" /> is currently visible.
            </summary><value><c>true</c> if a <see cref="T:ActiproSoftware.SyntaxEditor.SmartTag" /> is currently visible; otherwise, <c>false</c>.
            </value></member><member name="T:ActiproSoftware.SyntaxEditor.AutomaticOutliningBehavior"><summary>
            Specifies when automatic outlining is performed.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.AutomaticOutliningBehavior.PostSemanticParse"><summary>
            Automatic outlining will be executed in the main UI thread immediately after semantic parsing is performed.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.AutomaticOutliningBehavior.SemanticParseDataChange"><summary>
            Automatic outlining will be executed after the <see cref="P:ActiproSoftware.SyntaxEditor.Document.SemanticParseData" /> property is changed
            and in whatever thread calls the property.
            </summary></member><member name="T:ActiproSoftware.SyntaxEditor.IAstNodeList"><summary>
            Provides the base requirement for a collection of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode" /> objects.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.IAstNodeList.Add(ActiproSoftware.SyntaxEditor.IAstNode)"><summary>
            Adds an object to the end of the collection.
            </summary><param name="value">The object to be added to the end of the collection. </param><returns>The collection index at which the object has been added.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.IAstNodeList.AddRange(ActiproSoftware.SyntaxEditor.IAstNode[])"><summary>
            Adds an array of objects to the end of the collection.
            </summary><param name="values">The objects to be added to the end of the collection. </param></member><member name="M:ActiproSoftware.SyntaxEditor.IAstNodeList.Clear"><summary>
            Removes all objects from the collection.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.IAstNodeList.Contains(ActiproSoftware.SyntaxEditor.IAstNode)"><summary>
            Returns whether the specified object is in the collection.
            </summary><param name="value">The object to locate in the collection.</param><returns><c>true</c> if the object is found in the collection; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.IAstNodeList.IndexOf(ActiproSoftware.SyntaxEditor.IAstNode)"><summary>
            Searches for the specified object and returns the zero-based index of the first occurrence within the entire collection.
            </summary><param name="value">The object to locate in the collection.</param><returns>
            The zero-based index of the first occurrence of the object within the entire collection, if found; otherwise, <c>-1</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.IAstNodeList.Remove(ActiproSoftware.SyntaxEditor.IAstNode)"><summary>
            Removes the first occurrence of a specific object from the collection.
            </summary><param name="value">The object to remove from the collection.</param><remarks>
            The elements that follow the removed element move up to occupy the vacated spot. 
            The indexes of the elements that are moved are also updated.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.IAstNodeList.ToArray"><summary>
            Copies the items of the collection to a new <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode" /> array.
            </summary><returns>An array of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode" /> items.</returns></member><member name="P:ActiproSoftware.SyntaxEditor.IAstNodeList.IsFixedSize"><summary>
            Gets a value indicating whether the collection has a fixed size.
            </summary><value><c>true</c> if the collection has a fixed size; otherwise, <c>false</c>.
            </value><remarks>
            A collection with a fixed size does not allow the addition or removal of elements, 
            but it allows the modification of existing elements.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.IAstNodeList.IsReadOnly"><summary>
            Gets a value indicating whether the collection is read-only.
            </summary><value><c>true</c> if the collection is read-only; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.IAstNodeList.ParentNode"><summary>
            Gets the parent <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode" /> of the node list.
            </summary><value>The parent <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode" /> of the node list.</value></member><member name="P:ActiproSoftware.SyntaxEditor.IAstNodeList.Item(System.Int32)"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode" /> at the specified index. 
            <para>
            [C#] In C#, this property is the indexer for the <c>AstNodeBaseList</c> class. 
            </para></summary><param name="index">The index of the <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode" /> to return.</param><value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode" /> at the specified index. 
            </value></member><member name="T:ActiproSoftware.SyntaxEditor.AstNodeListWrapper"><summary>
            Represents a collection of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode" /> objects that all have a certain <see cref="P:ActiproSoftware.SyntaxEditor.IAstNode.ContextID" /> and 
            are parented within a certain <see cref="T:ActiproSoftware.SyntaxEditor.AstNodeList" />.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.AstNodeListWrapper.Add(ActiproSoftware.SyntaxEditor.IAstNode)"><summary>
            Adds an object to the end of the collection.
            </summary><param name="value">The object to be added to the end of the collection. </param><returns>The collection index at which the object has been added.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.AstNodeListWrapper.AddRange(ActiproSoftware.SyntaxEditor.IAstNode[])"><summary>
            Adds an array of objects to the end of the collection.
            </summary><param name="values">The objects to be added to the end of the collection. </param></member><member name="M:ActiproSoftware.SyntaxEditor.AstNodeListWrapper.Clear"><summary>
            Removes all objects from the collection.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.AstNodeListWrapper.Contains(ActiproSoftware.SyntaxEditor.IAstNode)"><summary>
            Returns whether the specified object is in the collection.
            </summary><param name="value">The object to locate in the collection.</param><returns><c>true</c> if the object is found in the collection; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.AstNodeListWrapper.CopyTo(System.Array,System.Int32)"><summary>
            Copies the entire collection to a compatible one-dimensional <c>Array</c>, 
            starting at the specified index of the target array.
            </summary><param name="array">
            The one-dimensional <c>Array</c> that is the destination of the elements copied from the collection. 
            The <c>Array</c> must have zero-based indexing. 
            </param><param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param></member><member name="M:ActiproSoftware.SyntaxEditor.AstNodeListWrapper.GetEnumerator"><summary>
            Retrieves an <c>IEnumerator</c> object for the entire collection.
            </summary><returns>An <c>IEnumerator</c> object for the entire collection</returns><remarks>
            Enumerators are intended to be used only to read data in the collection. 
            Enumerators cannot be used to modify the underlying collection.
            <para>
            The enumerator does not have exclusive access to the collection.
            </para><para>
            When an enumerator is instantiated, it takes a snapshot of the current state of the collection. 
            If changes are made to the collection, such as adding, modifying or deleting elements, the 
            snapshot gets out of sync and the enumerator throws an <c>InvalidOperationException</c>. 
            Two enumerators instantiated from the same collection at the same time can have 
            different snapshots of the collection.
            </para></remarks></member><member name="M:ActiproSoftware.SyntaxEditor.AstNodeListWrapper.IndexOf(ActiproSoftware.SyntaxEditor.IAstNode)"><summary>
            Searches for the specified object and returns the zero-based index of the first occurrence within the entire collection.
            </summary><param name="value">The object to locate in the collection.</param><returns>
            The zero-based index of the first occurrence of the object within the entire collection, if found; otherwise, <c>-1</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.AstNodeListWrapper.Remove(ActiproSoftware.SyntaxEditor.IAstNode)"><summary>
            Removes the first occurrence of a specific object from the collection.
            </summary><param name="value">The object to remove from the collection.</param><remarks>
            The elements that follow the removed element move up to occupy the vacated spot. 
            The indexes of the elements that are moved are also updated.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.AstNodeListWrapper.ToArray"><summary>
            Copies the items of the collection to a new <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode" /> array.
            </summary><returns>An array of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode" /> items.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.AstNodeListWrapper.ToString"><summary>
            Creates and returns a string representation of the current object.
            </summary><returns>A string representation of the current object.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.AstNodeListWrapper.#ctor(ActiproSoftware.SyntaxEditor.IAstNode,System.Int32)"><summary>
            Initializes a new instance of the <c>AstNodeListWrapper</c> class. 
            </summary><param name="parentNode">The <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode" /> that contains the AST nodes to wrap.</param><param name="contextID">The <see cref="P:ActiproSoftware.SyntaxEditor.IAstNode.ContextID" /> that all AST nodes wrapped by this collection have.</param></member><member name="P:ActiproSoftware.SyntaxEditor.AstNodeListWrapper.Count"><summary>
            Gets the number of elements contained in the collection.
            </summary><value>The number of elements contained in the collection.</value></member><member name="P:ActiproSoftware.SyntaxEditor.AstNodeListWrapper.IsFixedSize"><summary>
            Gets a value indicating whether the collection has a fixed size.
            </summary><value><c>true</c> if the collection has a fixed size; otherwise, <c>false</c>.
            </value><remarks>
            A collection with a fixed size does not allow the addition or removal of elements, 
            but it allows the modification of existing elements.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.AstNodeListWrapper.IsReadOnly"><summary>
            Gets a value indicating whether the collection is read-only.
            </summary><value><c>true</c> if the collection is read-only; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.AstNodeListWrapper.IsSynchronized"><summary>
            Gets a value indicating whether access to the collection is synchronized (thread-safe).
            </summary><value><c>true</c> if the collection is synchronized (thread-safe); otherwise, <c>false</c>.
            </value><remarks>
            To guarantee the thread safety of the collection, all operations must be done through 
            the wrapper returned by the <see cref="P:ActiproSoftware.SyntaxEditor.AstNodeListWrapper.SyncRoot" /> property.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.AstNodeListWrapper.ParentNode"><summary>
            Gets the parent <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode" /> of the node list.
            </summary><value>The parent <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode" /> of the node list.</value></member><member name="P:ActiproSoftware.SyntaxEditor.AstNodeListWrapper.SyncRoot"><summary>
            Gets an <c>Object</c> that can be used to synchronize access to the collection.
            </summary><value>
            An <c>Object</c> that can be used to synchronize access to the collection.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.AstNodeListWrapper.Item(System.Int32)"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode" /> at the specified index. 
            <para>
            [C#] In C#, this property is the indexer for the <c>AstNodeBaseList</c> class. 
            </para></summary><param name="index">The index of the <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode" /> to return.</param><value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode" /> at the specified index. 
            </value></member><member name="T:ActiproSoftware.SyntaxEditor.NonMergableTokenBase"><summary>
            Represents the abstract base class for a non-mergable <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> implementation.
            </summary><remarks>
            This class implements a number of abstract <see cref="T:ActiproSoftware.SyntaxEditor.TokenBase" /> members that are not generally used with
            low-level non-mergable tokens.
            It also adds a field for storing the length of the token.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.NonMergableTokenBase.HasFlag(ActiproSoftware.SyntaxEditor.LexicalParseFlags)"><summary>
            Returns whether the parse data has the specified <see cref="T:ActiproSoftware.SyntaxEditor.LexicalParseFlags" /> flag.
            </summary><param name="flag">The <see cref="T:ActiproSoftware.SyntaxEditor.LexicalParseFlags" /> to check for.</param><returns><c>true</c> if the parse data has the specified <see cref="T:ActiproSoftware.SyntaxEditor.LexicalParseFlags" /> flag; otherwise, <c>false</c>.
            </returns><remarks>
            This property is a skeleton implementation of the abstract property (to save on memory when it is not needed)
            that simply returns <c>false</c>.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.NonMergableTokenBase.SetFlag(ActiproSoftware.SyntaxEditor.LexicalParseFlags,System.Boolean)"><summary>
            Sets or clears the specified <see cref="T:ActiproSoftware.SyntaxEditor.LexicalParseFlags" /> flag.
            </summary><param name="flag">The <see cref="T:ActiproSoftware.SyntaxEditor.LexicalParseFlags" /> to set or clear.</param><param name="setBit">Whether to set the flag; otherwise, the flag is cleared.</param><remarks>
            This method should only be called by lexical parsers.
            <para>
            This property is a skeleton implementation of the abstract method that does nothing.
            </para></remarks></member><member name="M:ActiproSoftware.SyntaxEditor.NonMergableTokenBase.#ctor(System.Int32,System.Int32)"><summary>
            Initializes a new instance of the <c>NonMergableTokenBase</c> class.
            </summary><param name="startOffset">The start offset of the token.</param><param name="length">The length of the token.</param></member><member name="P:ActiproSoftware.SyntaxEditor.NonMergableTokenBase.ContentDividerType"><summary>
            Gets or sets the type of content divider to apply to the token.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.TokenContentDividerType" /> indicating the type of content divider to apply to the token.</value><remarks>
            This property is a skeleton implementation of the abstract property (to save on memory when it is not needed)
            and doesn't acutally get/set anything.  Override the property in a token class of your own that inherits this class,
            and add a field to store the value and be used in your get/set override implementation of this property.
            <para>
            Also be sure to override <see cref="P:ActiproSoftware.SyntaxEditor.NonMergableTokenBase.ContentDividerTypeResolved" /> to return the result of this property's getter.
            </para></remarks></member><member name="P:ActiproSoftware.SyntaxEditor.NonMergableTokenBase.ContentDividerTypeResolved"><summary>
            Gets the resolved type of content divider to apply to the token.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.TokenContentDividerType" /> indicating the type of content divider to apply to the token.</value><remarks>
            This property is a skeleton implementation of the abstract property (to save on memory when it is not needed)
            that simply returns <c>TokenContentDividerType.None</c>.
            If you are implementing content dividers then it should be overriden in your own token class to return the value of the 
            <see cref="P:ActiproSoftware.SyntaxEditor.NonMergableTokenBase.ContentDividerType" /> property.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.NonMergableTokenBase.DeclaringLexicalState"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that declares pattern that matched the token.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that declares pattern that matched the token.</value><remarks>
            This property is a skeleton implementation of the abstract property (to save on memory when it is not needed)
            that simply returns <see langword="null" />.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.NonMergableTokenBase.HighlightingStyle"><summary>
            Gets the <see cref="P:ActiproSoftware.SyntaxEditor.NonMergableTokenBase.HighlightingStyle" /> to use for drawing the token, if the token is aware of it.
            </summary><value>The <see cref="P:ActiproSoftware.SyntaxEditor.NonMergableTokenBase.HighlightingStyle" /> to use for drawing the token, if the token is aware of it.</value><remarks>
            In some languages, the token may not be aware of what highlighting style is used to draw it.
            In those cases, only the language itself knows what highlighting style to use for the token.
            <para>
            This property is a skeleton implementation of the abstract property (to save on memory when it is not needed)
            that simply returns <see langword="null" />.
            </para></remarks></member><member name="P:ActiproSoftware.SyntaxEditor.NonMergableTokenBase.Length"><summary>
            Gets or sets the absolute length of the token.
            </summary><value>The absolute length of the token.</value><remarks>
            The setter for this property is for internal use only.  Altering its value will corrupt the <see cref="T:ActiproSoftware.SyntaxEditor.Document" /><see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> collection.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.NonMergableTokenBase.LexicalScope"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalScope" />, if any, that defines the token.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalScope" />, if any, that defines the token.</value><remarks>
            If this value is <see langword="null" />, the token was not defined by a lexical scope.
            <para>
            This property is a skeleton implementation of the abstract property (to save on memory when it is not needed)
            that simply returns <see langword="null" />.
            </para></remarks></member><member name="P:ActiproSoftware.SyntaxEditor.NonMergableTokenBase.LexicalState"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that contains the token.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that contains the token.</value><remarks>
            This property is a skeleton implementation of the abstract property (to save on memory when it is not needed)
            that simply returns <see langword="null" />.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.NonMergableTokenBase.NestingDepth"><summary>
            Gets the nesting depth of the token.
            </summary><value>The nesting depth of the token.</value><remarks>
            This property is a skeleton implementation of the abstract property (to save on memory when it is not needed)
            that simply returns <c>0</c>.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.NonMergableTokenBase.ParentToken"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that starts the current state scope specified by the <see cref="P:ActiproSoftware.SyntaxEditor.NonMergableTokenBase.LexicalState" /> property.
            </summary><value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that starts the current state scope specified by the <see cref="P:ActiproSoftware.SyntaxEditor.NonMergableTokenBase.LexicalState" /> property.
            </value><remarks>
            This value may be <see langword="null" /> if the state in the <see cref="P:ActiproSoftware.SyntaxEditor.NonMergableTokenBase.LexicalState" /> property is the root state
            in the document.
            <para>
            This property is a skeleton implementation of the abstract property (to save on memory when it is not needed)
            that simply returns <see langword="null" />.
            </para></remarks></member><member name="T:ActiproSoftware.SyntaxEditor.SemanticParseEventArgs"><summary>
            Provides data for an event related to a semantic parse operation.
            </summary><seealso cref="T:ActiproSoftware.SyntaxEditor.SemanticParseEventHandler" /></member><member name="M:ActiproSoftware.SyntaxEditor.SemanticParseEventArgs.#ctor(ActiproSoftware.SyntaxEditor.SemanticParserServiceRequest)"><summary>
            Initializes a new instance of the <c>SemanticParseEventArgs</c> class. 
            </summary><param name="request">The <see cref="T:ActiproSoftware.SyntaxEditor.SemanticParserServiceRequest" /> that is related to this event.</param></member><member name="P:ActiproSoftware.SyntaxEditor.SemanticParseEventArgs.Request"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.SemanticParserServiceRequest" /> that is related to this event.
            </summary><value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.SemanticParserServiceRequest" /> that is related to this event.
            </value></member><member name="T:ActiproSoftware.SyntaxEditor.SemanticParseEventHandler"><summary>
            Represents the method that will handle the events related to a semantic parse operation.
            </summary><param name="sender">Sender of the event.</param><param name="e">A <see cref="T:ActiproSoftware.SyntaxEditor.SemanticParseEventArgs" /> containing event data.</param><remarks>
            When you create a <c>SemanticParseEventHandler</c> delegate, you identify the method that will handle the event. 
            To associate the event with your event handler, add an instance of the delegate to the event. 
            The event handler is called whenever the event occurs, unless you remove the delegate.
            </remarks><seealso cref="T:ActiproSoftware.SyntaxEditor.SemanticParseEventArgs" /></member><member name="T:ActiproSoftware.SyntaxEditor.SemanticParseFlags"><summary>
            Specifies flags for a semantic parsing operation.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.SemanticParseFlags.None"><summary>
            There are no flags set.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.SemanticParseFlags.ProgrammaticTextReplacement"><summary>
            The semantic parse is for a programmatic text replacement.
            </summary></member><member name="T:ActiproSoftware.SyntaxEditor.IAstNode"><summary>
            Provides the base requirements for an AST node.
            Any object implementing this interface may be used with SyntaxEditor's AST features.
            </summary><remarks>
            Each AST node has a single parent and optional children.
            The nodes may be navigated by parent to child or child to parent.
            When a node is created, it initially has no parent node.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.IAstNode.Contains(System.Int32)"><summary>
            Returns whether the AST node contains the specified offset.
            </summary><param name="offset">The offset to examine.</param><returns><c>true</c> if the AST node contains the specified offset; otherwise, <c>false</c>.
            </returns><remarks>
            This method returns <c>false</c> if the offset falls on the <see cref="P:ActiproSoftware.SyntaxEditor.IAstNode.EndOffset" /> offset
            since this method indicates if the offset is encompassed by the AST node.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.IAstNode.FindAncestor(System.Type)"><summary>
            Loops up the parent chain to locate an ancestor of the specified <c>Type</c>.
            </summary><param name="type">The <c>Type</c> of ancestor to be located.</param><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode" /> ancestor that matches the <c>Type</c>.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.IAstNode.FindDescendant(System.Type,System.Int32)"><summary>
            Recursively searches through the child nodes for the lowest level node that contains the specified offset and is of the specified <c>Type</c>.
            </summary><param name="type">The <c>Type</c> of descendant to be located.</param><param name="offset">The offset to check.</param><returns>The descendant <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode" /> that contains the specified offset and matches the <c>Type</c>, if any.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.IAstNode.FindNode(System.Int32)"><summary>
            Searches through the child nodes for a node that contains the specified offset.
            </summary><param name="offset">The offset to check.</param><returns>The child <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode" /> that contains the specified offset, if any.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.IAstNode.FindNodeRecursive(System.Int32)"><summary>
            Recursively searches through the child nodes for a node that contains the specified offset.
            </summary><param name="offset">The offset to check.</param><returns>The child <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode" /> that contains the specified offset, if any.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.IAstNode.IntersectsWith(System.Int32)"><summary>
            Returns whether the AST node intersects with the specified offset.
            </summary><param name="offset">The offset to examine.</param><returns><c>true</c> if the AST node intersects with the specified offset; otherwise, <c>false</c>.
            </returns><remarks>
            This method returns whether the specified offset borders on or lies within the AST node.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.IAstNode.ToStringTree"><summary>
            Converts the object to a <c>String</c> that displays the hierarchy tree of the AST node and its child nodes.
            </summary><returns>
            A string whose value represents this object.
            </returns></member><member name="P:ActiproSoftware.SyntaxEditor.IAstNode.ChildNodeCount"><summary>
            Gets the number of child AST nodes of this AST node.
            </summary><value>The number of child AST nodes of this AST node.</value><remarks>
            This property will return <c>0</c> if the <see cref="P:ActiproSoftware.SyntaxEditor.IAstNode.ChildNodes" /> has not been created.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.IAstNode.ChildNodes"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.AstNodeList" /> containing the child AST nodes of this AST node.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.AstNodeList" /> containing the child AST nodes of this AST node.</value></member><member name="P:ActiproSoftware.SyntaxEditor.IAstNode.ContextID"><summary>
            Gets or sets a context value identifying the context of the AST node within its parent node.
            </summary><value>A context value identifying the context of the AST node within its parent node.</value><remarks>
            The context ID value is typically defined on the parent AST node as a constant.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.IAstNode.DisplayText"><summary>
            Gets text representing the node that can be used for display, such as in a document outline.
            </summary><value>Text representing the node that can be used for display, such as in a document outline.</value></member><member name="P:ActiproSoftware.SyntaxEditor.IAstNode.EndOffset"><summary>
            Gets or sets the end character offset of the original source code that generated the AST node.
            </summary><value>The end character offset of the original source code that generated the AST node.</value><remarks>
            This value may be <c>-1</c> if there is no source code information for the end character offset.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.IAstNode.HasEndOffset"><summary>
            Gets whether the <see cref="P:ActiproSoftware.SyntaxEditor.IAstNode.EndOffset" /> has a value assigned to it.
            </summary><value><c>true</c> if the <see cref="P:ActiproSoftware.SyntaxEditor.IAstNode.EndOffset" /> has a value assigned to it; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.IAstNode.HasStartOffset"><summary>
            Gets whether the <see cref="P:ActiproSoftware.SyntaxEditor.IAstNode.StartOffset" /> has a value assigned to it.
            </summary><value><c>true</c> if the <see cref="P:ActiproSoftware.SyntaxEditor.IAstNode.StartOffset" /> has a value assigned to it; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.IAstNode.ImageIndex"><summary>
            Gets the image index that is applicable for displaying this node in a user interface control.
            </summary><value>The image index that is applicable for displaying this node in a user interface control.</value></member><member name="P:ActiproSoftware.SyntaxEditor.IAstNode.IsLanguageRoot"><summary>
            Gets whether the AST node is a language root node.
            </summary><value><c>true</c> if the AST node is a language root node; otherwise, <c>false</c>.
            </value><remarks>
            When in a scenario where AST node trees from multiple languages have been merged together,
            it is useful to identify where child language AST node trees begin within their parents.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.IAstNode.Key"><summary>
            Gets the string-based key that uniquely identifies the AST node.
            </summary><value>The string-based key that uniquely identifies the AST node.</value><remarks>
            The default implementation of this property returns the full type name of the AST node.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.IAstNode.Length"><summary>
            Gets the character length of the original source code that generated the AST node.
            </summary><value>The character length of the original source code that generated the AST node.</value></member><member name="P:ActiproSoftware.SyntaxEditor.IAstNode.NavigationOffset"><summary>
            Gets the character offset at which to navigate when the editor's caret should jump to the text representation of the AST node.
            </summary><value>The character offset at which to navigate when the editor's caret should jump to the text representation of the AST node.</value><remarks>
            This property defaults to the same value as the <see cref="P:ActiproSoftware.SyntaxEditor.IAstNode.StartOffset" /> property.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.IAstNode.ParentNode"><summary>
            Gets or sets this node's parent <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode" />, or <see langword="null" /> if this node is the root node.
            </summary><value>This node's parent <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode" />, or <see langword="null" /> if this node is the root node.</value></member><member name="P:ActiproSoftware.SyntaxEditor.IAstNode.RootNode"><summary>
            Gets the root <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode" /> in the node tree.
            </summary><value>The root <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode" /> in the node tree.</value></member><member name="P:ActiproSoftware.SyntaxEditor.IAstNode.StartOffset"><summary>
            Gets or sets the start character offset of the original source code that generated the AST node.
            </summary><value>The start character offset of the original source code that generated the AST node.</value><remarks>
            This value may be <c>-1</c> if there is no source code information for the start character offset.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.IAstNode.TextRange"><summary>
            Gets or sets a <see cref="P:ActiproSoftware.SyntaxEditor.IAstNode.TextRange" /> that contains the text range of the AST node.
            </summary><value>A <see cref="P:ActiproSoftware.SyntaxEditor.IAstNode.TextRange" /> that contains the text range of the AST node.</value><remarks>
            This property should only be used if both <see cref="P:ActiproSoftware.SyntaxEditor.IAstNode.HasStartOffset" /> and <see cref="P:ActiproSoftware.SyntaxEditor.IAstNode.HasEndOffset" /> are <c>true</c>.
            </remarks></member><member name="T:ActiproSoftware.SyntaxEditor.AstNodeBase"><summary>
            Provides the abstract base class for an AST node.
            </summary><remarks>
            Each AST node has a single parent and optional children.
            The nodes may be navigated by parent to child or child to parent.
            When a node is created, it initially has no parent node.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.AstNodeBase.Contains(System.Int32)"><summary>
            Returns whether the AST node contains the specified offset.
            </summary><param name="offset">The offset to examine.</param><returns><c>true</c> if the AST node contains the specified offset; otherwise, <c>false</c>.
            </returns><remarks>
            This method returns <c>false</c> if the offset falls on the <see cref="P:ActiproSoftware.SyntaxEditor.AstNodeBase.EndOffset" /> offset
            since this method indicates if the offset is encompassed by the AST node.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.AstNodeBase.FindAncestor(System.Type)"><summary>
            Loops up the parent chain to locate an ancestor of the specified <c>Type</c>.
            </summary><param name="type">The <c>Type</c> of ancestor to be located.</param><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode" /> ancestor that matches the <c>Type</c>.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.AstNodeBase.FindDescendant(System.Type,System.Int32)"><summary>
            Recursively searches through the child nodes for the lowest level node that contains the specified offset and is of the specified <c>Type</c>.
            </summary><param name="type">The <c>Type</c> of descendant to be located.</param><param name="offset">The offset to check.</param><returns>The descendant <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode" /> that contains the specified offset and matches the <c>Type</c>, if any.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.AstNodeBase.GetChildNode(System.Int32)"><summary>
            Gets the first <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode" /> in the <see cref="P:ActiproSoftware.SyntaxEditor.AstNodeBase.ChildNodes" /> collection that has the specified <see cref="P:ActiproSoftware.SyntaxEditor.AstNodeBase.ContextID" />.
            </summary><param name="contextID">The <see cref="P:ActiproSoftware.SyntaxEditor.IAstNode.ContextID" /> for which to search.</param><returns>The first <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode" /> in the <see cref="P:ActiproSoftware.SyntaxEditor.AstNodeBase.ChildNodes" /> collection that has the specified <see cref="P:ActiproSoftware.SyntaxEditor.AstNodeBase.ContextID" />.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.AstNodeBase.FindNode(System.Int32)"><summary>
            Searches through the child nodes for a node that contains the specified offset.
            </summary><param name="offset">The offset to check.</param><returns>The child <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode" /> that contains the specified offset, if any.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.AstNodeBase.FindNodeRecursive(System.Int32)"><summary>
            Recursively searches through the child nodes for a node that contains the specified offset.
            </summary><param name="offset">The offset to check.</param><returns>The child <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode" /> that contains the specified offset, if any.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.AstNodeBase.IntersectsWith(System.Int32)"><summary>
            Returns whether the AST node intersects with the specified offset.
            </summary><param name="offset">The offset to examine.</param><returns><c>true</c> if the AST node intersects with the specified offset; otherwise, <c>false</c>.
            </returns><remarks>
            This method returns whether the specified offset borders on or lies within the AST node.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.AstNodeBase.ToString"><summary>
            Converts the object to a <c>String</c>.
            </summary><returns>
            A string whose value represents this object.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.AstNodeBase.ToStringTree"><summary>
            Converts the object to a <c>String</c> that displays the hierarchy tree of the AST node and its child nodes.
            </summary><returns>
            A string whose value represents this object.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.AstNodeBase.#ctor"><summary>
            Initializes a new instance of the <c>AstNodeBase</c> class. 
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.AstNodeBase.#ctor(ActiproSoftware.SyntaxEditor.TextRange)"><summary>
            Initializes a new instance of the <c>AstNodeBase</c> class. 
            </summary><param name="textRange">The <see cref="P:ActiproSoftware.SyntaxEditor.AstNodeBase.TextRange" /> of the AST node.</param></member><member name="P:ActiproSoftware.SyntaxEditor.AstNodeBase.ChildNodeCount"><summary>
            Gets the number of child AST nodes of this AST node.
            </summary><value>The number of child AST nodes of this AST node.</value><remarks>
            This property will return <c>0</c> if the <see cref="P:ActiproSoftware.SyntaxEditor.AstNodeBase.ChildNodes" /> has not been created.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.AstNodeBase.ChildNodes"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.AstNodeList" /> containing the child AST nodes of this AST node.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.AstNodeList" /> containing the child AST nodes of this AST node.</value></member><member name="P:ActiproSoftware.SyntaxEditor.AstNodeBase.ContextID"><summary>
            Gets or sets a context value identifying the context of the AST node within its parent node.
            </summary><value>A context value identifying the context of the AST node within its parent node.</value><remarks>
            The context ID value is typically defined on the parent AST node as a constant.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.AstNodeBase.DisplayText"><summary>
            Gets text representing the node that can be used for display, such as in a document outline.
            </summary><value>Text representing the node that can be used for display, such as in a document outline.</value></member><member name="P:ActiproSoftware.SyntaxEditor.AstNodeBase.EndOffset"><summary>
            Gets or sets the end character offset of the original source code that generated the AST node.
            </summary><value>The end character offset of the original source code that generated the AST node.</value><remarks>
            This value may be <c>-1</c> if there is no source code information for the end character offset.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.AstNodeBase.HasEndOffset"><summary>
            Gets whether the <see cref="P:ActiproSoftware.SyntaxEditor.AstNodeBase.EndOffset" /> has a value assigned to it.
            </summary><value><c>true</c> if the <see cref="P:ActiproSoftware.SyntaxEditor.AstNodeBase.EndOffset" /> has a value assigned to it; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.AstNodeBase.HasStartOffset"><summary>
            Gets whether the <see cref="P:ActiproSoftware.SyntaxEditor.AstNodeBase.StartOffset" /> has a value assigned to it.
            </summary><value><c>true</c> if the <see cref="P:ActiproSoftware.SyntaxEditor.AstNodeBase.StartOffset" /> has a value assigned to it; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.AstNodeBase.ImageIndex"><summary>
            Gets the image index that is applicable for displaying this node in a user interface control.
            </summary><value>The image index that is applicable for displaying this node in a user interface control.</value></member><member name="P:ActiproSoftware.SyntaxEditor.AstNodeBase.IsLanguageRoot"><summary>
            Gets whether the AST node is a language root node.
            </summary><value><c>true</c> if the AST node is a language root node; otherwise, <c>false</c>.
            </value><remarks>
            When in a scenario where AST node trees from multiple languages have been merged together,
            it is useful to identify where child language AST node trees begin within their parents.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.AstNodeBase.Key"><summary>
            Gets the string-based key that uniquely identifies the AST node.
            </summary><value>The string-based key that uniquely identifies the AST node.</value><remarks>
            The default implementation of this property returns the full type name of the AST node.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.AstNodeBase.LanguageTransitions"><summary>
            Gets the collection of language transition nodes.
            </summary><value>The collection of language transition nodes.</value></member><member name="P:ActiproSoftware.SyntaxEditor.AstNodeBase.Length"><summary>
            Gets the character length of the original source code that generated the AST node.
            </summary><value>The character length of the original source code that generated the AST node.</value></member><member name="P:ActiproSoftware.SyntaxEditor.AstNodeBase.NavigationOffset"><summary>
            Gets the character offset at which to navigate when the editor's caret should jump to the text representation of the AST node.
            </summary><value>The character offset at which to navigate when the editor's caret should jump to the text representation of the AST node.</value><remarks>
            This property defaults to the same value as the <see cref="P:ActiproSoftware.SyntaxEditor.AstNodeBase.StartOffset" /> property.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.AstNodeBase.ParentNode"><summary>
            Gets or sets this node's parent <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode" />, or <see langword="null" /> if this node is the root node.
            </summary><value>This node's parent <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode" />, or <see langword="null" /> if this node is the root node.</value></member><member name="P:ActiproSoftware.SyntaxEditor.AstNodeBase.RootNode"><summary>
            Gets the root <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode" /> in the node tree.
            </summary><value>The root <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode" /> in the node tree.</value></member><member name="P:ActiproSoftware.SyntaxEditor.AstNodeBase.StartOffset"><summary>
            Gets or sets the start character offset of the original source code that generated the AST node.
            </summary><value>The start character offset of the original source code that generated the AST node.</value><remarks>
            This value may be <c>-1</c> if there is no source code information for the start character offset.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.AstNodeBase.TextRange"><summary>
            Gets or sets a <see cref="P:ActiproSoftware.SyntaxEditor.AstNodeBase.TextRange" /> that contains the text range of the AST node.
            </summary><value>A <see cref="P:ActiproSoftware.SyntaxEditor.AstNodeBase.TextRange" /> that contains the text range of the AST node.</value><remarks>
            This property should only be used if both <see cref="P:ActiproSoftware.SyntaxEditor.AstNodeBase.HasStartOffset" /> and <see cref="P:ActiproSoftware.SyntaxEditor.AstNodeBase.HasEndOffset" /> are <c>true</c>.
            </remarks></member><member name="F:ActiproSoftware.SyntaxEditor.AstNodeBase.UnknownContextID"><summary>
            Gets the context ID for an unknown AST node.
            </summary><value>The context ID for an unknown AST node.</value></member><member name="F:ActiproSoftware.SyntaxEditor.AstNodeBase.LanguageTransitionContextID"><summary>
            Gets the context ID for a language transition AST node.
            </summary><value>The context ID for a language transition AST node.</value></member><member name="F:ActiproSoftware.SyntaxEditor.AstNodeBase.ContextIDBase"><summary>
            Gets the minimum context ID that should be used in your code for AST nodes inheriting this class.
            </summary><value>The minimum context ID that should be used in your code for AST nodes inheriting this class.</value><remarks>
            Base all your context ID constants off of this value.
            </remarks></member><member name="T:ActiproSoftware.SyntaxEditor.IOutliningNodeParseData"><summary>
            Provides the base requirements for an object that provides parse data for an <see cref="T:ActiproSoftware.SyntaxEditor.OutliningNode" />.
            </summary></member><member name="P:ActiproSoftware.SyntaxEditor.IOutliningNodeParseData.IndicatorVisible"><summary>
            Gets whether the outlining indicator should be visible for the node.
            </summary><value><c>true</c> if the outlining indicator should be visible for the node; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.IOutliningNodeParseData.IsLanguageTransition"><summary>
            Gets whether the outlining node is for a language transition.
            </summary><value><c>true</c> if the outlining node is for a language transition; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.IOutliningNodeParseData.Key"><summary>
            Gets the key assigned to the outlining node.
            </summary><value>The key assigned to the outlining node.</value></member><member name="T:ActiproSoftware.SyntaxEditor.ICollapsibleNode"><summary>
            Provides the base requirements of an <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode" /> that may be collapsible.
            </summary></member><member name="P:ActiproSoftware.SyntaxEditor.ICollapsibleNode.EndOffset"><summary>
            Gets the offset at which the outlining node ends.
            </summary><value>The offset at which the outlining node ends.</value></member><member name="P:ActiproSoftware.SyntaxEditor.ICollapsibleNode.IsCollapsible"><summary>
            Gets whether the node is collapsible.
            </summary><value><c>true</c> if the node is collapsible; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.ICollapsibleNode.StartOffset"><summary>
            Gets the offset at which the outlining node starts.
            </summary><value>The offset at which the outlining node starts.</value></member><member name="T:ActiproSoftware.SyntaxEditor.LanguageTransitionAstNode"><summary>
            Provides the base class for an AST node.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.LanguageTransitionAstNode.#ctor(ActiproSoftware.SyntaxEditor.TextRange)"><summary>
            Initializes a new instance of the <c>AstNodeBase</c> class. 
            </summary><param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> of the AST node.</param></member><member name="P:ActiproSoftware.SyntaxEditor.LanguageTransitionAstNode.ContextID"><summary>
            Gets or sets a context value identifying the context of the AST node within its parent node.
            </summary><value>A context value identifying the context of the AST node within its parent node.</value><remarks>
            The context ID value is typically defined on the parent AST node as a constant.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.LanguageTransitionAstNode.DisplayText"><summary>
            Gets text representing the node that can be used for display, such as in a document outline.
            </summary><value>Text representing the node that can be used for display, such as in a document outline.</value></member><member name="T:ActiproSoftware.SyntaxEditor.ICompilationUnit"><summary>
            Provides the base requirements for a AST compilation unit node for a language.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.ICompilationUnit.ShouldVisitChildNodesForOutlining(ActiproSoftware.SyntaxEditor.IAstNode)"><summary>
            Returns whether an <see cref="T:ActiproSoftware.SyntaxEditor.CollapsibleNodeOutliningParser" /> should visit the child nodes of the specified <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode" />
            to look for collapsible nodes.
            </summary><param name="node">The <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode" /> to examine.</param></member><member name="M:ActiproSoftware.SyntaxEditor.ICompilationUnit.UpdateOutliningParser(ActiproSoftware.SyntaxEditor.CollapsibleNodeOutliningParser)"><summary>
            Adds any extra <see cref="T:ActiproSoftware.SyntaxEditor.CollapsibleNodeOutliningParserData" /> nodes to the <see cref="T:ActiproSoftware.SyntaxEditor.CollapsibleNodeOutliningParser" />,
            such as for comments that should be marked as collapsible.
            </summary><param name="outliningParser">The <see cref="T:ActiproSoftware.SyntaxEditor.CollapsibleNodeOutliningParser" /> to update.</param><returns><c>true</c> if the child nodes should be visited; otherwise, <c>false</c>.
            </returns></member><member name="P:ActiproSoftware.SyntaxEditor.ICompilationUnit.HasErrors"><summary>
            Gets whether the compilation unit contains errors.
            </summary><value><c>true</c> if the compilation unit contains errors.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.ICompilationUnit.HasLanguageTransitions"><summary>
            Gets or sets whether the compilation unit contains any language transitions.
            </summary><value><c>true</c> if the compilation unit contains any language transitions; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.ICompilationUnit.SourceKey"><summary>
            Gets or sets the string-based key that identifies the source of the code, which typically is a filename.
            </summary><value>The string-based key that identifies the source of the code, which typically is a filename.</value></member><member name="P:ActiproSoftware.SyntaxEditor.ICompilationUnit.SyntaxErrors"><summary>
            Gets the collection of syntax errors that were found in the compilation unit.
            </summary><value>The collection of syntax errors that were found in the compilation unit.</value></member><member name="T:ActiproSoftware.SyntaxEditor.LexicalScopeAndIDTokenLexicalParseData"><summary>
            Provides <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> lexical parse data based on a token ID and an <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalScope" />.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.LexicalScopeAndIDTokenLexicalParseData.Equals(System.Object)"><summary>
            Determines whether the specified <c>Object</c> is equal to the current <c>Object</c>. 
            </summary><param name="obj">The <c>Object</c> to compare to the current <c>Object</c>.</param><returns><c>true</c> if the specified <c>Object</c> is equal to the current <c>Object</c>; 
            otherwise, <c>false</c>. 
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.LexicalScopeAndIDTokenLexicalParseData.GetHashCode"><summary>
            Returns a hash code for this object.
            </summary><returns>An integer value that specifies a hash value for this object.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.LexicalScopeAndIDTokenLexicalParseData.#ctor(ActiproSoftware.SyntaxEditor.ILexicalScope,System.Byte)"><summary>
            Initializes a new instance of the <c>LexicalScopeAndIDTokenLexicalParseData</c> class. 
            </summary><param name="lexicalScope">The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalScope" /> that contains the token.</param><param name="tokenID">The ID of the token.</param></member><member name="P:ActiproSoftware.SyntaxEditor.LexicalScopeAndIDTokenLexicalParseData.HighlightingStyle"><summary>
            Gets the <see cref="P:ActiproSoftware.SyntaxEditor.LexicalScopeAndIDTokenLexicalParseData.HighlightingStyle" /> to use for drawing the token, if the token is aware of it.
            </summary><value>The <see cref="P:ActiproSoftware.SyntaxEditor.LexicalScopeAndIDTokenLexicalParseData.HighlightingStyle" /> to use for drawing the token, if the token is aware of it.</value><remarks>
            In some languages, the token may not be aware of what highlighting style is used to draw it.
            In those cases, only the language itself knows what highlighting style to use for the token.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.LexicalScopeAndIDTokenLexicalParseData.IsContentDivider"><summary>
            Gets whether the token is a content divider.
            </summary><value><c>true</c> if the token is a content divider; otherwise <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.LexicalScopeAndIDTokenLexicalParseData.IsWhitespace"><summary>
            Gets whether the token represents whitespace.
            </summary><value><c>true</c> if the token represents whitespace; otherwise <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.LexicalScopeAndIDTokenLexicalParseData.Language"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> that contains the token.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> that contains the token.</value></member><member name="P:ActiproSoftware.SyntaxEditor.LexicalScopeAndIDTokenLexicalParseData.LexicalScope"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalScope" />, if any, that defines the token.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalScope" />, if any, that defines the token.</value><remarks>
            If this value is <see langword="null" />, the token was not defined by a lexical scope.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.LexicalScopeAndIDTokenLexicalParseData.LexicalState"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that contains the token.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that contains the token.</value></member><member name="P:ActiproSoftware.SyntaxEditor.LexicalScopeAndIDTokenLexicalParseData.TokenID"><summary>
            Gets the token ID assigned to the token.
            </summary><value>The token ID assigned to the token.</value></member><member name="P:ActiproSoftware.SyntaxEditor.LexicalScopeAndIDTokenLexicalParseData.TokenKey"><summary>
            Gets the token key assigned to the token, if it is known.
            </summary><value>The token key assigned to the token, if it is known.</value></member><member name="T:ActiproSoftware.SyntaxEditor.ISemanticParserServiceProcessor"><summary>
            Provides the base requirements for an object that is capable of being called by the <see cref="T:ActiproSoftware.SyntaxEditor.SemanticParserService" /> to process a request.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.ISemanticParserServiceProcessor.Process(ActiproSoftware.SyntaxEditor.SemanticParserServiceRequest)"><summary>
            Performs a semantic parsing operation using the data in the <see cref="T:ActiproSoftware.SyntaxEditor.SemanticParserServiceRequest" />.
            </summary><param name="request">A <see cref="T:ActiproSoftware.SyntaxEditor.SemanticParserServiceRequest" /> containing data about what to parse.</param></member><member name="P:ActiproSoftware.SyntaxEditor.ISemanticParserServiceProcessor.Key"><summary>
            Gets a string-based key that identifies the processor.
            </summary><value>A string-based key that identifies the processor.</value></member><member name="T:ActiproSoftware.SyntaxEditor.MergableLexicalParserManager"><summary>
            Represents a manager that coordinates language and state shifting for the lexical parsing of one or more mergable languages.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.MergableLexicalParserManager.GetNextToken"><summary>
            Gets the next <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> by performing lexical parsing on the <see cref="P:ActiproSoftware.SyntaxEditor.MergableLexicalParserManager.TextBufferReader" />.
            </summary><returns>The next <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> by performing lexical parsing on the <see cref="P:ActiproSoftware.SyntaxEditor.MergableLexicalParserManager.TextBufferReader" />.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.MergableLexicalParserManager.MergeLanguageTransitionNodes(ActiproSoftware.SyntaxEditor.IAstNode)"><summary>
            Merges the child language nodes into the <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode" /> tree.
            </summary><param name="rootNode">The root <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode" />.</param><returns>The merged <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode" /> tree.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.MergableLexicalParserManager.PerformSemanticParse(ActiproSoftware.SyntaxEditor.MergableSyntaxLanguage,ActiproSoftware.SyntaxEditor.ITextBufferReader,System.String)"><summary>
            Performs a semantic parsing operation starting on the specified root <see cref="T:ActiproSoftware.SyntaxEditor.MergableSyntaxLanguage" /> by this manager.
            </summary><param name="rootLanguage">The root <see cref="T:ActiproSoftware.SyntaxEditor.MergableSyntaxLanguage" />.</param><param name="reader">The <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader" /> to use for reading text.</param><param name="sourceKey">The string-based key that identifies the sources of the code, which typically is a filename.</param><returns>The result of the semantic parsing operation.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.MergableLexicalParserManager.ProcessChildLanguage(ActiproSoftware.SyntaxEditor.IToken)"><summary>
            Iterates through all the tokens for a child language and returns the next <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> in the current language.
            </summary><param name="token">The first <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> in the child language.</param><returns>The next <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> in the current language.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.MergableLexicalParserManager.#ctor(ActiproSoftware.SyntaxEditor.ITextBufferReader,ActiproSoftware.SyntaxEditor.MergableSyntaxLanguage,System.String)"><summary>
            Initializes a new instance of the <c>MergableLexicalParserManager</c> class.
            </summary><param name="reader">The <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader" /> to use.</param><param name="rootLanguage">The root <see cref="T:ActiproSoftware.SyntaxEditor.MergableSyntaxLanguage" />.</param><param name="sourceKey">The string-based key that identifies the sources of the code, which typically is a filename.</param></member><member name="P:ActiproSoftware.SyntaxEditor.MergableLexicalParserManager.IsAtEnd"><summary>
            Gets whether the current <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader" /> is at the end of the text buffer.
            </summary><value><c>true</c> if the current <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader" /> is at the end of the text buffer; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.MergableLexicalParserManager.SourceKey"><summary>
            Gets the string-based key that identifies the sources of the code, which typically is a filename.
            </summary><value>The string-based key that identifies the sources of the code, which typically is a filename.</value></member><member name="P:ActiproSoftware.SyntaxEditor.MergableLexicalParserManager.TextBufferReader"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader" /> to use for reading.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader" /> to use for reading.</value></member><member name="T:ActiproSoftware.SyntaxEditor.LexicalStateAndIDTokenLexicalParseData"><summary>
            Provides <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> lexical parse data based on a token ID and on an <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" />.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.LexicalStateAndIDTokenLexicalParseData.Equals(System.Object)"><summary>
            Determines whether the specified <c>Object</c> is equal to the current <c>Object</c>. 
            </summary><param name="obj">The <c>Object</c> to compare to the current <c>Object</c>.</param><returns><c>true</c> if the specified <c>Object</c> is equal to the current <c>Object</c>; 
            otherwise, <c>false</c>. 
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.LexicalStateAndIDTokenLexicalParseData.GetHashCode"><summary>
            Returns a hash code for this object.
            </summary><returns>An integer value that specifies a hash value for this object.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.LexicalStateAndIDTokenLexicalParseData.#ctor(ActiproSoftware.SyntaxEditor.ILexicalState,System.Byte)"><summary>
            Initializes a new instance of the <c>LexicalStateAndIDTokenLexicalParseData</c> class. 
            </summary><param name="lexicalState">The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that contains the token.</param><param name="tokenID">The ID of the token.</param></member><member name="P:ActiproSoftware.SyntaxEditor.LexicalStateAndIDTokenLexicalParseData.HighlightingStyle"><summary>
            Gets the <see cref="P:ActiproSoftware.SyntaxEditor.LexicalStateAndIDTokenLexicalParseData.HighlightingStyle" /> to use for drawing the token, if the token is aware of it.
            </summary><value>The <see cref="P:ActiproSoftware.SyntaxEditor.LexicalStateAndIDTokenLexicalParseData.HighlightingStyle" /> to use for drawing the token, if the token is aware of it.</value><remarks>
            In some languages, the token may not be aware of what highlighting style is used to draw it.
            In those cases, only the language itself knows what highlighting style to use for the token.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.LexicalStateAndIDTokenLexicalParseData.IsContentDivider"><summary>
            Gets whether the token is a content divider.
            </summary><value><c>true</c> if the token is a content divider; otherwise <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.LexicalStateAndIDTokenLexicalParseData.IsWhitespace"><summary>
            Gets whether the token represents whitespace.
            </summary><value><c>true</c> if the token represents whitespace; otherwise <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.LexicalStateAndIDTokenLexicalParseData.Language"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> that contains the token.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> that contains the token.</value></member><member name="P:ActiproSoftware.SyntaxEditor.LexicalStateAndIDTokenLexicalParseData.LexicalScope"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalScope" />, if any, that defines the token.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalScope" />, if any, that defines the token.</value><remarks>
            If this value is <see langword="null" />, the token was not defined by a lexical scope.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.LexicalStateAndIDTokenLexicalParseData.LexicalState"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that contains the token.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that contains the token.</value></member><member name="P:ActiproSoftware.SyntaxEditor.LexicalStateAndIDTokenLexicalParseData.TokenID"><summary>
            Gets the token ID assigned to the token.
            </summary><value>The token ID assigned to the token.</value></member><member name="P:ActiproSoftware.SyntaxEditor.LexicalStateAndIDTokenLexicalParseData.TokenKey"><summary>
            Gets the token key assigned to the token, if it is known.
            </summary><value>The token key assigned to the token, if it is known.</value></member><member name="T:ActiproSoftware.SyntaxEditor.ILexicalScope"><summary>
            Provides the base requirements for a lexical scope.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.ILexicalScope.IsScopeEnd(ActiproSoftware.SyntaxEditor.ITextBufferReader,ActiproSoftware.SyntaxEditor.ITokenLexicalParseData@)"><summary>
            Performs a lexical parse to determine if the current text in the <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader" /> ends the lexical scope.
            </summary><param name="reader">An <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader" /> that is reading a text source.</param><param name="lexicalParseData">Returns the <see cref="T:ActiproSoftware.SyntaxEditor.ITokenLexicalParseData" /> that was parsed, if any.</param><returns>A <see cref="T:ActiproSoftware.SyntaxEditor.MatchType" /> indicating the type of match that was made.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.ILexicalScope.IsScopeStart(ActiproSoftware.SyntaxEditor.ITextBufferReader,ActiproSoftware.SyntaxEditor.ITokenLexicalParseData@)"><summary>
            Performs a lexical parse to determine if the current text in the <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader" /> starts the lexical scope.
            </summary><param name="reader">An <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader" /> that is reading a text source.</param><param name="lexicalParseData">Returns the <see cref="T:ActiproSoftware.SyntaxEditor.ITokenLexicalParseData" /> that was parsed, if any.</param><returns>A <see cref="T:ActiproSoftware.SyntaxEditor.MatchType" /> indicating the type of match that was made.</returns></member><member name="P:ActiproSoftware.SyntaxEditor.ILexicalScope.AncestorEndScopeCheckEnabled"><summary>
            Gets whether ancestor end scope checking is enabled while parsing inside the scope.
            </summary><value><c>true</c> if ancestor end scope checking is enabled; otherwise, <c>false</c>.
            </value><remarks>
            When enabled, this allows ancestor scopes to be examined to see a pattern matches their end scope.
            In the event a match is found, this scope exits as well as the ancestor's scope.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.ILexicalScope.LexicalState"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that defines the lexical scope.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that defines the lexical scope.</value></member><member name="P:ActiproSoftware.SyntaxEditor.ILexicalScope.LexicalStateTransition"><summary>
            Gets or sets the <see cref="T:ActiproSoftware.SyntaxEditor.LexicalScopeLexicalStateTransition" /> that this scope performs after ending.
            </summary><value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.LexicalScopeLexicalStateTransition" /> that this scope performs after ending.  
            If the value is <see langword="null" />, then no state transition is performed when the scope ends.
            </value><remarks>The state transition may be made to a child language.</remarks></member><member name="P:ActiproSoftware.SyntaxEditor.ILexicalScope.Tag"><summary>
            Gets or sets the object that contains user-defined data about the object.
            </summary><value>
            An <see cref="T:System.Object" /> that contains user-defined data about the control. The default is <see langword="null" />.
            </value><remarks>
            Any type derived from the <see cref="T:System.Object" /> class can be assigned to this property. 
            </remarks></member><member name="T:ActiproSoftware.SyntaxEditor.LexicalScopeBase"><summary>
            Provides the abstract base class for a lexical scope.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.LexicalScopeBase.IsScopeEnd(ActiproSoftware.SyntaxEditor.ITextBufferReader,ActiproSoftware.SyntaxEditor.ITokenLexicalParseData@)"><summary>
            Performs a lexical parse to determine if the current text in the <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader" /> ends the lexical scope.
            </summary><param name="reader">An <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader" /> that is reading a text source.</param><param name="lexicalParseData">Returns the <see cref="T:ActiproSoftware.SyntaxEditor.ITokenLexicalParseData" /> that was parsed, if any.</param><returns>A <see cref="T:ActiproSoftware.SyntaxEditor.MatchType" /> indicating the type of match that was made.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.LexicalScopeBase.IsScopeStart(ActiproSoftware.SyntaxEditor.ITextBufferReader,ActiproSoftware.SyntaxEditor.ITokenLexicalParseData@)"><summary>
            Performs a lexical parse to determine if the current text in the <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader" /> starts the lexical scope.
            </summary><param name="reader">An <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader" /> that is reading a text source.</param><param name="lexicalParseData">Returns the <see cref="T:ActiproSoftware.SyntaxEditor.ITokenLexicalParseData" /> that was parsed, if any.</param><returns>A <see cref="T:ActiproSoftware.SyntaxEditor.MatchType" /> indicating the type of match that was made.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.LexicalScopeBase.OnParentChanged"><summary>
            Invoked when logical parent is changed. 
            This is invoked after the parent has changed, and the purpose is to allow elements to perform actions based on the changed parent.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.LexicalScopeBase.#ctor"><summary>
            Initializes a new instance of the <c>LexicalScopeBase</c> class.
            </summary></member><member name="P:ActiproSoftware.SyntaxEditor.LexicalScopeBase.AncestorEndScopeCheckEnabled"><summary>
            Gets or sets whether ancestor end scope checking is enabled while parsing inside the scope.
            </summary><value><c>true</c> if ancestor end scope checking is enabled; otherwise, <c>false</c>.
            </value><remarks>
            When enabled, this allows ancestor scopes to be examined to see a pattern matches their end scope.
            In the event a match is found, this scope exits as well as the ancestor's scope.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.LexicalScopeBase.LexicalState"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that defines the lexical scope.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that defines the lexical scope.</value></member><member name="P:ActiproSoftware.SyntaxEditor.LexicalScopeBase.LexicalStateTransition"><summary>
            Gets or sets the <see cref="T:ActiproSoftware.SyntaxEditor.LexicalScopeLexicalStateTransition" /> that this scope performs after ending.
            </summary><value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.LexicalScopeLexicalStateTransition" /> that this scope performs after ending.  
            If the value is <see langword="null" />, then no state transition is performed when the scope ends.
            </value><remarks>The state transition may be made to a child language.</remarks></member><member name="P:ActiproSoftware.SyntaxEditor.LexicalScopeBase.Tag"><summary>
            Gets or sets the object that contains user-defined data about the object.
            </summary><value>
            An <see cref="T:System.Object" /> that contains user-defined data about the control. The default is <see langword="null" />.
            </value><remarks>
            Any type derived from the <see cref="T:System.Object" /> class can be assigned to this property. 
            </remarks></member><member name="T:ActiproSoftware.SyntaxEditor.ProgrammaticLexicalScope"><summary>
            Provides a lexical scope implementation that uses two delegates to perform the <see cref="M:ActiproSoftware.SyntaxEditor.ProgrammaticLexicalScope.IsScopeStart(ActiproSoftware.SyntaxEditor.ITextBufferReader,ActiproSoftware.SyntaxEditor.ITokenLexicalParseData@)" /> and <see cref="M:ActiproSoftware.SyntaxEditor.ProgrammaticLexicalScope.IsScopeEnd(ActiproSoftware.SyntaxEditor.ITextBufferReader,ActiproSoftware.SyntaxEditor.ITokenLexicalParseData@)" /> checks.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.ProgrammaticLexicalScope.IsScopeEnd(ActiproSoftware.SyntaxEditor.ITextBufferReader,ActiproSoftware.SyntaxEditor.ITokenLexicalParseData@)"><summary>
            Performs a lexical parse to determine if the current text in the <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader" /> ends the lexical scope.
            </summary><param name="reader">An <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader" /> that is reading a text source.</param><param name="lexicalParseData">Returns the <see cref="T:ActiproSoftware.SyntaxEditor.ITokenLexicalParseData" /> that was parsed, if any.</param><returns>A <see cref="T:ActiproSoftware.SyntaxEditor.MatchType" /> indicating the type of match that was made.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.ProgrammaticLexicalScope.IsScopeStart(ActiproSoftware.SyntaxEditor.ITextBufferReader,ActiproSoftware.SyntaxEditor.ITokenLexicalParseData@)"><summary>
            Performs a lexical parse to determine if the current text in the <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader" /> starts the lexical scope.
            </summary><param name="reader">An <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader" /> that is reading a text source.</param><param name="lexicalParseData">Returns the <see cref="T:ActiproSoftware.SyntaxEditor.ITokenLexicalParseData" /> that was parsed, if any.</param><returns>A <see cref="T:ActiproSoftware.SyntaxEditor.MatchType" /> indicating the type of match that was made.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.ProgrammaticLexicalScope.#ctor(ActiproSoftware.SyntaxEditor.ProgrammaticLexicalScopeMatchDelegate,ActiproSoftware.SyntaxEditor.ProgrammaticLexicalScopeMatchDelegate)"><summary>
            Initializes a new instance of the <c>ProgrammaticLexicalScope</c> class.
            </summary><param name="isScopeStartDelegate">The <see cref="T:ActiproSoftware.SyntaxEditor.ProgrammaticLexicalScopeMatchDelegate" /> to use for matching the scope's start.</param><param name="isScopeEndDelegate">The <see cref="T:ActiproSoftware.SyntaxEditor.ProgrammaticLexicalScopeMatchDelegate" /> to use for matching the scope's end.</param></member><member name="T:ActiproSoftware.SyntaxEditor.ILexicalState"><summary>
            Provides the base requirements for a lexical state.
            </summary></member><member name="P:ActiproSoftware.SyntaxEditor.ILexicalState.ChildLexicalStates"><summary>
            Gets the collection of child lexical states.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.LexicalStateCollection" /> containing the child lexical states.</value></member><member name="P:ActiproSoftware.SyntaxEditor.ILexicalState.DefaultHighlightingStyle"><summary>
            Gets or sets the default <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyle" /> to use for tokens within the state.
            </summary><value>The default <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyle" /> to use for tokens within the state.</value></member><member name="P:ActiproSoftware.SyntaxEditor.ILexicalState.DefaultTokenID"><summary>
            Gets or sets the ID of the default token that this state assigns.
            </summary><value>The ID of the default token that this state assigns.</value></member><member name="P:ActiproSoftware.SyntaxEditor.ILexicalState.DefaultTokenKey"><summary>
            Gets or sets the key of the default token that this state assigns.
            </summary><value>The key of the default token that this state assigns.</value></member><member name="P:ActiproSoftware.SyntaxEditor.ILexicalState.ID"><summary>
            Gets the ID value that identifies the lexical state.
            </summary><value>The ID value that identifies the lexical state.</value></member><member name="P:ActiproSoftware.SyntaxEditor.ILexicalState.Language"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> that contains the state.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> that contains the state.</value></member><member name="P:ActiproSoftware.SyntaxEditor.ILexicalState.LexicalScopes"><summary>
            Gets the collection of lexical scopes.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.LexicalScopeCollection" /> containing the lexical scopes.</value></member><member name="P:ActiproSoftware.SyntaxEditor.ILexicalState.LexicalStateTransitionLexicalState"><summary>
            Gets or sets the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that this state transitions to after a start scope match.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that this state transitions to after a start scope match.</value><remarks>
            This provides a mechanism to automatically transition to another language when this state's start scope is matched.
            This state's end scope may be used to exit the child language.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.ILexicalState.Tag"><summary>
            Gets or sets the object that contains user-defined data about the object.
            </summary><value>
            An <see cref="T:System.Object" /> that contains user-defined data about the control. The default is <see langword="null" />.
            </value><remarks>
            Any type derived from the <see cref="T:System.Object" /> class can be assigned to this property. 
            </remarks></member><member name="T:ActiproSoftware.SyntaxEditor.DefaultLexicalState"><summary>
            Provides the default implementation for a lexical state.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.DefaultLexicalState.#ctor(System.Int32,System.String)"><summary>
            Initializes a new instance of the <c>DefaultLexicalState</c> class.
            </summary><param name="id">The ID of the lexical state.</param><param name="key">The key of the lexical state.</param></member><member name="P:ActiproSoftware.SyntaxEditor.DefaultLexicalState.ChildLexicalStates"><summary>
            Gets the collection of child lexical states.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.LexicalStateCollection" /> containing the child lexical states.</value></member><member name="P:ActiproSoftware.SyntaxEditor.DefaultLexicalState.DefaultHighlightingStyle"><summary>
            Gets or sets the default <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyle" /> to use for tokens within the state.
            </summary><value>The default <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyle" /> to use for tokens within the state.</value></member><member name="P:ActiproSoftware.SyntaxEditor.DefaultLexicalState.DefaultTokenID"><summary>
            Gets or sets the ID of the default token that this state assigns.
            </summary><value>The ID of the default token that this state assigns.</value></member><member name="P:ActiproSoftware.SyntaxEditor.DefaultLexicalState.DefaultTokenKey"><summary>
            Gets or sets the key of the default token that this state assigns.
            </summary><value>The key of the default token that this state assigns.</value></member><member name="P:ActiproSoftware.SyntaxEditor.DefaultLexicalState.ID"><summary>
            Gets the ID value that identifies the lexical state.
            </summary><value>The ID value that identifies the lexical state.</value></member><member name="P:ActiproSoftware.SyntaxEditor.DefaultLexicalState.Key"><summary>
            Gets a string-based key that identifies the lexical state.
            </summary><value>A string-based key that identifies the lexical state.</value></member><member name="P:ActiproSoftware.SyntaxEditor.DefaultLexicalState.Language"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> that contains the state.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> that contains the state.</value></member><member name="P:ActiproSoftware.SyntaxEditor.DefaultLexicalState.LexicalScopes"><summary>
            Gets the collection of lexical scopes.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.LexicalScopeCollection" /> containing the lexical scopes.</value></member><member name="P:ActiproSoftware.SyntaxEditor.DefaultLexicalState.LexicalStateTransitionLexicalState"><summary>
            Gets or sets the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that this state transitions to after a start scope match.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that this state transitions to after a start scope match.</value><remarks>
            This provides a mechanism to automatically transition to another language when this state's start scope is matched.
            This state's end scope may be used to exit the child language.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.DefaultLexicalState.Tag"><summary>
            Gets or sets the object that contains user-defined data about the object.
            </summary><value>
            An <see cref="T:System.Object" /> that contains user-defined data about the control. The default is <see langword="null" />.
            </value><remarks>
            Any type derived from the <see cref="T:System.Object" /> class can be assigned to this property. 
            </remarks></member><member name="T:ActiproSoftware.SyntaxEditor.SemanticParserService"><summary>
            Represents a semantic parser service that can perform queued semantic parsing in a separate thread.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.SemanticParserService.HasPendingRequest(System.String)"><summary>
            Returns whether there is currently a pending request with the specified hash key.
            </summary><param name="parseHashKey">The parse hash key identifying the request for which to search.</param><returns><c>true</c> if there is currently a pending request with the specified hash key; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.SemanticParserService.Parse(ActiproSoftware.SyntaxEditor.SemanticParserServiceRequest)"><summary>
            Adds a request to parse document text.
            </summary><param name="request">A <see cref="T:ActiproSoftware.SyntaxEditor.SemanticParserServiceRequest" /> that contains the request.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SemanticParserService.RemovePendingRequests(System.String)"><summary>
            Removes any pending requests in the parse request queue that have the specified hash key.
            </summary><param name="parseHashKey">The parse hash key for which to search.</param><returns>
            The number of pending requests that were removed.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.SemanticParserService.Start"><summary>
            Starts the multi-threaded parser service.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.SemanticParserService.Stop"><summary>
            Stops the multi-threaded parser service.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.SemanticParserService.WaitForParse(System.String)"><summary>
            Waits a maximum of 250 milliseconds for the specified request to complete.
            </summary><param name="parseHashKey">The parse hash key identifying the request for which to wait.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SemanticParserService.WaitForParse(System.String,System.Int32)"><summary>
            Waits for the specified request to complete, up to a maximum number of milliseconds.
            </summary><param name="parseHashKey">The parse hash key identifying the request for which to wait.</param><param name="maximumWaitTime">The maximum wait time in milliseconds.</param></member><member name="P:ActiproSoftware.SyntaxEditor.SemanticParserService.GetPendingRequests"><summary>
            Gets an array of the pending requests in the parse request queue.
            </summary><value>An array of the pending requests in the parse request queue.</value></member><member name="P:ActiproSoftware.SyntaxEditor.SemanticParserService.IsBusy"><summary>
            Gets whether the multi-threaded parser service is currently busy processing a request.
            </summary><value><c>true</c> if the multi-threaded parser service is currently busy processing a request; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.SemanticParserService.IsRunning"><summary>
            Gets whether the multi-threaded parser service is running.
            </summary><value><c>true</c> if the multi-threaded parser service is running; otherwise, <c>false</c>.
            </value><remarks>
            The service is running if a call to the <see cref="M:ActiproSoftware.SyntaxEditor.SemanticParserService.Start" /> method was made.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.SemanticParserService.PendingRequestCount"><summary>
            Gets the number of pending requests remaining in the parse request queue.
            </summary><value>The number of pending requests remaining in the parse request queue.</value></member><member name="T:ActiproSoftware.SyntaxEditor.DocumentModificationOptions"><summary>
            Specifies options for a <see cref="T:ActiproSoftware.SyntaxEditor.DocumentModification" />.
            </summary><remarks>
            This enumeration is used by methods like <see cref="M:ActiproSoftware.SyntaxEditor.Document.ReplaceText(ActiproSoftware.SyntaxEditor.DocumentModificationType,ActiproSoftware.SyntaxEditor.TextRange,System.String)" /> and <see cref="M:ActiproSoftware.SyntaxEditor.EditorView.ReplaceSelectedText(ActiproSoftware.SyntaxEditor.DocumentModificationType,System.String)" />.
            </remarks></member><member name="F:ActiproSoftware.SyntaxEditor.DocumentModificationOptions.None"><summary>
            There are no flags set.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DocumentModificationOptions.RetainSelection"><summary>
            Prevents the caret from moving to the end of the modification in the selected view.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DocumentModificationOptions.CheckReadOnly"><summary>
            Prevents the modification from occurring if the text range to modify is flagged as read-only.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DocumentModificationOptions.NoVirtualCharacterFill"><summary>
            If in a virtual character position, the modification will not insert whitespace into the document
            to fill up to the offset's <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" />.
            This option is only used in <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> document modification methods such as <see cref="M:ActiproSoftware.SyntaxEditor.EditorView.ReplaceSelectedText(ActiproSoftware.SyntaxEditor.DocumentModificationType,System.String)" />.
            It is generally used by modifications such as line feed insertion or open line commands.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DocumentModificationOptions.IsBlock"><summary>
            Indicates that the modification is a block modification.
            This option is only used in <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> document modification methods such as <see cref="M:ActiproSoftware.SyntaxEditor.EditorView.ReplaceSelectedText(ActiproSoftware.SyntaxEditor.DocumentModificationType,System.String)" />.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DocumentModificationOptions.SelectInsertedText"><summary>
            Selects the text that is inserted into the document.
            This option is only used in <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> document modification methods such as <see cref="M:ActiproSoftware.SyntaxEditor.EditorView.ReplaceSelectedText(ActiproSoftware.SyntaxEditor.DocumentModificationType,System.String)" />.
            </summary></member><member name="T:ActiproSoftware.SyntaxEditor.EditorViewBracketHighlightingEventHandler"><summary>
            Represents the method that will handle <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> bracket highlighting update events.
            </summary><param name="sender">Sender of the event.</param><param name="e">A <see cref="T:ActiproSoftware.SyntaxEditor.EditorViewBracketHighlightingEventArgs" /> containing event data.</param><remarks>
            When you create a <c>EditorViewBracketHighlightingEventHandler</c> delegate, you identify the method that will handle the event. 
            To associate the event with your event handler, add an instance of the delegate to the event. 
            The event handler is called whenever the event occurs, unless you remove the delegate.
            </remarks><seealso cref="T:ActiproSoftware.SyntaxEditor.EditorViewBracketHighlightingEventArgs" /></member><member name="T:ActiproSoftware.SyntaxEditor.EditorViewEventArgs"><summary>
            Provides data for events that apply to an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" />.
            </summary><seealso cref="T:ActiproSoftware.SyntaxEditor.EditorViewEventHandler" /></member><member name="M:ActiproSoftware.SyntaxEditor.EditorViewEventArgs.#ctor(ActiproSoftware.SyntaxEditor.EditorView)"><summary>
            Initializes a new instance of the <c>EditorViewEventArgs</c> class. 
            </summary><param name="view">The <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> for which the event applies.</param></member><member name="P:ActiproSoftware.SyntaxEditor.EditorViewEventArgs.View"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> for which the event applies.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> for which the event applies.</value></member><member name="T:ActiproSoftware.SyntaxEditor.EditorViewBracketHighlightingEventArgs"><summary>
            Provides data for <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> bracket highlighting update events.
            </summary><seealso cref="T:ActiproSoftware.SyntaxEditor.EditorViewBracketHighlightingEventHandler" /></member><member name="M:ActiproSoftware.SyntaxEditor.EditorViewBracketHighlightingEventArgs.#ctor(ActiproSoftware.SyntaxEditor.EditorView,ActiproSoftware.SyntaxEditor.IToken,ActiproSoftware.SyntaxEditor.IToken)"><summary>
            Initializes a new instance of the <c>EditorViewBracketHighlightingEventArgs</c> class. 
            </summary><param name="view">The <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> for which the event applies.</param><param name="bracketToken">The bracket <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> next to the caret, if it is part of bracket highlighting.</param><param name="matchingBracketToken">The bracket <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that matches the bracket at the <see cref="P:ActiproSoftware.SyntaxEditor.EditorViewBracketHighlightingEventArgs.BracketToken" />.</param></member><member name="P:ActiproSoftware.SyntaxEditor.EditorViewBracketHighlightingEventArgs.BracketToken"><summary>
            Gets or sets the bracket <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> next to the caret.
            </summary><value>The bracket <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> next to the caret; otherwise, <c>null</c>.</value><remarks>
            Use the setter of this property to update the bracket that the caret is next to in the <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" />
            if advanced bracket highlighting routines are required.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.EditorViewBracketHighlightingEventArgs.MatchingBracketToken"><summary>
            Gets or sets the bracket <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that matches the bracket by <see cref="P:ActiproSoftware.SyntaxEditor.EditorViewBracketHighlightingEventArgs.BracketToken" />.
            </summary><value>The bracket <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that matches the bracket by <see cref="P:ActiproSoftware.SyntaxEditor.EditorViewBracketHighlightingEventArgs.BracketToken" />; otherwise, <c>null</c>.</value><remarks>
            Use the setter of this property to update the matching bracket in the <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" />
            if advanced bracket highlighting routines are required.
            </remarks></member><member name="T:ActiproSoftware.SyntaxEditor.ITextBufferReader"><summary>
            Provides the base requirements for an object that reads characters from a fixed text buffer.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.ITextBufferReader.GetSubstring(System.Int32,System.Int32)"><summary>
            Returns a substring from the text buffer using <see cref="F:ActiproSoftware.SyntaxEditor.LineTerminator.Newline" /> for line ends.
            </summary><param name="offset">The offset at which to retrieve the text.</param><param name="length">The number of characters to return.</param><returns>The substring from the text buffer using <see cref="F:ActiproSoftware.SyntaxEditor.LineTerminator.Newline" /> for line ends.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.ITextBufferReader.Peek"><summary>
            Peeks at a single character from the text buffer without seeking past it.
            </summary><returns>The character that was read.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.ITextBufferReader.Peek(System.Int32)"><summary>
            Peeks at a certain character from the text buffer after the current <see cref="P:ActiproSoftware.SyntaxEditor.ITextBufferReader.Offset" /> without seeking past it.
            </summary><returns>The character that was read.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.ITextBufferReader.PeekReverse"><summary>
            Reverse peeks at a single character from the text buffer without seeking past it.
            </summary><returns>The character that was read.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.ITextBufferReader.Pop"><summary>
            Pops the top offset from the stack and moves the <see cref="P:ActiproSoftware.SyntaxEditor.ITextBufferReader.Offset" /> to that offset.
            </summary><remarks><c>true</c> if a pop occurred; otherwise, <c>false</c>.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.ITextBufferReader.PopAll"><summary>
            Pops the all offsets from the stack and moves the <see cref="P:ActiproSoftware.SyntaxEditor.ITextBufferReader.Offset" /> to the offset that was on the bottom of the stack.
            </summary><remarks><c>true</c> if a pop occurred; otherwise, <c>false</c>.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.ITextBufferReader.Push"><summary>
            Pushes the <see cref="P:ActiproSoftware.SyntaxEditor.ITextBufferReader.Offset" /> onto the stack for later restoration.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.ITextBufferReader.Read"><summary>
            Reads a single character from the text buffer and seeks forward one offset.
            </summary><returns>The character that was read.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.ITextBufferReader.ReadReverse"><summary>
            Reverse reads a single character from the text buffer and seeks backward one offset.
            </summary><returns>The character that was read.</returns></member><member name="P:ActiproSoftware.SyntaxEditor.ITextBufferReader.HasStackEntries"><summary>
            Gets whether there are entries on the stack.
            </summary><value><c>true</c> if there are entries on the stack; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.ITextBufferReader.IsAtEnd"><summary>
            Gets whether the current <see cref="P:ActiproSoftware.SyntaxEditor.ITextBufferReader.Offset" /> is at the end of the text buffer.
            </summary><value><c>true</c> if the current <see cref="P:ActiproSoftware.SyntaxEditor.ITextBufferReader.Offset" /> is at the end of the text buffer; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.ITextBufferReader.IsAtStart"><summary>
            Gets whether the current <see cref="P:ActiproSoftware.SyntaxEditor.ITextBufferReader.Offset" /> is at the start of the text buffer.
            </summary><value><c>true</c> if the current <see cref="P:ActiproSoftware.SyntaxEditor.ITextBufferReader.Offset" /> is at the start of the text buffer; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.ITextBufferReader.IsWhitespaceOnlyAfterOnLine"><summary>
            Gets whether only whitespace characters appear at and after the <see cref="P:ActiproSoftware.SyntaxEditor.ITextBufferReader.Offset" /> on the current line.
            </summary><value><c>true</c> if only whitespace characters appear at and after the <see cref="P:ActiproSoftware.SyntaxEditor.ITextBufferReader.Offset" /> on the current line; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.ITextBufferReader.IsWhitespaceOnlyBeforeOnLine"><summary>
            Gets whether only whitespace characters appear before the <see cref="P:ActiproSoftware.SyntaxEditor.ITextBufferReader.Offset" /> on the current line.
            </summary><value><c>true</c> if only whitespace characters appear before the <see cref="P:ActiproSoftware.SyntaxEditor.ITextBufferReader.Offset" /> on the current line; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.ITextBufferReader.Length"><summary>
            Gets the number of characters in the text buffer.
            </summary><value>The number of characters in the text buffer.</value></member><member name="P:ActiproSoftware.SyntaxEditor.ITextBufferReader.LineIndex"><summary>
            Gets the index of the line that contains the <see cref="P:ActiproSoftware.SyntaxEditor.ITextBufferReader.Offset" />.
            </summary><value>The index of the line that contains the <see cref="P:ActiproSoftware.SyntaxEditor.ITextBufferReader.Offset" />.</value></member><member name="P:ActiproSoftware.SyntaxEditor.ITextBufferReader.Offset"><summary>
            Gets or sets the current reader position in the text buffer.
            </summary><value>The current reader position in the text buffer.</value><remarks>
            Using the setter of this property will invalidate the <see cref="P:ActiproSoftware.SyntaxEditor.ITextBufferReader.LineIndex" /> property.
            Also, for performance reasons there is no bounds check on the setter.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.ITextBufferReader.OffsetDelta"><summary>
            Gets the amount by which to alter the offset values that are parsed.
            </summary><value>The amount by which to alter the offset values that are parsed.</value></member><member name="T:ActiproSoftware.SyntaxEditor.StringTextBufferReader"><summary>
            Represents an <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader" /> implementation for a <see cref="T:System.String" />.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.StringTextBufferReader.GetSubstring(System.Int32,System.Int32)"><summary>
            Returns a substring from the text buffer using <see cref="F:ActiproSoftware.SyntaxEditor.LineTerminator.Newline" /> for line ends.
            </summary><param name="offset">The offset at which to retrieve the text.</param><param name="length">The number of characters to return.</param><returns>The substring from the text buffer using <see cref="F:ActiproSoftware.SyntaxEditor.LineTerminator.Newline" /> for line ends.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.StringTextBufferReader.Peek"><summary>
            Peeks at a single character from the text buffer without seeking past it.
            </summary><returns>The character that was read.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.StringTextBufferReader.Peek(System.Int32)"><summary>
            Peeks at a certain character from the text buffer after the current <see cref="P:ActiproSoftware.SyntaxEditor.StringTextBufferReader.Offset" /> without seeking past it.
            </summary><returns>The character that was read.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.StringTextBufferReader.PeekReverse"><summary>
            Reverse peeks at a single character from the text buffer without seeking past it.
            </summary><returns>The character that was read.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.StringTextBufferReader.Pop"><summary>
            Pops the top offset from the stack and moves the <see cref="P:ActiproSoftware.SyntaxEditor.StringTextBufferReader.Offset" /> to that offset.
            </summary><remarks><c>true</c> if a pop occurred; otherwise, <c>false</c>.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.StringTextBufferReader.PopAll"><summary>
            Pops the all offsets from the stack and moves the <see cref="P:ActiproSoftware.SyntaxEditor.StringTextBufferReader.Offset" /> to the offset that was on the bottom of the stack.
            </summary><remarks><c>true</c> if a pop occurred; otherwise, <c>false</c>.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.StringTextBufferReader.Push"><summary>
            Pushes the <see cref="P:ActiproSoftware.SyntaxEditor.StringTextBufferReader.Offset" /> onto the stack for later restoration.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.StringTextBufferReader.Read"><summary>
            Reads a single character from the text buffer and seeks forward one offset.
            </summary><returns>The character that was read.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.StringTextBufferReader.ReadReverse"><summary>
            Reverse reads a single character from the text buffer and seeks backward one offset.
            </summary><returns>The character that was read.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.StringTextBufferReader.ToString"><summary>
            Creates and returns a string representation of the current object.
            </summary><returns>A string representation of the current object.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.StringTextBufferReader.#ctor(System.String,System.Int32,System.Int32)"><summary>
            Initializes a new instance of the <c>StringTextBufferReader</c> class.
            </summary><param name="text">The text to store in the text buffer.</param><param name="lineIndex">The index of the line that contains the offset.</param><param name="offset">The initial offset of the reader.</param></member><member name="M:ActiproSoftware.SyntaxEditor.StringTextBufferReader.#ctor(System.String,System.Int32,System.Int32,System.Int32)"><summary>
            Initializes a new instance of the <c>StringTextBufferReader</c> class.
            </summary><param name="text">The text to store in the text buffer.</param><param name="lineIndex">The index of the line that contains the offset.</param><param name="offset">The initial offset of the reader.</param><param name="offsetDelta">The amount by which to alter the offset values that are parsed.</param></member><member name="P:ActiproSoftware.SyntaxEditor.StringTextBufferReader.HasStackEntries"><summary>
            Gets whether there are entries on the stack.
            </summary><value><c>true</c> if there are entries on the stack; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.StringTextBufferReader.IsAtEnd"><summary>
            Gets whether the current <see cref="P:ActiproSoftware.SyntaxEditor.StringTextBufferReader.Offset" /> is at the end of the text buffer.
            </summary><value><c>true</c> if the current <see cref="P:ActiproSoftware.SyntaxEditor.StringTextBufferReader.Offset" /> is at the end of the text buffer; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.StringTextBufferReader.IsAtStart"><summary>
            Gets whether the current <see cref="P:ActiproSoftware.SyntaxEditor.StringTextBufferReader.Offset" /> is at the start of the text buffer.
            </summary><value><c>true</c> if the current <see cref="P:ActiproSoftware.SyntaxEditor.StringTextBufferReader.Offset" /> is at the start of the text buffer; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.StringTextBufferReader.IsWhitespaceOnlyAfterOnLine"><summary>
            Gets whether only whitespace characters appear at and after the <see cref="P:ActiproSoftware.SyntaxEditor.StringTextBufferReader.Offset" /> on the current line.
            </summary><value><c>true</c> if only whitespace characters appear at and after the <see cref="P:ActiproSoftware.SyntaxEditor.StringTextBufferReader.Offset" /> on the current line; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.StringTextBufferReader.IsWhitespaceOnlyBeforeOnLine"><summary>
            Gets whether only whitespace characters appear before the <see cref="P:ActiproSoftware.SyntaxEditor.StringTextBufferReader.Offset" /> on the current line.
            </summary><value><c>true</c> if only whitespace characters appear before the <see cref="P:ActiproSoftware.SyntaxEditor.StringTextBufferReader.Offset" /> on the current line; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.StringTextBufferReader.Length"><summary>
            Gets the number of characters in the text buffer.
            </summary><value>The number of characters in the text buffer.</value></member><member name="P:ActiproSoftware.SyntaxEditor.StringTextBufferReader.LineIndex"><summary>
            Gets the index of the line that contains the <see cref="P:ActiproSoftware.SyntaxEditor.StringTextBufferReader.Offset" />.
            </summary><value>The index of the line that contains the <see cref="P:ActiproSoftware.SyntaxEditor.StringTextBufferReader.Offset" />.</value></member><member name="P:ActiproSoftware.SyntaxEditor.StringTextBufferReader.Offset"><summary>
            Gets or sets the current reader position in the text buffer.
            </summary><value>The current reader position in the text buffer.</value><remarks>
            Using the setter of this property will invalidate the <see cref="P:ActiproSoftware.SyntaxEditor.StringTextBufferReader.LineIndex" /> property.
            Also, for performance reasons there is no bounds check on the setter.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.StringTextBufferReader.OffsetDelta"><summary>
            Gets the amount by which to alter the offset values that are parsed.
            </summary><value>The amount by which to alter the offset values that are parsed.</value></member><member name="T:ActiproSoftware.SyntaxEditor.TextStatistics"><summary>
            Provides numerous statistics such as line, word, character counts, and readability scores for text.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.TextStatistics.AddStatisticsToListView(System.Windows.Forms.ListView)"><summary>
            Adds the appropriate statistics to the specified <see cref="T:System.Windows.Forms.ListView" />.
            </summary><param name="listView">The <see cref="T:System.Windows.Forms.ListView" /> of which to add the statistics.</param></member><member name="M:ActiproSoftware.SyntaxEditor.TextStatistics.CalculateStatistics(ActiproSoftware.SyntaxEditor.Document,ActiproSoftware.SyntaxEditor.TextRange)"><summary>
            Calculates statistics for the specified <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> of <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> text.
            </summary><param name="document">The <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> to examine.</param><param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> of text to examine.</param><remarks>
            The default implementation of this method calls the <see cref="M:ActiproSoftware.SyntaxEditor.TextStatistics.CalculateStatistics(ActiproSoftware.SyntaxEditor.Document,ActiproSoftware.SyntaxEditor.TextRange)" /> overload
            that accepts a string parameter.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.TextStatistics.CalculateStatistics(System.String)"><summary>
            Calculates statistics for the specified text.
            </summary><param name="text">The text to examine.</param></member><member name="M:ActiproSoftware.SyntaxEditor.TextStatistics.GetLineTextRange(System.String,System.Int32)"><summary>
            Returns the <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> of the line containing the specified offset.
            </summary><param name="text">The text to examine.</param><param name="offset">The offset at which to begin searching.</param><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> of the line containing the specified offset.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.TextStatistics.Show(System.Windows.Forms.IWin32Window)"><summary>
            Displays the built-in <c>Statistics</c> dialog.
            </summary><param name="owner">The owner of the <c>Form</c>.</param></member><member name="M:ActiproSoftware.SyntaxEditor.TextStatistics.Show(System.Windows.Forms.IWin32Window,System.String)"><summary>
            Displays the built-in <c>Statistics</c> dialog.
            </summary><param name="owner">The owner of the <c>Form</c>.</param><param name="title">The title of the <c>Form</c>.</param></member><member name="M:ActiproSoftware.SyntaxEditor.TextStatistics.#ctor"><summary>
            Initializes a new instance of the <c>TextStatistics</c> class. 
            </summary><remarks>
            The <see cref="M:ActiproSoftware.SyntaxEditor.TextStatistics.CalculateStatistics(ActiproSoftware.SyntaxEditor.Document,ActiproSoftware.SyntaxEditor.TextRange)" /> method should be called manually to populate the statistics data.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.TextStatistics.#ctor(System.String)"><summary>
            Initializes a new instance of the <c>TextStatistics</c> class. 
            </summary><param name="text">The text to examine and create statistics data.</param></member><member name="P:ActiproSoftware.SyntaxEditor.TextStatistics.AverageLettersPerWord"><summary>
            Gets the average number of letters per word.
            </summary><value>The average number of letters per word.</value></member><member name="P:ActiproSoftware.SyntaxEditor.TextStatistics.AverageSyllablesPerWord"><summary>
            Gets the average number of syllables per word.
            </summary><value>The average number of syllables per word.</value></member><member name="P:ActiproSoftware.SyntaxEditor.TextStatistics.AverageWordsPerSentence"><summary>
            Gets the average number of words per sentence.
            </summary><value>The average number of words per sentence.</value></member><member name="P:ActiproSoftware.SyntaxEditor.TextStatistics.Characters"><summary>
            Gets the number of characters in the text.
            </summary><value>The number of characters in the text.</value></member><member name="P:ActiproSoftware.SyntaxEditor.TextStatistics.Consonants"><summary>
            Gets the number of consonants in the text.
            </summary><value>The number of consonants in the text.</value></member><member name="P:ActiproSoftware.SyntaxEditor.TextStatistics.FleschKincaidGradeLevel"><summary>
            Gets the Flesch-Kincaid grade level, which indicates the number of years of education required to understand the text.
            </summary><remarks>
            A grade level of <c>7.1</c> indicates that an individual with about <c>7</c> years of education could understand the text.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.TextStatistics.FleschReadingEaseScore"><summary>
            Gets the Flesch reading ease score in the range of <c>0</c> to <c>100</c>, which indicates how readable the text is.
            </summary><remarks>
            Scores of 90-100 are considered easily understandable by an average 5th grader. 
            Scores of 60-70 are considered easily understandable by 8th and 9th grade students.
            Scores of 0-30 are best understood by college graduates.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.TextStatistics.Letters"><summary>
            Gets the number of letters in the text.
            </summary><value>The number of letters in the text.</value></member><member name="P:ActiproSoftware.SyntaxEditor.TextStatistics.Lines"><summary>
            Gets the number of lines in the text.
            </summary><value>The number of lines in the text.</value></member><member name="P:ActiproSoftware.SyntaxEditor.TextStatistics.NonWhitespaceCharacters"><summary>
            Gets the number of non-whitespace characters in the text.
            </summary><value>The number of non-whitespace characters in the text.</value></member><member name="P:ActiproSoftware.SyntaxEditor.TextStatistics.NonWhitespaceLines"><summary>
            Gets the number of non-whitespace lines in the text.
            </summary><value>The number of non-whitespace lines in the text.</value></member><member name="P:ActiproSoftware.SyntaxEditor.TextStatistics.Sentences"><summary>
            Gets the number of sentences in the text.
            </summary><value>The number of sentences in the text.</value></member><member name="P:ActiproSoftware.SyntaxEditor.TextStatistics.Syllables"><summary>
            Gets the number of syllables in the text.
            </summary><value>The number of syllables in the text.</value></member><member name="P:ActiproSoftware.SyntaxEditor.TextStatistics.Vowels"><summary>
            Gets the number of vowels in the text.
            </summary><value>The number of vowels in the text.</value></member><member name="P:ActiproSoftware.SyntaxEditor.TextStatistics.WhitespaceCharacters"><summary>
            Gets the number of whitespace characters in the text.
            </summary><value>The number of whitespace characters in the text.</value></member><member name="P:ActiproSoftware.SyntaxEditor.TextStatistics.WhitespaceLines"><summary>
            Gets the number of whitespace lines in the text.
            </summary><value>The number of whitespace lines in the text.</value></member><member name="P:ActiproSoftware.SyntaxEditor.TextStatistics.Words"><summary>
            Gets the number of words in the text.
            </summary><value>The number of words in the text.</value></member><member name="T:ActiproSoftware.SyntaxEditor.AutoReplaceEntry"><summary>
            Represent an auto-replace entry.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.AutoReplaceEntry.ToString"><summary>
            Creates and returns a string representation of the current object.
            </summary><returns>A string representation of the current object.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.AutoReplaceEntry.#ctor(System.String,System.String)"><summary>
            Initializes a new instance of the <c>AutoReplaceEntry</c> class.
            </summary><param name="findText">The text to find.</param><param name="replaceText">The text with which to replace.</param></member><member name="P:ActiproSoftware.SyntaxEditor.AutoReplaceEntry.FindText"><summary>
            Gets the text to find.
            </summary><value>The text to find.</value></member><member name="P:ActiproSoftware.SyntaxEditor.AutoReplaceEntry.ReplaceText"><summary>
            Gets the text with which to replace.
            </summary><value>The text with which to replace.</value></member><member name="T:ActiproSoftware.SyntaxEditor.AutoReplaceEntryCollection"><summary>
            Provides access to the auto-replace functionality for a <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" />.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.AutoReplaceEntryCollection.Add(ActiproSoftware.SyntaxEditor.AutoReplaceEntry)"><summary>
            Adds an item to the collection.
            </summary><param name="item">The <see cref="T:ActiproSoftware.SyntaxEditor.AutoReplaceEntry" /> to add.</param><returns>The index at which the item was inserted into the collection.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.AutoReplaceEntryCollection.AddRange(ActiproSoftware.SyntaxEditor.AutoReplaceEntry[])"><summary>
            Adds multiple items to the collection.
            </summary><param name="items">The array of <see cref="T:ActiproSoftware.SyntaxEditor.AutoReplaceEntry" /> objects to add.</param></member><member name="M:ActiproSoftware.SyntaxEditor.AutoReplaceEntryCollection.Clear"><summary>
            Removes all items from the collection.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.AutoReplaceEntryCollection.Contains(ActiproSoftware.SyntaxEditor.AutoReplaceEntry)"><summary>
            Determines whether the specified item is in the collection. 
            </summary><param name="item">
            The <see cref="T:ActiproSoftware.SyntaxEditor.AutoReplaceEntry" /> to look for. 
            </param><returns><c>true</c> if the collection contains the item; otherwise, <c>false</c>. 
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.AutoReplaceEntryCollection.IndexOf(ActiproSoftware.SyntaxEditor.AutoReplaceEntry)"><summary>
            Returns the index of the specified item in the collection.
            </summary><param name="item">The <see cref="T:ActiproSoftware.SyntaxEditor.AutoReplaceEntry" /> to look for.</param><returns>
            If found, the index where the item is in the collection; otherwise, <c>-1</c>. 
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.AutoReplaceEntryCollection.Remove(ActiproSoftware.SyntaxEditor.AutoReplaceEntry)"><summary>
            Removes the first occurrence of a specific item from the collection.
            </summary><param name="item">The <see cref="T:ActiproSoftware.SyntaxEditor.AutoReplaceEntry" /> to remove.</param></member><member name="M:ActiproSoftware.SyntaxEditor.AutoReplaceEntryCollection.#ctor"><summary>
            Initializes a new instance of the <c>AutoReplaceEntryCollection</c> class.
            </summary><remarks>
            The default constructor initializes all fields to their default values.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.AutoReplaceEntryCollection.CaseSensitive"><summary>
            Gets or sets whether the entries should be case sensitive.
            </summary><value><c>true</c> if the entries should be case sensitive; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.AutoReplaceEntryCollection.Item(System.Int32)"><summary>
            Gets the item at the specified index. 
            <para>
            [C#] In C#, this property is the indexer for the <c>AutoReplaceEntryCollection</c> class. 
            </para></summary><param name="index">The index of the item to return.</param><value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.AutoReplaceEntry" /> at the specified index. 
            </value></member><member name="T:ActiproSoftware.SyntaxEditor.AutoReplaceEventArgs"><summary>
            Provides data for <see cref="T:ActiproSoftware.SyntaxEditor.AutoReplaceEntryCollection" /> events.
            </summary><remarks>
            This class is used with the <see cref="T:ActiproSoftware.SyntaxEditor.AutoReplaceEventHandler" /> delegate.
            </remarks><seealso cref="T:ActiproSoftware.SyntaxEditor.AutoReplaceEventHandler" /></member><member name="M:ActiproSoftware.SyntaxEditor.AutoReplaceEventArgs.ToString"><summary>
            Creates and returns a string representation of the current object.
            </summary><returns>A string representation of the current object.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.AutoReplaceEventArgs.#ctor(ActiproSoftware.SyntaxEditor.AutoReplaceEntry,System.Int32,System.Int32,System.Char)"><summary>
            Initializes a new instance of the <c>AutoReplaceEventArgs</c> class. 
            </summary><param name="autoReplaceEntry">The <see cref="T:ActiproSoftware.SyntaxEditor.AutoReplaceEntry" /> that is associated with the event.</param><param name="offset">The offset where the text was found.</param><param name="length">The length of the text that was found.</param><param name="keyChar">The key that was pressed to trigger the auto-replace.</param></member><member name="P:ActiproSoftware.SyntaxEditor.AutoReplaceEventArgs.AutoReplaceEntry"><summary>
            Gets or sets the <see cref="T:ActiproSoftware.SyntaxEditor.AutoReplaceEntry" /> with which the event is associated.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.AutoReplaceEntry" /> with which the event is associated.</value></member><member name="P:ActiproSoftware.SyntaxEditor.AutoReplaceEventArgs.CancelKeyPress"><summary>
            Gets or sets whether to cancel the keypress that triggered the auto-replace.
            </summary><value><c>true</c> if the keypress that triggered the auto-replace should be cancelled; otherwise, <c>false</c>.
            </value><remarks>
            The key triggering this auto-replace that is about to be inserted is specified by the <see cref="P:ActiproSoftware.SyntaxEditor.AutoReplaceEventArgs.KeyChar" /> property.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.AutoReplaceEventArgs.KeyChar"><summary>
            Gets the key that was pressed to trigger the auto-replace.
            </summary><value>The key that was pressed to trigger the auto-replace.</value></member><member name="P:ActiproSoftware.SyntaxEditor.AutoReplaceEventArgs.Length"><summary>
            Gets the length of the text that was found.
            </summary><value>The length of the text that was found.</value></member><member name="P:ActiproSoftware.SyntaxEditor.AutoReplaceEventArgs.Offset"><summary>
            Gets the offset where the text was found.
            </summary><value>The offset where the text was found.</value></member><member name="T:ActiproSoftware.SyntaxEditor.AutoReplaceEventHandler"><summary>
            Represents the method that will handle <see cref="T:ActiproSoftware.SyntaxEditor.AutoReplaceEntryCollection" /> events.
            </summary><param name="sender">Sender of the event.</param><param name="e">A <see cref="T:ActiproSoftware.SyntaxEditor.AutoReplaceEventArgs" /> containing event data.</param><remarks>
            When you create a <c>AutoReplaceEventHandler</c> delegate, you identify the method that will handle the event. 
            To associate the event with your event handler, add an instance of the delegate to the event. 
            The event handler is called whenever the event occurs, unless you remove the delegate.
            </remarks><seealso cref="T:ActiproSoftware.SyntaxEditor.AutoReplaceEventArgs" /></member><member name="T:ActiproSoftware.SyntaxEditor.Trigger"><summary>
            Provides a base class for a trigger.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Trigger.#ctor(System.String,System.Boolean)"><summary>
            Initializes a new instance of the <c>Trigger</c> class.
            </summary><param name="key">The key of the trigger.</param><param name="allowInReadOnlyMode">Whether the trigger can fire if the editor is in read-only mode.</param></member><member name="P:ActiproSoftware.SyntaxEditor.Trigger.AllowInReadOnlyMode"><summary>
            Gets whether the trigger can fire if the editor is in read-only mode.
            </summary><value><c>true</c> if the trigger can fire if the editor is in read-only mode; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.Trigger.Key"><summary>
            Gets a string-based key that identifies the object.
            </summary><value>A string-based key that identifies the object.</value></member><member name="T:ActiproSoftware.SyntaxEditor.AutoReplaceTrigger"><summary>
            A trigger that fires when a specified character is typed into the editor.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.AutoReplaceTrigger.ToString"><summary>
            Creates and returns a string representation of the current object.
            </summary><returns>A string representation of the current object.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.AutoReplaceTrigger.#ctor(System.String,ActiproSoftware.SyntaxEditor.CharClass)"><summary>
            Initializes a new instance of the <c>AutoReplaceTrigger</c> class.
            </summary><param name="key">The key of the trigger.</param><param name="characters">The character values associated with the trigger.</param></member><member name="P:ActiproSoftware.SyntaxEditor.AutoReplaceTrigger.AllowGlobalLookup"><summary>
            Gets or sets whether to allow global lookup of auto-replace entries if an auto-replace entry is not found within the current language.
            </summary><value><c>true</c> if global lookups are permitted; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.AutoReplaceTrigger.Characters"><summary>
            Gets the characters that when typed into the editor, causes the trigger to fire.
            </summary><value>The characters that when typed into the editor, causes the trigger to fire.</value></member><member name="P:ActiproSoftware.SyntaxEditor.AutoReplaceTrigger.ValidLexicalStates"><summary>
            Gets the collection of lexical states in which the trigger is valid.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.LexicalStateCollection" /> containing the lexical states in which the trigger is valid.</value></member><member name="T:ActiproSoftware.SyntaxEditor.LexicalStateCollection"><summary>
            Encapsulates a collection of <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> objects.
            </summary><seealso cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /></member><member name="M:ActiproSoftware.SyntaxEditor.LexicalStateCollection.Add(ActiproSoftware.SyntaxEditor.ILexicalState)"><summary>
            Adds a <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> into the collection.
            </summary><param name="lexicalState">The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> to add to the collection.</param><returns>The position into which the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> was inserted.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.LexicalStateCollection.Clear"><summary>
            Removes all <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> objects in the collection.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.LexicalStateCollection.Insert(System.Int32,ActiproSoftware.SyntaxEditor.ILexicalState)"><summary>
            Inserts a <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> into the collection.
            </summary><param name="index">The index at which to insert the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" />.</param><param name="lexicalState">The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> to insert to the collection.</param></member><member name="M:ActiproSoftware.SyntaxEditor.LexicalStateCollection.Remove(ActiproSoftware.SyntaxEditor.ILexicalState)"><summary>
            Removes the specified <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> from the collection.
            </summary><param name="lexicalState">The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> to remove from the collection.</param></member><member name="M:ActiproSoftware.SyntaxEditor.LexicalStateCollection.RemoveAt(System.Int32)"><summary>
            Removes the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> at the specified index in the collection.
            </summary><param name="index">The zero-based index of the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> to be removed.</param></member><member name="M:ActiproSoftware.SyntaxEditor.LexicalStateCollection.#ctor"><summary>
            Initializes a new instance of the <c>LexicalStateCollection</c> class. 
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.LexicalStateCollection.#ctor(ActiproSoftware.ComponentModel.ILogicalTreeNode)"><summary>
            Initializes a new instance of the <c>LexicalStateCollection</c> class. 
            </summary><param name="owner">The owner of the collection.</param></member><member name="P:ActiproSoftware.SyntaxEditor.LexicalStateCollection.Item(System.Int32)"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> at the specified index. 
            <para>
            [C#] In C#, this property is the indexer for the <c>LexicalStateCollection</c> class. 
            </para></summary><param name="index">The index of the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> to return.</param><value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> at the specified index. 
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.LexicalStateCollection.Item(System.String)"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> with the specified name. 
            <para>
            [C#] In C#, this property is the indexer for the <c>LexicalStateCollection</c> class. 
            </para></summary><param name="key">The key of the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> to return.</param><value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> with the specified key. 
            </value></member><member name="T:ActiproSoftware.SyntaxEditor.SyntaxLanguageCollection"><summary>
            Encapsulates a collection of <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> objects.
            </summary><seealso cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguageCollection.ToString"><summary>
            Returns a <c>String</c> that represents the current <c>Object</c>.
            </summary><returns>A <c>String</c> that represents the current <c>Object</c>.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguageCollection.#ctor"><summary>
            Initializes a new instance of the <c>SyntaxLanguageCollection</c> class. 
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguageCollection.#ctor(ActiproSoftware.ComponentModel.ILogicalTreeNode)"><summary>
            Initializes a new instance of the <c>SyntaxLanguageCollection</c> class. 
            </summary><param name="owner">The owner of the collection.</param></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxLanguageCollection.AllowDuplicateKeys"><summary>
            Gets whether duplicate keys are permitted within the collection.
            </summary><value><c>true</c> if duplicate keys are permitted; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxLanguageCollection.Language"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> that owns the collection, if any.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> that owns the collection, if any.</value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxLanguageCollection.Item(System.Int32)"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> at the specified index. 
            <para>
            [C#] In C#, this property is the indexer for the <c>SyntaxLanguageDomain</c> class. 
            </para></summary><param name="index">The index of the <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> to return.</param><value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> at the specified index. 
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxLanguageCollection.Item(System.String)"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> with the specified name. 
            <para>
            [C#] In C#, this property is the indexer for the <c>SyntaxLanguageDomain</c> class. 
            </para></summary><param name="key">The key of the <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> to return.</param><value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> with the specified key. 
            </value></member><member name="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicToken"><summary>
            Represents a token that has been assigned to a span of document text by a dynamic lexical parser.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicToken.Clone(System.Int32,System.Int32)"><summary>
            Clones the data in the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.
            </summary><param name="startOffset">The <see cref="P:ActiproSoftware.SyntaxEditor.IToken.StartOffset" /> of the cloned object.</param><param name="length">The length of the cloned object.</param><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that was created.</returns></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicToken.AutoCaseCorrectText"><summary>
            Gets the text that should be used for this <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> when performing an auto case correction operation on it.
            </summary><value>The text that should be used for this <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> when performing an auto case correction operation on it.</value><remarks>
            Return a <see langword="null" /> value to indicate that there is no auto case correction text available.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicToken.CustomHighlightingStyle"><summary>
            Gets the custom <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyle" /> to use for drawing the token.
            </summary><value>The custom <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyle" /> to use for drawing the token.</value><remarks>
            Use the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicToken.CustomHighlightingStyle" /> to set a custom highlighting style for this specific token.
            This is useful if you want to display user-defined functions in a separate color.
            If this value is <see langword="null" /> then the default <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyle" />
            for the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicToken.LexicalPatternGroup" /> will be used when drawing the text in the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicToken" />.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicToken.HighlightingStyle"><summary>
            Gets the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicToken.HighlightingStyle" /> to use for drawing the token, if the token is aware of it.
            </summary><value>The <see cref="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicToken.HighlightingStyle" /> to use for drawing the token, if the token is aware of it.</value><remarks><para>
            Use the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicToken.CustomHighlightingStyle" /> to set a custom highlighting style for this specific token.
            This is useful if you want to display user-defined functions in a separate color.
            If the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicToken.CustomHighlightingStyle" /> property value is <see langword="null" /> 
            then the default <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyle" />
            for the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicToken.LexicalPatternGroup" /> will be used when drawing the text in the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicToken" />.
            </para><para>
            In some languages, the token may not be aware of what highlighting style is used to draw it.
            In those cases, only the language itself knows what highlighting style to use for the token.
            </para></remarks></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicToken.IsDocumentEnd"><summary>
            Gets whether the token marks the end of the document.
            </summary><value><c>true</c> if the token marks the end of the document; otherwise <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicToken.LexicalPattern"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPattern" /> that defined the token.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPattern" /> that defined the token.</value><remarks>
            This value may be <see langword="null" /> if the token was not defined by a pattern
            and was created as a default token for the current state.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicToken.LexicalPatternGroup"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup" /> that defined the token.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup" /> that defined the token.</value><remarks>
            This value may be <see langword="null" /> if the token was not defined by a pattern
            and was created as a default token for the current state.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicToken.SemanticParseData"><summary>
            Gets or sets the semantic parse data for the token.
            </summary><value>The semantic parse data for the token.</value><remarks>
            The token represents the results of lexical parsing.  
            Semantic parsing should be performed after lexical parsing to give real meaning to the token to support IntelliPrompt.
            </remarks></member><member name="F:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicToken.DocumentEndTokenID"><summary>
            Gets the token ID for the end-of-document <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicToken" />.
            </summary><value>The token ID for the end-of-document <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicToken" />.</value><remarks>
            The numeric value of this constant is <c>-1</c>.
            </remarks></member><member name="F:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicToken.InvalidTokenID"><summary>
            Gets the token ID for an invalid <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicToken" />.
            </summary><value>The token ID for an invalid <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicToken" />.</value><remarks>
            The numeric value of this constant is <c>0</c>.
            </remarks></member><member name="T:ActiproSoftware.SyntaxEditor.HighlightingStyleCollection"><summary>
            Encapsulates a collection of <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyle" /> items.
            </summary><seealso cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyle" /></member><member name="M:ActiproSoftware.SyntaxEditor.HighlightingStyleCollection.Add(ActiproSoftware.SyntaxEditor.HighlightingStyle)"><summary>
            Adds the specified style to the collection. 
            </summary><param name="style">
            The <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyle" /> to add to the collection. 
            </param><returns>The position into which the new item was inserted.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.HighlightingStyleCollection.OnObjectAdded(System.Int32,ActiproSoftware.ComponentModel.ILogicalTreeNode)"><summary>
            Performs additional custom processes after an object is added to the collection.
            </summary><param name="index">The zero-based index at which the object was inserted.</param><param name="value">The object that was inserted.</param></member><member name="M:ActiproSoftware.SyntaxEditor.HighlightingStyleCollection.ExportStyleSettings"><summary>
            Exports all the user-customized style settings to an <see cref="T:System.Xml.XmlNode" />.
            </summary><returns>All the style settings persisted to an <see cref="T:System.Xml.XmlNode" />.</returns><remarks>
            The exported style settings can be used to store user-customized style settings.
            Restored the exported settings later by using the <see cref="M:ActiproSoftware.SyntaxEditor.HighlightingStyleCollection.ImportStyleSettings(System.Xml.XmlNode)" /> method.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.HighlightingStyleCollection.ImportStyleSettings(System.Xml.XmlNode)"><summary>
            Imports user-customized style settings from an <see cref="T:System.Xml.XmlNode" />.
            </summary><param name="node">The <see cref="T:System.Xml.XmlNode" /> to examine.</param><remarks>
            This method can be used to restore user-customized style settings that were exported using
            the <see cref="M:ActiproSoftware.SyntaxEditor.HighlightingStyleCollection.ExportStyleSettings" /> method.
            It will only override existing styles (matched by the <c>Key</c>) and will not add any new styles to the collection.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.HighlightingStyleCollection.#ctor"><summary>
            Initializes a new instance of the <c>HighlightingStyleCollection</c> class. 
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.HighlightingStyleCollection.#ctor(ActiproSoftware.ComponentModel.ILogicalTreeNode)"><summary>
            Initializes a new instance of the <c>HighlightingStyleCollection</c> class. 
            </summary><param name="owner">The owner of the collection.</param></member><member name="P:ActiproSoftware.SyntaxEditor.HighlightingStyleCollection.Item(System.Int32)"><summary>
            Gets the style at the specified index. 
            <para>
            [C#] In C#, this property is the indexer for the <c>HighlightingStyleCollection</c> class. 
            </para></summary><param name="index">The index of the style to return.</param><value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyle" /> at the specified index. 
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.HighlightingStyleCollection.Item(System.String)"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyle" /> with the specified name. 
            <para>
            [C#] In C#, this property is the indexer for the <c>HighlightingStyleCollection</c> class. 
            </para></summary><param name="key">The key of the <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyle" /> to return.</param><value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyle" /> with the specified key. 
            </value></member><member name="T:ActiproSoftware.SyntaxEditor.InvalidLanguageDefinitionException"><summary>
            An exception that is thrown when loading invalid values in parser definitions.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.InvalidLanguageDefinitionException.#ctor"><summary>
            Initializes a new instance of the <c>InvalidLanguageDefinitionException</c> class.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.InvalidLanguageDefinitionException.#ctor(System.String)"><summary>
            Initializes a new instance of the <c>InvalidLanguageDefinitionException</c> class with a specified error message.
            </summary><param name="message">The error message that explains the reason for the exception.</param></member><member name="M:ActiproSoftware.SyntaxEditor.InvalidLanguageDefinitionException.#ctor(System.String,System.Exception)"><summary>
            Initializes a new instance of the <c>InvalidLanguageDefinitionException</c> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary><param name="message">The error message that explains the reason for the exception.</param><param name="innerException">The exception that is the cause of the current exception.</param></member><member name="T:ActiproSoftware.SyntaxEditor.KeyPressTrigger"><summary>
            A trigger that fires when a specified character is typed into the editor.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.KeyPressTrigger.ToString"><summary>
            Creates and returns a string representation of the current object.
            </summary><returns>A string representation of the current object.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.KeyPressTrigger.#ctor(System.String,System.Boolean,System.Char)"><summary>
            Initializes a new instance of the <c>KeyPressTrigger</c> class.
            </summary><param name="key">The key of the trigger.</param><param name="allowInReadOnlyMode">Whether the trigger can fire if the editor is in read-only mode.</param><param name="character">The character value associated with the trigger.</param></member><member name="P:ActiproSoftware.SyntaxEditor.KeyPressTrigger.Character"><summary>
            Gets the character that when typed into the editor, causes the trigger to fire.
            </summary><value>The character that when typed into the editor, causes the trigger to fire.</value></member><member name="P:ActiproSoftware.SyntaxEditor.KeyPressTrigger.ValidLexicalStates"><summary>
            Gets the collection of lexical states in which the trigger is valid.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.LexicalStateCollection" /> containing the lexical states in which the trigger is valid.</value></member><member name="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalMacro"><summary>
            Defines a macro, which is a named regular expression.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalMacro.ToString"><summary>
            Creates and returns a string representation of the current object.
            </summary><returns>A string representation of the current object.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalMacro.#ctor(System.String,System.String)"><summary>
            Initializes a new instance of the <c>LexicalMacro</c> class.
            </summary><param name="key">The key of the macro.</param><param name="pattern">The text regular expression source.</param></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalMacro.Key"><summary>
            Gets a string-based key that identifies the object.
            </summary><value>A string-based key that identifies the object.</value></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalMacro.Pattern"><summary>
            Gets the text regular expression source.
            </summary><value>The text regular expression source.</value></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalMacro.Tag"><summary>
            Gets or sets the object that contains user-defined data about the object.
            </summary><value>
            An <see cref="T:System.Object" /> that contains user-defined data about the control. The default is <see langword="null" />.
            </value><remarks>
            Any type derived from the <see cref="T:System.Object" /> class can be assigned to this property. 
            </remarks></member><member name="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalMacroCollection"><summary>
            Encapsulates a collection of <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalMacro" /> objects.
            </summary><seealso cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalMacro" /></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalMacroCollection.Add(ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalMacro)"><summary>
            Adds a macro to the collection.
            </summary><param name="lexicalMacro">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalMacro" /> to add to the collection.</param><returns>The position into which the new item was inserted.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalMacroCollection.Clear"><summary>
            Removes all <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalMacro" /> objects in the collection.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalMacroCollection.Remove(ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalMacro)"><summary>
            Removes the specified <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalMacro" /> from the collection.
            </summary><param name="lexicalMacro">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalMacro" /> to remove from the collection.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalMacroCollection.RemoveAt(System.Int32)"><summary>
            Removes the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalMacro" /> at the specified index in the collection.
            </summary><param name="index">The zero-based index of the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalMacro" /> to be removed.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalMacroCollection.#ctor"><summary>
            Initializes a new instance of the <c>LexicalMacroCollection</c> class. 
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalMacroCollection.#ctor(ActiproSoftware.ComponentModel.ILogicalTreeNode)"><summary>
            Initializes a new instance of the <c>LexicalMacroCollection</c> class. 
            </summary><param name="owner">The owner of the collection.</param></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalMacroCollection.Item(System.Int32)"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalMacro" /> at the specified index. 
            <para>
            [C#] In C#, this property is the indexer for the <c>LexicalMacroCollection</c> class. 
            </para></summary><param name="index">The index of the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalMacro" /> to return.</param><value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalMacro" /> at the specified index. 
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalMacroCollection.Item(System.String)"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalMacro" /> with the specified name. 
            <para>
            [C#] In C#, this property is the indexer for the <c>LexicalMacroCollection</c> class. 
            </para></summary><param name="key">The key of the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalMacro" /> to return.</param><value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalMacro" /> with the specified key. 
            </value></member><member name="T:ActiproSoftware.SyntaxEditor.LexicalParseFlags"><summary>
            Specifies flags for a <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.LexicalParseFlags.None"><summary>
            There are no flags set.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.LexicalParseFlags.LooseMatch"><summary>
            A loose match was made.  This occurs when using a case insensitivity of <c>AutoCorrect</c> and a non-exact match was found.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.LexicalParseFlags.ScopeStart"><summary>
            The token starts a scope.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.LexicalParseFlags.ScopeEnd"><summary>
            The token ends a scope.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.LexicalParseFlags.DirectStateTransition"><summary>
            The token starts a scope which performs a direct lexical state transition.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.LexicalParseFlags.ScopeStateTransitionStart"><summary>
            The token ends a scope but performs a scope lexical state transition.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.LexicalParseFlags.ScopeStateTransitionEnd"><summary>
            The token ends a scope for a scope lexical state transition.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.LexicalParseFlags.LanguageStart"><summary>
            The token marks the start of a child language.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.LexicalParseFlags.LanguageEnd"><summary>
            The token marks the end of a child language.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.LexicalParseFlags.ContentDividerBefore"><summary>
            Display a content divider before the token.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.LexicalParseFlags.ContentDividerAfter"><summary>
            Display a content divider after the token.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.LexicalParseFlags.ContentDividerNone"><summary>
            Displays no content divider for the token.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.LexicalParseFlags.ContentDividerMask"><summary>
            The bit mask for the content divider flags.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.LexicalParseFlags.LanguageChange"><summary>
            The token is either the first token in a child language (<c>LanguageStart</c> will also be set) or is the first token 
            after a child language ends.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.LexicalParseFlags.Modified"><summary>
            Whether the token was modified during the last lexical parse that affected it.
            </summary></member><member name="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPattern"><summary>
            Represents a lexical pattern.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPattern.#ctor(System.String)"><summary>
            Initializes a new instance of the <c>LexicalPattern</c> class.
            </summary><param name="pattern">The text regular expression source.</param></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPattern.LexicalPatternGroup"><summary>
            Gets the parent <see cref="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPattern.LexicalPatternGroup" />.
            </summary><value>The parent <see cref="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPattern.LexicalPatternGroup" />.</value></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPattern.Pattern"><summary>
            Gets or sets the text regular expression source.
            </summary><value>The text regular expression source.</value></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPattern.Tag"><summary>
            Gets or sets the object that contains user-defined data about the object.
            </summary><value>
            An <see cref="T:System.Object" /> that contains user-defined data about the control. The default is <see langword="null" />.
            </value><remarks>
            Any type derived from the <see cref="T:System.Object" /> class can be assigned to this property. 
            </remarks></member><member name="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup"><summary>
            Encapsulates a collection of <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPattern" /> objects.
            </summary><seealso cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPattern" /></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup.Add(ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPattern)"><summary>
            Adds a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPattern" /> to the collection.
            </summary><param name="lexicalPattern">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPattern" /> to add to the collection.</param><returns>The position into which the new <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPattern" /> was inserted.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup.Clear"><summary>
            Removes all <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPattern" /> objects in the collection.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup.Insert(System.Int32,ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPattern)"><summary>
            Inserts a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPattern" /> into the collection at the specified index.
            </summary><param name="index">The zero-based index at which the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPattern" /> should be inserted.</param><param name="lexicalPattern">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPattern" /> to insert into the collection.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup.OnObjectAdded(System.Int32,ActiproSoftware.ComponentModel.ILogicalTreeNode)"><summary>
            Performs additional custom processes after an object is added to the collection.
            </summary><param name="index">The zero-based index at which the object was inserted.</param><param name="value">The object that was inserted.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup.OnParentChanged"><summary>
            Invoked when logical parent is changed. 
            This is invoked after the parent has changed, and the purpose is to allow elements to perform actions based on the changed parent.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup.Remove(ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPattern)"><summary>
            Removes the specified <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPattern" /> from the collection.
            </summary><param name="lexicalPattern">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPattern" /> to remove from the collection.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup.RemoveAt(System.Int32)"><summary>
            Removes the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPattern" /> at the specified index in the collection.
            </summary><param name="index">The zero-based index of the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPattern" /> to be removed.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup.ToString"><summary>
            Creates and returns a string representation of the current object.
            </summary><returns>A string representation of the current object.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup.#ctor(ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternType,System.String,ActiproSoftware.SyntaxEditor.HighlightingStyle)"><summary>
            Initializes a new instance of the <c>LexicalPatternGroup</c> class. 
            </summary><param name="patternType">A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternType" /> indicating the type of pattern.</param><param name="tokenKey">The key of the token that this pattern assigns.</param><param name="highlightingStyle">The <see cref="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup.HighlightingStyle" /> that this pattern uses.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup.#ctor(ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternType,System.String,ActiproSoftware.SyntaxEditor.HighlightingStyle,System.String)"><summary>
            Initializes a new instance of the <c>LexicalPatternGroup</c> class. 
            </summary><param name="patternType">A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternType" /> indicating the type of pattern.</param><param name="tokenKey">The key of the token that this pattern assigns.</param><param name="highlightingStyle">The <see cref="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup.HighlightingStyle" /> that this pattern uses.</param><param name="pattern">Adds a single pattern to the group.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup.#ctor(ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternType,System.String,ActiproSoftware.SyntaxEditor.HighlightingStyle,System.String,System.String)"><summary>
            Initializes a new instance of the <c>LexicalPatternGroup</c> class. 
            </summary><param name="patternType">A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternType" /> indicating the type of pattern.</param><param name="tokenKey">The key of the token that this pattern assigns.</param><param name="highlightingStyle">The <see cref="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup.HighlightingStyle" /> that this pattern uses.</param><param name="pattern">Adds a single pattern to the group.</param><param name="lookAheadPattern">The text regular expression source for the look-ahead.</param></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup.CaseSensitive"><summary>
            Gets whether the explicit patterns in the pattern group are case sensitive.
            </summary><value><c>true</c> if the explicit patterns in the pattern group are case sensitive; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup.CaseSensitivity"><summary>
            Gets or sets a <see cref="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup.CaseSensitivity" /> determining how the lexical parser should handle case sensitivity
            for patterns in the pattern group.
            </summary><value>
            A <see cref="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup.CaseSensitivity" /> determining how the lexical parser should handle case sensitivity
            for patterns in the pattern group.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup.EndBracket"><summary>
            Gets or sets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup" /> that should be used as an end bracket for this pattern group when bracket highlighting.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup" /> that should be used as an end bracket for this pattern group when bracket highlighting.</value></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup.HighlightingStyle"><summary>
            Gets or sets the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup.HighlightingStyle" /> to use for tokens within the pattern group.
            </summary><value>The <see cref="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup.HighlightingStyle" /> to use for tokens within the pattern group.</value></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup.IsContentDivider"><summary>
            Gets or sets whether the token is a content divider.
            </summary><value><c>true</c> if the token is a content divider; otherwise <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup.IsWhitespace"><summary>
            Gets or sets whether the token represents whitespace.
            </summary><value><c>true</c> if the token represents whitespace; otherwise <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup.Key"><summary>
            Gets or sets a string-based key that identifies the object.
            </summary><value>A string-based key that identifies the object.</value></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup.LexicalScope"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalScope" />, if any, that defines the pattern group.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalScope" />, if any, that defines the pattern group.</value><remarks>
            If this value is <see langword="null" />, the pattern group was not defined by a lexical scope.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup.LexicalState"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that defines the pattern group.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that defines the pattern group.</value></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup.LookAheadPattern"><summary>
            Gets or sets the text regular expression source for the look-ahead.
            </summary><value>The text regular expression source for the look-ahead.</value></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup.LookBehindPattern"><summary>
            Gets or sets the text regular expression source for the look-behind.
            </summary><value>The text regular expression source for the look-behind.</value></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup.PatternType"><summary>
            Gets or sets a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternType" /> indicating the type of pattern.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternType" /> indicating the type of pattern.</value></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup.StartBracket"><summary>
            Gets or sets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup" /> that should be used as a start bracket for this pattern group when bracket highlighting.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup" /> that should be used as a start bracket for this pattern group when bracket highlighting.</value></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup.Tag"><summary>
            Gets or sets the object that contains user-defined data about the object.
            </summary><value>
            An <see cref="T:System.Object" /> that contains user-defined data about the control. The default is <see langword="null" />.
            </value><remarks>
            Any type derived from the <see cref="T:System.Object" /> class can be assigned to this property. 
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup.Item(System.Int32)"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPattern" /> at the specified index. 
            <para>
            [C#] In C#, this property is the indexer for the <c>LexicalPatternGroup</c> class. 
            </para></summary><param name="index">The index of the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPattern" /> to return.</param><value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPattern" /> at the specified index. 
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup.TokenID"><summary>
            Gets or sets a numeric ID that identifies the token that this pattern assigns.
            </summary><value>A numeric ID that identifies the token that this pattern assigns.</value><remarks>
            This property is similar to the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup.TokenKey" /> property although <see cref="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup.TokenKey" /> is a string,
            while <c>TokenID</c> is a number which can be cast to an enumeration.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup.TokenKey"><summary>
            Gets the key of the token that this pattern assigns.
            </summary><value>The key of the token that this pattern assigns.</value></member><member name="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroupCollection"><summary>
            Encapsulates a collection of <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup" /> objects.
            </summary><seealso cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup" /></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroupCollection.Add(ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup)"><summary>
            Adds a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup" /> to the collection.
            </summary><param name="lexicalPatternGroup">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup" /> to add to the collection.</param><returns>The position into which the new <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup" /> was inserted.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroupCollection.Clear"><summary>
            Removes all <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup" /> objects in the collection.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroupCollection.Insert(System.Int32,ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup)"><summary>
            Inserts a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup" /> into the collection at the specified index.
            </summary><param name="index">The zero-based index at which the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup" /> should be inserted.</param><param name="lexicalPatternGroup">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup" /> to insert into the collection.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroupCollection.Remove(ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup)"><summary>
            Removes the specified <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup" /> from the collection.
            </summary><param name="lexicalPatternGroup">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup" /> to remove from the collection.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroupCollection.RemoveAt(System.Int32)"><summary>
            Removes the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup" /> at the specified index in the collection.
            </summary><param name="index">The zero-based index of the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup" /> to be removed.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroupCollection.#ctor"><summary>
            Initializes a new instance of the <c>LexicalPatternGroupCollection</c> class. 
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroupCollection.#ctor(ActiproSoftware.ComponentModel.ILogicalTreeNode)"><summary>
            Initializes a new instance of the <c>LexicalPatternGroupCollection</c> class. 
            </summary><param name="owner">The owner of the collection.</param></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroupCollection.AllowEmptyKeys"><summary>
            Gets whether empty keys are permitted within the collection.
            </summary><value><c>true</c> if empty keys are permitted; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroupCollection.LexicalState"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicLexicalState" /> that contains the pattern group collection.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicLexicalState" /> that contains the pattern group collection.</value></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroupCollection.Item(System.Int32)"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup" /> at the specified index. 
            <para>
            [C#] In C#, this property is the indexer for the <c>LexicalPatternGroupCollection</c> class. 
            </para></summary><param name="index">The index of the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup" /> to return.</param><value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup" /> at the specified index. 
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroupCollection.Item(System.String)"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup" /> with the specified name. 
            <para>
            [C#] In C#, this property is the indexer for the <c>LexicalPatternGroupCollection</c> class. 
            </para></summary><param name="key">The key of the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup" /> to return.</param><value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup" /> with the specified key. 
            </value></member><member name="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternType"><summary>
            Specifies the type of lexical pattern.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternType.Explicit"><summary>
            An explicit pattern in which all pattern characters have no regex meaning.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternType.Regex"><summary>
            A pattern in which regex characters have special meaning and can control regular expression parsing.
            </summary></member><member name="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicLexicalScope"><summary>
            Contains information about a lexical scope.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicLexicalScope.IsScopeEnd(ActiproSoftware.SyntaxEditor.ITextBufferReader,ActiproSoftware.SyntaxEditor.ITokenLexicalParseData@)"><summary>
            Performs a lexical parse to determine if the current text in the <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader" /> ends the lexical scope.
            </summary><param name="reader">An <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader" /> that is reading a text source.</param><param name="lexicalParseData">Returns the <see cref="T:ActiproSoftware.SyntaxEditor.ITokenLexicalParseData" /> that was parsed, if any.</param><returns>A <see cref="T:ActiproSoftware.SyntaxEditor.MatchType" /> indicating the type of match that was made.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicLexicalScope.IsScopeStart(ActiproSoftware.SyntaxEditor.ITextBufferReader,ActiproSoftware.SyntaxEditor.ITokenLexicalParseData@)"><summary>
            Performs a lexical parse to determine if the current text in the <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader" /> starts the lexical scope.
            </summary><param name="reader">An <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader" /> that is reading a text source.</param><param name="lexicalParseData">Returns the <see cref="T:ActiproSoftware.SyntaxEditor.ITokenLexicalParseData" /> that was parsed, if any.</param><returns>A <see cref="T:ActiproSoftware.SyntaxEditor.MatchType" /> indicating the type of match that was made.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicLexicalScope.OnParentChanged"><summary>
            Invoked when logical parent is changed. 
            This is invoked after the parent has changed, and the purpose is to allow elements to perform actions based on the changed parent.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicLexicalScope.#ctor"><summary>
            Initializes a new instance of the <c>DynamicLexicalScope</c> class.
            </summary></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicLexicalScope.AncestorEndScopeCheckEnabled"><summary>
            Gets or sets whether ancestor end scope checking is enabled while parsing inside the scope.
            </summary><value><c>true</c> if ancestor end scope checking is enabled; otherwise, <c>false</c>.
            </value><remarks>
            When enabled, this allows ancestor scopes to be examined to see a pattern matches their end scope.
            In the event a match is found, this scope exits as well as the ancestor's scope.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicLexicalScope.EndLexicalPatternGroup"><summary>
            Gets or sets the lexical pattern group that ends the scope.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup" /> that ends the scope.</value></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicLexicalScope.LexicalState"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that defines the lexical scope.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that defines the lexical scope.</value></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicLexicalScope.LexicalStateTransition"><summary>
            Gets or sets the <see cref="T:ActiproSoftware.SyntaxEditor.LexicalScopeLexicalStateTransition" /> that this scope performs after ending.
            </summary><value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicLexicalScope" /> that this scope performs after ending.  
            If the value is <see langword="null" />, then no state transition is performed when the scope ends.
            </value><remarks>The state transition may be made to a child language.</remarks></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicLexicalScope.StartLexicalPatternGroup"><summary>
            Gets or sets the lexical pattern group that starts the scope.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup" /> that starts the scope.</value></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicLexicalScope.Tag"><summary>
            Gets or sets the object that contains user-defined data about the object.
            </summary><value>
            An <see cref="T:System.Object" /> that contains user-defined data about the control. The default is <see langword="null" />.
            </value><remarks>
            Any type derived from the <see cref="T:System.Object" /> class can be assigned to this property. 
            </remarks></member><member name="T:ActiproSoftware.SyntaxEditor.LexicalScopeCollection"><summary>
            Encapsulates a collection of <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalScope" /> objects.
            </summary><seealso cref="T:ActiproSoftware.SyntaxEditor.ILexicalScope" /></member><member name="M:ActiproSoftware.SyntaxEditor.LexicalScopeCollection.Add(ActiproSoftware.SyntaxEditor.ILexicalScope)"><summary>
            Adds a <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalScope" /> to the collection.
            </summary><param name="lexicalScope">The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalScope" /> to add to the collection.</param><returns>The position into which the new <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalScope" /> was inserted.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.LexicalScopeCollection.Clear"><summary>
            Removes all <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalScope" /> objects in the collection.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.LexicalScopeCollection.Insert(System.Int32,ActiproSoftware.SyntaxEditor.ILexicalScope)"><summary>
            Inserts a <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalScope" /> into the collection at the specified index.
            </summary><param name="index">The zero-based index at which the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalScope" /> should be inserted.</param><param name="lexicalScope">The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalScope" /> to insert into the collection.</param></member><member name="M:ActiproSoftware.SyntaxEditor.LexicalScopeCollection.Remove(ActiproSoftware.SyntaxEditor.ILexicalScope)"><summary>
            Removes the specified <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalScope" /> from the collection.
            </summary><param name="lexicalScope">The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalScope" /> to remove from the collection.</param></member><member name="M:ActiproSoftware.SyntaxEditor.LexicalScopeCollection.RemoveAt(System.Int32)"><summary>
            Removes the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalScope" /> at the specified index in the collection.
            </summary><param name="index">The zero-based index of the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalScope" /> to be removed.</param></member><member name="M:ActiproSoftware.SyntaxEditor.LexicalScopeCollection.#ctor"><summary>
            Initializes a new instance of the <c>LexicalScopeCollection</c> class. 
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.LexicalScopeCollection.#ctor(ActiproSoftware.ComponentModel.ILogicalTreeNode)"><summary>
            Initializes a new instance of the <c>LexicalScopeCollection</c> class. 
            </summary><param name="owner">The owner of the collection.</param></member><member name="P:ActiproSoftware.SyntaxEditor.LexicalScopeCollection.LexicalState"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that owns the collection.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that owns the collection.</value></member><member name="P:ActiproSoftware.SyntaxEditor.LexicalScopeCollection.Item(System.Int32)"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalScope" /> at the specified index. 
            <para>
            [C#] In C#, this property is the indexer for the <c>LexicalScopeCollection</c> class. 
            </para></summary><param name="index">The index of the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalScope" /> to return.</param><value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalScope" /> at the specified index. 
            </value></member><member name="T:ActiproSoftware.SyntaxEditor.LexicalScopeLexicalStateTransition"><summary>
            Contains information about a lexical scope lexical state transition.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.LexicalScopeLexicalStateTransition.OnParentChanged"><summary>
            Invoked when logical parent is changed. 
            This is invoked after the parent has changed, and the purpose is to allow elements to perform actions based on the changed parent.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.LexicalScopeLexicalStateTransition.#ctor(ActiproSoftware.SyntaxEditor.ILexicalState,ActiproSoftware.SyntaxEditor.ILexicalScope)"><summary>
            Initializes a new instance of the <c>LexicalScopeLexicalStateTransition</c> class.
            </summary><param name="childLexicalState">The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that is transitioned to after the <see cref="P:ActiproSoftware.SyntaxEditor.LexicalScopeLexicalStateTransition.ParentLexicalScope" /> ends.</param><param name="childLexicalScope">The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalScope" /> that is used in the <see cref="P:ActiproSoftware.SyntaxEditor.LexicalScopeLexicalStateTransition.ChildLexicalState" /> to end the lexical state.</param></member><member name="P:ActiproSoftware.SyntaxEditor.LexicalScopeLexicalStateTransition.ChildLexicalScope"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalScope" /> that is used in the <see cref="P:ActiproSoftware.SyntaxEditor.LexicalScopeLexicalStateTransition.ChildLexicalState" /> to end the lexical state.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalScope" /> that is used in the <see cref="P:ActiproSoftware.SyntaxEditor.LexicalScopeLexicalStateTransition.ChildLexicalState" /> to end the lexical state.</value></member><member name="P:ActiproSoftware.SyntaxEditor.LexicalScopeLexicalStateTransition.ChildLexicalState"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that is transitioned to after the <see cref="P:ActiproSoftware.SyntaxEditor.LexicalScopeLexicalStateTransition.ParentLexicalScope" /> ends.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that is transitioned to after the <see cref="P:ActiproSoftware.SyntaxEditor.LexicalScopeLexicalStateTransition.ParentLexicalScope" /> ends.</value></member><member name="P:ActiproSoftware.SyntaxEditor.LexicalScopeLexicalStateTransition.ParentLexicalScope"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalScope" /> that owns this state transition.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalScope" /> that owns this state transition.</value></member><member name="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicLexicalState"><summary>
            Contains information about a lexical state.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicLexicalState.#ctor(System.String)"><summary>
            Initializes a new instance of the <c>DynamicLexicalState</c> class.
            </summary><param name="key">The key of the lexical state.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicLexicalState.#ctor(System.Int32,System.String)"><summary>
            Initializes a new instance of the <c>DynamicLexicalState</c> class.
            </summary><param name="id">The ID of the lexical state.</param><param name="key">The key of the lexical state.</param></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicLexicalState.LexicalPatternGroups"><summary>
            Gets the collection of lexical pattern groups.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroupCollection" /> containing the lexical pattern groups.</value></member><member name="T:ActiproSoftware.SyntaxEditor.TriggerCollection"><summary>
            Encapsulates a collection of <see cref="T:ActiproSoftware.SyntaxEditor.Trigger" /> objects.
            </summary><seealso cref="T:ActiproSoftware.SyntaxEditor.Trigger" /></member><member name="M:ActiproSoftware.SyntaxEditor.TriggerCollection.Add(ActiproSoftware.SyntaxEditor.Trigger)"><summary>
            Adds the specified item to the collection. 
            </summary><param name="item">
            The <see cref="T:ActiproSoftware.SyntaxEditor.Trigger" /> to add to the collection. 
            </param><returns>
            The position into which the new item was inserted.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.TriggerCollection.Clear"><summary>
            Removes all items from the collection. 
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.TriggerCollection.Remove(ActiproSoftware.SyntaxEditor.Trigger)"><summary>
            Removes the specified item from the collection. 
            </summary><param name="item">
            The <see cref="T:ActiproSoftware.SyntaxEditor.Trigger" /> to remove from the collection. 
            </param></member><member name="M:ActiproSoftware.SyntaxEditor.TriggerCollection.#ctor"><summary>
            Initializes a new instance of the <c>TriggerCollection</c> class. 
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.TriggerCollection.#ctor(ActiproSoftware.ComponentModel.ILogicalTreeNode)"><summary>
            Initializes a new instance of the <c>TriggerCollection</c> class. 
            </summary><param name="owner">The owner of the collection.</param></member><member name="P:ActiproSoftware.SyntaxEditor.TriggerCollection.Item(System.Int32)"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Trigger" /> at the specified index. 
            <para>
            [C#] In C#, this property is the indexer for the <c>TriggerCollection</c> class. 
            </para></summary><param name="index">The index of the <see cref="T:ActiproSoftware.SyntaxEditor.Trigger" /> to return.</param><value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.Trigger" /> at the specified index. 
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.TriggerCollection.Item(System.String)"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Trigger" /> with the specified name. 
            <para>
            [C#] In C#, this property is the indexer for the <c>TriggerCollection</c> class. 
            </para></summary><param name="key">The key of the <see cref="T:ActiproSoftware.SyntaxEditor.Trigger" /> to return.</param><value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.Trigger" /> with the specified key. 
            </value></member><member name="T:ActiproSoftware.SyntaxEditor.TriggerEventArgs"><summary>
            Provides data for <see cref="T:ActiproSoftware.SyntaxEditor.Trigger" /> events.
            </summary><remarks>
            This class is used with the <see cref="T:ActiproSoftware.SyntaxEditor.TriggerEventHandler" /> delegate.
            </remarks><seealso cref="T:ActiproSoftware.SyntaxEditor.TriggerEventHandler" /></member><member name="M:ActiproSoftware.SyntaxEditor.TriggerEventArgs.ToString"><summary>
            Creates and returns a string representation of the current object.
            </summary><returns>A string representation of the current object.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.TriggerEventArgs.#ctor(ActiproSoftware.SyntaxEditor.Trigger)"><summary>
            Initializes a new instance of the <c>TriggerEventArgs</c> class. 
            </summary><param name="trigger">The <see cref="T:ActiproSoftware.SyntaxEditor.Trigger" /> that is associated with the event.</param></member><member name="P:ActiproSoftware.SyntaxEditor.TriggerEventArgs.Trigger"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Trigger" /> with which the event is associated.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.Trigger" /> with which the event is associated.</value></member><member name="T:ActiproSoftware.SyntaxEditor.TriggerEventHandler"><summary>
            Represents the method that will handle <see cref="T:ActiproSoftware.SyntaxEditor.Trigger" /> events.
            </summary><param name="sender">Sender of the event.</param><param name="e">A <see cref="T:ActiproSoftware.SyntaxEditor.TriggerEventArgs" /> containing event data.</param><remarks>
            When you create a <c>TriggerEventHandler</c> delegate, you identify the method that will handle the event. 
            To associate the event with your event handler, add an instance of the delegate to the event. 
            The event handler is called whenever the event occurs, unless you remove the delegate.
            </remarks><seealso cref="T:ActiproSoftware.SyntaxEditor.TriggerEventArgs" /></member><member name="T:ActiproSoftware.SyntaxEditor.Addons.PlainText.PlainTextTokenID"><summary>
            Contains the token IDs for the <c>Plain Text</c> language.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.PlainText.PlainTextTokenID.GetTokenKey(System.Int32)"><summary>
            Returns the string-based key for the specified token ID.
            </summary><param name="id">The token ID to examine.</param></member><member name="F:ActiproSoftware.SyntaxEditor.Addons.PlainText.PlainTextTokenID.Invalid"><summary>
            The Invalid token ID.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.Addons.PlainText.PlainTextTokenID.DocumentEnd"><summary>
            The DocumentEnd token ID.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.Addons.PlainText.PlainTextTokenID.Default"><summary>
            The Default token ID.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.Addons.PlainText.PlainTextTokenID.Whitespace"><summary>
            The Whitespace token ID.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.Addons.PlainText.PlainTextTokenID.LineTerminator"><summary>
            The LineTerminator token ID.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.Addons.PlainText.PlainTextTokenID.Identifier"><summary>
            The Identifier token ID.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.Addons.PlainText.PlainTextTokenID.Number"><summary>
            The Number token ID.
            </summary></member><member name="T:ActiproSoftware.SyntaxEditor.Addons.PlainText.PlainTextLexicalStateID"><summary>
            Contains the lexical state IDs for the <c>Plain Text</c> language.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.PlainText.PlainTextLexicalStateID.GetLexicalStateKey(System.Int32)"><summary>
            Returns the string-based key for the specified lexical state ID.
            </summary><param name="id">The lexical state ID to examine.</param></member><member name="F:ActiproSoftware.SyntaxEditor.Addons.PlainText.PlainTextLexicalStateID.Default"><summary>
            The Default lexical state ID.
            </summary></member><member name="T:ActiproSoftware.SyntaxEditor.IntelliPromptCodeSnippets"><summary>
            Provides a code snippet manager.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.IntelliPromptCodeSnippets.Activate(ActiproSoftware.SyntaxEditor.CodeSnippet)"><summary>
            Activates the code snippet editing mode for the specified code snippet.
            </summary><param name="codeSnippet">The <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippet" /> to activate.</param><remarks>
            Use this overload for general code snippet insertions.
            Use the other overload when a shortcut should be replaced in text, like when a shortcut is typed followed by the <c>Tab</c> key.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.IntelliPromptCodeSnippets.Activate(ActiproSoftware.SyntaxEditor.CodeSnippet,System.Int32,System.Int32)"><summary>
            Activates the code snippet editing mode for the specified code snippet.
            </summary><param name="codeSnippet">The <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippet" /> to activate.</param><param name="insertOffset">The offset at which to replace text with the code snippet text.</param><param name="deleteLength">The number of characters to remove at the offset.</param><remarks>
            Use this overload when a shortcut should be replaced in text, like when a shortcut is typed followed by the <c>Tab</c> key.
            Use the other overload for general code snippet insertions.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.IntelliPromptCodeSnippets.Cancel"><summary>
            Cancels code snippet editing mode and returns to normal editing mode.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.IntelliPromptCodeSnippets.CheckForCodeSnippetShortcut(ActiproSoftware.SyntaxEditor.CodeSnippetFolder)"><summary>
            Checks the text preceeding the caret to see if it is a shortcut for a code snippet and if so, activates the code snippet.
            </summary><param name="codeSnippetFolder">The <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippetFolder" /> containing the code snippets to examine.</param><returns><c>true</c> if a valid shortcut was found and a code snippet was activated; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.IntelliPromptCodeSnippets.CheckForCodeSnippetShortcut(ActiproSoftware.SyntaxEditor.CodeSnippetFolderCollection)"><summary>
            Checks the text preceeding the caret to see if it is a shortcut for a code snippet and if so, activates the code snippet.
            </summary><param name="codeSnippetFolders">The <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippetFolderCollection" /> containing the code snippets to examine.</param><returns><c>true</c> if a valid shortcut was found and a code snippet was activated; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.IntelliPromptCodeSnippets.Dispose(System.Boolean)"><summary>
            Releases the unmanaged resources used by the object and optionally releases the managed resources.
            </summary><param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources. 
            </param><remarks>
            This method is called by the public <c>Dispose</c> method and the <c>Finalize</c> method. 
            <c>Dispose</c> invokes this method with the <paramref name="disposing" /> parameter set to <c>true</c>. 
            <c>Finalize</c> invokes this method with <paramref name="disposing" /> set to <c>false</c>.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.IntelliPromptCodeSnippets.GetTextForDeclaration(System.String)"><summary>
            Returns the current text in the editor for the specified declaration.
            </summary><param name="declarationID">The ID of the declaration for which to search.</param><returns>
            The current text in the editor for the specified declaration, 
            or <see langword="null" /> if the declaration is not in the editor.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.IntelliPromptCodeSnippets.GetTextRangeForDeclaration(System.String)"><summary>
            Returns the current <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> in the editor for the specified declaration.
            </summary><param name="declarationID">The ID of the declaration for which to search.</param><returns>
            The current <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> in the editor for the specified declaration, 
            or <see cref="P:ActiproSoftware.SyntaxEditor.TextRange.Deleted" /> if the declaration is not in the editor.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.IntelliPromptCodeSnippets.GotoNextField"><summary>
            Goes to the next field.
            </summary><returns><c>true</c> if an field was found; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.IntelliPromptCodeSnippets.GotoPreviousField"><summary>
            Goes to the previous field.
            </summary><returns><c>true</c> if an field was found; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.IntelliPromptCodeSnippets.ResetImageList"><summary>
            Resets the <see cref="P:ActiproSoftware.SyntaxEditor.IntelliPromptCodeSnippets.ImageList" /> property to its default value.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.IntelliPromptCodeSnippets.SetTextForDeclaration(System.String,System.String,System.Boolean)"><summary>
            Sets the text of the specified declaration.
            </summary><param name="declarationID">The ID of the declaration for which to search.</param><param name="text">The text to set.</param><param name="updateDependentFields">Whether to update dependent fields in addition to the primary field.</param></member><member name="M:ActiproSoftware.SyntaxEditor.IntelliPromptCodeSnippets.ShowInsertSnippetPopup(System.Int32,System.String,ActiproSoftware.SyntaxEditor.CodeSnippetFolderCollection,ActiproSoftware.SyntaxEditor.CodeSnippetTypes)"><summary>
            Shows the Insert Snippet popup, initialized with a collection of <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippetFolder" /> objects.
            </summary><param name="offset">The offset at which to display the popup.</param><param name="labelText">The text of the label on the popup.</param><param name="folders">The <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippetFolderCollection" /> containing code snippet folders.</param><param name="type">A <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippetTypes" /> indicating the type of code snippets to include.</param><returns><c>true</c> if the popup is displayed; otherwise, <c>false</c>.
            </returns><remarks>
            The popup is not displayed if there is nothing that matches the specified <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippetTypes" /> filter.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.IntelliPromptCodeSnippets.ShowInsertSnippetPopup(System.Int32,System.String,ActiproSoftware.SyntaxEditor.CodeSnippetFolder,ActiproSoftware.SyntaxEditor.CodeSnippetTypes)"><summary>
            Shows the Insert Snippet popup, initialized with a single <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippetFolder" />.
            </summary><param name="offset">The offset at which to display the popup.</param><param name="labelText">The text of the label on the popup.</param><param name="folder">The <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippetFolder" /> containing code snippets.</param><param name="type">A <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippetTypes" /> indicating the type of code snippets to include.</param><returns><c>true</c> if the popup is displayed; otherwise, <c>false</c>.
            </returns><remarks>
            The popup is not displayed if there is nothing that matches the specified <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippetTypes" /> filter.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.IntelliPromptCodeSnippets.ActiveCodeSnippet"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippet" /> that is currently active.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippet" /> that is currently active.</value></member><member name="P:ActiproSoftware.SyntaxEditor.IntelliPromptCodeSnippets.AutoEscapeInsertSnippetDescriptions"><summary>
            Gets or sets whether code snippet and code snippet folder descriptions are automatically escaped for tooltip display.
            </summary><value><c>true</c> if code snippet and code snippet folder descriptions are automatically escaped for tooltip display; otherwise, <c>false</c>.
            </value><remarks>
            If this property is <c>false</c>, markup tags can be used to format the description text that is displayed as Insert Snippet member list tooltips.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.IntelliPromptCodeSnippets.AutoIndentSnippetCode"><summary>
            Gets or sets whether to auto-indent code snippet code based on the tabstop level of the current line.
            </summary><value><c>true</c> if the code snippet code should be auto-indented; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.IntelliPromptCodeSnippets.ImageList"><summary>
            Gets or sets an <see cref="P:ActiproSoftware.SyntaxEditor.IntelliPromptCodeSnippets.ImageList" /> that can be used for code snippet images in the <see cref="T:ActiproSoftware.SyntaxEditor.IntelliPromptMemberList" />.
            </summary><value>An <see cref="P:ActiproSoftware.SyntaxEditor.IntelliPromptCodeSnippets.ImageList" /> that can be used for code snippet images in the <see cref="T:ActiproSoftware.SyntaxEditor.IntelliPromptMemberList" />.</value></member><member name="P:ActiproSoftware.SyntaxEditor.IntelliPromptCodeSnippets.InsertSnippetPopupSeparator"><summary>
            Gets or sets the character used to separate the levels in the Insert Snippet popup.
            </summary><value>The character used to separate the levels in the Insert Snippet popup.</value></member><member name="P:ActiproSoftware.SyntaxEditor.IntelliPromptCodeSnippets.IsActive"><summary>
            Gets whether code snippet editing mode is active.
            </summary><value><c>true</c> if code snippet editing mode is active; otherwise, <c>false</c>.
            </value></member><member name="F:ActiproSoftware.SyntaxEditor.IntelliPromptCodeSnippets.LanguageCSharp"><summary>
            Gets the constant value for the C# language.
            </summary><value>The constant value for the C# language.</value></member><member name="F:ActiproSoftware.SyntaxEditor.IntelliPromptCodeSnippets.LanguageJSharp"><summary>
            Gets the constant value for the J# language.
            </summary><value>The constant value for the J# language.</value></member><member name="F:ActiproSoftware.SyntaxEditor.IntelliPromptCodeSnippets.LanguageVB"><summary>
            Gets the constant value for the VB.NET language.
            </summary><value>The constant value for the VB.NET language.</value></member><member name="F:ActiproSoftware.SyntaxEditor.IntelliPromptCodeSnippets.LanguageXML"><summary>
            Gets the constant value for the XML language.
            </summary><value>The constant value for the XML language.</value></member><member name="T:ActiproSoftware.SyntaxEditor.IntelliPromptParameterInfo"><summary>
            Provides control for the IntelliPrompt parameter info tooltip.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.IntelliPromptParameterInfo.Dispose(System.Boolean)"><summary>
            Releases the unmanaged resources used by the object and optionally releases the managed resources.
            </summary><param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources. 
            </param><remarks>
            This method is called by the public <c>Dispose</c> method and the <c>Finalize</c> method. 
            <c>Dispose</c> invokes this method with the <paramref name="disposing" /> parameter set to <c>true</c>. 
            <c>Finalize</c> invokes this method with <paramref name="disposing" /> set to <c>false</c>.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.IntelliPromptParameterInfo.Hide"><summary>
            Hides the quick info, if displayed.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.IntelliPromptParameterInfo.MeasureAndResize(System.Drawing.Point)"><summary>
            Measures the parameter info based on the current selection and resizes the tip.
            </summary><param name="location">The <see cref="T:System.Drawing.Point" /> at which to show the parameter info.  This is used to determine what <c>Screen</c> the tip will appear in.</param><returns><c>true</c> if the parameter info was measured successfully and should be displayed; otherwise, <c>false</c>.
            </returns><remarks>
            After calling this method, use the <see cref="P:ActiproSoftware.SyntaxEditor.IntelliPromptParameterInfo.DesktopBounds" /> property to retrieve the <c>Size</c> of the parameter info.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.IntelliPromptParameterInfo.SelectNext"><summary>
            Selects the next info item.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.IntelliPromptParameterInfo.SelectPrevious"><summary>
            Selects the previous info item.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.IntelliPromptParameterInfo.Show(System.Int32)"><summary>
            Shows the tooltip at the specified offset.
            </summary><param name="offset">The offset specifying where to display the tooltip.</param></member><member name="M:ActiproSoftware.SyntaxEditor.IntelliPromptParameterInfo.Show(System.Drawing.Point)"><summary>
            Shows the tooltip at the specified <see cref="T:System.Drawing.Point" />.
            </summary><param name="location">The <see cref="T:System.Drawing.Point" /> at which to show the parameter info.</param></member><member name="M:ActiproSoftware.SyntaxEditor.IntelliPromptParameterInfo.UpdateParameterIndex"><summary>
            Updates the <see cref="P:ActiproSoftware.SyntaxEditor.IntelliPromptParameterInfo.ParameterIndex" /> based on the caret location.
            </summary><returns><c>true</c> if the <see cref="P:ActiproSoftware.SyntaxEditor.IntelliPromptParameterInfo.ParameterIndex" /> was scanned and updated; otherwise, <c>false</c>.
            </returns><remarks>
            Both a <see cref="P:ActiproSoftware.SyntaxEditor.IntelliPromptParameterInfo.ValidTextRange" /> and <see cref="P:ActiproSoftware.SyntaxEditor.IntelliPromptParameterInfo.ParameterDelimiterCharacter" /> must be specified for this method to execute.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.IntelliPromptParameterInfo.ArrowKeySelectionEnabled"><summary>
            Gets or sets whether arrow key selection is enabled.
            </summary><value><c>true</c> if arrow key selection is enabled; otherwise, <c>false</c>.
            </value><remarks>
            If enabled, the Down arrow key selects the next entry in the parameter info and the Up arrow key
            selects the previous entry in the parameter info.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.IntelliPromptParameterInfo.Bounds"><summary>
            Gets the size and location of the popup.
            </summary><value>A <see cref="T:System.Drawing.Rectangle" /> indicating the size and location of the popup.</value></member><member name="P:ActiproSoftware.SyntaxEditor.IntelliPromptParameterInfo.CloseDelimiterCharacter"><summary>
            Gets or sets the character that flags the close of the parameter info context.
            </summary><value>The character that flags the close of the parameter info context.  The default value is <c>)</c>.</value><remarks><para>
            This property is only used if a <see cref="P:ActiproSoftware.SyntaxEditor.IntelliPromptParameterInfo.ValidTextRange" /> is specified and will hide the parameter info
            automatically if the end user types the character.
            </para><para>
            Set this property to a null character to disable automated parameter info hiding when the character is typed.
            </para></remarks></member><member name="P:ActiproSoftware.SyntaxEditor.IntelliPromptParameterInfo.Context"><summary>
            Gets or sets an object that describes the context of the parameter info.
            </summary><value>An object that describes the context of the parameter info.</value><remarks>
            This property is automatically cleared when the parameter info is hidden.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.IntelliPromptParameterInfo.DesktopBounds"><summary>
            Gets the size and location of the popup on the desktop.
            </summary><value>A <see cref="T:System.Drawing.Rectangle" /> indicating the size and location of the popup.</value></member><member name="P:ActiproSoftware.SyntaxEditor.IntelliPromptParameterInfo.Font"><summary>
            Gets or sets the <c>Font</c> for the parameter info.
            </summary><value>The <c>Font</c> for the parameter info.</value></member><member name="P:ActiproSoftware.SyntaxEditor.IntelliPromptParameterInfo.HideOnParentFormDeactivate"><summary>
            Gets or sets whether to hide the parameter info when the parent form is deactivated.
            </summary><value><c>true</c> if the parameter info should be hidden when the parent form is deactivated; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.IntelliPromptParameterInfo.Info"><summary>
            Gets the <see cref="T:System.Collections.Specialized.StringCollection" /> that stores the information for the parameter info.
            </summary><value>The <see cref="T:System.Collections.Specialized.StringCollection" /> that stores the information for the parameter info.</value></member><member name="P:ActiproSoftware.SyntaxEditor.IntelliPromptParameterInfo.MaximumWidth"><summary>
            Gets or sets whether the maximum width of the popup.
            </summary><value>The maximum width of the popup.</value><remarks>
            Use a maximum width of <c>0</c> to specify no maximum.
            When a popup's desired width is greater than the maximum width, it will wrap its contents as needed.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.IntelliPromptParameterInfo.ParameterDelimiterCharacter"><summary>
            Gets or sets the character that separates parameters for automated <see cref="P:ActiproSoftware.SyntaxEditor.IntelliPromptParameterInfo.ParameterIndex" /> updating.
            </summary><value>The character that separates parameters for automated <see cref="P:ActiproSoftware.SyntaxEditor.IntelliPromptParameterInfo.ParameterIndex" /> updating.  The default value is <c>,</c>.</value><remarks><para>
            This property is only used if a <see cref="P:ActiproSoftware.SyntaxEditor.IntelliPromptParameterInfo.ValidTextRange" /> is specified and will update the <see cref="P:ActiproSoftware.SyntaxEditor.IntelliPromptParameterInfo.ParameterIndex" />
            property automatically when the caret moves.
            </para><para>
            Set this property to a null character (<c>'\0'</c>) to disable automated <see cref="P:ActiproSoftware.SyntaxEditor.IntelliPromptParameterInfo.ParameterIndex" /> updating.
            </para></remarks></member><member name="P:ActiproSoftware.SyntaxEditor.IntelliPromptParameterInfo.ParameterIndex"><summary>
            Gets or sets the index of the parameter that the caret is currently over within the <see cref="P:ActiproSoftware.SyntaxEditor.IntelliPromptParameterInfo.ValidTextRange" />.
            </summary><value>The index of the parameter that the caret is currently over within the <see cref="P:ActiproSoftware.SyntaxEditor.IntelliPromptParameterInfo.ValidTextRange" />.</value><remarks><para>
            This property is automatically updated if both the <see cref="P:ActiproSoftware.SyntaxEditor.IntelliPromptParameterInfo.ValidTextRange" /> and <see cref="P:ActiproSoftware.SyntaxEditor.IntelliPromptParameterInfo.ParameterDelimiterCharacter" />
            properties are specified.
            </para><para>
            This property is automatically cleared when the parameter info is hidden.
            </para></remarks></member><member name="P:ActiproSoftware.SyntaxEditor.IntelliPromptParameterInfo.SelectedIndex"><summary>
            Gets or sets the index of the selected item in the <see cref="P:ActiproSoftware.SyntaxEditor.IntelliPromptParameterInfo.Info" /> collection.
            </summary><value>The index of the selected item in the <see cref="P:ActiproSoftware.SyntaxEditor.IntelliPromptParameterInfo.Info" /> collection.</value></member><member name="P:ActiproSoftware.SyntaxEditor.IntelliPromptParameterInfo.Tag"><summary>
            Gets or sets the object that contains user-defined data about the object.
            </summary><value>
            An <see cref="T:System.Object" /> that contains user-defined data about the control. The default is <see langword="null" />.
            </value><remarks>
            Any type derived from the <see cref="T:System.Object" /> class can be assigned to this property. 
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.IntelliPromptParameterInfo.ValidTextRange"><summary>
            Gets or sets the <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> that the caret may stay within for the parameter info to remain visible.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> that the caret may stay within for the parameter info to remain visible.</value><remarks>
            This property is automatically cleared when the parameter info is hidden.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.IntelliPromptParameterInfo.Visible"><summary>
            Gets whether the parameter info is currently visible.
            </summary><value><c>true</c> if the parameter info is currently visible; otherwise, <c>false</c>.
            </value></member><member name="T:ActiproSoftware.SyntaxEditor.IntelliPromptMemberList"><summary>
            Provides control for the IntelliPrompt member list.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.IntelliPromptMemberList.GetItemReflectionForAssemblyNamespacesAndTypes(System.Reflection.Assembly[],ActiproSoftware.SyntaxEditor.IntelliPromptNamespaceAndTypeFlags[],System.Collections.Specialized.StringCollection,System.Type,System.Boolean)"><summary>
            Uses reflection to contruct member list items representing the namespaces in the specified <see cref="T:System.Reflection.Assembly" /> objects.
            </summary><param name="assemblies">The array of <see cref="T:System.Reflection.Assembly" /> to examine.</param><param name="flags">The array of <see cref="T:ActiproSoftware.SyntaxEditor.IntelliPromptNamespaceAndTypeFlags" /> to use for each related <see cref="T:System.Reflection.Assembly" />.</param><param name="namespaceNames">The names of the namespaces that can populate the list.  An example entry is <c>"System"</c>.</param><param name="mustInheritFrom">The <see cref="T:System.Type" /> from which any reflected types must inherit.  A <see langword="null" /> can be passed in to place no restriction on reflected types.</param><param name="ignoreCase"><c>true</c> if the namespace name matching should be case insensitive; otherwise, <c>false</c>.  This is useful for languages like VB.NET.</param><returns>
            An array of <see cref="T:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListItem" /> objects.
            </returns><remarks><para>
            Ensure that you pass flags for each assembly that indicate whether to load namespaces or types 
            (use <c>IntelliPromptNamespaceAndTypeFlags.NamespacesAndTypes</c> for both namespaces and types),
            and the access types (use <c>IntelliPromptTypeMemberFlags.AllAccessTypes</c> for all access types),
            If you do not indicate at least one flag for the categories mentioned above, the list will not populate with anything.
            </para><para>
            The number of items in the two array parameters must be exactly the same since each item in one array corresponds to the 
            item in the same position within the other array.
            </para><para>
            The <c>Tag</c> property of each item will contain a string containing the full namespace name for reflected namespaces and
            the <see cref="T:System.Type" /> object for the reflected types.
            </para></remarks></member><member name="M:ActiproSoftware.SyntaxEditor.IntelliPromptMemberList.GetItemReflectionForTypeMembers(System.Type,ActiproSoftware.SyntaxEditor.IntelliPromptTypeMemberFlags)"><summary>
            Uses reflection to contruct member list items for the specified <see cref="T:System.Type" />.
            </summary><param name="type">The <see cref="T:System.Type" /> to examine.</param><param name="flags">A bitmask of <see cref="T:ActiproSoftware.SyntaxEditor.IntelliPromptTypeMemberFlags" /> indicating the flags to use when adding items.</param><returns>
            An array of <see cref="T:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListItem" /> objects.
            </returns><remarks><para>
            Ensure that you pass flags that indicate the member types (use <c>IntelliPromptTypeMemberFlags.AllMemberTypes</c> for all member types),
            the access types (use <c>IntelliPromptTypeMemberFlags.AllAccessTypes</c> for all access types),
            and whether to display <c>IntelliPromptTypeMemberFlags.Instance</c> or <c>IntelliPromptTypeMemberFlags.Static</c> members.
            If you do not indicate at least one flag for the categories mentioned above, the list will not populate with anything.
            </para><para>
            The <c>Tag</c> property of each item will contain the <see cref="T:System.Reflection.MemberInfo" /> for the reflected type.
            </para></remarks></member><member name="M:ActiproSoftware.SyntaxEditor.IntelliPromptMemberList.Abort"><summary>
            Aborts the current IntelliPrompt operation.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.IntelliPromptMemberList.Add(ActiproSoftware.SyntaxEditor.IntelliPromptMemberListItem)"><summary>
            Adds an item to the member list.
            </summary><param name="item">The <see cref="T:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListItem" /> to add to the member list.</param></member><member name="M:ActiproSoftware.SyntaxEditor.IntelliPromptMemberList.AddRange(ActiproSoftware.SyntaxEditor.IntelliPromptMemberListItem[])"><summary>
            Adds an array of items to the member list.
            </summary><param name="items">An array of <see cref="T:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListItem" /> objects to add to the member list.</param></member><member name="M:ActiproSoftware.SyntaxEditor.IntelliPromptMemberList.AddReflectionForAssemblyNamespacesAndTypes(System.Reflection.Assembly[],ActiproSoftware.SyntaxEditor.IntelliPromptNamespaceAndTypeFlags[],System.Collections.Specialized.StringCollection,System.Type,System.Boolean)"><summary>
            Uses reflection to add items representing the namespaces in the specified <see cref="T:System.Reflection.Assembly" /> objects.
            </summary><param name="assemblies">The array of <see cref="T:System.Reflection.Assembly" /> to examine.</param><param name="flags">The array of <see cref="T:ActiproSoftware.SyntaxEditor.IntelliPromptNamespaceAndTypeFlags" /> to use for each related <see cref="T:System.Reflection.Assembly" />.</param><param name="namespaceNames">The names of the namespaces that can populate the list.  An example entry is <c>"System"</c>.</param><param name="mustInheritFrom">The <see cref="T:System.Type" /> from which any reflected types must inherit.  A <see langword="null" /> can be passed in to place no restriction on reflected types.</param><param name="ignoreCase"><c>true</c> if the namespace name matching should be case insensitive; otherwise, <c>false</c>.  This is useful for languages like VB.NET.</param><remarks><para>
            This method calls <see cref="M:ActiproSoftware.SyntaxEditor.IntelliPromptMemberList.GetItemReflectionForAssemblyNamespacesAndTypes(System.Reflection.Assembly[],ActiproSoftware.SyntaxEditor.IntelliPromptNamespaceAndTypeFlags[],System.Collections.Specialized.StringCollection,System.Type,System.Boolean)" /> to retrive the items to add.
            </para><para>
            Ensure that you pass flags for each assembly that indicate whether to load namespaces or types 
            (use <c>IntelliPromptNamespaceAndTypeFlags.NamespacesAndTypes</c> for both namespaces and types),
            and the access types (use <c>IntelliPromptTypeMemberFlags.AllAccessTypes</c> for all access types),
            If you do not indicate at least one flag for the categories mentioned above, the list will not populate with anything.
            </para><para>
            The number of items in the two array parameters must be exactly the same since each item in one array corresponds to the 
            item in the same position within the other array.
            </para><para>
            The <c>Tag</c> property of each item will contain a string containing the full namespace name for reflected namespaces and
            the <see cref="T:System.Type" /> object for the reflected types.
            </para></remarks></member><member name="M:ActiproSoftware.SyntaxEditor.IntelliPromptMemberList.AddReflectionForTypeMembers(System.Type,ActiproSoftware.SyntaxEditor.IntelliPromptTypeMemberFlags)"><summary>
            Uses reflection to add items for the specified <see cref="T:System.Type" />.
            </summary><param name="type">The <see cref="T:System.Type" /> to examine.</param><param name="flags">A bitmask of <see cref="T:ActiproSoftware.SyntaxEditor.IntelliPromptTypeMemberFlags" /> indicating the flags to use when adding items.</param><remarks><para>
            This method calls <see cref="M:ActiproSoftware.SyntaxEditor.IntelliPromptMemberList.GetItemReflectionForTypeMembers(System.Type,ActiproSoftware.SyntaxEditor.IntelliPromptTypeMemberFlags)" /> to retrive the items to add.
            </para><para>
            Ensure that you pass flags that indicate the member types (use <c>IntelliPromptTypeMemberFlags.AllMemberTypes</c> for all member types),
            the access types (use <c>IntelliPromptTypeMemberFlags.AllAccessTypes</c> for all access types),
            and whether to display <c>IntelliPromptTypeMemberFlags.Instance</c> or <c>IntelliPromptTypeMemberFlags.Static</c> members.
            If you do not indicate at least one flag for the categories mentioned above, the list will not populate with anything.
            </para><para>
            The <c>Tag</c> property of each item will contain the <see cref="T:System.Reflection.MemberInfo" /> for the reflected type.
            </para></remarks></member><member name="M:ActiproSoftware.SyntaxEditor.IntelliPromptMemberList.ResetAllowedCharacters"><summary>
            Resets the <see cref="P:ActiproSoftware.SyntaxEditor.IntelliPromptMemberList.AllowedCharacters" /> property to its default value.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.IntelliPromptMemberList.Clear"><summary>
            Clears the items in the member list.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.IntelliPromptMemberList.Complete"><summary>
            Completes the current IntelliPrompt operation.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.IntelliPromptMemberList.CompleteWord(System.Int32,System.Int32)"><summary>
            Performs an auto-complete if the text with which the member list is initialized causes a single selection.
            Otherwise, the <see cref="M:ActiproSoftware.SyntaxEditor.IntelliPromptMemberList.Show" /> method is called and the member list is displayed.
            </summary><param name="offset">The start offset at which the member list should be initialized.</param><param name="length">The number of characters with which to initialize the member list.</param><returns><c>true</c> if an auto-complete occurs without the display of a member list; otherwise, <c>false</c>.
            </returns><remarks>
            Use this overload when handling a Complete Word command.
            Pass in the offset range of existing text that should be replaced if an auto-complete occurs.
            The length must be at least one for this method.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.IntelliPromptMemberList.Contains(ActiproSoftware.SyntaxEditor.IntelliPromptMemberListItem)"><summary>
            Returns whether the specified object is in the collection.
            </summary><param name="value">The object to locate in the collection.</param><returns><c>true</c> if the object is found in the collection; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.IntelliPromptMemberList.CopyTo(System.Array,System.Int32)"><summary>
            Copies the entire collection to a compatible one-dimensional <c>Array</c>, 
            starting at the specified index of the target array.
            </summary><param name="array">
            The one-dimensional <c>Array</c> that is the destination of the elements copied from the collection. 
            The <c>Array</c> must have zero-based indexing. 
            </param><param name="startIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param></member><member name="M:ActiproSoftware.SyntaxEditor.IntelliPromptMemberList.Dispose(System.Boolean)"><summary>
            Releases the unmanaged resources used by the object and optionally releases the managed resources.
            </summary><param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources. 
            </param><remarks>
            This method is called by the public <c>Dispose</c> method and the <c>Finalize</c> method. 
            <c>Dispose</c> invokes this method with the <paramref name="disposing" /> parameter set to <c>true</c>. 
            <c>Finalize</c> invokes this method with <paramref name="disposing" /> set to <c>false</c>.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.IntelliPromptMemberList.GetEnumerator"><summary>
            Retrieves an <c>IEnumerator</c> object for the entire collection.
            </summary><returns>An <c>IEnumerator</c> object for the entire collection</returns><remarks>
            Enumerators are intended to be used only to read data in the collection. 
            Enumerators cannot be used to modify the underlying collection.
            <para>
            The enumerator does not have exclusive access to the collection.
            </para><para>
            When an enumerator is instantiated, it takes a snapshot of the current state of the collection. 
            If changes are made to the collection, such as adding, modifying or deleting elements, the 
            snapshot gets out of sync and the enumerator throws an <c>InvalidOperationException</c>. 
            Two enumerators instantiated from the same collection at the same time can have 
            different snapshots of the collection.
            </para></remarks></member><member name="M:ActiproSoftware.SyntaxEditor.IntelliPromptMemberList.IndexOf(ActiproSoftware.SyntaxEditor.IntelliPromptMemberListItem)"><summary>
            Searches for the specified object and returns the zero-based index of the first occurrence within the entire collection.
            </summary><param name="value">The object to locate in the collection.</param><returns>
            The zero-based index of the first occurrence of the object within the entire collection, if found; otherwise, <c>-1</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.IntelliPromptMemberList.Remove(ActiproSoftware.SyntaxEditor.IntelliPromptMemberListItem)"><summary>
            Removes an item from the member list.
            </summary><param name="item">The <see cref="T:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListItem" /> to remove from the member list.</param></member><member name="M:ActiproSoftware.SyntaxEditor.IntelliPromptMemberList.RemoveAt(System.Int32)"><summary>
            Removes the item at the specified index from the member list.
            </summary><param name="index">The index of the <see cref="T:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListItem" /> to remove from the member list.</param></member><member name="M:ActiproSoftware.SyntaxEditor.IntelliPromptMemberList.Show"><summary>
            Shows the member list.
            </summary><remarks>Use this overload when showing the member list from a trigger.</remarks></member><member name="M:ActiproSoftware.SyntaxEditor.IntelliPromptMemberList.Show(System.Int32,System.Int32)"><summary>
            Shows the member list and initializes the member list with a range of existing text.
            </summary><param name="offset">The start offset at which the member list should be initialized.</param><param name="length">The number of characters with which to initialize the member list.</param><remarks>
            Use this overload when showing the member list in response to a Show Member List command.
            Pass in the offset range of existing text that should be replaced if an auto-complete occurs.
            If the caret exists the range, the member list is cancelled.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.IntelliPromptMemberList.UpdateDescriptionTip"><summary>
            Forces an update to the member list description tip.
            </summary><remarks>
            This method can be called in scenarios such as where a link clicked on a description tip should modify the contents
            of the description tip.  This method will refresh the description tip UI with the updated contents.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.IntelliPromptMemberList.CompleteOnSingleClickEnabled"><summary>
            Gets or sets whether the member list will be completed when the end user single-clicks an item in the list.
            </summary><value><c>true</c> if the member list will be completed when the end user single-clicks an item in the list; otherwise, <c>false</c>.
            </value><remarks>
            The default value is <c>false</c>.  Normally the end user has to double-click an item to complete the member list,
            so setting this option might be more useful when displaying the member list in response to a right-click.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.IntelliPromptMemberList.AllowedCharacters"><summary>
            Gets or sets the <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> of non-letter/digit characters allowed to be typed while the list is displayed.
            </summary><value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> of non-letter/digit characters allowed to be typed while the list is displayed.
            The default value is a <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> that contains the underscore character.
            </value><remarks>
            All letter and digit characters are automatically allowed by the member list and therefore do not need to added to this property.
            This property should only contain additional non-letter/digit characters that need to be allowed.
            <para>
            If a character is typed that is not a letter/digit and is not contained in this character set, the list is closed.
            </para></remarks></member><member name="P:ActiproSoftware.SyntaxEditor.IntelliPromptMemberList.CaseSensitiveMatch"><summary>
            Gets or sets whether to match items using case sensitive comparisons.
            </summary><value><c>true</c> if items should be matched using case sensitive comparisons; otherwise, <c>false</c>.
            </value><remarks>
            Even if this option is set, if no case sensitive match is found, the code will fall back to an insensitive match.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.IntelliPromptMemberList.Context"><summary>
            Gets or sets an object that describes the context of the member list.
            </summary><value>An object that describes the context of the member list.</value><remarks>
            This property is automatically cleared immediately following the <see cref="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.IntelliPromptMemberListClosing" /> event.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.IntelliPromptMemberList.Count"><summary>
            Gets the number of items contained in the collection.
            </summary><value>The number of items contained in the collection.</value></member><member name="P:ActiproSoftware.SyntaxEditor.IntelliPromptMemberList.DescriptionTipFont"><summary>
            Gets or sets the <c>Font</c> for the member list description tip.
            </summary><value>The <c>Font</c> for the member list description tip.</value></member><member name="P:ActiproSoftware.SyntaxEditor.IntelliPromptMemberList.Font"><summary>
            Gets or sets the <c>Font</c> for the member list.
            </summary><value>The <c>Font</c> for the member list.</value></member><member name="P:ActiproSoftware.SyntaxEditor.IntelliPromptMemberList.HideOnParentFormDeactivate"><summary>
            Gets or sets whether to hide the member list when the parent form is deactivated.
            </summary><value><c>true</c> if the member list should be hidden when the parent form is deactivated; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.IntelliPromptMemberList.ImageList"><summary>
            Gets or sets the <c>ImageList</c> used for list item images. 
            </summary><value>
            An <c>ImageList</c>.  The default value is a null reference. 
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.IntelliPromptMemberList.IsSelectionVirtual"><summary>
            Gets whether the currently selected item is not fully selected.
            </summary><value><c>true</c> if the currently selected item is not fully selected; otherwise, <c>false</c>.
            </value><remarks>
            When not fully selected, the item will not have a background highlight and will have a dotted border around it.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.IntelliPromptMemberList.IsSynchronized"><summary>
            Gets a value indicating whether access to the collection is synchronized (thread-safe).
            </summary><value><c>true</c> if the collection is synchronized (thread-safe); otherwise, <c>false</c>.
            </value><remarks>
            To guarantee the thread safety of the collection, all operations must be done through 
            the wrapper returned by the <see cref="P:ActiproSoftware.SyntaxEditor.IntelliPromptMemberList.SyncRoot" /> property.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.IntelliPromptMemberList.MatchBasedOnItemPreText"><summary>
            Gets or sets whether to match typed text to an item's <see cref="P:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListItem.AutoCompletePreText" />.
            </summary><value><c>true</c> if typed text should match to an item's <see cref="P:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListItem.AutoCompletePreText" />; otherwise, <c>false</c>.
            </value><remarks>
            If this property is <c>false</c>, then typed text will match to an item's <see cref="P:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListItem.Text" /> property instead.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.IntelliPromptMemberList.SelectedItem"><summary>
            Gets or sets the <see cref="T:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListItem" /> that is currently selected.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListItem" /> that is currently selected.</value></member><member name="P:ActiproSoftware.SyntaxEditor.IntelliPromptMemberList.Sorted"><summary>
            Gets or sets whether to auto-sort the contents of the list.
            </summary><value><c>true</c> if the contents of the list should be auto-sorted; otherwise, <c>false</c>.
            </value><remarks>
            This property should only be set to <c>false</c> if the items are pre-sorted.  Items must always end up in the list in alphabetical
            order or some functionality will not work correctly.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.IntelliPromptMemberList.SyncRoot"><summary>
            Gets an <c>Object</c> that can be used to synchronize access to the collection.
            </summary><value>
            An <c>Object</c> that can be used to synchronize access to the collection.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.IntelliPromptMemberList.Tag"><summary>
            Gets or sets the object that contains user-defined data about the object.
            </summary><value>
            An <see cref="T:System.Object" /> that contains user-defined data about the control. The default is <see langword="null" />.
            </value><remarks>
            Any type derived from the <see cref="T:System.Object" /> class can be assigned to this property. 
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.IntelliPromptMemberList.Item(System.Int32)"><summary>
            Gets or sets the <see cref="T:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListItem" /> at the specified index. 
            <para>
            [C#] In C#, this property is the indexer for the <c>IntelliPromptMemberList</c> class. 
            </para></summary><param name="index">The index of the <see cref="T:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListItem" /> to return.</param><value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListItem" /> at the specified index. 
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.IntelliPromptMemberList.Visible"><summary>
            Gets whether the member list is currently visible.
            </summary><value><c>true</c> if the member list is currently visible; otherwise, <c>false</c>.
            </value></member><member name="T:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListBox"><summary>
            Represents an owner-draw <see cref="T:System.Windows.Forms.ListBox" /> for an IntelliPrompt member list.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListBox.OnClick(System.EventArgs)"><summary>
            Occurs when the control is clicked.
            </summary><param name="e">An <c>EventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListBox.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)"><summary>
            Occurs when an item needs to be drawn.
            </summary><param name="e">A <c>DrawItemEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListBox.OnFontChanged(System.EventArgs)"><summary>
            Raises the <c>FontChanged</c> event.
            </summary><param name="e">An <c>EventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListBox.OnIsSelectionVirtualChanged(System.EventArgs)"><summary>
            Raises the <c>IsSelectionVirtualChanged</c> event.
            </summary><param name="e"></param></member><member name="M:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListBox.WndProc(System.Windows.Forms.Message@)"><summary>
            Occurs when a message is sent to the control.
            </summary><param name="m">Information about the message.</param></member><member name="M:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListBox.#ctor"><summary>
            Initializes a new instance of the <c>IntelliPromptMemberListBox</c> class. 
            </summary><remarks>
            The default constructor initializes all fields to their default values.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListBox.CaseSensitiveMatch"><summary>
            Gets or sets whether to match items using case sensitive comparisons.
            </summary><value><c>true</c> if items should be matched using case sensitive comparisons; otherwise, <c>false</c>.
            </value><remarks>
            Even if this option is set, if no case sensitive match is found, the code will fall back to an insensitive match.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListBox.ImageList"><summary>
            Gets or sets the <c>ImageList</c> used for item images. 
            </summary><value>
            An <c>ImageList</c>.  The default value is a null reference. 
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListBox.IsSelectionVirtual"><summary>
            Gets whether there is a virtual selection.
            </summary><value><c>true</c> if there is a virtual selection; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListBox.ItemsVisible"><summary>
            Gets the number of items that are visible.
            </summary><value>The number of items that are visible.</value></member><member name="P:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListBox.SelectedIndex"><summary>
            Gets or sets the zero-based index of the currently selected item in a <see cref="T:System.Windows.Forms.ListBox" />.
            </summary><value>
            A zero-based index of the currently selected item. 
            A value of <c>-1</c> is returned if no item is selected.
            </value></member><member name="E:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListBox.IsSelectionVirtualChanged"><summary>
            Occurs when the <see cref="P:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListBox.IsSelectionVirtual" /> property is changed.
            </summary></member><member name="E:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListBox.Scroll"><summary>
            Occurs when scrolling occurs.
            </summary></member><member name="T:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListItem"><summary>
            Represents an item for an <see cref="T:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListBox" />.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListItem.GetDesiredWidth(System.Drawing.Graphics,ActiproSoftware.SyntaxEditor.IntelliPromptMemberListBox)"><summary>
            Measures the item and returns the desired width.
            </summary><param name="g">The <see cref="T:System.Drawing.Graphics" /> object to use for measurement.</param><param name="listBox">The <see cref="T:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListBox" /> that contains the item.</param><returns>The desired width of the item.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListItem.OnRender(System.Windows.Forms.DrawItemEventArgs,ActiproSoftware.SyntaxEditor.IntelliPromptMemberListBox)"><summary>
            Renders the item.
            </summary><param name="e">A <see cref="T:System.Windows.Forms.DrawItemEventArgs" /> that contains the event data.</param><param name="listBox">The <see cref="T:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListBox" /> that contains the item.</param><remarks>
            Override this method to provide custom rendering for an item.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListItem.ToString"><summary>
            Returns a <c>String</c> that represents the current <c>Object</c>.
            </summary><returns>A <c>String</c> that represents the current <c>Object</c>.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListItem.#ctor(System.String,System.Int32)"><summary>
            Initializes a new instance of the <c>IntelliPromptMemberListItem</c> class. 
            </summary><param name="text">The text displayed in the member list.</param><param name="imageIndex">The index of an image within the <see cref="P:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListBox.ImageList" />, displayed in the member list.</param></member><member name="M:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListItem.#ctor(System.String,System.Int32,System.Object)"><summary>
            Initializes a new instance of the <c>IntelliPromptMemberListItem</c> class. 
            </summary><param name="text">The text displayed in the member list.</param><param name="imageIndex">The index of an image within the <see cref="P:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListBox.ImageList" />, displayed in the member list.</param><param name="tag">The object that contains data about the item.</param></member><member name="M:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListItem.#ctor(System.String,System.Int32,System.String)"><summary>
            Initializes a new instance of the <c>IntelliPromptMemberListItem</c> class. 
            </summary><param name="text">The text displayed in the member list.</param><param name="imageIndex">The index of an image within the <see cref="P:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListBox.ImageList" />, displayed in the member list.</param><param name="description">A verbose description of the item.</param></member><member name="M:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListItem.#ctor(System.String,System.Int32,System.String,System.String,System.String)"><summary>
            Initializes a new instance of the <c>IntelliPromptMemberListItem</c> class. 
            </summary><param name="text">The text displayed in the member list.</param><param name="imageIndex">The index of an image within the <see cref="P:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListBox.ImageList" />, displayed in the member list.</param><param name="description">A verbose description of the item.</param><param name="autoCompletePreText">The text that is inserted into the document before the caret when auto-complete is executed.</param><param name="autoCompletePostText">The text that is inserted into the document after the caret when auto-complete is executed.</param></member><member name="M:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListItem.#ctor(System.String,System.Int32,System.String,System.String,System.String,System.Object)"><summary>
            Initializes a new instance of the <c>IntelliPromptMemberListItem</c> class. 
            </summary><param name="text">The text displayed in the member list.</param><param name="imageIndex">The index of an image within the <see cref="P:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListBox.ImageList" />, displayed in the member list.</param><param name="description">A verbose description of the item.</param><param name="autoCompletePreText">The text that is inserted into the document before the caret when auto-complete is executed.</param><param name="autoCompletePostText">The text that is inserted into the document after the caret when auto-complete is executed.</param><param name="tag">The object that contains data about the item.</param></member><member name="P:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListItem.AutoCompletePreText"><summary>
            Gets or sets the text that is inserted into the document before the caret when auto-complete is executed.
            </summary><value>The text that is inserted into the document before the caret when auto-complete is executed.</value></member><member name="P:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListItem.AutoCompletePostText"><summary>
            Gets or sets the text that is inserted into the document after the caret when auto-complete is executed.
            </summary><value>The text that is inserted into the document after the caret when auto-complete is executed.</value></member><member name="P:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListItem.Description"><summary>
            Gets or sets a verbose description of the item.
            </summary><value>A verbose description of the item.</value></member><member name="P:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListItem.ImageIndex"><summary>
            Gets or sets the index of an image within the <see cref="P:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListBox.ImageList" />, displayed in the member list. 
            </summary><value>
            The index of an image within the <see cref="P:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListBox.ImageList" />. 
            The default is <c>-1</c>. 
            </value><remarks>
            This property is set to <c>-1</c> if no image is to be displayed for the item. 
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListItem.Tag"><summary>
            Gets or sets the object that contains data about the item.
            </summary><value>The object that contains data about the item.</value></member><member name="P:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListItem.Text"><summary>
            Gets or sets the text displayed in the member list. 
            </summary><value>The text displayed for the item. The default is an empty string ("").</value></member><member name="T:ActiproSoftware.SyntaxEditor.IntelliPromptNamespaceAndTypeFlags"><summary>
            Specifies the flags to use when populating an IntelliPrompt namespaces and types member list.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.IntelliPromptNamespaceAndTypeFlags.Namespaces"><summary>
            Show namespaces.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.IntelliPromptNamespaceAndTypeFlags.Types"><summary>
            Show types.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.IntelliPromptNamespaceAndTypeFlags.NamespacesAndTypes"><summary>
            Show namespaces and types.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.IntelliPromptNamespaceAndTypeFlags.NonPublic"><summary>
            Show non-public namespaces and types.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.IntelliPromptNamespaceAndTypeFlags.Public"><summary>
            Show public namespaces and types.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.IntelliPromptNamespaceAndTypeFlags.AllAccessTypes"><summary>
            Show all access types (Public and NonPublic).
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.IntelliPromptNamespaceAndTypeFlags.CleanAttributeNames"><summary>
            When set, will remove the ending text "Attribute" from any <c>Type</c> that inherits <c>Attribute</c>.
            This is useful when showing a member list of <c>Attribute</c> types only.
            </summary></member><member name="T:ActiproSoftware.SyntaxEditor.IntelliPromptQuickInfo"><summary>
            Provides control for the IntelliPrompt quick info tooltip.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.IntelliPromptQuickInfo.Dispose(System.Boolean)"><summary>
            Releases the unmanaged resources used by the object and optionally releases the managed resources.
            </summary><param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources. 
            </param><remarks>
            This method is called by the public <c>Dispose</c> method and the <c>Finalize</c> method. 
            <c>Dispose</c> invokes this method with the <paramref name="disposing" /> parameter set to <c>true</c>. 
            <c>Finalize</c> invokes this method with <paramref name="disposing" /> set to <c>false</c>.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.IntelliPromptQuickInfo.GetQuickInfoForSyntaxHighlightedTextRange(ActiproSoftware.SyntaxEditor.TextRange,System.Int32)"><summary>
            Gets the quick info for a range of syntax-highlighted text.
            </summary><param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> of the text to scan.</param><param name="characterLimit">The maximum number of characters to allow.</param><returns>The quick info for a range of syntax-highlighted text.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.IntelliPromptQuickInfo.Hide"><summary>
            Hides the quick info, if displayed.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.IntelliPromptQuickInfo.Show(System.Int32,System.String)"><summary>
            Shows the tooltip under the specified offset.
            </summary><param name="offset">The offset under which to display the quick info.</param><param name="markupText">The text to show in the tooltip.</param></member><member name="M:ActiproSoftware.SyntaxEditor.IntelliPromptQuickInfo.Show(System.Drawing.Point,System.String)"><summary>
            Shows the tooltip at the specified location.
            </summary><param name="location">A client coordinate <see cref="T:System.Drawing.Point" /> specifying where to display the tooltip.</param><param name="markupText">The text to show in the tooltip.</param></member><member name="P:ActiproSoftware.SyntaxEditor.IntelliPromptQuickInfo.Bounds"><summary>
            Gets the size and location of the popup.
            </summary><value>A <see cref="T:System.Drawing.Rectangle" /> indicating the size and location of the popup.</value></member><member name="P:ActiproSoftware.SyntaxEditor.IntelliPromptQuickInfo.CollapsedOutliningNodeMaximumCharacterCount"><summary>
            Gets or sets the maximum number of characters that can appear in an auto-generated collapsed node tooltip.
            </summary><value>The maximum number of characters that can appear in an auto-generated collapsed node tooltip.</value></member><member name="P:ActiproSoftware.SyntaxEditor.IntelliPromptQuickInfo.CollapsedOutliningNodeSyntaxHighlightingEnabled"><summary>
            Gets or sets whether to enable syntax highlighting for collapsed outlining node quick info.
            </summary><value><c>true</c> if the syntax highlighting is enabled; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.IntelliPromptQuickInfo.Font"><summary>
            Gets or sets the <c>Font</c> for the quick info.
            </summary><value>The <c>Font</c> for the quick info.</value></member><member name="P:ActiproSoftware.SyntaxEditor.IntelliPromptQuickInfo.HideOnMouseMove"><summary>
            Gets or sets whether to hide the quick info immediately when the mouse moves outside the target context.
            </summary><value><c>true</c> if the quick info should be hidden immediately when the mouse moves outside the target context; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.IntelliPromptQuickInfo.HideOnParentFormDeactivate"><summary>
            Gets or sets whether to hide the quick info when the parent form is deactivated.
            </summary><value><c>true</c> if the quick info should be hidden when the parent form is deactivated; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.IntelliPromptQuickInfo.MaximumWidth"><summary>
            Gets or sets whether the maximum width of the popup.
            </summary><value>The maximum width of the popup.</value><remarks>
            Use a maximum width of <c>0</c> to specify no maximum.
            When a popup's desired width is greater than the maximum width, it will wrap its contents as needed.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.IntelliPromptQuickInfo.Tag"><summary>
            Gets or sets the object that contains user-defined data about the object.
            </summary><value>
            An <see cref="T:System.Object" /> that contains user-defined data about the control. The default is <see langword="null" />.
            </value><remarks>
            Any type derived from the <see cref="T:System.Object" /> class can be assigned to this property. 
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.IntelliPromptQuickInfo.Visible"><summary>
            Gets whether the quick info is currently visible.
            </summary><value><c>true</c> if the quick info is currently visible; otherwise, <c>false</c>.
            </value></member><member name="T:ActiproSoftware.SyntaxEditor.IntelliPromptTypeMemberFlags"><summary>
            Specifies the flags to use when populating an IntelliPrompt type member list.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.IntelliPromptTypeMemberFlags.Constants"><summary>
            Show constants.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.IntelliPromptTypeMemberFlags.Events"><summary>
            Show events.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.IntelliPromptTypeMemberFlags.Fields"><summary>
            Show fields.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.IntelliPromptTypeMemberFlags.Properties"><summary>
            Show properties.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.IntelliPromptTypeMemberFlags.Methods"><summary>
            Show methods.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.IntelliPromptTypeMemberFlags.NestedTypes"><summary>
            Show nested types.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.IntelliPromptTypeMemberFlags.AllMemberTypes"><summary>
            Show all member types (Constants, Events, Fields, Properties, Methods, and Nested Types).
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.IntelliPromptTypeMemberFlags.Private"><summary>
            Show private members.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.IntelliPromptTypeMemberFlags.Assembly"><summary>
            Show assembly (internal) members.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.IntelliPromptTypeMemberFlags.Family"><summary>
            Show family (protected) members.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.IntelliPromptTypeMemberFlags.Public"><summary>
            Show public members.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.IntelliPromptTypeMemberFlags.AllAccessTypes"><summary>
            Show all access types (Public, Assembly, Family, and Private).
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.IntelliPromptTypeMemberFlags.Instance"><summary>
            Show instance members.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.IntelliPromptTypeMemberFlags.Static"><summary>
            Show static members.
            </summary></member><member name="T:ActiproSoftware.SyntaxEditor.Outlining"><summary>
            Provides control over the outlining state of a <see cref="T:ActiproSoftware.SyntaxEditor.Document" />.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Outlining.Add(ActiproSoftware.SyntaxEditor.IOutliningNodeParseData,System.Int32,System.Int32)"><summary>
            Adds a new outlining node for the specified start and end offset range while in manual outlining mode.
            </summary><param name="parseData">The <see cref="T:ActiproSoftware.SyntaxEditor.IOutliningNodeParseData" /> to assigned to the node that is created.</param><param name="startOffset">The offset at which to start the new <see cref="T:ActiproSoftware.SyntaxEditor.OutliningNode" />.</param><param name="endOffset">The offset at which to end the new <see cref="T:ActiproSoftware.SyntaxEditor.OutliningNode" />.</param><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.OutliningNode" /> that was created.</returns><remarks><para>This method may only be called in manual outlining mode and will throw an exception if not.</para><para>If the start offset is greater than or equal to the end offset, no node will be created.</para></remarks></member><member name="M:ActiproSoftware.SyntaxEditor.Outlining.Add(ActiproSoftware.SyntaxEditor.IOutliningNodeParseData,System.Int32)"><summary>
            Adds a new outlining node at the specified start offset while in automatic outlining mode.
            </summary><param name="parseData">The <see cref="T:ActiproSoftware.SyntaxEditor.IOutliningNodeParseData" /> to assigned to the node that is created.</param><param name="startOffset">The offset at which to start the new <see cref="T:ActiproSoftware.SyntaxEditor.OutliningNode" />.</param><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.OutliningNode" /> that was created.</returns><remarks>This method may only be called in automatic outlining mode and will throw an exception if not.</remarks></member><member name="M:ActiproSoftware.SyntaxEditor.Outlining.Clear"><summary>
            Removes all outlining nodes in the hierarchy.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Outlining.Close(ActiproSoftware.SyntaxEditor.OutliningNode,System.Int32)"><summary>
            Closes the specified outlining node while in automatic outlining mode.
            </summary><param name="node">The <see cref="T:ActiproSoftware.SyntaxEditor.OutliningNode" /> to be closed.</param><param name="endOffset">The offset at which to end the node.</param><remarks>
            This method may only be called in automatic outlining mode and will throw an exception if not.
            This method keeps the node at the same start offset however indicates that it should end at the specified offset.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.Outlining.EnsureVisible(ActiproSoftware.SyntaxEditor.TextRange)"><summary>
            Ensures that the specified <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> start and end offsets are visible and not hidden in a collapsed node.
            </summary><param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> to expand.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Outlining.Open(ActiproSoftware.SyntaxEditor.OutliningNode)"><summary>
            Opens the specified outlining node while in automatic outlining mode.
            </summary><param name="node">The <see cref="T:ActiproSoftware.SyntaxEditor.OutliningNode" /> to be opened.</param><remarks>
            This method may only be called in automatic outlining mode and will throw an exception if not.
            This method keeps the node at the same start offset however indicates that there is no end for the node.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.Outlining.Remove(ActiproSoftware.SyntaxEditor.OutliningNode,System.Boolean)"><summary>
            Removes the specified <see cref="T:ActiproSoftware.SyntaxEditor.OutliningNode" /> from the hierarchy.
            </summary><param name="node">The <see cref="T:ActiproSoftware.SyntaxEditor.OutliningNode" /> to remove.</param><param name="keepDescendants"><c>true</c> if the descendants of the node being removed should be retained in the hierarchy; otherwise, <c>false</c>.
            </param><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.OutliningNode" /> that is the parent of the node being removed.</returns></member><member name="P:ActiproSoftware.SyntaxEditor.Outlining.Mode"><summary>
            Gets or sets the outlining mode that should be enabled.
            </summary><value>
            An <see cref="T:ActiproSoftware.SyntaxEditor.OutliningMode" /> that indicates the outlining mode that should be entered.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.Outlining.RootNode"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.OutliningNode" /> that is the root node in the <see cref="T:ActiproSoftware.SyntaxEditor.Document" />.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.OutliningNode" /> that is the root node in the <see cref="T:ActiproSoftware.SyntaxEditor.Document" />.</value></member><member name="T:ActiproSoftware.SyntaxEditor.OutliningMode"><summary>
            Specifies the type of outlining mode.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.OutliningMode.None"><summary>
            No outlining should be performed.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.OutliningMode.Manual"><summary>
            Manual outlining is enabled.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.OutliningMode.Automatic"><summary>
            Automatic outlining is enabled.
            </summary></member><member name="T:ActiproSoftware.SyntaxEditor.OutliningNode"><summary>
            Represents an outlining node.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.OutliningNode.CollapseDescendants"><summary>
            Collapses all descendant nodes.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.OutliningNode.CollapseDescendants(System.String)"><summary>
            Collapses all descendant nodes with the specified key.
            </summary><param name="key">The key of outlining nodes to collapse.  If <see langword="null" />, all nodes will be collapsed.</param></member><member name="M:ActiproSoftware.SyntaxEditor.OutliningNode.Contains(System.Int32)"><summary>
            Gets whether the outlining node contains the specified offset.
            </summary><param name="offset">The offset to check.</param><returns><c>true</c> if the outlining node contains the specified offset; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.OutliningNode.Contains(ActiproSoftware.SyntaxEditor.TextRange)"><summary>
            Gets whether the outlining node contains the specified <see cref="P:ActiproSoftware.SyntaxEditor.OutliningNode.TextRange" />.
            </summary><param name="textRange">The <see cref="P:ActiproSoftware.SyntaxEditor.OutliningNode.TextRange" /> to check.</param><returns><c>true</c> if the outlining node contains the specified <see cref="P:ActiproSoftware.SyntaxEditor.OutliningNode.TextRange" />; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.OutliningNode.ExpandDescendants"><summary>
            Expands all descendant nodes.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.OutliningNode.FindNode(System.Int32)"><summary>
            Searches through the child nodes for a node that contains the specified offset.
            </summary><param name="offset">The offset to check.</param><returns>The child <see cref="T:ActiproSoftware.SyntaxEditor.OutliningNode" /> that contains the specified offset, if any.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.OutliningNode.FindNodeRecursive(System.Int32)"><summary>
            Recursively searches through the child nodes for a node that contains the specified offset.
            </summary><param name="offset">The offset to check.</param><returns>The child <see cref="T:ActiproSoftware.SyntaxEditor.OutliningNode" /> that contains the specified offset, if any.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.OutliningNode.GetCommonAncestor(ActiproSoftware.SyntaxEditor.OutliningNode)"><summary>
            Gets the common ancestor of the two nodes.
            </summary><param name="node">The <see cref="T:ActiproSoftware.SyntaxEditor.OutliningNode" /> to compare.</param><returns>
            The <see cref="T:ActiproSoftware.SyntaxEditor.OutliningNode" /> that is a common ancestor of both nodes; otherwise <see langword="null" />.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.OutliningNode.GetEnumerator"><summary>
            Retrieves an <c>IEnumerator</c> object for the entire collection.
            </summary><returns>An <c>IEnumerator</c> object for the entire collection</returns><remarks>
            Enumerators are intended to be used only to read data in the collection. 
            Enumerators cannot be used to modify the underlying collection.
            <para>
            The enumerator does not have exclusive access to the collection.
            </para><para>
            When an enumerator is instantiated, it takes a snapshot of the current state of the collection. 
            If changes are made to the collection, such as adding, modifying or deleting elements, the 
            snapshot gets out of sync and the enumerator throws an <c>InvalidOperationException</c>. 
            Two enumerators instantiated from the same collection at the same time can have 
            different snapshots of the collection.
            </para></remarks></member><member name="M:ActiproSoftware.SyntaxEditor.OutliningNode.GetText(ActiproSoftware.SyntaxEditor.LineTerminator)"><summary>
            Returns the entire text of the node using the specified <see cref="T:ActiproSoftware.SyntaxEditor.LineTerminator" /> for line ends.
            </summary><param name="lineTerminator">A <see cref="T:ActiproSoftware.SyntaxEditor.LineTerminator" /> specifying the type of line terminators to use.</param><returns>The entire text of the node using the specified <see cref="T:ActiproSoftware.SyntaxEditor.LineTerminator" /> for line ends.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.OutliningNode.IsAncestorOf(ActiproSoftware.SyntaxEditor.OutliningNode)"><summary>
            Gets whether the node is an ancestor to the specified node.
            </summary><param name="node">The <see cref="T:ActiproSoftware.SyntaxEditor.OutliningNode" /> to compare.</param><returns><c>true</c> if the node is an ancestor of the specified node; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.OutliningNode.IsDescendantOf(ActiproSoftware.SyntaxEditor.OutliningNode)"><summary>
            Gets whether the node is a descendant of the specified node.
            </summary><param name="node">The <see cref="T:ActiproSoftware.SyntaxEditor.OutliningNode" /> to compare.</param><returns><c>true</c> if the node is a descendant of the specified node; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.OutliningNode.ToggleExpansion"><summary>
            Toggles the <see cref="P:ActiproSoftware.SyntaxEditor.OutliningNode.Expanded" /> property, which controls whether the node is expanded.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.OutliningNode.ToString"><summary>
            Returns a string that represents the current <see cref="T:System.Object" />.
            </summary><returns>A string that represents the current <see cref="T:System.Object" />.</returns></member><member name="P:ActiproSoftware.SyntaxEditor.OutliningNode.CollapsedText"><summary>
            Gets or sets the text to display when the node is collapsed.
            </summary><value>The text to display when the node is collapsed.</value></member><member name="P:ActiproSoftware.SyntaxEditor.OutliningNode.Count"><summary>
            Gets the count of child nodes within this outlining node.
            </summary><value>The count of child nodes within this outlining node.</value></member><member name="P:ActiproSoftware.SyntaxEditor.OutliningNode.Document"><summary>
            Gets the <see cref="P:ActiproSoftware.SyntaxEditor.OutliningNode.Document" /> that contains the outlining node.
            </summary><value>The <see cref="P:ActiproSoftware.SyntaxEditor.OutliningNode.Document" /> that contains the outlining node.</value></member><member name="P:ActiproSoftware.SyntaxEditor.OutliningNode.EndOffset"><summary>
            Gets the offset at which the outlining node ends.
            </summary><value>The offset at which the outlining node ends.</value></member><member name="P:ActiproSoftware.SyntaxEditor.OutliningNode.Expanded"><summary>
            Gets or sets whether the node is expanded.
            </summary><value><c>true</c> if the node is expanded; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.OutliningNode.HasAncestors"><summary>
            Gets whether an ancestor node exists.
            </summary><value><c>true</c> if an ancestor node exists; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.OutliningNode.HasCollapsedAncestors"><summary>
            Gets whether an ancestor node is collapsed.
            </summary><value><c>true</c> if an ancestor node is collapsed; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.OutliningNode.Index"><summary>
            Gets the index of the node within its parent node.
            </summary><value>The index of the node within its parent node.</value></member><member name="P:ActiproSoftware.SyntaxEditor.OutliningNode.IsOpen"><summary>
            Gets whether the outlining node is open (has no fixed <see cref="P:ActiproSoftware.SyntaxEditor.OutliningNode.EndOffset" />).
            </summary><value><c>true</c> if the outlining node is open (has no fixed <see cref="P:ActiproSoftware.SyntaxEditor.OutliningNode.EndOffset" />); otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.OutliningNode.IsRoot"><summary>
            Gets whether the outlining node is a root-level node.
            </summary><value><c>true</c> if the outlining node is a root-level node; otherwise, <c>false</c>.
            </value><remarks>A root-level node has no <see cref="P:ActiproSoftware.SyntaxEditor.OutliningNode.ParentNode" />.</remarks></member><member name="P:ActiproSoftware.SyntaxEditor.OutliningNode.Length"><summary>
            Gets the character length of the outlining node.
            </summary><value>The character length of the outlining node.</value></member><member name="P:ActiproSoftware.SyntaxEditor.OutliningNode.NestingDepth"><summary>
            Gets the nesting depth of the node.
            </summary><value>The nesting depth of the node.</value></member><member name="P:ActiproSoftware.SyntaxEditor.OutliningNode.ParentNode"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.OutliningNode" /> that is the parent of this outlining node.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.OutliningNode" /> that is the parent of this outlining node.</value></member><member name="P:ActiproSoftware.SyntaxEditor.OutliningNode.ParseData"><summary>
            Gets or sets the <see cref="T:ActiproSoftware.SyntaxEditor.IOutliningNodeParseData" /> that is assigned to the outlining node.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.IOutliningNodeParseData" /> that is assigned to the outlining node.</value><remarks>This property should be set by a semantic parser.</remarks></member><member name="P:ActiproSoftware.SyntaxEditor.OutliningNode.StartOffset"><summary>
            Gets the offset at which the outlining node starts.
            </summary><value>The offset at which the outlining node starts.</value></member><member name="P:ActiproSoftware.SyntaxEditor.OutliningNode.Text"><summary>
            Gets the document text contained by the node.
            </summary><value>The document text contained by the node.</value></member><member name="P:ActiproSoftware.SyntaxEditor.OutliningNode.TextRange"><summary>
            Gets a <see cref="P:ActiproSoftware.SyntaxEditor.OutliningNode.TextRange" /> that contains the text range of the outlining node.
            </summary><value>A <see cref="P:ActiproSoftware.SyntaxEditor.OutliningNode.TextRange" /> that contains the text range of the outlining node.</value></member><member name="P:ActiproSoftware.SyntaxEditor.OutliningNode.Item(System.Int32)"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.OutliningNode" /> at the specified index.
            </summary><param name="index">The zero-based index of the <see cref="T:ActiproSoftware.SyntaxEditor.OutliningNode" />.</param><value>The <see cref="T:ActiproSoftware.SyntaxEditor.OutliningNode" /> at the specified index.</value></member><member name="T:ActiproSoftware.SyntaxEditor.OutliningNodeAction"><summary>
            Specifies the action to take when incrementally updating outlining nodes.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.OutliningNodeAction.NoChange"><summary>
            No change should be made.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.OutliningNodeAction.Start"><summary>
            A node should be started.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.OutliningNodeAction.End"><summary>
            A node should be ended.
            </summary></member><member name="T:ActiproSoftware.SyntaxEditor.OutliningNodeEventArgs"><summary>
            Provides data for <see cref="P:ActiproSoftware.SyntaxEditor.OutliningNodeEventArgs.OutliningNode" /> events.
            </summary><seealso cref="T:ActiproSoftware.SyntaxEditor.OutliningNodeEventHandler" /></member><member name="M:ActiproSoftware.SyntaxEditor.OutliningNodeEventArgs.ToString"><summary>
            Creates and returns a string representation of the current object.
            </summary><returns>A string representation of the current object.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.OutliningNodeEventArgs.#ctor(ActiproSoftware.SyntaxEditor.OutliningNode)"><summary>
            Initializes a new instance of the <c>OutliningNodeEventArgs</c> class. 
            </summary><param name="outliningNode">The <see cref="P:ActiproSoftware.SyntaxEditor.OutliningNodeEventArgs.OutliningNode" /> that is affected by this event.</param></member><member name="P:ActiproSoftware.SyntaxEditor.OutliningNodeEventArgs.OutliningNode"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.OutliningNode" /> that is affected by this event.
            </summary><value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.OutliningNode" /> that is affected by this event.
            </value></member><member name="T:ActiproSoftware.SyntaxEditor.OutliningNodeEventHandler"><summary>
            Represents the method that will handle various events of an <see cref="T:ActiproSoftware.SyntaxEditor.OutliningNode" />.
            </summary><param name="sender">Sender of the event.</param><param name="e">A <see cref="T:ActiproSoftware.SyntaxEditor.OutliningNodeEventArgs" /> containing event data.</param><remarks>
            When you create a <c>OutliningNodeEventHandler</c> delegate, you identify the method that will handle the event. 
            To associate the event with your event handler, add an instance of the delegate to the event. 
            The event handler is called whenever the event occurs, unless you remove the delegate.
            </remarks><seealso cref="T:ActiproSoftware.SyntaxEditor.OutliningNodeEventArgs" /></member><member name="T:ActiproSoftware.SyntaxEditor.OutliningNodeParseData"><summary>
            Provides a class to store parse data with an outlining node.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.OutliningNodeParseData.Equals(System.Object)"><summary>
            Determines whether the specified <c>Object</c> is equal to the current <c>Object</c>. 
            </summary><param name="obj">The <c>Object</c> to compare to the current <c>Object</c>.</param><returns><c>true</c> if the specified <c>Object</c> is equal to the current <c>Object</c>; 
            otherwise, <c>false</c>. 
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.OutliningNodeParseData.GetHashCode"><summary>
            Returns a hash code for this object.
            </summary><returns>An integer value that specifies a hash value for this object.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.OutliningNodeParseData.ToString"><summary>
            Converts the object to a <c>String</c>.
            </summary><returns>
            A string whose value represents this object.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.OutliningNodeParseData.#ctor(System.String,System.Boolean)"><summary>
            Initializes a new instance of the <c>OutliningNodeParseData</c> class. 
            </summary><param name="key">The key assigned to the outlining node.</param><param name="isLanguageTransition">Whether the outlining node is for a language transition.</param></member><member name="P:ActiproSoftware.SyntaxEditor.OutliningNodeParseData.IndicatorVisible"><summary>
            Gets or sets whether the outlining indicator should be visible for the node.
            </summary><value><c>true</c> if the outlining indicator should be visible for the node; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.OutliningNodeParseData.IsLanguageTransition"><summary>
            Gets whether the outlining node is for a language transition.
            </summary><value><c>true</c> if the outlining node is for a language transition; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.OutliningNodeParseData.Key"><summary>
            Gets the key assigned to the outlining node.
            </summary><value>The key assigned to the outlining node.</value></member><member name="T:ActiproSoftware.SyntaxEditor.AstNodeList"><summary>
            Represents a collection of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode" /> objects.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.AstNodeList.Add(ActiproSoftware.SyntaxEditor.IAstNode)"><summary>
            Adds an object to the end of the collection.
            </summary><param name="value">The object to be added to the end of the collection. </param><returns>The collection index at which the object has been added.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.AstNodeList.Add(ActiproSoftware.SyntaxEditor.IAstNode,System.Int32)"><summary>
            Adds an object to the end of the collection.
            </summary><param name="value">The object to be added to the end of the collection. </param><param name="contextID">A value identifying the context of the child node within the parent.  This value is assigned to the child node's <see cref="P:ActiproSoftware.SyntaxEditor.IAstNode.ContextID" /> property if this collection has a parent node assigned.</param><returns>The collection index at which the object has been added.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.AstNodeList.AddRange(ActiproSoftware.SyntaxEditor.IAstNode[])"><summary>
            Adds an array of objects to the end of the collection.
            </summary><param name="values">The objects to be added to the end of the collection. </param></member><member name="M:ActiproSoftware.SyntaxEditor.AstNodeList.AddRange(ActiproSoftware.SyntaxEditor.IAstNode[],System.Int32)"><summary>
            Adds an array of objects to the end of the collection.
            </summary><param name="values">The objects to be added to the end of the collection. </param><param name="contextID">A value identifying the context of the child nodes within the parent.  This value is assigned to the child nodes' <see cref="P:ActiproSoftware.SyntaxEditor.IAstNode.ContextID" /> properties if this collection has a parent node assigned.</param></member><member name="M:ActiproSoftware.SyntaxEditor.AstNodeList.Clear"><summary>
            Removes all objects from the collection.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.AstNodeList.Clear(System.Int32)"><summary>
            Removes all objects from the collection with the specified <see cref="P:ActiproSoftware.SyntaxEditor.IAstNode.ContextID" />.
            </summary><param name="contextID">The <see cref="P:ActiproSoftware.SyntaxEditor.IAstNode.ContextID" /> for which to search.</param></member><member name="M:ActiproSoftware.SyntaxEditor.AstNodeList.Contains(ActiproSoftware.SyntaxEditor.IAstNode)"><summary>
            Returns whether the specified object is in the collection.
            </summary><param name="value">The object to locate in the collection.</param><returns><c>true</c> if the object is found in the collection; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.AstNodeList.CopyTo(System.Array,System.Int32)"><summary>
            Copies the entire collection to a compatible one-dimensional <c>Array</c>, 
            starting at the specified index of the target array.
            </summary><param name="array">
            The one-dimensional <c>Array</c> that is the destination of the elements copied from the collection. 
            The <c>Array</c> must have zero-based indexing. 
            </param><param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param></member><member name="M:ActiproSoftware.SyntaxEditor.AstNodeList.GetCount(System.Int32)"><summary>
            Returns the number of child AST nodes that have the specified <see cref="P:ActiproSoftware.SyntaxEditor.IAstNode.ContextID" />.
            </summary><param name="contextID">The <see cref="P:ActiproSoftware.SyntaxEditor.IAstNode.ContextID" /> for which to search.</param><returns>The number of child AST nodes that have the specified <see cref="P:ActiproSoftware.SyntaxEditor.IAstNode.ContextID" />.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.AstNodeList.GetEnumerator"><summary>
            Retrieves an <c>IEnumerator</c> object for the entire collection.
            </summary><returns>An <c>IEnumerator</c> object for the entire collection</returns><remarks>
            Enumerators are intended to be used only to read data in the collection. 
            Enumerators cannot be used to modify the underlying collection.
            <para>
            The enumerator does not have exclusive access to the collection.
            </para><para>
            When an enumerator is instantiated, it takes a snapshot of the current state of the collection. 
            If changes are made to the collection, such as adding, modifying or deleting elements, the 
            snapshot gets out of sync and the enumerator throws an <c>InvalidOperationException</c>. 
            Two enumerators instantiated from the same collection at the same time can have 
            different snapshots of the collection.
            </para></remarks></member><member name="M:ActiproSoftware.SyntaxEditor.AstNodeList.IndexOf(ActiproSoftware.SyntaxEditor.IAstNode)"><summary>
            Searches for the specified object and returns the zero-based index of the first occurrence within the entire collection.
            </summary><param name="value">The object to locate in the collection.</param><returns>
            The zero-based index of the first occurrence of the object within the entire collection, if found; otherwise, <c>-1</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.AstNodeList.IndexOf(System.Int32)"><summary>
            Searches for an <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode" /> with the specified <see cref="P:ActiproSoftware.SyntaxEditor.IAstNode.ContextID" /> and 
            returns the zero-based index of the first occurrence within the entire collection.
            </summary><returns>The first <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode" /> in the <see cref="P:ActiproSoftware.SyntaxEditor.IAstNode.ChildNodes" /> collection that has the specified <see cref="P:ActiproSoftware.SyntaxEditor.IAstNode.ContextID" />.</returns><returns>
            The zero-based index of the first occurrence of the object within the entire collection, if found; otherwise, <c>-1</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.AstNodeList.Insert(System.Int32,ActiproSoftware.SyntaxEditor.IAstNode)"><summary>
            Inserts an object into the collection at the specified index.
            </summary><param name="index">The zero-based index at which the object should be inserted.</param><param name="value">The object to insert.</param></member><member name="M:ActiproSoftware.SyntaxEditor.AstNodeList.Insert(System.Int32,ActiproSoftware.SyntaxEditor.IAstNode,System.Int32)"><summary>
            Inserts an object into the collection at the specified index.
            </summary><param name="index">The zero-based index at which the object should be inserted.</param><param name="value">The object to insert.</param><param name="contextID">A value identifying the context of the child node within the parent.  This value is assigned to the child node's <see cref="P:ActiproSoftware.SyntaxEditor.IAstNode.ContextID" /> property if this collection has a parent node assigned.</param></member><member name="M:ActiproSoftware.SyntaxEditor.AstNodeList.Remove(ActiproSoftware.SyntaxEditor.IAstNode)"><summary>
            Removes the first occurrence of a specific object from the collection.
            </summary><param name="value">The object to remove from the collection.</param><remarks>
            The elements that follow the removed element move up to occupy the vacated spot. 
            The indexes of the elements that are moved are also updated.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.AstNodeList.RemoveAt(System.Int32)"><summary>
            Removes the element at the specified index of the collection.
            </summary><param name="index">The zero-based index of the object to remove.</param><remarks>
            The elements that follow the removed element move up to occupy the vacated spot. 
            The indexes of the elements that are moved are also updated.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.AstNodeList.Replace(ActiproSoftware.SyntaxEditor.IAstNode,System.Int32)"><summary>
            Replaces the <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode" /> objects in the collection that have a <see cref="P:ActiproSoftware.SyntaxEditor.IAstNode.ContextID" /> with a new <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode" />.
            </summary><param name="value">The <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode" /> to add to the collection.</param><param name="contextID">The <see cref="P:ActiproSoftware.SyntaxEditor.IAstNode.ContextID" /> for which to search.</param></member><member name="M:ActiproSoftware.SyntaxEditor.AstNodeList.SortByStartOffset"><summary>
            Sorts the collection of AST nodes by their start offsets.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.AstNodeList.ToArray"><summary>
            Copies the items of the collection to a new <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode" /> array.
            </summary><returns>An array of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode" /> items.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.AstNodeList.ToArray(System.Int32)"><summary>
            Copies the items of the collection with the specified <see cref="P:ActiproSoftware.SyntaxEditor.IAstNode.ContextID" /> to a new <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode" /> array.
            </summary><param name="contextID">The <see cref="P:ActiproSoftware.SyntaxEditor.IAstNode.ContextID" /> for which to search.</param><returns>An array of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode" /> items.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.AstNodeList.#ctor(ActiproSoftware.SyntaxEditor.IAstNode)"><summary>
            Initializes a new instance of the <c>AstNodeList</c> class. 
            </summary><param name="parentNode">The <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode" /> that owns the collection.</param></member><member name="P:ActiproSoftware.SyntaxEditor.AstNodeList.Count"><summary>
            Gets the number of elements contained in the collection.
            </summary><value>The number of elements contained in the collection.</value></member><member name="P:ActiproSoftware.SyntaxEditor.AstNodeList.InnerList"><summary>
            Gets the list of items contained in the collection instance.
            </summary><value>
            An <see cref="T:System.Collections.ArrayList" /> representing the collection instance itself.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.AstNodeList.IsFixedSize"><summary>
            Gets a value indicating whether the collection has a fixed size.
            </summary><value><c>true</c> if the collection has a fixed size; otherwise, <c>false</c>.
            </value><remarks>
            A collection with a fixed size does not allow the addition or removal of elements, 
            but it allows the modification of existing elements.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.AstNodeList.IsReadOnly"><summary>
            Gets a value indicating whether the collection is read-only.
            </summary><value><c>true</c> if the collection is read-only; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.AstNodeList.IsSynchronized"><summary>
            Gets a value indicating whether access to the collection is synchronized (thread-safe).
            </summary><value><c>true</c> if the collection is synchronized (thread-safe); otherwise, <c>false</c>.
            </value><remarks>
            To guarantee the thread safety of the collection, all operations must be done through 
            the wrapper returned by the <see cref="P:ActiproSoftware.SyntaxEditor.AstNodeList.SyncRoot" /> property.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.AstNodeList.ParentNode"><summary>
            Gets the parent <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode" /> of the node list.
            </summary><value>The parent <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode" /> of the node list.</value></member><member name="P:ActiproSoftware.SyntaxEditor.AstNodeList.SyncRoot"><summary>
            Gets an <c>Object</c> that can be used to synchronize access to the collection.
            </summary><value>
            An <c>Object</c> that can be used to synchronize access to the collection.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.AstNodeList.Item(System.Int32)"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode" /> at the specified index. 
            <para>
            [C#] In C#, this property is the indexer for the <c>AstNodeBaseList</c> class. 
            </para></summary><param name="index">The index of the <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode" /> to return.</param><value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode" /> at the specified index. 
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.AstNodeList.Item(System.Int32,System.Int32)"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode" /> with a <see cref="P:ActiproSoftware.SyntaxEditor.IAstNode.ContextID" /> at the specified index. 
            <para>
            [C#] In C#, this property is the indexer for the <c>AstNodeBaseList</c> class. 
            </para></summary><param name="index">The index of the <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode" /> to return.</param><param name="contextID">The <see cref="P:ActiproSoftware.SyntaxEditor.IAstNode.ContextID" /> for which to search.</param><value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode" /> with a <see cref="P:ActiproSoftware.SyntaxEditor.IAstNode.ContextID" /> at the specified index. 
            </value></member><member name="T:ActiproSoftware.SyntaxEditor.Addons.PlainText.PlainTextSyntaxLanguage"><summary>
            Represents a plain text language definition.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.PlainText.PlainTextSyntaxLanguage.CreateDocumentEndToken(System.Int32,ActiproSoftware.SyntaxEditor.ILexicalState)"><summary>
            Creates an <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that represents the end of a document.
            </summary><param name="startOffset">The start offset of the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.</param><param name="lexicalState">The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that contains the token.</param><returns>An <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that represents the end of a document.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.PlainText.PlainTextSyntaxLanguage.CreateInvalidToken(System.Int32,System.Int32,ActiproSoftware.SyntaxEditor.ILexicalState)"><summary>
            Creates an <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that represents an invalid range of text.
            </summary><param name="startOffset">The start offset of the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.</param><param name="length">The length of the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.</param><param name="lexicalState">The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that contains the token.</param><returns>An <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that represents an invalid range of text.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.PlainText.PlainTextSyntaxLanguage.CreateToken(System.Int32,System.Int32,ActiproSoftware.SyntaxEditor.LexicalParseFlags,ActiproSoftware.SyntaxEditor.IToken,ActiproSoftware.SyntaxEditor.ITokenLexicalParseData)"><summary>
            Creates an <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that represents the range of text with the specified lexical parse data.
            </summary><param name="startOffset">The start offset of the token.</param><param name="length">The length of the token.</param><param name="lexicalParseFlags">The <see cref="T:ActiproSoftware.SyntaxEditor.LexicalParseFlags" /> for the token.</param><param name="parentToken">The <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that starts the current state scope specified by the <see cref="P:ActiproSoftware.SyntaxEditor.IToken.LexicalState" /> property.</param><param name="lexicalParseData">The <see cref="T:ActiproSoftware.SyntaxEditor.ITokenLexicalParseData" /> that contains lexical parse information about the token.</param><returns></returns></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.PlainText.PlainTextSyntaxLanguage.GetHighlightingStyle(ActiproSoftware.SyntaxEditor.IToken)"><summary>
            Returns the <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyle" /> for the specified <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.
            </summary><param name="token">The <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> to examine.</param><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyle" /> for the specified <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.PlainText.PlainTextSyntaxLanguage.GetTokenString(System.Int32)"><summary>
            Gets the token string representation for the specified token ID.
            </summary><param name="tokenID">The ID of the token to examine.</param><returns>The token string representation for the specified token ID.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.PlainText.PlainTextSyntaxLanguage.#ctor"><summary>
            Initializes a new instance of the <c>PlainTextSyntaxLanguage</c> class.
            </summary></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.PlainText.PlainTextSyntaxLanguage.MergableLexicalParser"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.IMergableLexicalParser" /> that can be used for lexical parsing of the language.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.IMergableLexicalParser" /> that can be used for lexical parsing of the language.</value></member><member name="T:ActiproSoftware.SyntaxEditor.ISemanticParseData"><summary>
            Provides the base requirements for an object that contains the results of a semantic parse operation.
            </summary></member><member name="P:ActiproSoftware.SyntaxEditor.ISemanticParseData.HasErrors"><summary>
            Gets whether the semantic parse data has errors.
            </summary><value><c>true</c> if the semantic parse data has errors.
            </value></member><member name="T:ActiproSoftware.SyntaxEditor.SemanticParserServiceRequest"><summary>
            Represents a semantic parser service request.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.SemanticParserServiceRequest.GetParseHashKey(ActiproSoftware.SyntaxEditor.Document,ActiproSoftware.SyntaxEditor.ISemanticParseDataTarget)"><summary>
            Returns the parse hash key for the specified data.
            </summary><param name="document">An <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> indicating the document that should be parsed.</param><param name="semanticParseDataTarget">An <see cref="T:ActiproSoftware.SyntaxEditor.ISemanticParseDataTarget" /> indicating the object that will receive the results of the parse.</param><returns>The parse hash key for the specified data.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.SemanticParserServiceRequest.#ctor(System.Int32,ActiproSoftware.SyntaxEditor.Document,ActiproSoftware.SyntaxEditor.TextRange,ActiproSoftware.SyntaxEditor.SemanticParseFlags,ActiproSoftware.SyntaxEditor.ISemanticParserServiceProcessor,ActiproSoftware.SyntaxEditor.ISemanticParseDataTarget)"><summary>
            Initializes a new instance of the <c>SemanticParserServiceRequest</c> class. 
            </summary><param name="priority">The priority of the request.</param><param name="document">An <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> indicating the document that should be parsed.</param><param name="parseTextRange">A <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> indicating the offset range to parse.</param><param name="flags">A <see cref="T:ActiproSoftware.SyntaxEditor.SemanticParseFlags" /> that indicates semantic parse flags.</param><param name="processor">The <see cref="T:ActiproSoftware.SyntaxEditor.ISemanticParserServiceProcessor" /> that will perform the parsing operation.</param><param name="semanticParseDataTarget">An <see cref="T:ActiproSoftware.SyntaxEditor.ISemanticParseDataTarget" /> indicating the object that will receive the results of the parse.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SemanticParserServiceRequest.#ctor(System.Int32,System.String,System.String,ActiproSoftware.SyntaxEditor.TextRange,ActiproSoftware.SyntaxEditor.SemanticParseFlags,ActiproSoftware.SyntaxEditor.ISemanticParserServiceProcessor,ActiproSoftware.SyntaxEditor.ISemanticParseDataTarget)"><summary>
            Initializes a new instance of the <c>SemanticParserServiceRequest</c> class. 
            </summary><param name="priority">The priority of the request.</param><param name="filename">The filename of the text.</param><param name="text">The text that should be parsed.</param><param name="parseTextRange">A <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> indicating the offset range to parse.</param><param name="flags">A <see cref="T:ActiproSoftware.SyntaxEditor.SemanticParseFlags" /> that indicates semantic parse flags.</param><param name="processor">The <see cref="T:ActiproSoftware.SyntaxEditor.ISemanticParserServiceProcessor" /> that will perform the parsing operation.</param><param name="semanticParseDataTarget">An <see cref="T:ActiproSoftware.SyntaxEditor.ISemanticParseDataTarget" /> indicating the object that will receive the results of the parse.</param></member><member name="P:ActiproSoftware.SyntaxEditor.SemanticParserServiceRequest.CreatedDateTime"><summary>
            Gets the date/time at which the request was created.
            </summary><value>The date/time at which the request was created.</value></member><member name="P:ActiproSoftware.SyntaxEditor.SemanticParserServiceRequest.Filename"><summary>
            Gets a filename that uniquely identifies the text to parse.
            </summary><value>A filename that uniquely identifies the text to parse.</value></member><member name="P:ActiproSoftware.SyntaxEditor.SemanticParserServiceRequest.Flags"><summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.SemanticParseFlags" /> that indicates semantic parse flags.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.SemanticParseFlags" /> that indicates semantic parse flags.</value></member><member name="P:ActiproSoftware.SyntaxEditor.SemanticParserServiceRequest.ParseHashKey"><summary>
            Gets a hash key that uniquely identifies the parse request.
            </summary><value>A hash key that uniquely identifies the parse request.</value></member><member name="P:ActiproSoftware.SyntaxEditor.SemanticParserServiceRequest.ParseTextRange"><summary>
            Gets or sets a <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> indicating the offset range to parse.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> indicating the offset range to parse.</value></member><member name="P:ActiproSoftware.SyntaxEditor.SemanticParserServiceRequest.ParseTimeSpan"><summary>
            Gets a <see cref="T:System.TimeSpan" /> indicating how long the parsing operation took to process.
            </summary><value>A <see cref="T:System.TimeSpan" /> indicating how long the parsing operation took to process.</value></member><member name="P:ActiproSoftware.SyntaxEditor.SemanticParserServiceRequest.Processor"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.ISemanticParserServiceProcessor" /> that will perform the parsing operation.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.ISemanticParserServiceProcessor" /> that will perform the parsing operation.</value></member><member name="P:ActiproSoftware.SyntaxEditor.SemanticParserServiceRequest.Priority"><summary>
            Gets the priority of the request, where a higher number has a higher priority.
            </summary><value>The priority of the request, where a higher number has a higher priority..</value></member><member name="P:ActiproSoftware.SyntaxEditor.SemanticParserServiceRequest.RepeatedRequestPause"><summary>
            Gets or sets the number of milliseconds to pause if there are repeated attempts for this same request.
            </summary><value>The number of milliseconds to pause if there are repeated attempts for this same request.  The default value is <c>250</c>.</value></member><member name="P:ActiproSoftware.SyntaxEditor.SemanticParserServiceRequest.SemanticParseData"><summary>
            Gets or sets an <see cref="T:ActiproSoftware.SyntaxEditor.ISemanticParseData" /> that contains the results of the parsing operation.
            </summary><value>An <see cref="T:ActiproSoftware.SyntaxEditor.ISemanticParseData" /> that contains the results of the parsing operation.</value></member><member name="P:ActiproSoftware.SyntaxEditor.SemanticParserServiceRequest.SemanticParseDataTarget"><summary>
            Gets an <see cref="T:ActiproSoftware.SyntaxEditor.ISemanticParseDataTarget" /> indicating the object that will receive the results of the parse.
            </summary><value>An <see cref="T:ActiproSoftware.SyntaxEditor.ISemanticParseDataTarget" /> indicating the object that will receive the results of the parse.</value></member><member name="P:ActiproSoftware.SyntaxEditor.SemanticParserServiceRequest.Tag"><summary>
            Gets or sets the object that contains user-defined data about the object.
            </summary><value>
            An <see cref="T:System.Object" /> that contains user-defined data about the control. The default is <see langword="null" />.
            </value><remarks>
            Any type derived from the <see cref="T:System.Object" /> class can be assigned to this property. 
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.SemanticParserServiceRequest.TextBufferReader"><summary>
            Gets an <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader" /> indicating the object that will read the text that should be parsed.
            </summary><value>An <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader" /> indicating the object that will read the text that should be parsed.</value></member><member name="F:ActiproSoftware.SyntaxEditor.SemanticParserServiceRequest.HighPriority"><summary>
            Specifies a high priority.
            </summary><value>The value is <c>300</c>.</value></member><member name="F:ActiproSoftware.SyntaxEditor.SemanticParserServiceRequest.MediumPriority"><summary>
            Specifies a medium priority.
            </summary><value>The value is <c>200</c>.</value></member><member name="F:ActiproSoftware.SyntaxEditor.SemanticParserServiceRequest.LowPriority"><summary>
            Specifies a low priority.
            </summary><value>The value is <c>100</c>.</value></member><member name="T:ActiproSoftware.SyntaxEditor.ISemanticParseDataTarget"><summary>
            Provides the base requirements for an object that receives the results of a semantic parse.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.ISemanticParseDataTarget.NotifySemanticParseComplete(ActiproSoftware.SyntaxEditor.SemanticParserServiceRequest)"><summary>
            Occurs when a semantic parse request is completed.
            </summary><param name="request">A <see cref="T:ActiproSoftware.SyntaxEditor.SemanticParserServiceRequest" /> that contains the semantic parse request information and the parse data result.</param></member><member name="P:ActiproSoftware.SyntaxEditor.ISemanticParseDataTarget.Guid"><summary>
            Gets a unique GUID that identifies the object.
            </summary><value>A unique GUID that identifies the object.</value></member><member name="T:ActiproSoftware.SyntaxEditor.SyntaxError"><summary>
            Represents a syntax error in code.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxError.#ctor(ActiproSoftware.SyntaxEditor.TextRange,System.String)"><summary>
            Initializes a new instance of the <c>SyntaxError</c> class. 
            </summary><param name="textRange">The <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxError.TextRange" /> of the error.</param><param name="message">The error message.</param></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxError.Message"><summary>
            Gets the error message.
            </summary><value>The error message.</value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxError.TextRange"><summary>
            Gets or sets the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxError.TextRange" /> of the error.
            </summary><value>The <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxError.TextRange" /> of the error.</value></member><member name="T:ActiproSoftware.SyntaxEditor.TextStylePreview"><summary>
            Represents a control for previewing a text style.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.TextStylePreview.ResetBackColor"><summary>
            Resets the <see cref="P:ActiproSoftware.SyntaxEditor.TextStylePreview.BackColor" /> property to its default value.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.TextStylePreview.ShouldSerializeBackColor"><summary>
            Indicates whether the <see cref="P:ActiproSoftware.SyntaxEditor.TextStylePreview.BackColor" /> property should be persisted.
            </summary><returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.TextStylePreview.ResetFont"><summary>
            Resets the <see cref="P:ActiproSoftware.SyntaxEditor.TextStylePreview.Font" /> property to its default value.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.TextStylePreview.ShouldSerializeFont"><summary>
            Indicates whether the <see cref="P:ActiproSoftware.SyntaxEditor.TextStylePreview.Font" /> property should be persisted.
            </summary><returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.TextStylePreview.OnRender(System.Windows.Forms.PaintEventArgs)"><summary>
            Renders the element.
            </summary><param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.TextStylePreview.#ctor"><summary>
            Initializes a new instance of the <c>TextStylePreview</c> class. 
            </summary><remarks>
            The default constructor initializes all fields to their default values.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.TextStylePreview.BackColor"><summary>
            Gets or sets the background color for the control.
            </summary><value>A <see cref="T:System.Drawing.Color" /> that represents the background color of the control.</value></member><member name="P:ActiproSoftware.SyntaxEditor.TextStylePreview.DefaultSize"><summary>
            Gets the default size of the control.
            </summary><value>The default <see cref="T:System.Drawing.Size" /> of the control.</value></member><member name="P:ActiproSoftware.SyntaxEditor.TextStylePreview.Font"><summary>
            Gets or sets the font of the text displayed by the control.
            </summary><value>The <see cref="T:System.Drawing.Font" /> object to apply to the text displayed by the control.</value></member><member name="P:ActiproSoftware.SyntaxEditor.TextStylePreview.HighlightingStyle"><summary>
            Gets or sets the <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyle" /> that should determine how this control is painted.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyle" /> that should determine how this control is painted.</value></member><member name="P:ActiproSoftware.SyntaxEditor.TextStylePreview.Text"><summary>
            Gets or sets the text associated with this control.
            </summary><value>The text associated with this control.</value></member><member name="T:ActiproSoftware.SyntaxEditor.HtmlExportType"><summary>
            Specifies the HTML export type to perform.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.HtmlExportType.Inline"><summary>
            Inline <c>CSS</c> styles will be used for highlighting.
            This type allows for the code block to be directly copied out of the exported document and pasted into another.
            Root <c>HTML</c>, <c>BODY</c> and other tags will be added to the output.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.HtmlExportType.InlineFragment"><summary>
            Inline <c>CSS</c> styles will be used for highlighting.
            This type allows for the code block to be directly copied out of the exported document and pasted into another.
            Root <c>HTML</c>, <c>BODY</c> and other tags will not be added to the output.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.HtmlExportType.ClassBased"><summary><c>CSS</c> class references will be used for highlighting.
            This type adds a <c>STYLE</c> tag block to the exported <c>HTML</c> where <c>CSS</c> classes are defined.
            The text in the code block references these <c>CSS</c> classes, therefore allowing color settings to easily
            be altered for each highlighting style (i.e. keywords, comments, etc.).
            Root <c>HTML</c>, <c>BODY</c> and other tags will be added to the output.
            </summary></member><member name="T:ActiproSoftware.SyntaxEditor.StringBuilderTextBufferReader"><summary>
            Represents an <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader" /> implementation for a <see cref="T:System.Text.StringBuilder" />.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.StringBuilderTextBufferReader.GetSubstring(System.Int32,System.Int32)"><summary>
            Returns a substring from the text buffer using <see cref="F:ActiproSoftware.SyntaxEditor.LineTerminator.Newline" /> for line ends.
            </summary><param name="offset">The offset at which to retrieve the text.</param><param name="length">The number of characters to return.</param><returns>The substring from the text buffer using <see cref="F:ActiproSoftware.SyntaxEditor.LineTerminator.Newline" /> for line ends.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.StringBuilderTextBufferReader.Peek"><summary>
            Peeks at a single character from the text buffer without seeking past it.
            </summary><returns>The character that was read.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.StringBuilderTextBufferReader.Peek(System.Int32)"><summary>
            Peeks at a certain character from the text buffer after the current <see cref="P:ActiproSoftware.SyntaxEditor.StringBuilderTextBufferReader.Offset" /> without seeking past it.
            </summary><returns>The character that was read.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.StringBuilderTextBufferReader.PeekReverse"><summary>
            Reverse peeks at a single character from the text buffer without seeking past it.
            </summary><returns>The character that was read.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.StringBuilderTextBufferReader.Pop"><summary>
            Pops the top offset from the stack and moves the <see cref="P:ActiproSoftware.SyntaxEditor.StringBuilderTextBufferReader.Offset" /> to that offset.
            </summary><remarks><c>true</c> if a pop occurred; otherwise, <c>false</c>.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.StringBuilderTextBufferReader.PopAll"><summary>
            Pops the all offsets from the stack and moves the <see cref="P:ActiproSoftware.SyntaxEditor.StringBuilderTextBufferReader.Offset" /> to the offset that was on the bottom of the stack.
            </summary><remarks><c>true</c> if a pop occurred; otherwise, <c>false</c>.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.StringBuilderTextBufferReader.Push"><summary>
            Pushes the <see cref="P:ActiproSoftware.SyntaxEditor.StringBuilderTextBufferReader.Offset" /> onto the stack for later restoration.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.StringBuilderTextBufferReader.Read"><summary>
            Reads a single character from the text buffer and seeks forward one offset.
            </summary><returns>The character that was read.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.StringBuilderTextBufferReader.ReadReverse"><summary>
            Reverse reads a single character from the text buffer and seeks backward one offset.
            </summary><returns>The character that was read.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.StringBuilderTextBufferReader.ToString"><summary>
            Creates and returns a string representation of the current object.
            </summary><returns>A string representation of the current object.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.StringBuilderTextBufferReader.#ctor(System.Text.StringBuilder,System.Int32,System.Int32)"><summary>
            Initializes a new instance of the <c>StringBuilderTextBufferReader</c> class.
            </summary><param name="text">The <see cref="T:System.Text.StringBuilder" /> that is the text buffer.</param><param name="lineIndex">The index of the line that contains the offset.</param><param name="offset">The initial offset of the reader.</param></member><member name="P:ActiproSoftware.SyntaxEditor.StringBuilderTextBufferReader.HasStackEntries"><summary>
            Gets whether there are entries on the stack.
            </summary><value><c>true</c> if there are entries on the stack; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.StringBuilderTextBufferReader.IsAtEnd"><summary>
            Gets whether the current <see cref="P:ActiproSoftware.SyntaxEditor.StringBuilderTextBufferReader.Offset" /> is at the end of the text buffer.
            </summary><value><c>true</c> if the current <see cref="P:ActiproSoftware.SyntaxEditor.StringBuilderTextBufferReader.Offset" /> is at the end of the text buffer; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.StringBuilderTextBufferReader.IsAtStart"><summary>
            Gets whether the current <see cref="P:ActiproSoftware.SyntaxEditor.StringBuilderTextBufferReader.Offset" /> is at the start of the text buffer.
            </summary><value><c>true</c> if the current <see cref="P:ActiproSoftware.SyntaxEditor.StringBuilderTextBufferReader.Offset" /> is at the start of the text buffer; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.StringBuilderTextBufferReader.IsWhitespaceOnlyAfterOnLine"><summary>
            Gets whether only whitespace characters appear at and after the <see cref="P:ActiproSoftware.SyntaxEditor.StringBuilderTextBufferReader.Offset" /> on the current line.
            </summary><value><c>true</c> if only whitespace characters appear at and after the <see cref="P:ActiproSoftware.SyntaxEditor.StringBuilderTextBufferReader.Offset" /> on the current line; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.StringBuilderTextBufferReader.IsWhitespaceOnlyBeforeOnLine"><summary>
            Gets whether only whitespace characters appear before the <see cref="P:ActiproSoftware.SyntaxEditor.StringBuilderTextBufferReader.Offset" /> on the current line.
            </summary><value><c>true</c> if only whitespace characters appear before the <see cref="P:ActiproSoftware.SyntaxEditor.StringBuilderTextBufferReader.Offset" /> on the current line; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.StringBuilderTextBufferReader.Length"><summary>
            Gets the number of characters in the text buffer.
            </summary><value>The number of characters in the text buffer.</value></member><member name="P:ActiproSoftware.SyntaxEditor.StringBuilderTextBufferReader.LineIndex"><summary>
            Gets the index of the line that contains the <see cref="P:ActiproSoftware.SyntaxEditor.StringBuilderTextBufferReader.Offset" />.
            </summary><value>The index of the line that contains the <see cref="P:ActiproSoftware.SyntaxEditor.StringBuilderTextBufferReader.Offset" />.</value></member><member name="P:ActiproSoftware.SyntaxEditor.StringBuilderTextBufferReader.Offset"><summary>
            Gets or sets the current reader position in the text buffer.
            </summary><value>The current reader position in the text buffer.</value><remarks>
            Using the setter of this property will invalidate the <see cref="P:ActiproSoftware.SyntaxEditor.StringBuilderTextBufferReader.LineIndex" /> property.
            Also, for performance reasons there is no bounds check on the setter.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.StringBuilderTextBufferReader.OffsetDelta"><summary>
            Gets the amount by which to alter the offset values that are parsed.
            </summary><value>The amount by which to alter the offset values that are parsed.</value></member><member name="T:ActiproSoftware.SyntaxEditor.SyntaxLanguageProperty"><summary>
            Represents a property for a <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" />.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguageProperty.ToString"><summary>
            Creates and returns a string representation of the current object.
            </summary><returns>A string representation of the current object.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguageProperty.#ctor(System.String,System.String)"><summary>
            Initializes a new instance of the <c>SyntaxLanguageProperty</c> class. 
            </summary><param name="key">The key of the property.</param><param name="value">The value of the property.</param></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxLanguageProperty.Key"><summary>
            Gets a string-based key that identifies the object.
            </summary><value>A string-based key that identifies the object.</value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxLanguageProperty.Value"><summary>
            Gets or sets the property value.
            </summary><value>The property value.</value></member><member name="T:ActiproSoftware.SyntaxEditor.SyntaxLanguagePropertyCollection"><summary>
            Provides a collection <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguageProperty" /> objects for a <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" />.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguagePropertyCollection.Add(ActiproSoftware.SyntaxEditor.SyntaxLanguageProperty)"><summary>
            Adds the specified <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguageProperty" /> to the collection. 
            </summary><param name="property">The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguageProperty" /> to add to the collection.</param><returns>
            The position into which the new item was inserted.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguagePropertyCollection.Contains(System.String)"><summary>
            Determines whether a <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguageProperty" /> with the specified key is in the collection. 
            </summary><param name="key">The key of the <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguageProperty" /> to return.</param><returns><c>true</c> if the collection contains the <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguageProperty" />; otherwise, <c>false</c>. 
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguagePropertyCollection.IndexOf(System.String)"><summary>
            Returns the index of the <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguageProperty" /> with the specified key in the collection.
            </summary><param name="key">The key of the <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguageProperty" /> to return.</param><returns>
            If found, the index where the <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguageProperty" /> is in the collection; otherwise, <c>-1</c>. 
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguagePropertyCollection.Insert(System.Int32,ActiproSoftware.SyntaxEditor.SyntaxLanguageProperty)"><summary>
            Inserts a <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguageProperty" /> into the collection at the specified index.
            </summary><param name="index">The zero-based index at which the <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguageProperty" /> should be inserted.</param><param name="property">The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguageProperty" /> to insert into the collection.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguagePropertyCollection.Remove(ActiproSoftware.SyntaxEditor.SyntaxLanguageProperty)"><summary>
            Removes the specified <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguageProperty" /> from the collection. 
            </summary><param name="property">The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguageProperty" /> to remove.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguagePropertyCollection.#ctor"><summary>
            Initializes a new instance of the <c>SyntaxLanguagePropertyCollection</c> class. 
            </summary></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxLanguagePropertyCollection.Item(System.Int32)"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguageProperty" /> at the specified index. 
            <para>
            [C#] In C#, this property is the indexer for the <c>SyntaxLanguagePropertyCollection</c> class. 
            </para></summary><param name="index">The index of the <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguageProperty" /> to return.</param><value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguageProperty" /> at the specified index. 
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxLanguagePropertyCollection.Item(System.String)"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguageProperty" /> with the specified key. 
            <para>
            [C#] In C#, this property is the indexer for the <c>SyntaxLanguagePropertyCollection</c> class. 
            </para></summary><param name="key">The key of the <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguageProperty" /> to return.</param><value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguageProperty" /> with the specified key. 
            </value></member><member name="T:ActiproSoftware.SyntaxEditor.CodeSnippet"><summary>
            Represents a code snippet.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.CodeSnippet.LoadFromXml(System.String)"><summary>
            Loads an array of header-only <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippet" /> objects from the specified XML snippet file.
            </summary><param name="path">The path to the XML snippet file.</param><returns>The array of <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippet" /> objects that were loaded.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.CodeSnippet.LoadFromXml(System.String,System.Boolean)"><summary>
            Loads an array of <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippet" /> objects from the specified XML snippet file.
            </summary><param name="path">The path to the XML snippet file.</param><param name="headerOnly">Whether to only load the code snippet header information.</param><returns>The array of <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippet" /> objects that were loaded.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.CodeSnippet.LoadFromXml(System.Xml.XmlDocument)"><summary>
            Loads an array of header-only <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippet" /> objects from the specified <see cref="T:System.Xml.XmlDocument" />.
            </summary><param name="document">The <see cref="T:System.Xml.XmlDocument" /> to examine.</param><returns>The array of <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippet" /> objects that were loaded.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.CodeSnippet.LoadFromXml(System.Xml.XmlDocument,System.Boolean)"><summary>
            Loads an array of <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippet" /> objects from the specified <see cref="T:System.Xml.XmlDocument" />.
            </summary><param name="document">The <see cref="T:System.Xml.XmlDocument" /> to examine.</param><param name="headerOnly">Whether to only load the code snippet header information.</param><returns>The array of <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippet" /> objects that were loaded.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.CodeSnippet.SaveToXml(System.String)"><summary>
            Saves the code snippet to an XML snippet file.
            </summary><param name="path">The path to the XML snippet file.</param></member><member name="M:ActiproSoftware.SyntaxEditor.CodeSnippet.SaveToXml"><summary>
            Saves the code snippet to an <see cref="T:System.Xml.XmlDocument" />.
            </summary><returns>The <see cref="T:System.Xml.XmlDocument" /> containing the code snippet.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.CodeSnippet.SaveToXml(ActiproSoftware.SyntaxEditor.CodeSnippet[],System.String)"><summary>
            Saves multiple code snippets to an XML snippet file.
            </summary><param name="codeSnippets">The array of <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippet" /> objects to save.</param><param name="path">The path to the XML snippet file.</param></member><member name="M:ActiproSoftware.SyntaxEditor.CodeSnippet.SaveToXml(ActiproSoftware.SyntaxEditor.CodeSnippet[])"><summary>
            Saves multiple code snippets to an <see cref="T:System.Xml.XmlDocument" />.
            </summary><param name="codeSnippets">The array of <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippet" /> objects to save.</param><returns>The <see cref="T:System.Xml.XmlDocument" /> containing the code snippets.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.CodeSnippet.#ctor(System.String,System.String,System.String)"><summary>
            Initializes a new instance of the <c>CodeSnippet</c> class.
            </summary><param name="title">The title for the code snippet.</param><param name="codeLanguage">The language of the code.</param><param name="codeText">The snippet code represented by this block.</param></member><member name="P:ActiproSoftware.SyntaxEditor.CodeSnippet.Author"><summary>
            Gets or sets the name of the code snippet author.
            </summary><value>The name of the code snippet author.</value></member><member name="P:ActiproSoftware.SyntaxEditor.CodeSnippet.CodeKind"><summary>
            Gets or sets the kind of code the snippet contains.
            </summary><value>The kind of code the snippet contains.</value><remarks>
            This attribute can help filter out snippets based on the current location in the code.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.CodeSnippet.CodeLanguage"><summary>
            Gets or sets the language of the code.
            </summary><value>The language of the code.</value></member><member name="P:ActiproSoftware.SyntaxEditor.CodeSnippet.CodeText"><summary>
            Gets or sets the snippet code represented by this block.
            </summary><value>The snippet code represented by this block.</value></member><member name="P:ActiproSoftware.SyntaxEditor.CodeSnippet.Declarations"><summary>
            Gets a collection of declarations for the code snippet.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippetDeclarationCollection" /> containing the references.</value></member><member name="P:ActiproSoftware.SyntaxEditor.CodeSnippet.Description"><summary>
            Gets or sets descriptive information about the contents of the code snippet.
            </summary><value>Descriptive information about the contents of the code snippet.</value></member><member name="P:ActiproSoftware.SyntaxEditor.CodeSnippet.Format"><summary>
            Gets or sets the schema version of the code snippet.
            </summary><value>The schema version of the code snippet.</value><remarks>
            This value must be <c>1.0.0</c> or the snippet will not be recognized.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.CodeSnippet.HelpUrl"><summary>
            Gets or sets a URL that provides more information about the code snippet.
            </summary><value>A URL that provides more information about the code snippet.</value></member><member name="P:ActiproSoftware.SyntaxEditor.CodeSnippet.ImageIndex"><summary>
            Gets or sets the index of an image within the <see cref="P:ActiproSoftware.SyntaxEditor.IntelliPromptCodeSnippets.ImageList" />, displayed in the Insert Snippet member list.
            </summary><value>
            The index of an image within the <see cref="P:ActiproSoftware.SyntaxEditor.IntelliPromptCodeSnippets.ImageList" />, displayed in the Insert Snippet member list.
            The default is <c>1</c>. 
            </value><remarks>
            This property is set to <c>-1</c> if no image is to be displayed for the item. 
            This property is not serialized to XML snippet files.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.CodeSnippet.Imports"><summary>
            Gets a collection of imports for the code snippet.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippetImportCollection" /> containing the references.</value></member><member name="P:ActiproSoftware.SyntaxEditor.CodeSnippet.IsHeaderOnly"><summary>
            Gets or sets whether only the code snippet header information is loaded.
            </summary><value><c>true</c> if only the code snippet header information is loaded; otherwise, <c>false</c>.
            </value><remarks>
            Code snippets can optionally load the header information without the full snippet data to save on memory.
            When activated, code snippets containing only the header information will be reloaded from their <see cref="P:ActiproSoftware.SyntaxEditor.CodeSnippet.SourceFile" />.
            If this property set to <c>true</c>, the <see cref="P:ActiproSoftware.SyntaxEditor.CodeSnippet.SourceFile" /> must point to a valid file.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.CodeSnippet.Keywords"><summary>
            Gets a <see cref="T:System.Collections.Specialized.StringCollection" /> of keywords describing the code snippet.
            </summary><value>A <see cref="T:System.Collections.Specialized.StringCollection" /> of keywords describing the code snippet.</value></member><member name="P:ActiproSoftware.SyntaxEditor.CodeSnippet.References"><summary>
            Gets a collection of references for the code snippet.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippetReferenceCollection" /> containing the references.</value></member><member name="P:ActiproSoftware.SyntaxEditor.CodeSnippet.Shortcut"><summary>
            Gets or sets the shortcut text used to insert the code snippet.
            </summary><value>The shortcut text used to insert the code snippet.</value></member><member name="P:ActiproSoftware.SyntaxEditor.CodeSnippet.SnippetTypes"><summary>
            Gets or sets the types of actions that can be performed by the code snippet.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippetTypes" /> that specifies the types of actions that can be performed by the code snippet.</value></member><member name="P:ActiproSoftware.SyntaxEditor.CodeSnippet.SourceFile"><summary>
            Gets or sets the path to the file from which the code snippet was loaded.
            </summary><value>The path to the file from which the code snippet was loaded.</value><remarks>
            This property is not serialized to XML snippet files.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.CodeSnippet.Title"><summary>
            Gets or sets the title for the code snippet.
            </summary><value>The title for the code snippet.</value></member><member name="P:ActiproSoftware.SyntaxEditor.CodeSnippet.Tag"><summary>
            Gets or sets the object that contains user-defined data about the object.
            </summary><value>
            An <see cref="T:System.Object" /> that contains user-defined data about the control. The default is <see langword="null" />.
            </value><remarks>
            Any type derived from the <see cref="T:System.Object" /> class can be assigned to this property. 
            This property is not serialized to XML snippet files.
            </remarks></member><member name="T:ActiproSoftware.SyntaxEditor.CodeSnippetCollection"><summary>
            Provides a collection of <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippet" /> objects.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.CodeSnippetCollection.Add(ActiproSoftware.SyntaxEditor.CodeSnippet)"><summary>
            Adds an item to the collection.
            </summary><param name="item">The <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippet" /> to add.</param><returns>The index at which the item was inserted into the collection.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.CodeSnippetCollection.AddRange(ActiproSoftware.SyntaxEditor.CodeSnippet[])"><summary>
            Adds multiple items to the collection.
            </summary><param name="items">The array of <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippet" /> objects to add.</param></member><member name="M:ActiproSoftware.SyntaxEditor.CodeSnippetCollection.Clear"><summary>
            Removes all items from the collection.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.CodeSnippetCollection.Contains(ActiproSoftware.SyntaxEditor.CodeSnippet)"><summary>
            Determines whether the specified item is in the collection. 
            </summary><param name="item">
            The <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippet" /> to look for. 
            </param><returns><c>true</c> if the collection contains the item; otherwise, <c>false</c>. 
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.CodeSnippetCollection.Contains(System.String)"><summary>
            Determines whether the item with the specified shortcut is in the collection. 
            </summary><param name="shortcut">The shortcut to look for.</param><returns><c>true</c> if the collection contains the item; otherwise, <c>false</c>. 
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.CodeSnippetCollection.CopyTo(System.Array,System.Int32)"><summary>
            Copies the entire collection to a compatible one-dimensional <c>Array</c>, 
            starting at the specified index of the target array.
            </summary><param name="array">
            The one-dimensional <c>Array</c> that is the destination of the elements copied from the collection. 
            The <c>Array</c> must have zero-based indexing. 
            </param><param name="startIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param></member><member name="M:ActiproSoftware.SyntaxEditor.CodeSnippetCollection.IndexOf(ActiproSoftware.SyntaxEditor.CodeSnippet)"><summary>
            Returns the index of the specified item in the collection.
            </summary><param name="item">The <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippet" /> to look for.</param><returns>
            If found, the index where the item is in the collection; otherwise, <c>-1</c>. 
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.CodeSnippetCollection.IndexOf(System.String)"><summary>
            Returns the index of the item with the specified shortcut in the collection.
            </summary><param name="shortcut">The shortcut to look for.</param><returns>
            If found, the index where the item is in the collection; otherwise, <c>-1</c>. 
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.CodeSnippetCollection.Insert(System.Int32,ActiproSoftware.SyntaxEditor.CodeSnippet)"><summary>
            Inserts a <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippet" /> into the collection at the specified index.
            </summary><param name="index">The zero-based index at which the <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippet" /> should be inserted.</param><param name="item">The <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippet" /> to insert into the collection.</param></member><member name="M:ActiproSoftware.SyntaxEditor.CodeSnippetCollection.Remove(ActiproSoftware.SyntaxEditor.CodeSnippet)"><summary>
            Removes the first occurrence of a specific item from the collection.
            </summary><param name="item">The <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippet" /> to remove.</param></member><member name="M:ActiproSoftware.SyntaxEditor.CodeSnippetCollection.RemoveAt(System.Int32)"><summary>
            Removes the <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippet" /> at the specified index in the collection.
            </summary><param name="index">The zero-based index of the <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippet" /> to be removed.</param></member><member name="M:ActiproSoftware.SyntaxEditor.CodeSnippetCollection.#ctor"><summary>
            Initializes a new instance of the <c>CodeSnippetCollection</c> class.
            </summary><remarks>
            The default constructor initializes all fields to their default values.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.CodeSnippetCollection.Item(System.Int32)"><summary>
            Gets the item at the specified index. 
            <para>
            [C#] In C#, this property is the indexer for the <c>CodeSnippetCollection</c> class. 
            </para></summary><param name="index">The index of the item to return.</param><value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippet" /> at the specified index. 
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.CodeSnippetCollection.Item(System.String)"><summary>
            Gets the item with the specified shortcut. 
            </summary><param name="shortcut">The shortcut to look for.</param><value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippet" /> with the specified shortcut. 
            </value></member><member name="T:ActiproSoftware.SyntaxEditor.CodeSnippetDeclaration"><summary>
            Represents a code snippet declaration.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.CodeSnippetDeclaration.#ctor(System.String,System.String,System.String)"><summary>
            Initializes a new instance of the <c>CodeSnippetDeclaration</c> class.
            </summary><param name="id">A unique identifier for the declaration.</param><param name="default">The default value of the declaration, when the code snippet has been inserted.</param><param name="toolTip">A description of the expected value and usage of the declaration.</param></member><member name="P:ActiproSoftware.SyntaxEditor.CodeSnippetDeclaration.Default"><summary>
            Gets or sets the default value of the declaration, when the code snippet has been inserted.
            </summary><value>The default value of the declaration, when the code snippet has been inserted.</value></member><member name="P:ActiproSoftware.SyntaxEditor.CodeSnippetDeclaration.Editable"><summary>
            Gets or sets whether the declaration is editable by the end-user once the code snippet has been inserted.
            </summary><value><c>true</c> if the declaration is editable by the end-user once the code snippet has been inserted; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.CodeSnippetDeclaration.Function"><summary>
            Gets or sets a function to execute when the declaration receives focus.
            </summary><value>A function to execute when the declaration receives focus.</value></member><member name="P:ActiproSoftware.SyntaxEditor.CodeSnippetDeclaration.ID"><summary>
            Gets or sets a unique identifier for the declaration.
            </summary><value>A unique identifier for the declaration.</value></member><member name="P:ActiproSoftware.SyntaxEditor.CodeSnippetDeclaration.ToolTip"><summary>
            Gets or sets a description of the expected value and usage of the declaration, that can be used in a tooltip.
            </summary><value>A description of the expected value and usage of the declaration.</value></member><member name="P:ActiproSoftware.SyntaxEditor.CodeSnippetDeclaration.Type"><summary>
            Gets or sets the type of the declaration.
            </summary><value>The type of the declaration.</value></member><member name="T:ActiproSoftware.SyntaxEditor.CodeSnippetDeclarationCollection"><summary>
            Provides a collection of <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippetDeclaration" /> objects.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.CodeSnippetDeclarationCollection.Add(ActiproSoftware.SyntaxEditor.CodeSnippetDeclaration)"><summary>
            Adds an item to the collection.
            </summary><param name="item">The <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippetDeclaration" /> to add.</param><returns>The index at which the item was inserted into the collection.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.CodeSnippetDeclarationCollection.AddRange(ActiproSoftware.SyntaxEditor.CodeSnippetDeclaration[])"><summary>
            Adds multiple items to the collection.
            </summary><param name="items">The array of <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippetDeclaration" /> objects to add.</param></member><member name="M:ActiproSoftware.SyntaxEditor.CodeSnippetDeclarationCollection.Clear"><summary>
            Removes all items from the collection.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.CodeSnippetDeclarationCollection.Contains(ActiproSoftware.SyntaxEditor.CodeSnippetDeclaration)"><summary>
            Determines whether the specified item is in the collection. 
            </summary><param name="item">
            The <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippetDeclaration" /> to look for. 
            </param><returns><c>true</c> if the collection contains the item; otherwise, <c>false</c>. 
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.CodeSnippetDeclarationCollection.Contains(System.String)"><summary>
            Determines whether the item with the specified ID is in the collection. 
            </summary><param name="id">The ID to look for.</param><returns><c>true</c> if the collection contains the item; otherwise, <c>false</c>. 
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.CodeSnippetDeclarationCollection.CopyTo(System.Array,System.Int32)"><summary>
            Copies the entire collection to a compatible one-dimensional <c>Array</c>, 
            starting at the specified index of the target array.
            </summary><param name="array">
            The one-dimensional <c>Array</c> that is the destination of the elements copied from the collection. 
            The <c>Array</c> must have zero-based indexing. 
            </param><param name="startIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param></member><member name="M:ActiproSoftware.SyntaxEditor.CodeSnippetDeclarationCollection.IndexOf(ActiproSoftware.SyntaxEditor.CodeSnippetDeclaration)"><summary>
            Returns the index of the specified item in the collection.
            </summary><param name="item">The <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippetDeclaration" /> to look for.</param><returns>
            If found, the index where the item is in the collection; otherwise, <c>-1</c>. 
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.CodeSnippetDeclarationCollection.IndexOf(System.String)"><summary>
            Returns the index of the item with the specified ID in the collection.
            </summary><param name="id">The ID to look for.</param><returns>
            If found, the index where the item is in the collection; otherwise, <c>-1</c>. 
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.CodeSnippetDeclarationCollection.Insert(System.Int32,ActiproSoftware.SyntaxEditor.CodeSnippetDeclaration)"><summary>
            Inserts a <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippetDeclaration" /> into the collection at the specified index.
            </summary><param name="index">The zero-based index at which the <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippetDeclaration" /> should be inserted.</param><param name="item">The <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippetDeclaration" /> to insert into the collection.</param></member><member name="M:ActiproSoftware.SyntaxEditor.CodeSnippetDeclarationCollection.Remove(ActiproSoftware.SyntaxEditor.CodeSnippetDeclaration)"><summary>
            Removes the first occurrence of a specific item from the collection.
            </summary><param name="item">The <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippetDeclaration" /> to remove.</param></member><member name="M:ActiproSoftware.SyntaxEditor.CodeSnippetDeclarationCollection.RemoveAt(System.Int32)"><summary>
            Removes the <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippetDeclaration" /> at the specified index in the collection.
            </summary><param name="index">The zero-based index of the <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippetDeclaration" /> to be removed.</param></member><member name="M:ActiproSoftware.SyntaxEditor.CodeSnippetDeclarationCollection.#ctor"><summary>
            Initializes a new instance of the <c>CodeSnippetDeclarationCollection</c> class.
            </summary><remarks>
            The default constructor initializes all fields to their default values.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.CodeSnippetDeclarationCollection.Item(System.Int32)"><summary>
            Gets the item at the specified index. 
            <para>
            [C#] In C#, this property is the indexer for the <c>CodeSnippetDeclarationCollection</c> class. 
            </para></summary><param name="index">The index of the item to return.</param><value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippetDeclaration" /> at the specified index. 
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.CodeSnippetDeclarationCollection.Item(System.String)"><summary>
            Gets the item with the specified ID. 
            </summary><param name="id">The ID to look for.</param><value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippetDeclaration" /> with the specified ID. 
            </value></member><member name="T:ActiproSoftware.SyntaxEditor.CodeSnippetEventArgs"><summary>
            Provides data for events dealing with <see cref="P:ActiproSoftware.SyntaxEditor.CodeSnippetEventArgs.CodeSnippet" /> objects.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.CodeSnippetEventArgs.ToString"><summary>
            Creates and returns a string representation of the current object.
            </summary><returns>A string representation of the current object.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.CodeSnippetEventArgs.#ctor(ActiproSoftware.SyntaxEditor.CodeSnippet)"><summary>
            Initializes a new instance of the <c>CodeSnippetEventArgs</c> class. 
            </summary><param name="codeSnippet">The <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippet" /> affected by this event.</param></member><member name="P:ActiproSoftware.SyntaxEditor.CodeSnippetEventArgs.CodeSnippet"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippet" /> affected by this event.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippet" /> affected by this event.</value></member><member name="P:ActiproSoftware.SyntaxEditor.CodeSnippetEventArgs.CodeText"><summary>
            Gets or sets the code text to use for the code snippet when activated.
            </summary><value>The code text to use for the code snippet when activated.</value><remarks>
            This is only used with the <see cref="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.CodeSnippetActivating" /> event.
            </remarks></member><member name="T:ActiproSoftware.SyntaxEditor.CodeSnippetEventHandler"><summary>
            Represents the method that will handle events for <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippet" /> objects.
            </summary><param name="sender">Sender of the event.</param><param name="e">A <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippetEventArgs" /> containing event data.</param><remarks>
            When you create a <c>CodeSnippetEventHandler</c> delegate, you identify the method that will handle the event. 
            To associate the event with your event handler, add an instance of the delegate to the event. 
            The event handler is called whenever the event occurs, unless you remove the delegate.
            </remarks></member><member name="T:ActiproSoftware.SyntaxEditor.CodeSnippetFieldEventArgs"><summary>
            Provides data for events dealing with <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippet" /> field objects.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.CodeSnippetFieldEventArgs.ToString"><summary>
            Creates and returns a string representation of the current object.
            </summary><returns>A string representation of the current object.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.CodeSnippetFieldEventArgs.#ctor(ActiproSoftware.SyntaxEditor.CodeSnippet,System.String,ActiproSoftware.SyntaxEditor.CodeSnippetIndicator)"><summary>
            Initializes a new instance of the <c>CodeSnippetFieldEventArgs</c> class. 
            </summary><param name="codeSnippet">The <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippet" /> affected by this event.</param><param name="declarationID">The declaration ID for the field.</param><param name="indicator">The <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippetIndicator" />, if known, that represents the active field.</param></member><member name="P:ActiproSoftware.SyntaxEditor.CodeSnippetFieldEventArgs.DeclarationID"><summary>
            Gets the declaration ID for the field.
            </summary><value>The declaration ID for the field.</value></member><member name="P:ActiproSoftware.SyntaxEditor.CodeSnippetFieldEventArgs.Indicator"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippetIndicator" />, if known, that represents the active field.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippetIndicator" />, if known, that represents the active field.</value></member><member name="T:ActiproSoftware.SyntaxEditor.CodeSnippetFieldEventHandler"><summary>
            Represents the method that will handle events for <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippet" /> field objects.
            </summary><param name="sender">Sender of the event.</param><param name="e">A <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippetFieldEventArgs" /> containing event data.</param><remarks>
            When you create a <c>CodeSnippetFieldEventHandler</c> delegate, you identify the method that will handle the event. 
            To associate the event with your event handler, add an instance of the delegate to the event. 
            The event handler is called whenever the event occurs, unless you remove the delegate.
            </remarks></member><member name="T:ActiproSoftware.SyntaxEditor.CodeSnippetFolder"><summary>
            Represents a code snippet folder.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.CodeSnippetFolder.FindCodeSnippetWithShortcut(System.String,System.Boolean)"><summary>
            Recursively searches for a <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippet" /> in the folder or in a child folder that has the specified shortcut.
            </summary><param name="shortcut">The shortcut for which to search.</param><param name="caseSensitive">Whether to perform a case sensitive search.</param><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippet" /> that was found, if any.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.CodeSnippetFolder.HasCodeSnippetsOfType(ActiproSoftware.SyntaxEditor.CodeSnippetTypes,System.Boolean)"><summary>
            Determines if the folder, and optionally any of its child folders, contains a code snippet of the specified type.
            </summary><param name="type">A <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippetTypes" /> indicating the type of code snippets for which to search.</param><param name="recurse">Whether to recurse into child folders.</param><returns><c>true</c> if the folder contains a code snippet of the specified type; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.CodeSnippetFolder.Merge(ActiproSoftware.SyntaxEditor.CodeSnippetFolder,System.Boolean)"><summary>
            Recursively merges the specified <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippetFolder" /> with this folder, optionally inserting any duplicate-named code snippets.
            </summary><param name="folder">The <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippetFolder" /> to merge with this folder.</param><param name="insertDuplicates">Whether to insert duplicate-named code snippets or ignore them.</param><remarks>
            Duplicates will be found using a case insensitive compare.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.CodeSnippetFolder.Refresh"><summary>
            Refreshes the <see cref="P:ActiproSoftware.SyntaxEditor.CodeSnippetFolder.ChildFolders" /> and <see cref="P:ActiproSoftware.SyntaxEditor.CodeSnippetFolder.CodeSnippets" /> collections by reloading the <see cref="P:ActiproSoftware.SyntaxEditor.CodeSnippetFolder.Path" />
            with header-only code snippets.
            </summary><remarks>
            This method will remove any merged folder/snippet data by calls to <see cref="M:ActiproSoftware.SyntaxEditor.CodeSnippetFolder.Merge(ActiproSoftware.SyntaxEditor.CodeSnippetFolder,System.Boolean)" />.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.CodeSnippetFolder.Refresh(System.Boolean)"><summary>
            Refreshes the <see cref="P:ActiproSoftware.SyntaxEditor.CodeSnippetFolder.ChildFolders" /> and <see cref="P:ActiproSoftware.SyntaxEditor.CodeSnippetFolder.CodeSnippets" /> collections by reloading the <see cref="P:ActiproSoftware.SyntaxEditor.CodeSnippetFolder.Path" />.
            </summary><param name="headerOnly">Whether to only load the code snippet header information for any loaded code snippets.</param><remarks>
            This method will remove any merged folder/snippet data by calls to <see cref="M:ActiproSoftware.SyntaxEditor.CodeSnippetFolder.Merge(ActiproSoftware.SyntaxEditor.CodeSnippetFolder,System.Boolean)" />.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.CodeSnippetFolder.#ctor(System.String)"><summary>
            Initializes a new instance of the <c>CodeSnippetFolder</c> class.
            </summary><param name="name">The name of the folder.</param></member><member name="M:ActiproSoftware.SyntaxEditor.CodeSnippetFolder.#ctor(System.String,System.String)"><summary>
            Initializes a new instance of the <c>CodeSnippetFolder</c> class that contains header-only code snippets.
            </summary><param name="name">The name of the folder.</param><param name="path">The absolute file path for the folder, if a path should be used to populate the collection.</param></member><member name="M:ActiproSoftware.SyntaxEditor.CodeSnippetFolder.#ctor(System.String,System.String,System.Boolean)"><summary>
            Initializes a new instance of the <c>CodeSnippetFolder</c> class.
            </summary><param name="name">The name of the folder.</param><param name="path">The absolute file path for the folder, if a path should be used to populate the collection.</param><param name="headerOnly">Whether to only load the code snippet header information for any loaded code snippets.</param></member><member name="M:ActiproSoftware.SyntaxEditor.CodeSnippetFolder.#ctor(System.String,System.String,System.String)"><summary>
            Initializes a new instance of the <c>CodeSnippetFolder</c> class that contains header-only code snippets.
            </summary><param name="name">The name of the folder.</param><param name="path">The absolute file path for the folder, if a path should be used to populate the collection.</param><param name="searchPattern">The search pattern to use when searching for snippet files.  The default value is <c>"*.snippet</c>.</param></member><member name="M:ActiproSoftware.SyntaxEditor.CodeSnippetFolder.#ctor(System.String,System.String,System.String,System.Boolean)"><summary>
            Initializes a new instance of the <c>CodeSnippetFolder</c> class.
            </summary><param name="name">The name of the folder.</param><param name="path">The absolute file path for the folder, if a path should be used to populate the collection.</param><param name="searchPattern">The search pattern to use when searching for snippet files.  The default value is <c>"*.snippet</c>.</param><param name="headerOnly">Whether to only load the code snippet header information for any loaded code snippets.</param></member><member name="P:ActiproSoftware.SyntaxEditor.CodeSnippetFolder.ChildFolders"><summary>
            Gets the collection of <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippetFolder" /> objects encapsulated by the folder.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippetFolderCollection" /> containing the <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippetFolder" /> objects.</value></member><member name="P:ActiproSoftware.SyntaxEditor.CodeSnippetFolder.CodeSnippets"><summary>
            Gets the collection of <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippet" /> objects encapsulated by the folder.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippetCollection" /> containing the <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippet" /> objects.</value></member><member name="P:ActiproSoftware.SyntaxEditor.CodeSnippetFolder.Description"><summary>
            Gets or sets descriptive information about the contents of the folder.
            </summary><value>Descriptive information about the contents of the folder.</value><remarks>
            This property is used for the Insert Snippet popup description tips.
            This property is not serialized to XML snippet files.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.CodeSnippetFolder.ImageIndex"><summary>
            Gets or sets the index of an image within the <see cref="P:ActiproSoftware.SyntaxEditor.IntelliPromptCodeSnippets.ImageList" />, displayed in the Insert Snippet member list.
            </summary><value>
            The index of an image within the <see cref="P:ActiproSoftware.SyntaxEditor.IntelliPromptCodeSnippets.ImageList" />, displayed in the Insert Snippet member list.
            The default is <c>0</c>. 
            </value><remarks>
            This property is set to <c>-1</c> if no image is to be displayed for the item. 
            This property is not serialized to XML snippet files.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.CodeSnippetFolder.Name"><summary>
            Gets or sets the name of the folder.
            </summary><value>The name of the folder.</value></member><member name="P:ActiproSoftware.SyntaxEditor.CodeSnippetFolder.Path"><summary>
            Gets or sets the absolute file path for the folder, if a path was used to populate the collection.
            </summary><value>The absolute file path for the folder, if a path was used to populate the collection.</value></member><member name="P:ActiproSoftware.SyntaxEditor.CodeSnippetFolder.SearchPattern"><summary>
            Gets or sets the search pattern to use when searching for snippet files.
            </summary><value>The search pattern to use when searching for snippet files.  The default value is <c>"*.snippet</c>.</value></member><member name="P:ActiproSoftware.SyntaxEditor.CodeSnippetFolder.Tag"><summary>
            Gets or sets the object that contains user-defined data about the object.
            </summary><value>
            An <see cref="T:System.Object" /> that contains user-defined data about the control. The default is <see langword="null" />.
            </value><remarks>
            Any type derived from the <see cref="T:System.Object" /> class can be assigned to this property. 
            This property is not serialized to XML snippet files.
            </remarks></member><member name="T:ActiproSoftware.SyntaxEditor.CodeSnippetFolderCollection"><summary>
            Provides a collection of <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippetFolder" /> objects.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.CodeSnippetFolderCollection.Add(ActiproSoftware.SyntaxEditor.CodeSnippetFolder)"><summary>
            Adds an item to the collection.
            </summary><param name="item">The <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippetFolder" /> to add.</param><returns>The index at which the item was inserted into the collection.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.CodeSnippetFolderCollection.AddRange(ActiproSoftware.SyntaxEditor.CodeSnippetFolder[])"><summary>
            Adds multiple items to the collection.
            </summary><param name="items">The array of <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippetFolder" /> objects to add.</param></member><member name="M:ActiproSoftware.SyntaxEditor.CodeSnippetFolderCollection.Clear"><summary>
            Removes all items from the collection.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.CodeSnippetFolderCollection.Contains(ActiproSoftware.SyntaxEditor.CodeSnippetFolder)"><summary>
            Determines whether the specified item is in the collection. 
            </summary><param name="item">
            The <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippetFolder" /> to look for. 
            </param><returns><c>true</c> if the collection contains the item; otherwise, <c>false</c>. 
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.CodeSnippetFolderCollection.CopyTo(System.Array,System.Int32)"><summary>
            Copies the entire collection to a compatible one-dimensional <c>Array</c>, 
            starting at the specified index of the target array.
            </summary><param name="array">
            The one-dimensional <c>Array</c> that is the destination of the elements copied from the collection. 
            The <c>Array</c> must have zero-based indexing. 
            </param><param name="startIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param></member><member name="M:ActiproSoftware.SyntaxEditor.CodeSnippetFolderCollection.FindCodeSnippetWithShortcut(System.String,System.Boolean)"><summary>
            Recursively searches for a <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippet" /> in a child folder that has the specified shortcut.
            </summary><param name="shortcut">The shortcut for which to search.</param><param name="caseSensitive">Whether to perform a case sensitive search.</param><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippet" /> that was found, if any.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.CodeSnippetFolderCollection.IndexOf(ActiproSoftware.SyntaxEditor.CodeSnippetFolder)"><summary>
            Returns the index of the specified item in the collection.
            </summary><param name="item">The <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippetFolder" /> to look for.</param><returns>
            If found, the index where the item is in the collection; otherwise, <c>-1</c>. 
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.CodeSnippetFolderCollection.Insert(System.Int32,ActiproSoftware.SyntaxEditor.CodeSnippetFolder)"><summary>
            Inserts a <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippetFolder" /> into the collection at the specified index.
            </summary><param name="index">The zero-based index at which the <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippetFolder" /> should be inserted.</param><param name="item">The <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippetFolder" /> to insert into the collection.</param></member><member name="M:ActiproSoftware.SyntaxEditor.CodeSnippetFolderCollection.Remove(ActiproSoftware.SyntaxEditor.CodeSnippetFolder)"><summary>
            Removes the first occurrence of a specific item from the collection.
            </summary><param name="item">The <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippetFolder" /> to remove.</param></member><member name="M:ActiproSoftware.SyntaxEditor.CodeSnippetFolderCollection.RemoveAt(System.Int32)"><summary>
            Removes the <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippetFolder" /> at the specified index in the collection.
            </summary><param name="index">The zero-based index of the <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippetFolder" /> to be removed.</param></member><member name="M:ActiproSoftware.SyntaxEditor.CodeSnippetFolderCollection.ToArray"><summary>
            Copies the items of the collection to a new <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippetFolder" /> array.
            </summary><returns>An array of <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippetFolder" /> items.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.CodeSnippetFolderCollection.#ctor"><summary>
            Initializes a new instance of the <c>CodeSnippetFolderCollection</c> class.
            </summary><remarks>
            The default constructor initializes all fields to their default values.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.CodeSnippetFolderCollection.Item(System.Int32)"><summary>
            Gets the item at the specified index. 
            <para>
            [C#] In C#, this property is the indexer for the <c>CodeSnippetFolderCollection</c> class. 
            </para></summary><param name="index">The index of the item to return.</param><value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippetFolder" /> at the specified index. 
            </value></member><member name="T:ActiproSoftware.SyntaxEditor.CodeSnippetImport"><summary>
            Represents a code snippet import.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.CodeSnippetImport.#ctor(System.String)"><summary>
            Initializes a new instance of the <c>CodeSnippetImport</c> class.
            </summary><param name="namespace">The namespace to import.</param></member><member name="P:ActiproSoftware.SyntaxEditor.CodeSnippetImport.Namespace"><summary>
            Gets or sets the namespace to import.
            </summary><value>The namespace to import.</value></member><member name="T:ActiproSoftware.SyntaxEditor.CodeSnippetImportCollection"><summary>
            Provides a collection of <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippetImport" /> objects.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.CodeSnippetImportCollection.Add(ActiproSoftware.SyntaxEditor.CodeSnippetImport)"><summary>
            Adds an item to the collection.
            </summary><param name="item">The <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippetImport" /> to add.</param><returns>The index at which the item was inserted into the collection.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.CodeSnippetImportCollection.AddRange(ActiproSoftware.SyntaxEditor.CodeSnippetImport[])"><summary>
            Adds multiple items to the collection.
            </summary><param name="items">The array of <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippetImport" /> objects to add.</param></member><member name="M:ActiproSoftware.SyntaxEditor.CodeSnippetImportCollection.Clear"><summary>
            Removes all items from the collection.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.CodeSnippetImportCollection.Contains(ActiproSoftware.SyntaxEditor.CodeSnippetImport)"><summary>
            Determines whether the specified item is in the collection. 
            </summary><param name="item">
            The <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippetImport" /> to look for. 
            </param><returns><c>true</c> if the collection contains the item; otherwise, <c>false</c>. 
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.CodeSnippetImportCollection.CopyTo(System.Array,System.Int32)"><summary>
            Copies the entire collection to a compatible one-dimensional <c>Array</c>, 
            starting at the specified index of the target array.
            </summary><param name="array">
            The one-dimensional <c>Array</c> that is the destination of the elements copied from the collection. 
            The <c>Array</c> must have zero-based indexing. 
            </param><param name="startIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param></member><member name="M:ActiproSoftware.SyntaxEditor.CodeSnippetImportCollection.IndexOf(ActiproSoftware.SyntaxEditor.CodeSnippetImport)"><summary>
            Returns the index of the specified item in the collection.
            </summary><param name="item">The <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippetImport" /> to look for.</param><returns>
            If found, the index where the item is in the collection; otherwise, <c>-1</c>. 
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.CodeSnippetImportCollection.Insert(System.Int32,ActiproSoftware.SyntaxEditor.CodeSnippetImport)"><summary>
            Inserts a <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippetImport" /> into the collection at the specified index.
            </summary><param name="index">The zero-based index at which the <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippetImport" /> should be inserted.</param><param name="item">The <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippetImport" /> to insert into the collection.</param></member><member name="M:ActiproSoftware.SyntaxEditor.CodeSnippetImportCollection.Remove(ActiproSoftware.SyntaxEditor.CodeSnippetImport)"><summary>
            Removes the first occurrence of a specific item from the collection.
            </summary><param name="item">The <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippetImport" /> to remove.</param></member><member name="M:ActiproSoftware.SyntaxEditor.CodeSnippetImportCollection.RemoveAt(System.Int32)"><summary>
            Removes the <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippetImport" /> at the specified index in the collection.
            </summary><param name="index">The zero-based index of the <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippetImport" /> to be removed.</param></member><member name="M:ActiproSoftware.SyntaxEditor.CodeSnippetImportCollection.#ctor"><summary>
            Initializes a new instance of the <c>CodeSnippetImportCollection</c> class.
            </summary><remarks>
            The default constructor initializes all fields to their default values.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.CodeSnippetImportCollection.Item(System.Int32)"><summary>
            Gets the item at the specified index. 
            <para>
            [C#] In C#, this property is the indexer for the <c>CodeSnippetImportCollection</c> class. 
            </para></summary><param name="index">The index of the item to return.</param><value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippetImport" /> at the specified index. 
            </value></member><member name="T:ActiproSoftware.SyntaxEditor.CodeSnippetIndicator"><summary>
            Represents a code snippet indicator.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.CodeSnippetIndicator.ApplyHighlightingStyleAdornments(ActiproSoftware.SyntaxEditor.HighlightingStyleResolver)"><summary>
            Applies the adornments of the span indicator to the specified <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyleResolver" />.
            </summary><param name="resolver">The <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyleResolver" /> to modify.</param></member><member name="M:ActiproSoftware.SyntaxEditor.CodeSnippetIndicator.ApplyHighlightingStyleColors(ActiproSoftware.SyntaxEditor.HighlightingStyleResolver)"><summary>
            Applies the foreground and background colors of the span indicator to the specified <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyleResolver" />.
            </summary><param name="resolver">The <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyleResolver" /> to modify.</param></member><member name="P:ActiproSoftware.SyntaxEditor.CodeSnippetIndicator.AllowZeroLength"><summary>
            Gets whether to allow the span indicator to be inserted with a zero length.
            </summary><value><c>true</c> if the span indicator should be allowed to be inserted with a zero length; otherwise, <c>false</c>.
            </value><remarks>
            The default value is the value of the <see cref="P:ActiproSoftware.SyntaxEditor.CodeSnippetIndicator.ExpandOnBoundaries" /> property.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.CodeSnippetIndicator.DeclarationID"><summary>
            Gets the ID of the declaration.
            </summary><value>The ID of the declaration.</value></member><member name="P:ActiproSoftware.SyntaxEditor.CodeSnippetIndicator.DefaultName"><summary>
            Gets the default name for a breakpoint.
            </summary><value>The default name for a breakpoint.</value></member><member name="P:ActiproSoftware.SyntaxEditor.CodeSnippetIndicator.ExpandOnBoundaries"><summary>
            Gets whether to expand the span indicator when typing is performed on the boundary of the indicator.
            </summary><value><c>true</c> if the span indicator should expand; otherwise, <c>false</c>.
            </value><remarks>
            The default value is <c>false</c>.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.CodeSnippetIndicator.HasFontChange"><summary>
            Gets whether the span indicator contains a font-related change.
            </summary><value><c>true</c> if the span indicator contains a font-related change; otherwise, <c>false</c>.
            </value><remarks>
            This property lets <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor" /> know whether display lines need to be recalculated
            when the span indicator is added.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.CodeSnippetIndicator.IsActive"><summary>
            Gets or sets whether the indicator is active.
            </summary><value><c>true</c> if the indicator is active; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.CodeSnippetIndicator.IsDependent"><summary>
            Gets or sets whether the indicator is dependent on another indicator.
            </summary><value><c>true</c> if the indicator is dependent on another indicator; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.CodeSnippetIndicator.IsEditable"><summary>
            Gets or sets whether the related declaration is editable.
            </summary><value><c>true</c> if the related declaration is editable; otherwise, <c>false</c>.
            </value></member><member name="T:ActiproSoftware.SyntaxEditor.CodeSnippetLiteral"><summary>
            Represents a code snippet literal.
            </summary><remarks>
            A literal is used to identify a replacement for a piece of code that is entirely contained within the code snippet, 
            but will likely be customized after it is inserted into the code. 
            For example, literal strings, numeric values, and some variable names should be declared as literals.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.CodeSnippetLiteral.#ctor(System.String,System.String,System.String)"><summary>
            Initializes a new instance of the <c>CodeSnippetLiteral</c> class.
            </summary><param name="id">A unique identifier for the declaration.</param><param name="default">The default value of the declaration, when the code snippet has been inserted.</param><param name="toolTip">A description of the expected value and usage of the declaration.</param></member><member name="T:ActiproSoftware.SyntaxEditor.CodeSnippetObject"><summary>
            Represents a code snippet object.
            </summary><remarks>
            The Object element is used to identify an item that is required by the code snippet but is likely 
            to be defined outside of the snippet itself. 
            For example, Windows Forms controls, ASP.NET controls, object instances, and type instances should be declared as objects. 
            Object declarations require that a type be specified.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.CodeSnippetObject.#ctor(System.String,System.String,System.String)"><summary>
            Initializes a new instance of the <c>CodeSnippetObject</c> class.
            </summary><param name="id">A unique identifier for the declaration.</param><param name="default">The default value of the declaration, when the code snippet has been inserted.</param><param name="toolTip">A description of the expected value and usage of the declaration.</param></member><member name="T:ActiproSoftware.SyntaxEditor.CodeSnippetReference"><summary>
            Represents a code snippet reference.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.CodeSnippetReference.#ctor(System.String)"><summary>
            Initializes a new instance of the <c>CodeSnippetReference</c> class.
            </summary><param name="assembly">The assembly to reference.</param></member><member name="P:ActiproSoftware.SyntaxEditor.CodeSnippetReference.Assembly"><summary>
            Gets or sets the assembly to reference.
            </summary><value>The assembly to reference.</value></member><member name="P:ActiproSoftware.SyntaxEditor.CodeSnippetReference.Url"><summary>
            Gets or sets the URL that provides more information about the referenced assembly.
            </summary><value>The URL that provides more information about the referenced assembly.</value></member><member name="T:ActiproSoftware.SyntaxEditor.CodeSnippetReferenceCollection"><summary>
            Provides a collection of <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippetReference" /> objects.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.CodeSnippetReferenceCollection.Add(ActiproSoftware.SyntaxEditor.CodeSnippetReference)"><summary>
            Adds an item to the collection.
            </summary><param name="item">The <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippetReference" /> to add.</param><returns>The index at which the item was inserted into the collection.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.CodeSnippetReferenceCollection.AddRange(ActiproSoftware.SyntaxEditor.CodeSnippetReference[])"><summary>
            Adds multiple items to the collection.
            </summary><param name="items">The array of <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippetReference" /> objects to add.</param></member><member name="M:ActiproSoftware.SyntaxEditor.CodeSnippetReferenceCollection.Clear"><summary>
            Removes all items from the collection.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.CodeSnippetReferenceCollection.Contains(ActiproSoftware.SyntaxEditor.CodeSnippetReference)"><summary>
            Determines whether the specified item is in the collection. 
            </summary><param name="item">
            The <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippetReference" /> to look for. 
            </param><returns><c>true</c> if the collection contains the item; otherwise, <c>false</c>. 
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.CodeSnippetReferenceCollection.CopyTo(System.Array,System.Int32)"><summary>
            Copies the entire collection to a compatible one-dimensional <c>Array</c>, 
            starting at the specified index of the target array.
            </summary><param name="array">
            The one-dimensional <c>Array</c> that is the destination of the elements copied from the collection. 
            The <c>Array</c> must have zero-based indexing. 
            </param><param name="startIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param></member><member name="M:ActiproSoftware.SyntaxEditor.CodeSnippetReferenceCollection.IndexOf(ActiproSoftware.SyntaxEditor.CodeSnippetReference)"><summary>
            Returns the index of the specified item in the collection.
            </summary><param name="item">The <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippetReference" /> to look for.</param><returns>
            If found, the index where the item is in the collection; otherwise, <c>-1</c>. 
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.CodeSnippetReferenceCollection.Insert(System.Int32,ActiproSoftware.SyntaxEditor.CodeSnippetReference)"><summary>
            Inserts a <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippetReference" /> into the collection at the specified index.
            </summary><param name="index">The zero-based index at which the <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippetReference" /> should be inserted.</param><param name="item">The <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippetReference" /> to insert into the collection.</param></member><member name="M:ActiproSoftware.SyntaxEditor.CodeSnippetReferenceCollection.Remove(ActiproSoftware.SyntaxEditor.CodeSnippetReference)"><summary>
            Removes the first occurrence of a specific item from the collection.
            </summary><param name="item">The <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippetReference" /> to remove.</param></member><member name="M:ActiproSoftware.SyntaxEditor.CodeSnippetReferenceCollection.RemoveAt(System.Int32)"><summary>
            Removes the <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippetReference" /> at the specified index in the collection.
            </summary><param name="index">The zero-based index of the <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippetReference" /> to be removed.</param></member><member name="M:ActiproSoftware.SyntaxEditor.CodeSnippetReferenceCollection.#ctor"><summary>
            Initializes a new instance of the <c>CodeSnippetReferenceCollection</c> class.
            </summary><remarks>
            The default constructor initializes all fields to their default values.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.CodeSnippetReferenceCollection.Item(System.Int32)"><summary>
            Gets the item at the specified index. 
            <para>
            [C#] In C#, this property is the indexer for the <c>CodeSnippetReferenceCollection</c> class. 
            </para></summary><param name="index">The index of the item to return.</param><value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippetReference" /> at the specified index. 
            </value></member><member name="T:ActiproSoftware.SyntaxEditor.CodeSnippetTypes"><summary>
            Represents the types of actions that can be performed by a code snippet.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.CodeSnippetTypes.Expansion"><summary>
            Allows the code snippet to be inserted at the cursor.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.CodeSnippetTypes.SurroundsWith"><summary>
            Allows the code snippet to be placed around a selected piece of code.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.CodeSnippetTypes.Refactoring"><summary>
            Allows for code refactoring.  This is currently unsupported by SyntaxEditor.
            </summary></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.CopyToClipboardCommand"><summary>
            Copies the currently selected text to the clipboard.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.CopyToClipboardCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.CopyToClipboardCommand.#ctor"><summary>
            Initializes a new instance of the <c>CopyToClipboardCommand</c> class. 
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.CopyToClipboardCommand.#ctor(System.Boolean)"><summary>
            Initializes a new instance of the <c>CopyToClipboardCommand</c> class. 
            </summary><param name="append">Whether to append the copied text to the existing clipboard contents instead of overwriting them.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.CutLineToClipboardCommand"><summary>
            Cuts the currently selected display line to the clipboard.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.CutLineToClipboardCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.CutToClipboardCommand"><summary>
            Cuts the currently selected text to the clipboard.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.CutToClipboardCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.CutToClipboardCommand.#ctor"><summary>
            Initializes a new instance of the <c>CutToClipboardCommand</c> class. 
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.CutToClipboardCommand.#ctor(System.Boolean)"><summary>
            Initializes a new instance of the <c>CutToClipboardCommand</c> class. 
            </summary><param name="append">Whether to append the copied text to the existing clipboard contents instead of overwriting them.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.PasteFromClipboardCommand"><summary>
            Pastes text from the clipboard into the selection.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.PasteFromClipboardCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.PasteFromClipboardCommand.ReadFromXml(System.Xml.XmlReader)"><summary>
            Deserializes the data for the <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommand" /> from XML.
            </summary><param name="reader">The <see cref="T:System.Xml.XmlReader" /> to use.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.PasteFromClipboardCommand.WriteToXml(System.Xml.XmlWriter)"><summary>
            Serializes the data for the <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommand" /> to XML.
            </summary><param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to use.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.PasteFromClipboardCommand.#ctor"><summary>
            Initializes a new instance of the <c>PasteFromClipboardCommand</c> class. 
            </summary><remarks>
            The default constructor initializes all fields to their default values.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.PasteFromClipboardCommand.#ctor(System.Windows.Forms.IDataObject)"><summary>
            Initializes a new instance of the <c>PasteFromClipboardCommand</c> class. 
            </summary><param name="clipboardData">The <see cref="T:System.Windows.Forms.IDataObject" /> containing clipboard data to use for the paste.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext"><summary>
            Defines the context in which an edit command will be executed.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext.#ctor(ActiproSoftware.SyntaxEditor.Selection,System.Boolean)"><summary>
            Initializes an instance of the <c>EditCommandContext</c> class.
            </summary><param name="selection">The <see cref="T:ActiproSoftware.SyntaxEditor.Selection" /> to use for selection operations on the <see cref="P:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext.Document" />.</param><param name="isFromKeyTyping">Whether the context is created by a key typing event.</param></member><member name="P:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext.Document"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> upon which the command should be executed.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> upon which the command should be executed.</value></member><member name="P:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext.IsFromKeyTyping"><summary>
            Gets whether the context is created by a key typing event.
            </summary><value><c>true</c> if the context is created by a key typing event; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext.Selection"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Selection" /> to use for selection operations on the <see cref="P:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext.Document" />.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.Selection" /> to use for selection operations on the <see cref="P:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext.Document" />.</value></member><member name="P:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext.SyntaxEditor"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor" /> that contains the <see cref="P:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext.Document" />.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor" /> that contains the <see cref="P:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext.Document" />.</value></member><member name="P:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext.View"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> that contains the <see cref="P:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext.Selection" />.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> that contains the <see cref="P:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext.Selection" />.</value></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.CancelMacroRecordingCommand"><summary>
            Cancels recording a macro.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.CancelMacroRecordingCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="P:ActiproSoftware.SyntaxEditor.Commands.CancelMacroRecordingCommand.CanRecordInMacro"><summary>
            Gets whether the command can be recorded in a macro.
            </summary><value><c>true</c> if the command can be recorded in a macro; otherwise, <c>false</c>.
            </value></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.MacroCommand"><summary>
            Contains a list of <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommand" /> objects that can be executed in a macro.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.MacroCommand.Add(System.Object)"><summary>
            Adds an <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommand" /> to the end of the macro.
            </summary><param name="command">The <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommand" /> to add.</param><returns>The index at which the <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommand" /> was added.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.MacroCommand.Add(ActiproSoftware.SyntaxEditor.Commands.EditCommand)"><summary>
            Adds an <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommand" /> to the end of the macro.
            </summary><param name="command">The <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommand" /> to add.</param><returns>The index at which the <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommand" /> was added.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.MacroCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.MacroCommand.GetEnumerator"><summary>
            Retrieves an <c>IEnumerator</c> object for the entire collection.
            </summary><returns>An <c>IEnumerator</c> object for the entire collection</returns><remarks>
            Enumerators are intended to be used only to read data in the collection. 
            Enumerators cannot be used to modify the underlying collection.
            <para>
            The enumerator does not have exclusive access to the collection.
            </para><para>
            When an enumerator is instantiated, it takes a snapshot of the current state of the collection. 
            If changes are made to the collection, such as adding, modifying or deleting elements, the 
            snapshot gets out of sync and the enumerator throws an <c>InvalidOperationException</c>. 
            Two enumerators instantiated from the same collection at the same time can have 
            different snapshots of the collection.
            </para></remarks></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.MacroCommand.ReadFromXml(System.Xml.XmlReader)"><summary>
            Deserializes the data for the <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommand" /> from XML.
            </summary><param name="reader">The <see cref="T:System.Xml.XmlReader" /> to use.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.MacroCommand.WriteToXml(System.Xml.XmlWriter)"><summary>
            Serializes the data for the <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommand" /> to XML.
            </summary><param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to use.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.MacroCommand.#ctor"><summary>
            Initializes a new instance of the <c>MacroCommand</c> class. 
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.MacroCommand.#ctor(System.Collections.ICollection)"><summary>
            Initializes a new instance of the <c>MacroCommand</c> class. 
            </summary><param name="commands">A collection of <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommand" /> objects.</param></member><member name="P:ActiproSoftware.SyntaxEditor.Commands.MacroCommand.CanRecordInMacro"><summary>
            Gets whether the command can be recorded in a macro.
            </summary><value><c>true</c> if the command can be recorded in a macro; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.Commands.MacroCommand.Count"><summary>
            Gets the number of commands in the macro.
            </summary><value>The number of commands in the macro.</value></member><member name="P:ActiproSoftware.SyntaxEditor.Commands.MacroCommand.Item(System.Int32)"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommand" /> at the specified index. 
            <para>
            [C#] In C#, this property is the indexer for the <c>MacroCommand</c> class. 
            </para></summary><param name="index">The index of the <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommand" /> to return.</param><value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommand" /> at the specified index. 
            </value></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.PauseResumeMacroRecordingCommand"><summary>
            Pauses or resumes recording a macro, depending on the current state of macro recording.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.PauseResumeMacroRecordingCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="P:ActiproSoftware.SyntaxEditor.Commands.PauseResumeMacroRecordingCommand.CanRecordInMacro"><summary>
            Gets whether the command can be recorded in a macro.
            </summary><value><c>true</c> if the command can be recorded in a macro; otherwise, <c>false</c>.
            </value></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.RunMacroCommand"><summary>
            Runs the macro that was last recorded.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.RunMacroCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="P:ActiproSoftware.SyntaxEditor.Commands.RunMacroCommand.CanRecordInMacro"><summary>
            Gets whether the command can be recorded in a macro.
            </summary><value><c>true</c> if the command can be recorded in a macro; otherwise, <c>false</c>.
            </value></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.ToggleMacroRecordingCommand"><summary>
            Starts or stops recording a macro, depending on the current state of macro recording.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.ToggleMacroRecordingCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="P:ActiproSoftware.SyntaxEditor.Commands.ToggleMacroRecordingCommand.CanRecordInMacro"><summary>
            Gets whether the command can be recorded in a macro.
            </summary><value><c>true</c> if the command can be recorded in a macro; otherwise, <c>false</c>.
            </value></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.BackspaceCommand"><summary>
            Deletes the currently selected text if text is selected; otherwise, deletes the previous character.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.BackspaceCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.BackspaceToPreviousWordCommand"><summary>
            Backspaces and deletes text to the beginning of the previous word.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.BackspaceToPreviousWordCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.ChangeCharacterCasingCommand"><summary>
            Changes the character casing of the selected text.
            </summary><remarks>
            If no text is currently selected, only the character after the caret is changed.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.ChangeCharacterCasingCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.ChangeCharacterCasingCommand.#ctor(System.Windows.Forms.CharacterCasing)"><summary>
            Initializes a new instance of the <c>ChangeCharacterCasingCommand</c> class. 
            </summary><param name="casing">A <see cref="T:System.Windows.Forms.CharacterCasing" /> indicating the character case to change to.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.CommentLinesCommand"><summary>
            Comments out the currently selected lines.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.CommentLinesCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.CommentLinesCommand.ReadFromXml(System.Xml.XmlReader)"><summary>
            Deserializes the data for the <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommand" /> from XML.
            </summary><param name="reader">The <see cref="T:System.Xml.XmlReader" /> to use.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.CommentLinesCommand.WriteToXml(System.Xml.XmlWriter)"><summary>
            Serializes the data for the <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommand" /> to XML.
            </summary><param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to use.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.CommentLinesCommand.#ctor"><summary>
            Initializes a new instance of the <c>CommentLinesCommand</c> class. 
            </summary><remarks>
            This constructor will tell the command to use the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.LineCommentDelimiter" /> as the comment text.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.CommentLinesCommand.#ctor(System.String)"><summary>
            Initializes a new instance of the <c>CommentLinesCommand</c> class. 
            </summary><param name="commentText">The string to use when commenting each line.</param><remarks>In C# to comment several lines, <c>//</c> would be passed as a parameter.</remarks></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.ConvertSpacesToTabsCommand"><summary>
            Converts all spaces in the selection to an equivalent number of tabs.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.ConvertSpacesToTabsCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.ConvertTabsToSpacesCommand"><summary>
            Converts all tabs in the selection to an equivalent number of spaces.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.ConvertTabsToSpacesCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.DeleteBlankLinesCommand"><summary>
            Deletes the blank lines in the selected text, or the current display line if no text is selected and it is blank.
            </summary><remarks>
            If there is no selection and the current line is not blank, any blank display lines immediately before the current display line will be deleted.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.DeleteBlankLinesCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.DeleteCommand"><summary>
            Deletes the currently selected text if text is selected; otherwise, deletes the next character.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.DeleteCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.DeleteHorizontalWhitespaceCommand"><summary>
            Deletes the horizontal whitespace within the current selection.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.DeleteHorizontalWhitespaceCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.DeleteLineCommand"><summary>
            Deletes the currently selected display line.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.DeleteLineCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.DeleteToLineEndCommand"><summary>
            Deletes the currently selected text through to the end of the current display line.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.DeleteToLineEndCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.DeleteToLineStartCommand"><summary>
            Deletes the currently selected text through to the start of the current display line.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.DeleteToLineStartCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.DeleteToNextWordCommand"><summary>
            Deletes text to the beginning of the next word.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.DeleteToNextWordCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.DuplicateLineCommand"><summary>
            Duplicates the current display line.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.DuplicateLineCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.IncrementalSearchCommand"><summary>
            Performs a forward incremental search.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.IncrementalSearchCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.IndentCommand"><summary>
            Indents the currently selected lines.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.IndentCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.IndentCommand.ReadFromXml(System.Xml.XmlReader)"><summary>
            Deserializes the data for the <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommand" /> from XML.
            </summary><param name="reader">The <see cref="T:System.Xml.XmlReader" /> to use.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.IndentCommand.WriteToXml(System.Xml.XmlWriter)"><summary>
            Serializes the data for the <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommand" /> to XML.
            </summary><param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to use.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.IndentCommand.#ctor"><summary>
            Initializes a new instance of the <c>IndentCommand</c> class. 
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.IndentCommand.#ctor(System.Boolean)"><summary>
            Initializes a new instance of the <c>IndentCommand</c> class. 
            </summary><param name="isFromKeyTyping">Whether the indent is called from end user typing.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.InsertLineBreakCommand"><summary>
            Inserts a line break at the current position.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.InsertLineBreakCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.OpenLineAboveCommand"><summary>
            Inserts a new line above the current display line.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.OpenLineAboveCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.OpenLineBelowCommand"><summary>
            Inserts a new line below the current display line.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.OpenLineBelowCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.OutdentCommand"><summary>
            Outdents the currently selected lines.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.OutdentCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.OutdentCommand.ReadFromXml(System.Xml.XmlReader)"><summary>
            Deserializes the data for the <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommand" /> from XML.
            </summary><param name="reader">The <see cref="T:System.Xml.XmlReader" /> to use.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.OutdentCommand.WriteToXml(System.Xml.XmlWriter)"><summary>
            Serializes the data for the <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommand" /> to XML.
            </summary><param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to use.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.OutdentCommand.#ctor"><summary>
            Initializes a new instance of the <c>OutdentCommand</c> class. 
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.OutdentCommand.#ctor(System.Boolean)"><summary>
            Initializes a new instance of the <c>OutdentCommand</c> class. 
            </summary><param name="isFromKeyTyping">Whether the indent is called from end user typing.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.RedoCommand"><summary>
            Performs an redo command on the undo stack.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.RedoCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.ReverseIncrementalSearchCommand"><summary>
            Performs a reverse incremental search.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.ReverseIncrementalSearchCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.TabifySelectedLinesCommand"><summary>
            Converts spaces at the beginning of the selected display lines to tabs.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.TabifySelectedLinesCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.ToggleCharacterCasingCommand"><summary>
            Toggles the character casing of the selected text.
            </summary><remarks>
            If no text is currently selected, only the character after the caret is changed.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.ToggleCharacterCasingCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.ToggleOverwriteModeCommand"><summary>
            Toggles overwrite mode.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.ToggleOverwriteModeCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.TransposeCharactersCommand"><summary>
            Transposes the characters before and after the caret.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.TransposeCharactersCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.TransposeLinesCommand"><summary>
            Transposes the current display line with the next display line.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.TransposeLinesCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.TransposeWordsCommand"><summary>
            Transposes the words before and after the caret.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.TransposeWordsCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.TrimTrailingWhitespaceCommand"><summary>
            Trims the trailing whitespace off all the lines in the selected text, or the current document line if no text is selected.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.TrimTrailingWhitespaceCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.TypingCommand"><summary>
            Performs typing in a document.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.TypingCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.TypingCommand.ReadFromXml(System.Xml.XmlReader)"><summary>
            Deserializes the data for the <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommand" /> from XML.
            </summary><param name="reader">The <see cref="T:System.Xml.XmlReader" /> to use.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.TypingCommand.WriteToXml(System.Xml.XmlWriter)"><summary>
            Serializes the data for the <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommand" /> to XML.
            </summary><param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to use.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.TypingCommand.#ctor"><summary>
            This constructor is for internal use only and should not be called.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.TypingCommand.#ctor(System.Char,System.Boolean)"><summary>
            Initializes a new instance of the <c>TypingCommand</c> class. 
            </summary><param name="keyChar">The character that will be typed.</param><param name="overwrite">Whether the character will be added in overwrite mode.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.UncommentLinesCommand"><summary>
            Uncomments the currently selected lines.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.UncommentLinesCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.UncommentLinesCommand.ReadFromXml(System.Xml.XmlReader)"><summary>
            Deserializes the data for the <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommand" /> from XML.
            </summary><param name="reader">The <see cref="T:System.Xml.XmlReader" /> to use.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.UncommentLinesCommand.WriteToXml(System.Xml.XmlWriter)"><summary>
            Serializes the data for the <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommand" /> to XML.
            </summary><param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to use.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.UncommentLinesCommand.#ctor"><summary>
            Initializes a new instance of the <c>UncommentLinesCommand</c> class. 
            </summary><remarks>
            This constructor will tell the command to use the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.LineCommentDelimiter" /> as the comment text.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.UncommentLinesCommand.#ctor(System.String)"><summary>
            Initializes a new instance of the <c>UncommentLinesCommand</c> class. 
            </summary><param name="commentText">The string to look for when uncommenting each line.</param><remarks>In C# to uncomment several lines, <c>//</c> would be passed as a parameter.</remarks></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.UndoCommand"><summary>
            Performs an undo command on the undo stack.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.UndoCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.UntabifySelectedLinesCommand"><summary>
            Converts tabs at the beginning of the selected display lines to spaces.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.UntabifySelectedLinesCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.MoveDownCommand"><summary>
            Moves the selection down a line.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.MoveDownCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.MoveLeftCommand"><summary>
            Moves the selection left a character.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.MoveLeftCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.MovePageDownCommand"><summary>
            Moves the selection down a page.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.MovePageDownCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.MovePageUpCommand"><summary>
            Moves the selection up a page.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.MovePageUpCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.MoveRightCommand"><summary>
            Moves the selection right a character.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.MoveRightCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.MoveToDocumentEndCommand"><summary>
            Moves the selection to the end of the document.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.MoveToDocumentEndCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.MoveToDocumentStartCommand"><summary>
            Moves the selection to the start of the document.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.MoveToDocumentStartCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.MoveToLineEndCommand"><summary>
            Moves the selection to the end of the current line.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.MoveToLineEndCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.MoveToLineStartAfterIndentationCommand"><summary>
            Moves the selection to the first non-whitespace character on the current display line.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.MoveToLineStartAfterIndentationCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.MoveToLineStartCommand"><summary>
            Moves the selection to the start of the current line.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.MoveToLineStartCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.MoveToMatchingBracketCommand"><summary>
            Moves the selection to the matching bracket, if any.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.MoveToMatchingBracketCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.MoveToNextLineStartAfterIndentationCommand"><summary>
            Moves the selection to the first non-whitespace character on the next display line.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.MoveToNextLineStartAfterIndentationCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.MoveToNextWordCommand"><summary>
            Moves the selection to the next word.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.MoveToNextWordCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.MoveToPreviousLineStartAfterIndentationCommand"><summary>
            Moves the selection to the first non-whitespace character on the previous display line.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.MoveToPreviousLineStartAfterIndentationCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.MoveToPreviousWordCommand"><summary>
            Moves the selection to the previous word.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.MoveToPreviousWordCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.MoveToVisibleBottomCommand"><summary>
            Moves the selection to the bottom of the view.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.MoveToVisibleBottomCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.MoveToVisibleTopCommand"><summary>
            Moves the selection to the top of the view.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.MoveToVisibleTopCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.MoveUpCommand"><summary>
            Moves the selection up a line.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.MoveUpCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.CodeBlockSelectionContractCommand"><summary>
            Contracts the code block selection level.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.CodeBlockSelectionContractCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.CodeBlockSelectionExpandCommand"><summary>
            Expands the code block selection level.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.CodeBlockSelectionExpandCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.CollapseSelectionCommand"><summary>
            Collapses the selection to the caret.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.CollapseSelectionCommand.CanExecute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Returns whether the command can execute.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param><returns><c>true</c> if the command can execute; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.CollapseSelectionCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.SelectAllCommand"><summary>
            Select all of the text.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.SelectAllCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.SelectBlockDownCommand"><summary>
            Block selects down a line.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.SelectBlockDownCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.SelectBlockLeftCommand"><summary>
            Block selects left a character.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.SelectBlockLeftCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.SelectBlockRightCommand"><summary>
            Block selects right a character.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.SelectBlockRightCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.SelectBlockToNextWordCommand"><summary>
            Block selects to the next word.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.SelectBlockToNextWordCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.SelectBlockToPreviousWordCommand"><summary>
            Block selects to the previous word.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.SelectBlockToPreviousWordCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.SelectBlockUpCommand"><summary>
            Block selects up a line.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.SelectBlockUpCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.SelectDownCommand"><summary>
            Selects down a line.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.SelectDownCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.SelectLeftCommand"><summary>
            Selects left a character.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.SelectLeftCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.SelectPageDownCommand"><summary>
            Selects down a page.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.SelectPageDownCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.SelectPageUpCommand"><summary>
            Selects up a page.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.SelectPageUpCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.SelectRightCommand"><summary>
            Selects right a character.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.SelectRightCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.SelectToDocumentEndCommand"><summary>
            Selects to the end of the document.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.SelectToDocumentEndCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.SelectToDocumentStartCommand"><summary>
            Selects to the start of the document.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.SelectToDocumentStartCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.SelectToLineEndCommand"><summary>
            Selects to the end of the current line.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.SelectToLineEndCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.SelectToLineStartAfterIndentationCommand"><summary>
            Selects to the first non-whitespace character on the current display line.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.SelectToLineStartAfterIndentationCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.SelectToLineStartCommand"><summary>
            Selects to the start of the current line.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.SelectToLineStartCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.SelectToMatchingBracketCommand"><summary>
            Selects to the matching bracket, if any.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.SelectToMatchingBracketCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.SelectToNextWordCommand"><summary>
            Selects to the next word.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.SelectToNextWordCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.SelectToPreviousWordCommand"><summary>
            Selects to the previous word.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.SelectToPreviousWordCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.SelectToVisibleBottomCommand"><summary>
            Selects to the bottom of the view.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.SelectToVisibleBottomCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.SelectToVisibleTopCommand"><summary>
            Selects to the top of the view.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.SelectToVisibleTopCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.SelectUpCommand"><summary>
            Selects up a line.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.SelectUpCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="T:ActiproSoftware.SyntaxEditor.Commands.SelectWordCommand"><summary>
            Selects the current word.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Commands.SelectWordCommand.Execute(ActiproSoftware.SyntaxEditor.Commands.EditCommandContext)"><summary>
            Executes the edit command.
            </summary><param name="context">An <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommandContext" /> that holds context-related information.</param></member><member name="T:ActiproSoftware.SyntaxEditor.DocumentFindReplace"><summary>
            Provides access to find and replace functionality within a <see cref="T:ActiproSoftware.SyntaxEditor.Document" />, which is a non-user interface
            alternative for the <see cref="P:ActiproSoftware.SyntaxEditor.EditorView.FindReplace" /> object model for an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" />.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.DocumentFindReplace.ClearSpanIndicatorMarks"><summary>
            Clears the <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicator" /> find result marks that have been applied to the document via a call to <see cref="M:ActiproSoftware.SyntaxEditor.DocumentFindReplace.MarkAll(ActiproSoftware.SyntaxEditor.FindReplaceOptions)" />.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.DocumentFindReplace.Find(ActiproSoftware.SyntaxEditor.FindReplaceOptions,System.Int32)"><summary>
            Performs a find operation.
            </summary><param name="options">The find/replace options.</param><param name="startOffset">The offset at which to start searching.</param><returns>
            A <see cref="T:ActiproSoftware.SyntaxEditor.FindReplaceResultSet" /> that specifies the result of the operation.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.DocumentFindReplace.FindAll(ActiproSoftware.SyntaxEditor.FindReplaceOptions)"><summary>
            Performs a find all operation.
            </summary><param name="options">The find/replace options.</param><returns>
            A <see cref="T:ActiproSoftware.SyntaxEditor.FindReplaceResultSet" /> that specifies the result of the operation.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.DocumentFindReplace.FindAll(ActiproSoftware.SyntaxEditor.FindReplaceOptions,ActiproSoftware.SyntaxEditor.TextRange)"><summary>
            Performs a find all operation.
            </summary><param name="options">The find/replace options.</param><param name="offsetTextRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> of offsets to search.  If all should be searched, specify the range <c>0</c> to the length of the <see cref="T:ActiproSoftware.SyntaxEditor.Document" />.</param><returns>
            A <see cref="T:ActiproSoftware.SyntaxEditor.FindReplaceResultSet" /> that specifies the result of the operation.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.DocumentFindReplace.MarkAll(ActiproSoftware.SyntaxEditor.FindReplaceOptions)"><summary>
            Performs a mark all operation that marks any line that has the text to find with a <see cref="T:ActiproSoftware.SyntaxEditor.BookmarkLineIndicator" />.
            </summary><param name="options">The find/replace options.</param><returns>
            A <see cref="T:ActiproSoftware.SyntaxEditor.FindReplaceResultSet" /> that specifies the result of the operation.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.DocumentFindReplace.MarkAll(ActiproSoftware.SyntaxEditor.FindReplaceOptions,ActiproSoftware.SyntaxEditor.TextRange)"><summary>
            Performs a mark all operation that marks any line that has the text to find with a <see cref="T:ActiproSoftware.SyntaxEditor.BookmarkLineIndicator" />.
            </summary><param name="options">The find/replace options.</param><param name="offsetTextRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> of offsets to search.  If all should be searched, specify the range <c>0</c> to the length of the <see cref="T:ActiproSoftware.SyntaxEditor.Document" />.</param><returns>
            A <see cref="T:ActiproSoftware.SyntaxEditor.FindReplaceResultSet" /> that specifies the result of the operation.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.DocumentFindReplace.MarkAll(ActiproSoftware.SyntaxEditor.FindReplaceOptions,System.Type)"><summary>
            Performs a mark all operation that marks any line that has the text to find with an indicator.
            </summary><param name="options">The find/replace options.</param><param name="indicatorType">The <see cref="T:System.Type" /> to of line indicator use for marking the lines.</param><returns>
            A <see cref="T:ActiproSoftware.SyntaxEditor.FindReplaceResultSet" /> that specifies the result of the operation.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.DocumentFindReplace.MarkAll(ActiproSoftware.SyntaxEditor.FindReplaceOptions,ActiproSoftware.SyntaxEditor.TextRange,System.Type)"><summary>
            Performs a mark all operation that marks any line that has the text to find with an indicator.
            </summary><param name="options">The find/replace options.</param><param name="offsetTextRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> of offsets to search.  If all should be searched, specify the range <c>0</c> to the length of the <see cref="T:ActiproSoftware.SyntaxEditor.Document" />.</param><param name="indicatorType">The <see cref="T:System.Type" /> to of line indicator use for marking the lines.</param><returns>
            A <see cref="T:ActiproSoftware.SyntaxEditor.FindReplaceResultSet" /> that specifies the result of the operation.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.DocumentFindReplace.Replace(ActiproSoftware.SyntaxEditor.FindReplaceOptions,ActiproSoftware.SyntaxEditor.FindReplaceResult)"><summary>
            Performs a replace operation on a result from the previous call to <see cref="M:ActiproSoftware.SyntaxEditor.DocumentFindReplace.Find(ActiproSoftware.SyntaxEditor.FindReplaceOptions,System.Int32)" />.
            </summary><param name="options">The find/replace options.</param><param name="result">A <see cref="T:ActiproSoftware.SyntaxEditor.FindReplaceResult" /> indicating the return value of the last call to <see cref="M:ActiproSoftware.SyntaxEditor.DocumentFindReplace.Find(ActiproSoftware.SyntaxEditor.FindReplaceOptions,System.Int32)" /> to replace.</param><returns>
            A <see cref="T:ActiproSoftware.SyntaxEditor.FindReplaceResultSet" /> that specifies the result of the operation.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.DocumentFindReplace.ReplaceAll(ActiproSoftware.SyntaxEditor.FindReplaceOptions)"><summary>
            Performs a replace all operation.
            </summary><param name="options">The find/replace options.</param><returns>
            A <see cref="T:ActiproSoftware.SyntaxEditor.FindReplaceResultSet" /> that specifies the result of the operation.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.DocumentFindReplace.ReplaceAll(ActiproSoftware.SyntaxEditor.FindReplaceOptions,ActiproSoftware.SyntaxEditor.TextRange)"><summary>
            Performs a replace all operation.
            </summary><param name="options">The find/replace options.</param><param name="offsetTextRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> of offsets to search.  If all should be searched, specify the range <c>0</c> to the length of the <see cref="T:ActiproSoftware.SyntaxEditor.Document" />.</param><returns>
            A <see cref="T:ActiproSoftware.SyntaxEditor.FindReplaceResultSet" /> that specifies the result of the operation.
            </returns></member><member name="T:ActiproSoftware.SyntaxEditor.EditorViewFindReplace"><summary>
            Provides access to find and replace functionality within an <see cref="P:ActiproSoftware.SyntaxEditor.EditorViewFindReplace.EditorView" /> and uses the current selection
            for determining find/replace start offsets.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.EditorViewFindReplace.Find(ActiproSoftware.SyntaxEditor.FindReplaceOptions)"><summary>
            Performs a find operation.
            </summary><param name="options">The find/replace options.</param><returns>
            A <see cref="T:ActiproSoftware.SyntaxEditor.FindReplaceResultSet" /> that specifies the result of the operation.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.EditorViewFindReplace.MarkAll(ActiproSoftware.SyntaxEditor.FindReplaceOptions)"><summary>
            Performs a mark all operation that marks any line that has the text to find with a <see cref="T:ActiproSoftware.SyntaxEditor.BookmarkLineIndicator" />.
            </summary><param name="options">The find/replace options.</param><returns>
            A <see cref="T:ActiproSoftware.SyntaxEditor.FindReplaceResultSet" /> that specifies the result of the operation.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.EditorViewFindReplace.MarkAll(ActiproSoftware.SyntaxEditor.FindReplaceOptions,System.Type)"><summary>
            Performs a mark all operation that marks any line that has the text to find with an indicator.
            </summary><param name="options">The find/replace options.</param><param name="indicatorType">The <see cref="T:System.Type" /> to of line indicator use for marking the lines.</param><returns>
            A <see cref="T:ActiproSoftware.SyntaxEditor.FindReplaceResultSet" /> that specifies the result of the operation.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.EditorViewFindReplace.Replace(ActiproSoftware.SyntaxEditor.FindReplaceOptions)"><summary>
            Performs a replace operation.
            </summary><param name="options">The find/replace options.</param><returns>
            A <see cref="T:ActiproSoftware.SyntaxEditor.FindReplaceResultSet" /> that specifies the result of the operation.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.EditorViewFindReplace.ReplaceAll(ActiproSoftware.SyntaxEditor.FindReplaceOptions)"><summary>
            Performs a replace all operation.
            </summary><param name="options">The find/replace options.</param><returns>
            A <see cref="T:ActiproSoftware.SyntaxEditor.FindReplaceResultSet" /> that specifies the result of the operation.
            </returns></member><member name="P:ActiproSoftware.SyntaxEditor.EditorViewFindReplace.IncrementalSearch"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.IncrementalSearch" /> that allows incremental searching.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.IncrementalSearch" /> that allows incremental searching.</value></member><member name="P:ActiproSoftware.SyntaxEditor.EditorViewFindReplace.LastOperation"><summary>
            Gets the last operation that was performed.
            </summary><value>
            A <see cref="T:ActiproSoftware.SyntaxEditor.FindReplaceOperation" /> specifying the last operation that was performed.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.EditorViewFindReplace.SearchStartOffset"><summary>
            Gets the offset at which the search starts in the document.
            </summary><value>The offset at which the search starts in the document.</value></member><member name="T:ActiproSoftware.SyntaxEditor.FindReplaceGroup"><summary>
            Represents a group captured by a regular expression match.
            </summary></member><member name="P:ActiproSoftware.SyntaxEditor.FindReplaceGroup.Length"><summary>
            Gets the offset length of the group.
            </summary><value>The offset length of the group.</value></member><member name="P:ActiproSoftware.SyntaxEditor.FindReplaceGroup.Name"><summary>
            Gets name of the group.
            </summary><value>The name of the group.</value></member><member name="P:ActiproSoftware.SyntaxEditor.FindReplaceGroup.Offset"><summary>
            Gets the offset of the group.
            </summary><value>The offset of the group.</value></member><member name="P:ActiproSoftware.SyntaxEditor.FindReplaceGroup.Text"><summary>
            Gets the text that was in the group.
            </summary><value>The text that was in the group.</value></member><member name="T:ActiproSoftware.SyntaxEditor.FindReplaceGroupCollection"><summary>
            Provides access to a collection of <see cref="T:ActiproSoftware.SyntaxEditor.FindReplaceGroup" /> objects.
            </summary></member><member name="P:ActiproSoftware.SyntaxEditor.FindReplaceGroupCollection.Item(System.Int32)"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.FindReplaceGroup" /> at the specified index. 
            <para>
            [C#] In C#, this property is the indexer for the <c>FindReplaceGroupCollection</c> class. 
            </para></summary><param name="index">The index of the <see cref="T:ActiproSoftware.SyntaxEditor.FindReplaceGroup" /> to return.</param><value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.FindReplaceGroup" /> at the specified index. 
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.FindReplaceGroupCollection.Item(System.String)"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.FindReplaceGroup" /> with the specified name. 
            <para>
            [C#] In C#, this property is the indexer for the <c>FindReplaceGroupCollection</c> class. 
            </para></summary><param name="name">The name of the <see cref="T:ActiproSoftware.SyntaxEditor.FindReplaceGroup" /> to return.</param><value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.FindReplaceGroup" /> with the specified name. 
            </value></member><member name="T:ActiproSoftware.SyntaxEditor.FindReplaceOperation"><summary>
            Specifies the type of find and replace operation.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.FindReplaceOperation.None"><summary>
            There is no operation specified.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.FindReplaceOperation.Find"><summary>
            Finds the next occurrence of the find text.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.FindReplaceOperation.Replace"><summary>
            Replaces the next occurrence of the find text with the replace text.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.FindReplaceOperation.ReplaceAll"><summary>
            Replaces all occurrences of the find text with the replace text.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.FindReplaceOperation.MarkAll"><summary>
            Marks all the occurrences of the find text with a line indicator.
            </summary></member><member name="T:ActiproSoftware.SyntaxEditor.FindReplaceOptions"><summary>
            Provides an object to store find and replace operation options.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.FindReplaceOptions.#ctor"><summary>
            Initializes a new instance of the <c>FindReplaceOptions</c> class.
            </summary><remarks>
            The default constructor initializes all fields to their default values.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.FindReplaceOptions.ChangeSelection"><summary>
            Gets or sets whether to change the selection when a match is found in a <see cref="M:ActiproSoftware.SyntaxEditor.EditorViewFindReplace.Find(ActiproSoftware.SyntaxEditor.FindReplaceOptions)" /> operation.
            </summary><value><c>true</c> if the selection should be changed when a match is found in a <see cref="M:ActiproSoftware.SyntaxEditor.EditorViewFindReplace.Find(ActiproSoftware.SyntaxEditor.FindReplaceOptions)" /> operation; otherwise, <c>false</c>.
            The default value is <c>true</c>.
            </value><remarks>
            This option is only valid for a simple <see cref="M:ActiproSoftware.SyntaxEditor.EditorViewFindReplace.Find(ActiproSoftware.SyntaxEditor.FindReplaceOptions)" /> operation.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.FindReplaceOptions.FindText"><summary>
            Gets or sets the text to find.
            </summary><value>The text to find.</value></member><member name="P:ActiproSoftware.SyntaxEditor.FindReplaceOptions.MatchCase"><summary>
            Gets or sets whether searches should be case sensitive.
            </summary><value><c>true</c> if searches should be case sensitive; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.FindReplaceOptions.MatchWholeWord"><summary>
            Gets or sets whether searches should only match whole words.
            </summary><value><c>true</c> if searches should only match whole words; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.FindReplaceOptions.Modified"><summary>
            Gets whether the options have been modified since the last search.
            </summary><value><c>true</c> if the options have been modified since the last search; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.FindReplaceOptions.ReplaceText"><summary>
            Gets or sets the text with which to replace.
            </summary><value>The text with which to replace.</value></member><member name="P:ActiproSoftware.SyntaxEditor.FindReplaceOptions.SearchHiddenText"><summary>
            Gets or sets whether to search text that is hidden within a collapsed node.
            </summary><value><c>true</c> if hidden text should be searched; otherwise, <c>false</c>.  The default value is <c>true</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.FindReplaceOptions.SearchInSelection"><summary>
            Gets or sets whether to restrict results to those within the current selection for find/replace operations.
            </summary><value><c>true</c> if results should be restricted to those within the current selection for find/replace operations; otherwise, <c>false</c>.
            The default value is <c>false</c>.
            </value><remarks>
            This option is only valid for find/replace operations from the <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> find/replace object model.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.FindReplaceOptions.SearchType"><summary>
            Gets or sets the search type.
            </summary><value>
            A <see cref="T:ActiproSoftware.SyntaxEditor.FindReplaceSearchType" /> specifying the search type.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.FindReplaceOptions.SearchUp"><summary>
            Gets or sets whether to search backwards.
            </summary><value><c>true</c> if searches should be performed backwards; otherwise, <c>false</c>.
            </value></member><member name="T:ActiproSoftware.SyntaxEditor.FindReplaceResult"><summary>
            Represents a single result from a find and replace operation.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.FindReplaceResult.GetPreviewReplaceText(ActiproSoftware.SyntaxEditor.FindReplaceOptions)"><summary>
            Returns a preview of the replacement text by using the specified find/replace options.
            </summary><param name="options">The <see cref="T:ActiproSoftware.SyntaxEditor.FindReplaceOptions" /> to use.</param><returns>A preview of the replacement text by using the specified find/replace options.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.FindReplaceResult.#ctor(System.Int32,System.Int32,ActiproSoftware.SyntaxEditor.FindReplaceGroupCollection)"><summary>
            Initializes a new instance of the <c>FindReplaceResult</c> class.
            </summary><param name="offset">The offset at which the match was found.</param><param name="length">The length of the match.</param><param name="groups">The collection of captured groups.</param></member><member name="M:ActiproSoftware.SyntaxEditor.FindReplaceResult.#ctor(ActiproSoftware.SyntaxEditor.TextRange,ActiproSoftware.SyntaxEditor.FindReplaceGroupCollection)"><summary>
            Initializes a new instance of the <c>FindReplaceResult</c> class.
            </summary><param name="textRange">The <see cref="P:ActiproSoftware.SyntaxEditor.FindReplaceResult.TextRange" /> of the match.</param><param name="groups">The collection of captured groups.</param></member><member name="P:ActiproSoftware.SyntaxEditor.FindReplaceResult.EndOffset"><summary>
            Gets the end offset at which the match was found.
            </summary><value>The end offset at which the match was found.</value></member><member name="P:ActiproSoftware.SyntaxEditor.FindReplaceResult.Groups"><summary>
            Gets the collection of captured groups.
            </summary><value>The collection of captured groups.</value></member><member name="P:ActiproSoftware.SyntaxEditor.FindReplaceResult.Length"><summary>
            Gets the length of the match.
            </summary><value>The length of the match.</value></member><member name="P:ActiproSoftware.SyntaxEditor.FindReplaceResult.StartOffset"><summary>
            Gets the start offset at which the match was found.
            </summary><value>The start offset at which the match was found.</value></member><member name="P:ActiproSoftware.SyntaxEditor.FindReplaceResult.Text"><summary>
            Gets the text that was matched.
            </summary><value>The text that was matched.</value></member><member name="P:ActiproSoftware.SyntaxEditor.FindReplaceResult.TextRange"><summary>
            Gets a <see cref="P:ActiproSoftware.SyntaxEditor.FindReplaceResult.TextRange" /> that contains the text that was found.
            </summary><value>A <see cref="P:ActiproSoftware.SyntaxEditor.FindReplaceResult.TextRange" /> that contains the text that was found.</value></member><member name="T:ActiproSoftware.SyntaxEditor.FindReplaceResultSet"><summary>
            Represents the results of a find and replace operation.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.FindReplaceResultSet.#ctor"><summary>
            Initializes a new instance of the <c>FindReplaceResultSet</c> class.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.FindReplaceResultSet.#ctor(System.Boolean)"><summary>
            Initializes a new instance of the <c>FindReplaceResultSet</c> class.
            </summary><param name="pastSearchStartOffset">Whether the search went past the start search offset.</param></member><member name="P:ActiproSoftware.SyntaxEditor.FindReplaceResultSet.PastDocumentEnd"><summary>
            Gets whether the search went past the end of the document and wrapped.
            </summary><value><c>true</c> if the search went past the end of the document and wrapped; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.FindReplaceResultSet.PastSearchStartOffset"><summary>
            Gets whether the search went past the search start offset.
            </summary><value><c>true</c> if the search went past the search start offset; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.FindReplaceResultSet.ReplaceOccurred"><summary>
            Gets whether a replace occurred.
            </summary><value><c>true</c> if a replace occurred; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.FindReplaceResultSet.Item(System.Int32)"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.FindReplaceResult" /> at the specified index. 
            <para>
            [C#] In C#, this property is the indexer for the <c>FindReplaceResultSet</c> class. 
            </para></summary><param name="index">The index of the <see cref="T:ActiproSoftware.SyntaxEditor.FindReplaceResult" /> to return.</param><value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.FindReplaceResult" /> at the specified index. 
            </value></member><member name="T:ActiproSoftware.SyntaxEditor.FindReplaceSearchType"><summary>
            Specifies a find/replace search type.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.FindReplaceSearchType.Normal"><summary>
            Search text normally.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.FindReplaceSearchType.RegularExpression"><summary>
            Search text using regular expressions.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.FindReplaceSearchType.Wildcard"><summary>
            Search text using wildcards.
            </summary></member><member name="T:ActiproSoftware.SyntaxEditor.IncrementalSearch"><summary>
            Provides functionality for performing incremental searches.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.IncrementalSearch.PerformSearch"><summary>
            Performs an incremental search.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.IncrementalSearch.PerformSearch(System.Boolean)"><summary>
            Performs an incremental search.
            </summary><param name="searchUp">Whether to search backwards.</param></member><member name="P:ActiproSoftware.SyntaxEditor.IncrementalSearch.Active"><summary>
            Gets or sets whether incremental searching is active.
            </summary><value><c>true</c> if incremental searching is active; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.IncrementalSearch.FindText"><summary>
            Gets the text to find.
            </summary><value>The text to find.</value></member><member name="P:ActiproSoftware.SyntaxEditor.IncrementalSearch.MatchCase"><summary>
            Gets whether searches should be case sensitive.
            </summary><value><c>true</c> if searches should be case sensitive; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.IncrementalSearch.SearchUp"><summary>
            Gets or sets whether to search backwards.
            </summary><value><c>true</c> if searches should be performed backwards; otherwise, <c>false</c>.
            </value></member><member name="T:ActiproSoftware.SyntaxEditor.IncrementalSearchEventArgs"><summary>
            Event arguments for <see cref="T:ActiproSoftware.SyntaxEditor.IncrementalSearch" /> events.
            </summary><remarks>
            This class is used with the <see cref="T:ActiproSoftware.SyntaxEditor.IncrementalSearchEventHandler" /> delegate.
            </remarks><seealso cref="T:ActiproSoftware.SyntaxEditor.IncrementalSearchEventHandler" /></member><member name="M:ActiproSoftware.SyntaxEditor.IncrementalSearchEventArgs.#ctor(ActiproSoftware.SyntaxEditor.IncrementalSearchEventType,ActiproSoftware.SyntaxEditor.FindReplaceResultSet)"><summary>
            Initializes a new instance of the <c>IncrementalSearchEventArgs</c> class.
            </summary><param name="eventType">A <see cref="T:ActiproSoftware.SyntaxEditor.IncrementalSearchEventType" /> specifying the type of event that occurred.</param><param name="resultSet">A <see cref="T:ActiproSoftware.SyntaxEditor.FindReplaceResultSet" /> that contains the result of the search operation.</param></member><member name="P:ActiproSoftware.SyntaxEditor.IncrementalSearchEventArgs.EventType"><summary>
            Gets the type of event that occurred.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.IncrementalSearchEventType" /> specifying the type of event that occurred.</value></member><member name="P:ActiproSoftware.SyntaxEditor.IncrementalSearchEventArgs.ResultSet"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.FindReplaceResultSet" /> that contains the result of the search operation, if any.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.FindReplaceResultSet" /> that contains the result of the search operation; otherwise, <see langword="null" />.</value></member><member name="T:ActiproSoftware.SyntaxEditor.IncrementalSearchEventHandler"><summary>
            Represents the method that will handle <see cref="T:ActiproSoftware.SyntaxEditor.IncrementalSearch" /> events.
            </summary><param name="sender">Sender of the event.</param><param name="e">A <see cref="T:ActiproSoftware.SyntaxEditor.IncrementalSearchEventArgs" /> containing event data.</param><remarks>
            When you create a <c>IncrementalSearchEventHandler</c> delegate, you identify the method that will handle the event. 
            To associate the event with your event handler, add an instance of the delegate to the event. 
            The event handler is called whenever the event occurs, unless you remove the delegate.
            </remarks><seealso cref="T:ActiproSoftware.SyntaxEditor.IncrementalSearchEventArgs" /></member><member name="T:ActiproSoftware.SyntaxEditor.IncrementalSearchEventType"><summary>
            Specifies the type of event that occurred for an <see cref="T:ActiproSoftware.SyntaxEditor.IncrementalSearch" /> event.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.IncrementalSearchEventType.Activated"><summary>
            Incremental search was activated.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.IncrementalSearchEventType.Deactivated"><summary>
            Incremental search was activated.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.IncrementalSearchEventType.Search"><summary>
            A search was performed.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.IncrementalSearchEventType.CharacterIgnored"><summary>
            A character was typed and was attempted to be added to incremental search however was disallowed since the previous 
            find text was not found in the document.
            </summary></member><member name="T:ActiproSoftware.SyntaxEditor.ParserGenerator.InvalidGrammarException"><summary>
            An exception that is thrown when parsing invalid grammar productions.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.ParserGenerator.InvalidGrammarException.#ctor"><summary>
            Initializes a new instance of the <c>InvalidGrammarException</c> class.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.ParserGenerator.InvalidGrammarException.#ctor(System.String)"><summary>
            Initializes a new instance of the <c>InvalidGrammarException</c> class with a specified error message.
            </summary><param name="message">The error message that explains the reason for the exception.</param></member><member name="M:ActiproSoftware.SyntaxEditor.ParserGenerator.InvalidGrammarException.#ctor(System.String,System.String)"><summary>
            Initializes a new instance of the <c>InvalidGrammarException</c> class with a specified error message.
            </summary><param name="nonTerminalKey">The key of the non-terminal in which the exception occurred.</param><param name="message">The error message that explains the reason for the exception.</param></member><member name="M:ActiproSoftware.SyntaxEditor.ParserGenerator.InvalidGrammarException.#ctor(System.String,System.Int32,System.String)"><summary>
            Initializes a new instance of the <c>InvalidGrammarException</c> class with a specified error message.
            </summary><param name="nonTerminalKey">The key of the non-terminal in which the exception occurred.</param><param name="productionOffset">The offset within the production at which the exception occurred.</param><param name="message">The error message that explains the reason for the exception.</param></member><member name="M:ActiproSoftware.SyntaxEditor.ParserGenerator.InvalidGrammarException.#ctor(System.String,System.Exception)"><summary>
            Initializes a new instance of the <c>InvalidGrammarException</c> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary><param name="message">The error message that explains the reason for the exception.</param><param name="innerException">The exception that is the cause of the current exception.</param></member><member name="P:ActiproSoftware.SyntaxEditor.ParserGenerator.InvalidGrammarException.NonTerminalKey"><summary>
            Gets the key of the non-terminal in which the exception occurred.
            </summary><value>The key of the non-terminal in which the exception occurred.</value></member><member name="P:ActiproSoftware.SyntaxEditor.ParserGenerator.InvalidGrammarException.ProductionOffset"><summary>
            Gets the offset within the production at which the exception occurred.
            </summary><value>The offset within the production at which the exception occurred.</value></member><member name="T:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentSemanticParser"><summary>
            Provides the base class for a recursive descent semantic parser.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentSemanticParser.AdvanceToNext"><summary>
            Advances to the next <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.
            </summary><returns>
            The <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that was read.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentSemanticParser.AdvanceToNext(System.Int32)"><summary>
            Advances to the next <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> with the specified ID.
            </summary><param name="tokenID">The ID of <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> for which to search.</param><returns><c>true</c> if an <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> was found before the end of document; otherwise, <c>false</c>.
            </returns><remarks>
            If the <see cref="P:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentSemanticParser.LookAheadToken" /> already matches the desired <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> ID, no action will be taken.
            If this method is successful, the <see cref="P:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentSemanticParser.LookAheadToken" /> will be the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that was located.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentSemanticParser.AdvanceToNext(System.Int32[])"><summary>
            Advances to the next <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> with one of the specified IDs.
            </summary><param name="tokenIDs">The array of <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> IDs for which to search.</param><returns><c>true</c> if an <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> was found before the end of document; otherwise, <c>false</c>.
            </returns><remarks>
            If the <see cref="P:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentSemanticParser.LookAheadToken" /> already matches one of the desired <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> IDs, no action will be taken.
            If this method is successful, the <see cref="P:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentSemanticParser.LookAheadToken" /> will be the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that was located.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentSemanticParser.AdvanceToNext(System.Int32,System.Int32)"><summary>
            Advances to the next <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> with the specified ID, taking into account internal nested pairs of the target <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.
            </summary><param name="startTokenID">The ID of <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that is the start of the marching pair for the target <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.</param><param name="endTokenID">The ID of <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> for which to search.</param><returns><c>true</c> if an <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> was found before the end of document; otherwise, <c>false</c>.
            </returns><remarks>
            If the <see cref="P:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentSemanticParser.LookAheadToken" /> already matches the desired <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> ID, no action will be taken.
            If this method is successful, the <see cref="P:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentSemanticParser.LookAheadToken" /> will be the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that was located.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentSemanticParser.GetLookAheadToken(System.Int32)"><summary>
            Returns the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that is the specified number of positions past the current token.
            </summary><param name="count">The number of positions past the current token to examine.</param><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that is the specified number of positions past the current token.</returns><remarks>
            A parameter value of <c>1</c> will return the value of the <see cref="P:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentSemanticParser.LookAheadToken" /> property without actually seeking past the next token.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentSemanticParser.GetTokenText(ActiproSoftware.SyntaxEditor.IToken)"><summary>
            Returns the text of the specified <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.
            </summary><param name="token">The <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> to examine.</param><returns>The text of the specified <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentSemanticParser.IsInMultiMatchSet(System.Int32,ActiproSoftware.SyntaxEditor.IToken)"><summary>
            Returns whether the ID of the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> is in the specified multi-match set index.
            </summary><param name="multiMatchSetIndex">The multi-match set to examine.</param><param name="token">The <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> to check.</param><returns><c>true</c> if the ID of the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> is in the specified multi-match set index; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentSemanticParser.Match(System.Int32)"><summary>
            Tries to match the specified <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> and advances if it does.
            </summary><param name="tokenID">The ID of the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> to match.</param><returns><c>true</c> if the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> was matched; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentSemanticParser.Peek"><summary>
            Returns the next <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> in the current peek operation.
            </summary><returns>The next <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> in the current peek operation.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentSemanticParser.ReportSyntaxError(System.String)"><summary>
            Reports a syntax error.
            </summary><param name="message">The error message.</param></member><member name="M:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentSemanticParser.ReportSyntaxError(ActiproSoftware.SyntaxEditor.TextRange,System.String)"><summary>
            Reports a syntax error.
            </summary><param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> of the error.</param><param name="message">The error message.</param></member><member name="M:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentSemanticParser.StartPeek"><summary>
            Starts a multiple token look-ahead operation.
            </summary><remarks>
            The <see cref="M:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentSemanticParser.StopPeek" /> method must be called when the look-ahead operation is complete.
            The <see cref="P:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentSemanticParser.PeekToken" /> will be initialized to the <see cref="P:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentSemanticParser.LookAheadToken" />.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentSemanticParser.StopPeek"><summary>
            Stops a multiple token look-ahead operation.
            </summary><remarks>
            This method must be called once for every corresponding <see cref="M:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentSemanticParser.StartPeek" /> call.
            The <see cref="P:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentSemanticParser.PeekToken" /> will be cleared.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentSemanticParser.TokenIs(ActiproSoftware.SyntaxEditor.IToken,System.Int32)"><summary>
            Returns whether the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> is in the current language and has the specified <see cref="P:ActiproSoftware.SyntaxEditor.IToken.ID" />.
            </summary><param name="token">The <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> to examine.</param><param name="tokenID">The token ID for which to check.</param><returns><c>true</c> if the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> is in the current language and has the specified <see cref="P:ActiproSoftware.SyntaxEditor.IToken.ID" />; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentSemanticParser.TokenIs(ActiproSoftware.SyntaxEditor.IToken,System.Int32[])"><summary>
            Returns whether the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> is in the current language and has any of the specified <see cref="P:ActiproSoftware.SyntaxEditor.IToken.ID" />s.
            </summary><param name="token">The <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> to examine.</param><param name="tokenIDs">The array of token IDs for which to check.</param><returns><c>true</c> if the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> is in the current language and has any of the specified <see cref="P:ActiproSoftware.SyntaxEditor.IToken.ID" />s; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentSemanticParser.TokenIsLanguageChange(ActiproSoftware.SyntaxEditor.IToken)"><summary>
            Returns whether the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> marks a language change.
            </summary><param name="token">The <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> to examine.</param><returns><c>true</c> if the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> marks a language change; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentSemanticParser.#ctor(ActiproSoftware.SyntaxEditor.ParserGenerator.IRecursiveDescentLexicalParser)"><summary>
            Initializes a new instance of the <c>RecursiveDescentSemanticParser</c> class.
            </summary><param name="lexicalParser">The <see cref="T:ActiproSoftware.SyntaxEditor.ParserGenerator.IRecursiveDescentLexicalParser" /> to use for lexical parsing.</param></member><member name="P:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentSemanticParser.IsAtEnd"><summary>
            Gets whether the current <see cref="P:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentSemanticParser.LookAheadToken" /> is at the end of the text buffer.
            </summary><value><c>true</c> if the current <see cref="P:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentSemanticParser.LookAheadToken" /> is at the end of the text buffer; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentSemanticParser.LexicalParser"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.ParserGenerator.IRecursiveDescentLexicalParser" /> to use for lexical parsing.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.ParserGenerator.IRecursiveDescentLexicalParser" /> to use for lexical parsing.</value></member><member name="P:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentSemanticParser.LookAheadToken"><summary>
            Returns the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that is immediately after the current token.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that is immediately after the current token.</value></member><member name="P:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentSemanticParser.LookAheadTokenText"><summary>
            Gets the text of the <see cref="P:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentSemanticParser.LookAheadToken" />.
            </summary><value>The text of the <see cref="P:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentSemanticParser.LookAheadToken" />.</value></member><member name="P:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentSemanticParser.MultiMatchSets"><summary>
            Gets the multi-match sets array.
            </summary><value>The multi-match sets array.</value></member><member name="P:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentSemanticParser.PeekToken"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that is currently being looked at by a peek operation.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that is currently being looked at by a peek operation.</value></member><member name="P:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentSemanticParser.Token"><summary>
            Gets the current <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.
            </summary><value>The current <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.</value></member><member name="P:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentSemanticParser.TokenText"><summary>
            Gets the text of the <see cref="P:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentSemanticParser.Token" />.
            </summary><value>The text of the <see cref="P:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentSemanticParser.Token" />.</value></member><member name="T:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentSemanticParserGenerator"><summary>
            Provides a generator for a SyntaxEditor recursive descent semantic parser.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentSemanticParserGenerator.Generate(System.String)"><summary>
            Parses the grammar data and returns the generated C# parser code.
            </summary><param name="grammarData">The grammar data.</param><returns>A <see cref="T:ActiproSoftware.SyntaxEditor.ParserGenerator.RecursiveDescentSemanticParserGeneratorOutput" /> containing the generated C# code.</returns></member><member name="T:ActiproSoftware.SyntaxEditor.InvalidRegexPatternException"><summary>
            An exception that is thrown when parsing invalid regular expression patterns.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.InvalidRegexPatternException.#ctor"><summary>
            Initializes a new instance of the <c>InvalidRegexPatternException</c> class.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.InvalidRegexPatternException.#ctor(System.String)"><summary>
            Initializes a new instance of the <c>InvalidRegexPatternException</c> class with a specified error message.
            </summary><param name="message">The error message that explains the reason for the exception.</param></member><member name="M:ActiproSoftware.SyntaxEditor.InvalidRegexPatternException.#ctor(System.String,System.Exception)"><summary>
            Initializes a new instance of the <c>InvalidRegexPatternException</c> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary><param name="message">The error message that explains the reason for the exception.</param><param name="innerException">The exception that is the cause of the current exception.</param></member><member name="T:ActiproSoftware.SyntaxEditor.MatchType"><summary>
            Represents the type of regular expression match that was made.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.MatchType.NoMatch"><summary>
            No match was made.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.MatchType.ExactMatch"><summary>
            An exact match was made.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.MatchType.LooseMatch"><summary>
            A loose match was made.  This occurs when using a case insensitivity of <c>AutoCorrect</c> and a non-exact match was found.
            </summary></member><member name="T:ActiproSoftware.SyntaxEditor.DocumentPosition"><summary>
            Represents an ordered pair of line and character index values that defines a position within the lines of a <see cref="T:ActiproSoftware.SyntaxEditor.Document" />.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.DocumentPosition.Clone"><summary>
            Creates a copy of this <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" /> object.
            </summary><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" /> object that this method creates.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.DocumentPosition.CompareTo(System.Object)"><summary>
            Compares the current instance with another object of the same type.
            </summary><param name="obj">An object to compare with this instance.</param><returns>
            A 32-bit signed integer that indicates the relative order of the comparands.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.DocumentPosition.CompareTo(ActiproSoftware.SyntaxEditor.DocumentPosition)"><summary>
            Compares the current instance with another <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" />.
            </summary><param name="position">A <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" /> to compare with this instance.</param><returns>
            A 32-bit signed integer that indicates the relative order of the comparands.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.DocumentPosition.Equals(System.Object)"><summary>
            Determines whether the specified <c>Object</c> is equal to the current <c>Object</c>. 
            </summary><param name="obj">The <c>Object</c> to compare to the current <c>Object</c>.</param><returns><c>true</c> if the specified <c>Object</c> is equal to the current <c>Object</c>; 
            otherwise, <c>false</c>. 
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.DocumentPosition.First(ActiproSoftware.SyntaxEditor.DocumentPosition,ActiproSoftware.SyntaxEditor.DocumentPosition)"><summary>
            Returns the <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" /> that comes first.
            </summary><param name="position1">The first <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" /> to compare.</param><param name="position2">The second <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" /> to compare.</param><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" /> that comes first.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.DocumentPosition.GetHashCode"><summary>
            Returns a hash code for this object.
            </summary><returns>An integer value that specifies a hash value for this object.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.DocumentPosition.Last(ActiproSoftware.SyntaxEditor.DocumentPosition,ActiproSoftware.SyntaxEditor.DocumentPosition)"><summary>
            Returns the <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" /> that comes last.
            </summary><param name="position1">The first <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" /> to compare.</param><param name="position2">The second <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" /> to compare.</param><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" /> that comes last.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.DocumentPosition.ToString"><summary>
            Converts the object to a <c>String</c>.
            </summary><returns>
            A string whose value represents this object.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.DocumentPosition.#ctor(System.Int32,System.Int32)"><summary>
            Initializes a new instance of the <c>DocumentPosition</c> class with the specified line and character values.
            </summary><param name="line">The line of the position.</param><param name="character">The character of the position.</param></member><member name="P:ActiproSoftware.SyntaxEditor.DocumentPosition.Character"><summary>
            Gets the character of this <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" />.
            </summary><value>The character of this <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" />.</value></member><member name="P:ActiproSoftware.SyntaxEditor.DocumentPosition.Empty"><summary>
            Returns an empty <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" />.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" /> that is empty.</value></member><member name="P:ActiproSoftware.SyntaxEditor.DocumentPosition.IsEmpty"><summary>
            Returns whether the <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" /> is empty.
            </summary><value><c>true</c> if the <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" /> is empty; otherwise, <c>false</c>.</value></member><member name="P:ActiproSoftware.SyntaxEditor.DocumentPosition.Line"><summary>
            Gets the line of this <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" />.
            </summary><value>The line of this <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" />.</value></member><member name="P:ActiproSoftware.SyntaxEditor.DocumentPosition.Zero"><summary>
            Returns a <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" /> with line and character values of <c>0</c>.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" /> with line and character values of <c>0</c>.</value></member><member name="T:ActiproSoftware.SyntaxEditor.DocumentPositionRange"><summary>
            Represents a range of two <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" /> values within the lines of a <see cref="T:ActiproSoftware.SyntaxEditor.Document" />.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.DocumentPositionRange.BordersOn(ActiproSoftware.SyntaxEditor.DocumentPosition)"><summary>
            Returns whether the <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPositionRange" /> borders on the specified <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" />.
            </summary><param name="position">The <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" /> to examine.</param><returns><c>true</c> if the <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPositionRange" /> borders on the specified <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" />; otherwise, <c>false</c>.
            </returns><remarks>
            This method checks to see if the specified <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" /> is either the <see cref="P:ActiproSoftware.SyntaxEditor.DocumentPositionRange.StartPosition" /> or <see cref="P:ActiproSoftware.SyntaxEditor.DocumentPositionRange.EndPosition" />.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.DocumentPositionRange.BordersOn(ActiproSoftware.SyntaxEditor.DocumentPositionRange)"><summary>
            Returns whether the <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPositionRange" /> borders on, but does not overlap the specified <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPositionRange" />.
            </summary><param name="range">The <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPositionRange" /> to examine.</param><returns><c>true</c> if the <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPositionRange" /> borders on, but does not overlap the specified <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPositionRange" />; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.DocumentPositionRange.Clone"><summary>
            Creates a copy of this <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPositionRange" /> object.
            </summary><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPositionRange" /> object that this method creates.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.DocumentPositionRange.Contains(ActiproSoftware.SyntaxEditor.DocumentPosition)"><summary>
            Returns whether the <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPositionRange" /> contains the specified <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" />.
            </summary><param name="position">The <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" /> to examine.</param><returns><c>true</c> if the <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPositionRange" /> contains the specified <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" />; otherwise, <c>false</c>.
            </returns><remarks>
            This method returns <c>false</c> if the <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" /> falls on the <see cref="P:ActiproSoftware.SyntaxEditor.DocumentPositionRange.LastPosition" /><see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" />
            since this method indicates if the <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" /> is encompassed by the <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPositionRange" />.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.DocumentPositionRange.Contains(ActiproSoftware.SyntaxEditor.DocumentPositionRange)"><summary>
            Returns whether the <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPositionRange" /> contains the specified <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPositionRange" />.
            </summary><param name="range">The <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPositionRange" /> to examine.</param><returns><c>true</c> if the <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPositionRange" /> contains the specified <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPositionRange" />; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.DocumentPositionRange.Equals(System.Object)"><summary>
            Determines whether the specified <c>Object</c> is equal to the current <c>Object</c>. 
            </summary><param name="obj">The <c>Object</c> to compare to the current <c>Object</c>.</param><returns><c>true</c> if the specified <c>Object</c> is equal to the current <c>Object</c>; 
            otherwise, <c>false</c>. 
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.DocumentPositionRange.GetHashCode"><summary>
            Returns a hash code for this object.
            </summary><returns>An integer value that specifies a hash value for this object.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.DocumentPositionRange.IntersectsWith(ActiproSoftware.SyntaxEditor.DocumentPosition)"><summary>
            Returns whether the <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPositionRange" /> intersects with the specified <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" />.
            </summary><param name="position">The <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" /> to examine.</param><returns><c>true</c> if the <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPositionRange" /> intersects with the specified <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" />; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.DocumentPositionRange.IntersectsWith(ActiproSoftware.SyntaxEditor.DocumentPositionRange)"><summary>
            Returns whether the <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPositionRange" /> intersects with the specified <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPositionRange" />.
            </summary><param name="range">The <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPositionRange" /> to examine.</param><returns><c>true</c> if the <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPositionRange" /> intersects with the specified <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPositionRange" />; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.DocumentPositionRange.Normalize"><summary>
            Normalizes the range and ensures that the <see cref="P:ActiproSoftware.SyntaxEditor.DocumentPositionRange.StartPosition" /> occurs at or before the <see cref="P:ActiproSoftware.SyntaxEditor.DocumentPositionRange.EndPosition" /><see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" />.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.DocumentPositionRange.OverlapsWith(ActiproSoftware.SyntaxEditor.DocumentPositionRange)"><summary>
            Returns whether the <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPositionRange" /> overlaps with, or crosses, the specified <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPositionRange" />.
            </summary><param name="range">The <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPositionRange" /> to examine.</param><returns><c>true</c> if the <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPositionRange" /> overlaps with, or crosses, the specified <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPositionRange" />; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.DocumentPositionRange.ToString"><summary>
            Converts the object to a <c>String</c>.
            </summary><returns>
            A string whose value represents this object.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.DocumentPositionRange.Union(ActiproSoftware.SyntaxEditor.DocumentPositionRange,ActiproSoftware.SyntaxEditor.DocumentPositionRange)"><summary>
            Returns the normalized union of two <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPositionRange" /> objects.
            </summary><param name="range1">The first <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPositionRange" /> to examine.</param><param name="range2">The second <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPositionRange" /> to examine.</param><returns>
            The normalized union of two <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPositionRange" /> objects.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.DocumentPositionRange.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)"><summary>
            Initializes a new instance of the <c>DocumentPositionRange</c> class with the specified <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" /> values.
            </summary><param name="startLine">The line of the start <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" />in the range.</param><param name="startCharacter">The character of the start <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" />in the range.</param><param name="endLine">The line of the end <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" />in the range.</param><param name="endCharacter">The character of the end <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" />in the range.</param></member><member name="M:ActiproSoftware.SyntaxEditor.DocumentPositionRange.#ctor(ActiproSoftware.SyntaxEditor.DocumentPosition,ActiproSoftware.SyntaxEditor.DocumentPosition)"><summary>
            Initializes a new instance of the <c>DocumentPositionRange</c> class with the specified <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" /> values.
            </summary><param name="startPosition">The start <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" /> in the range.</param><param name="endPosition">The end <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" />in the range.</param></member><member name="P:ActiproSoftware.SyntaxEditor.DocumentPositionRange.Empty"><summary>
            Returns an empty <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPositionRange" />.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPositionRange" /> that is empty.</value></member><member name="P:ActiproSoftware.SyntaxEditor.DocumentPositionRange.EndPosition"><summary>
            Gets the end <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" /> in the range.
            </summary><value>The end <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" /> in the range.</value><remarks>
            The end <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" /> may occur before the start <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" /> if the range is not normalized.
            The <see cref="P:ActiproSoftware.SyntaxEditor.DocumentPositionRange.IsNormalized" /> property indicates if the range is normalized.
            To get the normalized first <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" /> in the range, use the <see cref="P:ActiproSoftware.SyntaxEditor.DocumentPositionRange.FirstPosition" /> property.
            To get the normalized last <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" /> in the range, use the <see cref="P:ActiproSoftware.SyntaxEditor.DocumentPositionRange.LastPosition" /> property.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.DocumentPositionRange.FirstPosition"><summary>
            Gets the first <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" /> in the range.
            </summary><value>The first <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" /> in the range.</value><remarks>
            This property returns either the <see cref="P:ActiproSoftware.SyntaxEditor.DocumentPositionRange.StartPosition" /> or <see cref="P:ActiproSoftware.SyntaxEditor.DocumentPositionRange.EndPosition" /> property, whichever comes first.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.DocumentPositionRange.IsEmpty"><summary>
            Returns whether the <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPositionRange" /> is empty.
            </summary><value><c>true</c> if the <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPositionRange" /> is empty; otherwise, <c>false</c>.</value></member><member name="P:ActiproSoftware.SyntaxEditor.DocumentPositionRange.IsNormalized"><summary>
            Gets whether the range is normalized (<see cref="P:ActiproSoftware.SyntaxEditor.DocumentPositionRange.StartPosition" /> occurs at or before the <see cref="P:ActiproSoftware.SyntaxEditor.DocumentPositionRange.EndPosition" />).
            </summary><value><c>true</c> if the range is normalized; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.DocumentPositionRange.IsZeroLength"><summary>
            Gets whether the range has a zero length.
            </summary><value><c>true</c> if the range has a zero length; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.DocumentPositionRange.LastPosition"><summary>
            Gets the last <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" /> in the range.
            </summary><value>The last <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" /> in the range.</value><remarks>
            This property returns either the <see cref="P:ActiproSoftware.SyntaxEditor.DocumentPositionRange.StartPosition" /> or <see cref="P:ActiproSoftware.SyntaxEditor.DocumentPositionRange.EndPosition" /> property, whichever comes last.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.DocumentPositionRange.Lines"><summary>
            Gets the number of lines encompassed by the <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPositionRange" />.
            </summary><value>The number of lines encompassed by the <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPositionRange" />.</value></member><member name="P:ActiproSoftware.SyntaxEditor.DocumentPositionRange.NormalizedDocumentPositionRange"><summary>
            Gets a normalized version of this <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPositionRange" /> without actually modifying this instance.
            </summary><value>A normalized version of this <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPositionRange" /> without actually modifying this instance.</value></member><member name="P:ActiproSoftware.SyntaxEditor.DocumentPositionRange.StartPosition"><summary>
            Gets the start <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" /> in the range.
            </summary><value>The start <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" /> in the range.</value><remarks>
            The start <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" /> may occur after the end <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" /> if the range is not normalized.
            The <see cref="P:ActiproSoftware.SyntaxEditor.DocumentPositionRange.IsNormalized" /> property indicates if the range is normalized.
            To get the normalized first <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" /> in the range, use the <see cref="P:ActiproSoftware.SyntaxEditor.DocumentPositionRange.FirstPosition" /> property.
            To get the normalized last <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" /> in the range, use the <see cref="P:ActiproSoftware.SyntaxEditor.DocumentPositionRange.LastPosition" /> property.
            </remarks></member><member name="T:ActiproSoftware.SyntaxEditor.TextStream"><summary>
            Provides access to the stream of <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Document" /> text data.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.TextStream.Clone"><summary>
            Creates a new <see cref="T:ActiproSoftware.SyntaxEditor.TextStream" /> instance that is at the same position as this <see cref="T:ActiproSoftware.SyntaxEditor.TextStream" />.
            </summary><returns>The new <see cref="T:ActiproSoftware.SyntaxEditor.TextStream" /> instance that is at the same position as this <see cref="T:ActiproSoftware.SyntaxEditor.TextStream" />.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.TextStream.Dispose(System.Boolean)"><summary>
            Releases the unmanaged resources used by the object and optionally releases the managed resources.
            </summary><param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources. 
            </param><remarks>
            This method is called by the public <c>Dispose</c> method and the <c>Finalize</c> method. 
            <c>Dispose</c> invokes this method with the <paramref name="disposing" /> parameter set to <c>true</c>. 
            <c>Finalize</c> invokes this method with <paramref name="disposing" /> set to <c>false</c>.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.TextStream.GoToCurrentDocumentLineEnd"><summary>
            Moves the <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" /> to the end of the document line that contains the <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" />.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.TextStream.GoToCurrentDocumentLineStart"><summary>
            Moves the <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" /> to the start of the document line that contains the <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" />.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.TextStream.GoToCurrentTokenStart"><summary>
            Moves the <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" /> to the start of the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that contains the <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" />.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.TextStream.GoToCurrentWordEnd"><summary>
            Moves to the current word's end offset.
            </summary><returns><c>true</c> if the word end is found; otherwise, <c>false</c>.
            </returns><remarks>
            If a proper word end is not found, the stream's <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" /> will be the end of the stream.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.TextStream.GoToCurrentWordStart"><summary>
            Moves to the current word's start offset.
            </summary><returns><c>true</c> if the word start is found; otherwise, <c>false</c>.
            </returns><remarks>
            If a proper word start is not found, the stream's <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" /> will be the beginning of the stream.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.TextStream.GoToDocumentEnd"><summary>
            Moves the <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" /> to the end of the <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Document" />.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.TextStream.GoToDocumentStart"><summary>
            Moves the <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" /> to the start of the <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Document" />.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.TextStream.GoToNextDocumentLineStart"><summary>
            Moves the <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" /> to the start of the document line after the
            document line that contains the <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" />.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.TextStream.GoToNextMatchingToken(ActiproSoftware.SyntaxEditor.IToken)"><summary>
            Moves the <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" /> to the next matching token.
            </summary><param name="startToken">The start <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.</param><returns><c>true</c> if the next matching token is found; otherwise, <c>false</c>.
            </returns><remarks>
            This method is useful for bracket matching.
            However it requires that the <see cref="P:ActiproSoftware.SyntaxEditor.IToken.MatchingTokenID" /> of the specified <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> is populated.
            This can be done when implementing a custom <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.TextStream.GoToNextMatchingToken(ActiproSoftware.SyntaxEditor.IToken,System.Int32)"><summary>
            Moves the <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" /> to the next matching token.
            </summary><param name="startToken">The start <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.</param><param name="endTokenID">The ID of the end <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> for which to search.</param><returns><c>true</c> if the next matching token is found; otherwise, <c>false</c>.
            </returns><remarks>
            This method is useful for bracket matching.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.TextStream.GoToNextNonWhitespaceOrCommentToken"><summary>
            Moves to the next non-whitespace or comment <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.
            </summary><returns><c>true</c> if a token is found; otherwise, <c>false</c>.
            </returns><remarks>
            If a token is not found, the stream's <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" /> will be the end of the stream.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.TextStream.GoToNextNonWhitespaceToken"><summary>
            Moves to the next non-whitespace <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.
            </summary><returns><c>true</c> if a token is found; otherwise, <c>false</c>.
            </returns><remarks>
            If a token is not found, the stream's <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" /> will be the end of the stream.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.TextStream.GoToNextToken"><summary>
            Moves to the next token's start offset.
            </summary><returns><c>true</c> if the token is found; otherwise, <c>false</c>.
            </returns><remarks>
            If a token is not found, the stream's <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" /> will be the end of the stream.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.TextStream.GoToNextToken(System.Int32)"><summary>
            Moves forward the specified number of tokens.
            </summary><param name="count">The number of tokens to move.</param><returns><c>true</c> if a token is found; otherwise, <c>false</c>.
            </returns><remarks>
            If a token is not found, the stream's <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" /> will be the end of the stream.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.TextStream.GoToNextTokenWithID(System.Int32)"><summary>
            Moves to the next token's start offset whose token ID matches the specified key.
            </summary><param name="id">The token ID to look for.</param><returns><c>true</c> if the token is found; otherwise, <c>false</c>.
            </returns><remarks>
            If a token is not found, the stream's <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" /> will be the end of the stream.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.TextStream.GoToNextTokenWithID(System.Int32[])"><summary>
            Moves to the next token's start offset whose token ID matches any of the specified IDs.
            </summary><param name="ids">An array of token IDs to look for.</param><returns><c>true</c> if the token is found; otherwise, <c>false</c>.
            </returns><remarks>
            If a token is not found, the stream's <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" /> will be the end of the stream.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.TextStream.GoToNextTokenWithKey(System.String)"><summary>
            Moves to the next token's start offset whose token key matches the specified key.
            </summary><param name="key">The token key to look for.</param><returns><c>true</c> if the token is found; otherwise, <c>false</c>.
            </returns><remarks>
            If a token is not found, the stream's <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" /> will be the end of the stream.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.TextStream.GoToNextWordStart"><summary>
            Moves to the next word's start offset.
            </summary><returns><c>true</c> if the word start is found; otherwise, <c>false</c>.
            </returns><remarks>
            If a proper word start is not found, the stream's <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" /> will be the end of the stream.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.TextStream.GoToPreviousDocumentLineEnd"><summary>
            Moves the <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" /> to the end of the document line before the
            document line that contains the <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" />.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.TextStream.GoToPreviousMatchingToken(ActiproSoftware.SyntaxEditor.IToken)"><summary>
            Moves the <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" /> to the previous matching token.
            </summary><param name="endToken">The end <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.</param><returns><c>true</c> if the previous matching token is found; otherwise, <c>false</c>.
            </returns><remarks>
            This method is useful for bracket matching.
            However it requires that the <see cref="P:ActiproSoftware.SyntaxEditor.IToken.MatchingTokenID" /> of the specified <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> is populated.
            This can be done when implementing a custom <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.TextStream.GoToPreviousMatchingToken(ActiproSoftware.SyntaxEditor.IToken,System.Int32)"><summary>
            Moves the <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" /> to the previous matching token.
            </summary><param name="endToken">The end <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.</param><param name="startTokenID">The ID of the start <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> for which to search.</param><returns><c>true</c> if the previous matching token is found; otherwise, <c>false</c>.
            </returns><remarks>
            This method is useful for bracket matching.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.TextStream.GoToPreviousNonWhitespaceOrCommentToken"><summary>
            Moves to the previous non-whitespace or comment <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.
            </summary><returns><c>true</c> if a token is found; otherwise, <c>false</c>.
            </returns><remarks>
            If a token is not found, the stream's <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" /> will be the beginning of the stream.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.TextStream.GoToPreviousNonWhitespaceToken"><summary>
            Moves to the previous non-whitespace <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.
            </summary><returns><c>true</c> if a token is found; otherwise, <c>false</c>.
            </returns><remarks>
            If a token is not found, the stream's <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" /> will be the beginning of the stream.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.TextStream.GoToPreviousToken"><summary>
            Moves to the previous token's start offset.
            </summary><returns><c>true</c> if the token is found; otherwise, <c>false</c>.
            </returns><remarks>
            If a token is not found, the stream's <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" /> will be the beginning of the stream.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.TextStream.GoToPreviousToken(System.Int32)"><summary>
            Moves backward the specified number of tokens.
            </summary><param name="count">The number of tokens to move.</param><returns><c>true</c> if a token is found; otherwise, <c>false</c>.
            </returns><remarks>
            If a token is not found, the stream's <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" /> will be the beginning of the stream.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.TextStream.GoToPreviousTokenWithID(System.Int32)"><summary>
            Moves to the previous token's start offset whose token ID matches the specified ID.
            </summary><param name="id">The token ID to look for.</param><returns><c>true</c> if the token is found; otherwise, <c>false</c>.
            </returns><remarks>
            If a token is not found, the stream's <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" /> will be the beginning of the stream.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.TextStream.GoToPreviousTokenWithID(System.Int32[])"><summary>
            Moves to the previous token's start offset whose token ID matches any of the specified IDs.
            </summary><param name="ids">An array of token IDs to look for.</param><returns><c>true</c> if the token is found; otherwise, <c>false</c>.
            </returns><remarks>
            If a token is not found, the stream's <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" /> will be the beginning of the stream.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.TextStream.GoToPreviousTokenWithKey(System.String)"><summary>
            Moves to the previous token's start offset whose token key matches the specified key.
            </summary><param name="key">The token key to look for.</param><returns><c>true</c> if the token is found; otherwise, <c>false</c>.
            </returns><remarks>
            If a token is not found, the stream's <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" /> will be the beginning of the stream.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.TextStream.GoToPreviousWordStart"><summary>
            Moves to the previous word's start character.
            </summary><returns><c>true</c> if the word start is found; otherwise, <c>false</c>.
            </returns><remarks>
            If a proper word start is not found, the stream's <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" /> will be the beginning of the stream.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.TextStream.OnOffsetChanged"><summary>
            Occurs when the <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" /> property's value is changed.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.TextStream.PeekCharacter"><summary>
            Peeks at a single character from the document without seeking past it.
            </summary><returns>The character that was read.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.TextStream.PeekCharacterReverse"><summary>
            Reverse peeks at a single character from the document without seeking past it.
            </summary><returns>The character that was read.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.TextStream.PeekToken"><summary>
            Peeks at a single <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> from the document without seeking past it.
            </summary><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that was read.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.TextStream.PeekTokenReverse"><summary>
            Reverse peeks at a single <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> from the document without seeking past it.
            </summary><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that was read.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.TextStream.ReadCharacter"><summary>
            Reads a single character from the document and seeks forward one offset.
            </summary><returns>The character that was read.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.TextStream.ReadCharacterReverse"><summary>
            Reverse reads a single character from the document and seeks backward one offset.
            </summary><returns>The character that was read.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.TextStream.ReadToken"><summary>
            Reads a single <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> from the document and seeks forward one <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.
            </summary><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that was read.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.TextStream.ReadTokenReverse"><summary>
            Reverse reads a single <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> from the document and seeks backward one <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.
            </summary><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that was read.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.TextStream.SeekCharacter(System.Int32)"><summary>
            Moves the <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" /> by the specified amount.
            </summary><param name="delta">The amount of characters to move.  This value may be negative.</param></member><member name="M:ActiproSoftware.SyntaxEditor.TextStream.SeekToken(System.Int32)"><summary>
            Moves the <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.TokenIndex" /> by the specified amount.
            </summary><param name="delta">The amount of token indices to move.  This value may be negative.</param></member><member name="M:ActiproSoftware.SyntaxEditor.TextStream.#ctor(ActiproSoftware.SyntaxEditor.Document)"><summary>
            Initializes a new instance of the <c>TextStream</c> class.
            </summary><param name="document">The <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Document" /> that the stream should access.</param></member><member name="M:ActiproSoftware.SyntaxEditor.TextStream.#ctor(ActiproSoftware.SyntaxEditor.Document,System.Int32)"><summary>
            Initializes a new instance of the <c>TextStream</c> class.
            </summary><param name="document">The <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Document" /> that the stream should access.</param><param name="offset">The initial offset within the document.</param></member><member name="P:ActiproSoftware.SyntaxEditor.TextStream.Character"><summary>
            Gets the character at the <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" />.
            </summary><value>The character at the <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" />.</value><remarks>
            This value is the same as the return value of the <see cref="M:ActiproSoftware.SyntaxEditor.TextStream.PeekCharacter" /> method.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.TextStream.Document"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> from which the stream is reading.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> from which the stream is reading.</value></member><member name="P:ActiproSoftware.SyntaxEditor.TextStream.DocumentLine"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.DocumentLine" /> that contains the <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" />.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.DocumentLine" /> that contains the <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" />.</value></member><member name="P:ActiproSoftware.SyntaxEditor.TextStream.DocumentLineIndex"><summary>
            Gets the zero-based index of the <see cref="T:ActiproSoftware.SyntaxEditor.DocumentLine" /> that contains the <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" />.
            </summary><value>The zero-based index of the <see cref="T:ActiproSoftware.SyntaxEditor.DocumentLine" /> that contains the <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" />.</value></member><member name="P:ActiproSoftware.SyntaxEditor.TextStream.IsAtDocumentEnd"><summary>
            Gets whether the current <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" /> is at the end of the document.
            </summary><value><c>true</c> if the current <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" /> is at the end of the document; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.TextStream.IsAtDocumentLineEnd"><summary>
            Gets whether the current <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" /> is at the end of a <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.DocumentLine" />.
            </summary><value><c>true</c> if the current <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" /> is at the end of a <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.DocumentLine" />; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.TextStream.IsAtDocumentLineStart"><summary>
            Gets whether the current <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" /> is at the start of a <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.DocumentLine" />.
            </summary><value><c>true</c> if the current <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" /> is at the start of a <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.DocumentLine" />; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.TextStream.IsAtDocumentStart"><summary>
            Gets whether the current <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" /> is at the end of the document.
            </summary><value><c>true</c> if the current <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" /> is at the end of the document; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.TextStream.IsAtTokenStart"><summary>
            Gets whether the current <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" /> is at the start of the <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Token" />.
            </summary><value><c>true</c> if the current <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" /> is at the start of the <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Token" />; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.TextStream.IsCharacterLineTerminator"><summary>
            Gets whether the <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Character" /> is a newline character.
            </summary><value><c>true</c> if the <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Character" /> is a newline character; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.TextStream.IsCharacterReadOnly"><summary>
            Gets whether the <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" /> is flagged as read-only within the <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Document" />.
            </summary><value><c>true</c> if the <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" /> is flagged as read-only within the <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Document" />; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.TextStream.IsCharacterWhitespace"><summary>
            Gets whether the <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Character" /> is categorized as a whitespace character.
            </summary><value><c>true</c> if the <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Character" /> is categorized as a whitespace character; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.TextStream.Length"><summary>
            Gets the length of the stream.
            </summary><value>The length of the stream.</value></member><member name="P:ActiproSoftware.SyntaxEditor.TextStream.Offset"><summary>
            Gets or sets the offset within the stream.
            </summary><value>The offset within the stream.</value></member><member name="P:ActiproSoftware.SyntaxEditor.TextStream.Token"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that contains the offset indicated by <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" />.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that contains the offset indicated by <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" />.</value><remarks>
            This value is the same as the return value of the <see cref="M:ActiproSoftware.SyntaxEditor.TextStream.PeekToken" /> method.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.TextStream.TokenIndex"><summary>
            Gets or sets the index of the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that contains the offset indicated by <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" />.
            </summary><value>The index of the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that contains the offset indicated by <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" />.</value></member><member name="P:ActiproSoftware.SyntaxEditor.TextStream.TokenText"><summary>
            Gets the document text contained by the <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Token" />.
            </summary><value>The document text contained by the <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Token" />.</value></member><member name="T:ActiproSoftware.SyntaxEditor.TokenStream"><summary>
            Provides access to the stream of <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> objects in a <see cref="P:ActiproSoftware.SyntaxEditor.TokenStream.Document" />.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.TokenStream.Clone"><summary>
            Creates a new <see cref="T:ActiproSoftware.SyntaxEditor.TokenStream" /> instance that is at the same position as this <see cref="T:ActiproSoftware.SyntaxEditor.TokenStream" />.
            </summary><returns>The new <see cref="T:ActiproSoftware.SyntaxEditor.TokenStream" /> instance that is at the same position as this <see cref="T:ActiproSoftware.SyntaxEditor.TokenStream" />.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.TokenStream.Find(System.String,System.Boolean)"><summary>
            Finds a <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> relative to the current position with the specified key and moves the position to it.
            </summary><param name="key">The key to look for.</param><param name="forward">Whether to move forward through the stream.</param><returns><c>true</c> if a token is found; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.TokenStream.FindNonWhitespace(System.Boolean)"><summary>
            Finds a <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> relative to the current position whose <see cref="P:ActiproSoftware.SyntaxEditor.IToken.IsWhitespace" /> property is <c>false</c>
            and moves the position to it.
            </summary><param name="forward">Whether to move forward through the stream.</param><returns><c>true</c> if a token is found; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.TokenStream.Peek"><summary>
            Peeks at a single <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> from the document without seeking past it.
            </summary><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that was read.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.TokenStream.PeekReverse"><summary>
            Peeks at a single <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> from the document without seeking past it.
            </summary><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that was read.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.TokenStream.Read"><summary>
            Reads a single <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> from the document and seeks forward one position.
            </summary><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that was read.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.TokenStream.ReadReverse"><summary>
            Reads a single <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> from the document and seeks backward one position.
            </summary><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that was read.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.TokenStream.Seek(System.Int32)"><summary>
            Offsets the <see cref="P:ActiproSoftware.SyntaxEditor.TokenStream.Position" /> by the specified amount.
            </summary><param name="offset">The amount of characters to offset.  This value may be negative.</param></member><member name="P:ActiproSoftware.SyntaxEditor.TokenStream.Document"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> from which the stream is reading.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> from which the stream is reading.</value></member><member name="P:ActiproSoftware.SyntaxEditor.TokenStream.IsDocumentEnd"><summary>
            Gets whether the current position is at the end of the stream.
            </summary><value><c>true</c> if the current position is at the end of the stream; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.TokenStream.Length"><summary>
            Gets the length of the stream.
            </summary><value>The length of the stream.</value></member><member name="P:ActiproSoftware.SyntaxEditor.TokenStream.Position"><summary>
            Gets or sets the position of the current <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> within the stream.
            </summary><value>The position of the current <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> within the stream.</value></member><member name="T:ActiproSoftware.SyntaxEditor.BracketHighlighting"><summary>
            Provides a class for managing bracket highlighting for an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" />.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.BracketHighlighting.IsHighlightedBracket(ActiproSoftware.SyntaxEditor.IToken)"><summary>
            Gets whether the specified <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> is a bracket that is being tracked.
            </summary><param name="token">The <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> to check.</param><returns><c>true</c> if the specified <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> has a bracket that is being tracked; otherwise, <c>false</c>.
            </returns></member><member name="P:ActiproSoftware.SyntaxEditor.BracketHighlighting.BracketToken"><summary>
            Gets the bracket <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> next to the caret.
            </summary><value>The bracket <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> next to the caret; otherwise, <c>null</c>.</value></member><member name="P:ActiproSoftware.SyntaxEditor.BracketHighlighting.MatchingBracketToken"><summary>
            Gets the bracket <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that matches the bracket at the <see cref="P:ActiproSoftware.SyntaxEditor.BracketHighlighting.BracketToken" />.
            </summary><value>The bracket <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that matches the bracket at the <see cref="P:ActiproSoftware.SyntaxEditor.BracketHighlighting.BracketToken" />; otherwise, <c>null</c>.</value></member><member name="T:ActiproSoftware.SyntaxEditor.ProgrammaticLexicalScopeMatchDelegate"><summary>
            Represents the method that will handle <see cref="T:ActiproSoftware.SyntaxEditor.ITokenLexicalParseData" /> matching callbacks for <see cref="T:ActiproSoftware.SyntaxEditor.ProgrammaticLexicalScope" /> objects.
            </summary><param name="reader">An <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader" /> that is reading a text source.</param><param name="lexicalScope">The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalScope" /> that specifies the lexical scope to check.</param><param name="lexicalParseData">Returns the <see cref="T:ActiproSoftware.SyntaxEditor.ITokenLexicalParseData" /> that was parsed, if any.</param><returns>A <see cref="T:ActiproSoftware.SyntaxEditor.MatchType" /> indicating the type of match that was made.</returns></member><member name="T:ActiproSoftware.SyntaxEditor.HighlightingStyleBorderCornerStyle"><summary>
            Specifies the corner style of a <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyle" /> border.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.HighlightingStyleBorderCornerStyle.Square"><summary>
            Draw a square border.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.HighlightingStyleBorderCornerStyle.SinglePixelRounded"><summary>
            Draws a single-pixel rounded border.
            </summary></member><member name="T:ActiproSoftware.SyntaxEditor.DisplayLineOutliningState"><summary>
            Specifies the outlining state for a <see cref="T:ActiproSoftware.SyntaxEditor.DisplayLine" />.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DisplayLineOutliningState.None"><summary>
            The line is not within a outlining block.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DisplayLineOutliningState.ExpandedBlockStart"><summary>
            The line contains the start of an expanded block.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DisplayLineOutliningState.ExpandedBlockEnd"><summary>
            The line contains the end of an expanded block.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DisplayLineOutliningState.ContractedBlock"><summary>
            The line contains a contracted block.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DisplayLineOutliningState.ExpandedSubBlockStart"><summary>
            The line contains the start of an expanded sub-block.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DisplayLineOutliningState.ExpandedSubBlockEnd"><summary>
            The line contains the end of an expanded sub-block.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DisplayLineOutliningState.ContractedSubBlock"><summary>
            The line contains a contracted sub-block.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DisplayLineOutliningState.InBlock"><summary>
            The line is within a block or sub-block.
            </summary></member><member name="T:ActiproSoftware.SyntaxEditor.FindReplaceForm"><summary>
            Represents a built-in Find and Replace form.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.FindReplaceForm.Dispose(System.Boolean)"><summary>
            Clean up any resources being used.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.FindReplaceForm.OnActivated(System.EventArgs)"><summary>
            Occurs before the form is activated.
            </summary><param name="e">An <c>EventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.FindReplaceForm.OnClosing(System.ComponentModel.CancelEventArgs)"><summary>
            Occurs before the form is closed.
            </summary><param name="e">A <c>CancelEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.FindReplaceForm.OnStatusChanged(ActiproSoftware.SyntaxEditor.FindReplaceStatusChangeEventArgs)"><summary>
            Raises the <c>StatusChanged</c> event.
            </summary><param name="e">A <c>FindReplaceStatusChangeEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.FindReplaceForm.OnVisibleChanged(System.EventArgs)"><summary>
            Occurs when the <c>Visible</c> property of the control is changed.
            </summary><param name="e">An <c>EventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.FindReplaceForm.#ctor(ActiproSoftware.SyntaxEditor.SyntaxEditor,ActiproSoftware.SyntaxEditor.FindReplaceOptions)"><summary>
            Initializes a new instance of the <c>FindReplaceForm</c> class.
            </summary><param name="syntaxEditor">The <see cref="P:ActiproSoftware.SyntaxEditor.FindReplaceForm.SyntaxEditor" /> for which to display the form.</param><param name="options">The <see cref="T:ActiproSoftware.SyntaxEditor.FindReplaceOptions" /> to use.</param></member><member name="P:ActiproSoftware.SyntaxEditor.FindReplaceForm.Options"><summary>
            Gets or sets the <see cref="T:ActiproSoftware.SyntaxEditor.FindReplaceOptions" /> to use.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.FindReplaceOptions" /> to use.</value></member><member name="P:ActiproSoftware.SyntaxEditor.FindReplaceForm.SyntaxEditor"><summary>
            Gets or sets the <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor" /> that is currently the focus of the find/replace form.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor" /> that is currently the focus of the find/replace form.</value></member><member name="E:ActiproSoftware.SyntaxEditor.FindReplaceForm.StatusChanged"><summary>
            Occurs when there is a status change.
            </summary><eventdata>
            The event handler receives an argument of type <c>FindReplaceStatusChangeEventArgs</c> containing data related to this event.
            </eventdata></member><member name="T:ActiproSoftware.SyntaxEditor.IndentType"><summary>
            Specifies the type of indentation to perform when the ENTER key is pressed.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.IndentType.None"><summary>
            When selected, no automatic indenting occurs when you press ENTER to move to a new line of text and 
            the cursor is placed at the first column of the next line. 
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.IndentType.Block"><summary>
            When selected and you press ENTER, the new line of text is automatically indented to the same tab stop as the line preceding it. 
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.IndentType.Smart"><summary>
            When selected and you press ENTER, the new line of text is automatically indented based on what the current language determines 
            the context to be.  If the language does not support smart indenting then the default effect is the same as <c>Block</c> indent.
            </summary></member><member name="T:ActiproSoftware.SyntaxEditor.PrintSettings"><summary>
            Provides access to all printing functionality for a <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor" />.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.PrintSettings.Dispose(System.Boolean)"><summary>
            Releases the unmanaged resources used by the object and optionally releases the managed resources.
            </summary><param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources. 
            </param><remarks>
            This method is called by the public <c>Dispose</c> method and the <c>Finalize</c> method. 
            <c>Dispose</c> invokes this method with the <paramref name="disposing" /> parameter set to <c>true</c>. 
            <c>Finalize</c> invokes this method with <paramref name="disposing" /> set to <c>false</c>.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.PrintSettings.Equals(System.Object)"><summary>
            Determines whether the specified <c>Object</c> is equal to the current <c>Object</c>. 
            </summary><param name="obj">The <c>Object</c> to compare to the current <c>Object</c>.</param><returns><c>true</c> if the specified <c>Object</c> is equal to the current <c>Object</c>; 
            otherwise, <c>false</c>. 
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.PrintSettings.GetHashCode"><summary>
            Returns a hash code for this object.
            </summary><returns>An integer value that specifies a hash value for this object.</returns></member><member name="P:ActiproSoftware.SyntaxEditor.PrintSettings.DocumentTitle"><summary>
            Gets or sets the document title that should appear at the top of every page.
            </summary><value>The document title that should appear at the top of every page.</value><remarks>This is often set to the filename of the document.</remarks></member><member name="P:ActiproSoftware.SyntaxEditor.PrintSettings.ExpandOutliningNodes"><summary>
            Gets or sets whether to expand collapsed outlining nodes for printing.
            </summary><value><c>true</c> if collapsed outlining nodes should be expanded for printing; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.PrintSettings.LineNumberMarginVisible"><summary>
            Gets or sets whether to show the line number margin on a page.
            </summary><value><c>true</c> if the line number margin should be shown on a page; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.PrintSettings.OutliningIndicatorsVisible"><summary>
            Gets or sets whether to show the outlining indicators on a page.
            </summary><value><c>true</c> if the outlining indicators should be shown on a page; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.PrintSettings.PageTextFormat"><summary>
            Gets or sets the formatting string to use when displaying the page number on a page.
            </summary><value>The the format to use when displaying the page number on a page</value><remarks>
            Two parameters are supplied to this format.  
            The first is the current page number and the second is the total page count.
            The default value is: <c>Page {0} of {1}.</c></remarks></member><member name="P:ActiproSoftware.SyntaxEditor.PrintSettings.PrintDocument"><summary>
            Gets the <see cref="T:System.Drawing.Printing.PrintDocument" /> object that allows for printing.
            </summary><value>The <see cref="T:System.Drawing.Printing.PrintDocument" /> object that allows for printing.</value></member><member name="P:ActiproSoftware.SyntaxEditor.PrintSettings.SelectionMarginMarksVisible"><summary>
            Gets or sets whether to show the selection margin marks on a page.
            </summary><value><c>true</c> if the selection margin marks should be shown on a page; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.PrintSettings.TotalPageCount"><summary>
            Gets the number of pages that are required based on the current printer and margin settings.
            </summary><value>The number of pages that are required based on the current printer and margin settings.</value></member><member name="P:ActiproSoftware.SyntaxEditor.PrintSettings.WhitespaceLineEndsVisible"><summary>
            Gets or sets whether to show an end-of-line character in place of line feeds on a page.
            </summary><value><c>true</c> if an end-of-line character should be shown on a page; otherwise, <c>false</c>.
            </value><remarks>
            When the <see cref="P:ActiproSoftware.SyntaxEditor.PrintSettings.WordWrapGlyphVisible" /> property is set, this property is not used.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.PrintSettings.WhitespaceSpacesVisible"><summary>
            Gets or sets whether to display a space glyph in place of space on a page.
            </summary><value><c>true</c> if a space glyph should be drawn in place of space on a page; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.PrintSettings.WhitespaceTabsVisible"><summary>
            Gets or sets whether to display a tab glyph in place of tabs on a page.
            </summary><value><c>true</c> if a tab glyph should be drawn in place of tabs on a page; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.PrintSettings.WordWrap"><summary>
            Gets or sets the type of word wrapping to perform on a page.
            </summary><value>
            A <see cref="T:ActiproSoftware.SyntaxEditor.WordWrapType" /> specifying the type of word wrapping to perform on a page.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.PrintSettings.WordWrapGlyphVisible"><summary>
            Gets or sets whether to draw a word wrap glyph along the right side of lines with soft line breaks.
            </summary><value><c>true</c> if word wrap glyphs should be drawn; otherwise, <c>false</c>.
            </value><remarks>
            When set, this property prevents the use of the <see cref="P:ActiproSoftware.SyntaxEditor.PrintSettings.WhitespaceLineEndsVisible" /> property.
            This property is only used when word wrap is active.
            </remarks></member><member name="T:ActiproSoftware.SyntaxEditor.SmartIndentEventArgs"><summary>
            Event arguments for designating the amount to smart indent when the ENTER key is pressed.
            </summary><remarks>
            This class is used with the <see cref="T:ActiproSoftware.SyntaxEditor.SmartIndentEventHandler" /> delegate.
            </remarks><seealso cref="T:ActiproSoftware.SyntaxEditor.SmartIndentEventHandler" /></member><member name="M:ActiproSoftware.SyntaxEditor.SmartIndentEventArgs.#ctor"><summary>
            Initializes a new instance of the <c>SmartIndentEventArgs</c> class. 
            </summary><remarks>
            The default constructor initializes all fields to their default values.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.SmartIndentEventArgs.IndentAmount"><summary>
            Gets or sets the number of columns to indent when the ENTER key is pressed.
            </summary><value>The number of columns to indent when the ENTER key is pressed.</value><remarks>
            For example, if this value is <c>6</c> and the <see cref="P:ActiproSoftware.SyntaxEditor.Document.TabSize" /> is <c>4</c>,
            <c>1</c> tab will be inserted followed by <c>2 spaces</c>.
            In the same example, if <see cref="P:ActiproSoftware.SyntaxEditor.Document.AutoConvertTabsToSpaces" /> is set to <c>true</c><c>6</c> spaces will be inserted instead.
            </remarks></member><member name="T:ActiproSoftware.SyntaxEditor.SmartIndentEventHandler"><summary>
            Represents the method that will handle smart indent events when the ENTER key is pressed.
            </summary><param name="sender">Sender of the event.</param><param name="e">A <see cref="T:ActiproSoftware.SyntaxEditor.SmartIndentEventArgs" /> containing event data.</param><remarks>
            When you create a <c>SmartIndentEventHandler</c> delegate, you identify the method that will handle the event. 
            To associate the event with your event handler, add an instance of the delegate to the event. 
            The event handler is called whenever the event occurs, unless you remove the delegate.
            </remarks><seealso cref="T:ActiproSoftware.SyntaxEditor.SmartIndentEventArgs" /></member><member name="T:ActiproSoftware.SyntaxEditor.SyntaxEditorHitTestTarget"><summary>
            Specifies the target of a hit-test operation.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.SyntaxEditorHitTestTarget.Unknown"><summary>
            An unknown part of the SyntaxEditor control.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.SyntaxEditorHitTestTarget.HorizontalSplitter"><summary>
            A horizontal splitter between two <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> objects.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.SyntaxEditorHitTestTarget.VerticalSplitter"><summary>
            A horizontal splitter between two <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> objects.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.SyntaxEditorHitTestTarget.FourWaySplitter"><summary>
            A splitter between four <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> objects.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.SyntaxEditorHitTestTarget.HorizontalSplitButton"><summary>
            A horizontal split button within an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" />.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.SyntaxEditorHitTestTarget.VerticalSplitButton"><summary>
            A vertical split button within an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" />.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.SyntaxEditorHitTestTarget.HorizontalScrollBar"><summary>
            A horizontal scrollbar within an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" />.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.SyntaxEditorHitTestTarget.VerticalScrollBar"><summary>
            A vertical scrollbar within an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" />.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.SyntaxEditorHitTestTarget.ScrollBarBlock"><summary>
            The block that appears between the horizontal and vertical scrollbars within an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" />.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.SyntaxEditorHitTestTarget.EditorViewButtonLink"><summary>
            An <see cref="F:ActiproSoftware.SyntaxEditor.SyntaxEditorHitTestTarget.EditorViewButtonLink" /> in an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" />.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.SyntaxEditorHitTestTarget.IndicatorMargin"><summary>
            The indicator margin of an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" />.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.SyntaxEditorHitTestTarget.LineNumberMargin"><summary>
            The line number margin of an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" />.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.SyntaxEditorHitTestTarget.UserMargin"><summary>
            The user margin of an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" />.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.SyntaxEditorHitTestTarget.SelectionMargin"><summary>
            The selection margin of an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" />.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.SyntaxEditorHitTestTarget.TextArea"><summary>
            The text area of an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" />.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.SyntaxEditorHitTestTarget.WordWrapMargin"><summary>
            The word wrap margin of an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" />.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.SyntaxEditorHitTestTarget.SelectionMarginOutliningNodeIndicatorBox"><summary>
            An outlining node indicator box within the selection margin of an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" />.
            </summary></member><member name="T:ActiproSoftware.SyntaxEditor.SyntaxEditorHitTestResult"><summary>
            Provides hit-test result data for a hit-test performed on a <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor" />.
            </summary></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditorHitTestResult.DisplayLine"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.DisplayLine" /> that the mouse is over, if any.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.DisplayLine" /> that the mouse is over, if any.</value><remarks>This property is only filled in if the hit-test is over an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> margin or text area.</remarks></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditorHitTestResult.DisplayLineIndex"><summary>
            Gets the index of the <see cref="T:ActiproSoftware.SyntaxEditor.DisplayLine" /> that the mouse is over, if any.
            </summary><value>The index of the <see cref="T:ActiproSoftware.SyntaxEditor.DisplayLine" /> that the mouse is over, if any.</value><remarks>This property is only filled in if the hit-test is over an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> margin or text area.</remarks></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditorHitTestResult.DisplayLineIndicatorMarginBounds"><summary>
            Gets the bounds of the indicator margin on the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditorHitTestResult.DisplayLine" />.
            </summary><value>The bounds of the indicator margin on the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditorHitTestResult.DisplayLine" />.</value><remarks>This property is only filled in if the hit-test is over an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> margin or text area.</remarks></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditorHitTestResult.DisplayLineLineNumberMarginBounds"><summary>
            Gets the bounds of the line number margin on the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditorHitTestResult.DisplayLine" />.
            </summary><value>The bounds of the line number margin on the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditorHitTestResult.DisplayLine" />.</value><remarks>This property is only filled in if the hit-test is over an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> margin or text area.</remarks></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditorHitTestResult.DisplayLineSelectionMarginBounds"><summary>
            Gets the bounds of the selection margin on the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditorHitTestResult.DisplayLine" />.
            </summary><value>The bounds of the selection margin on the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditorHitTestResult.DisplayLine" />.</value><remarks>This property is only filled in if the hit-test is over an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> margin or text area.</remarks></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditorHitTestResult.DisplayLineTextAreaBounds"><summary>
            Gets the bounds of the text area on the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditorHitTestResult.DisplayLine" />.
            </summary><value>The bounds of the text area on the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditorHitTestResult.DisplayLine" />.</value><remarks>This property is only filled in if the hit-test is over an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> margin or text area.</remarks></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditorHitTestResult.DisplayLineUserMarginBounds"><summary>
            Gets the bounds of the user margin on the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditorHitTestResult.DisplayLine" />.
            </summary><value>The bounds of the user margin on the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditorHitTestResult.DisplayLine" />.</value><remarks>This property is only filled in if the hit-test is over an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> margin or text area.</remarks></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditorHitTestResult.DocumentLine"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.DocumentLine" /> that the mouse is over, if any.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.DocumentLine" /> that the mouse is over, if any.</value><remarks>This property is only filled in if the hit-test is over an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> margin or text area.</remarks></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditorHitTestResult.EditPosition"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" /> that is closest to the hit-test <c>Point</c>.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" /> that is closest to the hit-test <c>Point</c>.</value><remarks>This property is only filled in if the hit-test is over an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> margin or text area.</remarks></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditorHitTestResult.EditPositionIsCollapsedNode"><summary>
            Gets whether the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditorHitTestResult.EditPosition" /> is a collapsed node.
            </summary><value><c>true</c> if the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditorHitTestResult.EditPosition" /> is a collapsed node; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditorHitTestResult.Offset"><summary>
            Gets the offset that is closest to the hit-test <c>Point</c>.
            </summary><value>The offset that is closest to the hit-test <c>Point</c>.</value><remarks>This property is only filled in if the hit-test is over an <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> in an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> text area.</remarks></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditorHitTestResult.Target"><summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditorHitTestTarget" /> that indicates the target of the hit-test.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditorHitTestTarget" /> that indicates the target of the hit-test.</value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditorHitTestResult.Token"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that the hit-test is over, if any.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that the hit-test is over, if any.</value><remarks>This property is only filled in if the hit-test is over an <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> in an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> text area.</remarks></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditorHitTestResult.TokenIndex"><summary>
            Gets the index of the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that the hit-test is over, if any.
            </summary><value>The index of the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that the hit-test is over, if any.</value><remarks>This property is only filled in if the hit-test is over an <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> in an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> text area.</remarks></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditorHitTestResult.View"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> that contains the hit-test <c>Point</c>, if any.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> that contains the hit-test <c>Point</c>, if any.</value></member><member name="T:ActiproSoftware.SyntaxEditor.LineIndicator"><summary>
            Represents a line indicator which has a glyph in the indicator margin and no text area marks.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.LineIndicator.ToString"><summary>
            Converts the object to a <c>String</c>.
            </summary><returns>
            A string whose value represents this object.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.LineIndicator.#ctor(System.String,System.Int32)"><summary>
            Initializes a new instance of the <c>LineIndicator</c> class.
            </summary><param name="name">The name to identify the type of indicator.</param><param name="displayPriority">The priority of display level for the indicator.</param></member><member name="P:ActiproSoftware.SyntaxEditor.LineIndicator.DisplayPriority"><summary>
            Gets the priority of display level for the indicator.
            </summary><value>The priority of display level for the indicator.</value><remarks>
            Indicators with the lowest priority numbers are painted first with other indicators 
            painted on top in increasing priority order.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.LineIndicator.DocumentLineIndex"><summary>
            Gets the index of the document line to which the indicator applies.
            </summary><value>
            The index of the document line to which the indicator applies.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.LineIndicator.HasFontChange"><summary>
            Gets whether the span indicator contains a font-related change.
            </summary><value><c>true</c> if the span indicator contains a font-related change; otherwise, <c>false</c>.
            </value><remarks>
            This property lets <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor" /> know whether display lines need to be recalculated
            when the span indicator is added.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.LineIndicator.HasGlyph"><summary>
            Gets whether the indicator has a glyph that appears in the indicator margin.
            </summary><value><c>true</c> if the indicator has a glyph that appears in the indicator margin; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.LineIndicator.IsBound"><summary>
            Gets whether the indicator is bound to a <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicatorLayer" />.
            </summary><value><c>true</c> if the indicator is bound to a <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicatorLayer" />; otherwise, <c>false</c>.
            </value></member><member name="T:ActiproSoftware.SyntaxEditor.BookmarkLineIndicator"><summary>
            Represents a bookmark line indicator.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.BookmarkLineIndicator.DrawGlyph(System.Windows.Forms.PaintEventArgs,System.Drawing.Rectangle)"><summary>
            Draws the glyph associated with the indicator.
            </summary><param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param><param name="bounds">A <c>Rectangle</c> specifying the bounds in which to draw.</param><remarks>
            This method should be implemented by indicators that have a glyph.
            Ensure that the indicator's <see cref="P:ActiproSoftware.SyntaxEditor.Indicator.HasGlyph" /> property returns <c>true</c> if this method is implemented.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.BookmarkLineIndicator.#ctor"><summary>
            Initializes a new instance of the <c>BookmarkLineIndicator</c> class.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.BookmarkLineIndicator.#ctor(System.String,System.Int32,System.Drawing.Color,System.Drawing.Color)"><summary>
            Initializes a new instance of the <c>BookmarkLineIndicator</c> class.
            </summary><param name="name">The name to identify the type of indicator.</param><param name="displayPriority">The priority of display level for the indicator.</param><param name="borderColor">The <see cref="T:System.Drawing.Color" /> to use when drawing the border of the indicator.</param><param name="backColor">The <see cref="T:System.Drawing.Color" /> to use when drawing the background of the indicator.</param></member><member name="P:ActiproSoftware.SyntaxEditor.BookmarkLineIndicator.BackColor"><summary>
            Gets or sets the <see cref="T:System.Drawing.Color" /> to use when drawing the background of the indicator.
            </summary><value>The <see cref="T:System.Drawing.Color" /> to use when drawing the background of the indicator.</value></member><member name="P:ActiproSoftware.SyntaxEditor.BookmarkLineIndicator.DefaultDisplayPriority"><summary>
            Gets the default priority of display level for the newly created indicators of this class.
            </summary><value>
            The priority of display level for the newly created indicators of this class.
            The default value is <c>100</c>.
            </value><remarks>
            Indicators with the lowest priority numbers are painted first with other indicators 
            painted on top in increasing priority order.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.BookmarkLineIndicator.BorderColor"><summary>
            Gets or sets the <see cref="T:System.Drawing.Color" /> to use when drawing the border of the indicator.
            </summary><value>The <see cref="T:System.Drawing.Color" /> to use when drawing the border of the indicator.</value></member><member name="P:ActiproSoftware.SyntaxEditor.BookmarkLineIndicator.DefaultName"><summary>
            Gets the default name for the indicator.
            </summary><value>The default name for the indicator.</value></member><member name="T:ActiproSoftware.SyntaxEditor.DocumentLineLineIndicatorCollection"><summary>
            Represents collection of <see cref="T:ActiproSoftware.SyntaxEditor.LineIndicator" /> objects within a <see cref="T:ActiproSoftware.SyntaxEditor.DocumentLine" />.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.DocumentLineLineIndicatorCollection.Add(ActiproSoftware.SyntaxEditor.LineIndicator)"><summary>
            Adds a <see cref="T:ActiproSoftware.SyntaxEditor.LineIndicator" /> to the collection.
            </summary><param name="indicator">The <see cref="T:ActiproSoftware.SyntaxEditor.LineIndicator" /> to add.</param><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.LineIndicator" /> that was added.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.DocumentLineLineIndicatorCollection.Clear"><summary>
            Removes all <see cref="T:ActiproSoftware.SyntaxEditor.LineIndicator" /> objects from the collection. 
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.DocumentLineLineIndicatorCollection.Clear(System.String)"><summary>
            Removes all <see cref="T:ActiproSoftware.SyntaxEditor.LineIndicator" /> objects with the specified <see cref="P:ActiproSoftware.SyntaxEditor.Indicator.Name" /> from the <see cref="T:ActiproSoftware.SyntaxEditor.Document" />. 
            </summary><param name="name">The name of the type of indicators to remove.</param></member><member name="M:ActiproSoftware.SyntaxEditor.DocumentLineLineIndicatorCollection.Contains(ActiproSoftware.SyntaxEditor.LineIndicator)"><summary>
            Returns whether the collection contains the specified <see cref="T:ActiproSoftware.SyntaxEditor.LineIndicator" />.
            </summary><param name="indicator">The <see cref="T:ActiproSoftware.SyntaxEditor.LineIndicator" /> to look for.</param><returns><c>true</c> if the collection contains the specified <see cref="T:ActiproSoftware.SyntaxEditor.LineIndicator" />; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.DocumentLineLineIndicatorCollection.Contains(System.String)"><summary>
            Returns whether the collection contains a <see cref="T:ActiproSoftware.SyntaxEditor.LineIndicator" /> with the specified name.
            </summary><param name="name">The name of the <see cref="T:ActiproSoftware.SyntaxEditor.LineIndicator" /> to look for.</param><returns><c>true</c> if the collection contains a <see cref="T:ActiproSoftware.SyntaxEditor.LineIndicator" /> with the specified name; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.DocumentLineLineIndicatorCollection.CopyTo(System.Array,System.Int32)"><summary>
            Copies the elements of the collection to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index. 
            </summary><param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from the collection. The <see cref="T:System.Array" /> must have zero-based indexing.</param><param name="index">The zero-based index in array at which copying begins.</param></member><member name="M:ActiproSoftware.SyntaxEditor.DocumentLineLineIndicatorCollection.GetEnumerator"><summary>
            Retrieves an <c>IEnumerator</c> object for the entire collection.
            </summary><returns>An <c>IEnumerator</c> object for the entire collection</returns><remarks>
            Enumerators are intended to be used only to read data in the collection. 
            Enumerators cannot be used to modify the underlying collection.
            <para>
            The enumerator does not have exclusive access to the collection.
            </para><para>
            When an enumerator is instantiated, it takes a snapshot of the current state of the collection. 
            If changes are made to the collection, such as adding, modifying or deleting elements, the 
            snapshot gets out of sync and the enumerator throws an <c>InvalidOperationException</c>. 
            Two enumerators instantiated from the same collection at the same time can have 
            different snapshots of the collection.
            </para></remarks></member><member name="M:ActiproSoftware.SyntaxEditor.DocumentLineLineIndicatorCollection.IndexOf(ActiproSoftware.SyntaxEditor.LineIndicator)"><summary>
            Returns the index of the specified <see cref="T:ActiproSoftware.SyntaxEditor.LineIndicator" /> in the collection.
            </summary><param name="indicator">The <see cref="T:ActiproSoftware.SyntaxEditor.LineIndicator" /> to look for.</param><returns>
            If found, the index where the <see cref="T:ActiproSoftware.SyntaxEditor.LineIndicator" /> is in the collection; otherwise, <c>-1</c>. 
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.DocumentLineLineIndicatorCollection.IndexOf(System.String)"><summary>
            Finds the index of the <see cref="T:ActiproSoftware.SyntaxEditor.LineIndicator" /> with the specified name within the collection.
            </summary><param name="name">The name of the <see cref="T:ActiproSoftware.SyntaxEditor.LineIndicator" /> to look for.</param><returns>The index of the <see cref="T:ActiproSoftware.SyntaxEditor.LineIndicator" /> with the specified name within the collection.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.DocumentLineLineIndicatorCollection.Remove(ActiproSoftware.SyntaxEditor.LineIndicator)"><summary>
            Removes the specified <see cref="T:ActiproSoftware.SyntaxEditor.LineIndicator" /> from the collection. 
            </summary><param name="indicator">The <see cref="T:ActiproSoftware.SyntaxEditor.LineIndicator" /> to remove.</param></member><member name="M:ActiproSoftware.SyntaxEditor.DocumentLineLineIndicatorCollection.RemoveAt(System.Int32)"><summary>
            Removes the <see cref="T:ActiproSoftware.SyntaxEditor.LineIndicator" /> at the specified index from the collection. 
            </summary><param name="index">The index of the <see cref="T:ActiproSoftware.SyntaxEditor.LineIndicator" /> to remove.</param></member><member name="P:ActiproSoftware.SyntaxEditor.DocumentLineLineIndicatorCollection.Count"><summary>
            Gets the number of <see cref="T:ActiproSoftware.SyntaxEditor.LineIndicator" /> objects in the collection.
            </summary><value>The number of <see cref="T:ActiproSoftware.SyntaxEditor.LineIndicator" /> objects in the collection.</value></member><member name="P:ActiproSoftware.SyntaxEditor.DocumentLineLineIndicatorCollection.Item(System.Int32)"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.LineIndicator" /> at the specified index. 
            <para>
            [C#] In C#, this property is the indexer for the <c>LineIndicatorCollection</c> class. 
            </para></summary><param name="index">The index of the <see cref="T:ActiproSoftware.SyntaxEditor.LineIndicator" /> to return.</param><value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.LineIndicator" /> at the specified index. 
            </value></member><member name="T:ActiproSoftware.SyntaxEditor.DocumentLineIndicatorCollection"><summary>
            Represents collection of <see cref="T:ActiproSoftware.SyntaxEditor.LineIndicator" /> objects within a <see cref="T:ActiproSoftware.SyntaxEditor.Document" />.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.DocumentLineIndicatorCollection.Add(ActiproSoftware.SyntaxEditor.LineIndicator,System.Int32)"><summary>
            Adds a <see cref="T:ActiproSoftware.SyntaxEditor.LineIndicator" /> to the collection.
            </summary><param name="indicator">The <see cref="T:ActiproSoftware.SyntaxEditor.LineIndicator" /> to add.</param><param name="documentLineIndex">The index of the document line at which to add the indicator.</param><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.LineIndicator" /> that was added.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.DocumentLineIndicatorCollection.Clear"><summary>
            Removes all <see cref="T:ActiproSoftware.SyntaxEditor.LineIndicator" /> objects from the collection. 
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.DocumentLineIndicatorCollection.Clear(System.String)"><summary>
            Removes all <see cref="T:ActiproSoftware.SyntaxEditor.LineIndicator" /> objects with the specified <see cref="P:ActiproSoftware.SyntaxEditor.Indicator.Name" /> from the collection. 
            </summary><param name="name">The name of the type of indicators to remove.</param></member><member name="M:ActiproSoftware.SyntaxEditor.DocumentLineIndicatorCollection.Contains(ActiproSoftware.SyntaxEditor.LineIndicator)"><summary>
            Returns whether the collection contains the specified <see cref="T:ActiproSoftware.SyntaxEditor.LineIndicator" />.
            </summary><param name="indicator">The <see cref="T:ActiproSoftware.SyntaxEditor.LineIndicator" /> to look for.</param><returns><c>true</c> if the collection contains the specified <see cref="T:ActiproSoftware.SyntaxEditor.LineIndicator" />; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.DocumentLineIndicatorCollection.Contains(System.String)"><summary>
            Returns whether the collection contains a <see cref="T:ActiproSoftware.SyntaxEditor.LineIndicator" /> with the specified name.
            </summary><param name="name">The name of the <see cref="T:ActiproSoftware.SyntaxEditor.LineIndicator" /> to look for.</param><returns><c>true</c> if the collection contains a <see cref="T:ActiproSoftware.SyntaxEditor.LineIndicator" /> with the specified name; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.DocumentLineIndicatorCollection.CopyTo(System.Array,System.Int32)"><summary>
            Copies the elements of the collection to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index. 
            </summary><param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from the collection. The <see cref="T:System.Array" /> must have zero-based indexing.</param><param name="index">The zero-based index in array at which copying begins.</param></member><member name="M:ActiproSoftware.SyntaxEditor.DocumentLineIndicatorCollection.GetEnumerator"><summary>
            Retrieves an <c>IEnumerator</c> object for the entire collection.
            </summary><returns>An <c>IEnumerator</c> object for the entire collection</returns><remarks>
            Enumerators are intended to be used only to read data in the collection. 
            Enumerators cannot be used to modify the underlying collection.
            <para>
            The enumerator does not have exclusive access to the collection.
            </para><para>
            When an enumerator is instantiated, it takes a snapshot of the current state of the collection. 
            If changes are made to the collection, such as adding, modifying or deleting elements, the 
            snapshot gets out of sync and the enumerator throws an <c>InvalidOperationException</c>. 
            Two enumerators instantiated from the same collection at the same time can have 
            different snapshots of the collection.
            </para></remarks></member><member name="M:ActiproSoftware.SyntaxEditor.DocumentLineIndicatorCollection.GetIndicatorsForDocumentLine(System.Int32)"><summary>
            Returns an array of all the <see cref="T:ActiproSoftware.SyntaxEditor.LineIndicator" /> objects that are on the specified document line index.
            </summary><param name="documentLineIndex">The document line index to examine.</param><returns>An array of all the <see cref="T:ActiproSoftware.SyntaxEditor.LineIndicator" /> objects that are on the specified document line index.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.DocumentLineIndicatorCollection.IndexOf(ActiproSoftware.SyntaxEditor.LineIndicator)"><summary>
            Returns the index of the specified <see cref="T:ActiproSoftware.SyntaxEditor.LineIndicator" /> in the collection.
            </summary><param name="indicator">The <see cref="T:ActiproSoftware.SyntaxEditor.LineIndicator" /> to look for.</param><returns>
            If found, the index where the <see cref="T:ActiproSoftware.SyntaxEditor.LineIndicator" /> is in the collection; otherwise, <c>-1</c>. 
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.DocumentLineIndicatorCollection.IndexOf(System.String)"><summary>
            Finds the index of the <see cref="T:ActiproSoftware.SyntaxEditor.LineIndicator" /> with the specified name within the collection.
            </summary><param name="name">The name of the <see cref="T:ActiproSoftware.SyntaxEditor.LineIndicator" /> to look for.</param><returns>The index of the <see cref="T:ActiproSoftware.SyntaxEditor.LineIndicator" /> with the specified name within the collection.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.DocumentLineIndicatorCollection.Remove(ActiproSoftware.SyntaxEditor.LineIndicator)"><summary>
            Removes the specified <see cref="T:ActiproSoftware.SyntaxEditor.LineIndicator" /> from the collection. 
            </summary><param name="indicator">The <see cref="T:ActiproSoftware.SyntaxEditor.LineIndicator" /> to remove.</param></member><member name="M:ActiproSoftware.SyntaxEditor.DocumentLineIndicatorCollection.RemoveAt(System.Int32)"><summary>
            Removes the <see cref="T:ActiproSoftware.SyntaxEditor.LineIndicator" /> at the specified index from the collection. 
            </summary><param name="index">The index of the <see cref="T:ActiproSoftware.SyntaxEditor.LineIndicator" /> to remove.</param></member><member name="P:ActiproSoftware.SyntaxEditor.DocumentLineIndicatorCollection.Count"><summary>
            Gets the number of <see cref="T:ActiproSoftware.SyntaxEditor.LineIndicator" /> objects in the collection.
            </summary><value>The number of <see cref="T:ActiproSoftware.SyntaxEditor.LineIndicator" /> objects in the collection.</value></member><member name="P:ActiproSoftware.SyntaxEditor.DocumentLineIndicatorCollection.Item(System.Int32)"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.LineIndicator" /> at the specified index. 
            <para>
            [C#] In C#, this property is the indexer for the <c>LineIndicatorCollection</c> class. 
            </para></summary><param name="index">The index of the <see cref="T:ActiproSoftware.SyntaxEditor.LineIndicator" /> to return.</param><value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.LineIndicator" /> at the specified index. 
            </value></member><member name="T:ActiproSoftware.SyntaxEditor.IndicatorEventArgs"><summary>
            Provides data for events dealing with <see cref="P:ActiproSoftware.SyntaxEditor.IndicatorEventArgs.Indicator" /> objects.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.IndicatorEventArgs.ToString"><summary>
            Creates and returns a string representation of the current object.
            </summary><returns>A string representation of the current object.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.IndicatorEventArgs.#ctor(ActiproSoftware.SyntaxEditor.Indicator)"><summary>
            Initializes a new instance of the <c>IndicatorEventArgs</c> class. 
            </summary><param name="indicator">The <see cref="T:ActiproSoftware.SyntaxEditor.Indicator" /> affected by this event.</param></member><member name="P:ActiproSoftware.SyntaxEditor.IndicatorEventArgs.Indicator"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Indicator" /> affected by this event.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.Indicator" /> affected by this event.</value></member><member name="T:ActiproSoftware.SyntaxEditor.IndicatorEventHandler"><summary>
            Represents the method that will handle events for <see cref="T:ActiproSoftware.SyntaxEditor.Indicator" /> objects.
            </summary><param name="sender">Sender of the event.</param><param name="e">A <see cref="T:ActiproSoftware.SyntaxEditor.IndicatorEventArgs" /> containing event data.</param><remarks>
            When you create a <c>IndicatorEventHandler</c> delegate, you identify the method that will handle the event. 
            To associate the event with your event handler, add an instance of the delegate to the event. 
            The event handler is called whenever the event occurs, unless you remove the delegate.
            </remarks></member><member name="T:ActiproSoftware.SyntaxEditor.IntelliPrompt"><summary>
            Provides access to the IntelliPrompt features of <see cref="P:ActiproSoftware.SyntaxEditor.IntelliPrompt.SyntaxEditor" />.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.IntelliPrompt.Dispose(System.Boolean)"><summary>
            Releases the unmanaged resources used by the object and optionally releases the managed resources.
            </summary><param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources. 
            </param><remarks>
            This method is called by the public <c>Dispose</c> method and the <c>Finalize</c> method. 
            <c>Dispose</c> invokes this method with the <paramref name="disposing" /> parameter set to <c>true</c>. 
            <c>Finalize</c> invokes this method with <paramref name="disposing" /> set to <c>false</c>.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.IntelliPrompt.EscapeMarkupText(System.String)"><summary>
            Escapes the specified text to remove all special meaning from XML characters.
            </summary><param name="text">The text to escape.</param><returns>The specified text to remove all special meaning from XML characters.</returns><remarks>
            Use this method to escape text for the quick info, parameter info, or member list item descriptions in situations
            where the text may contain XML control characters (such as <c>&lt;</c>) and no special formatting is needed.
            In addition, <c>\n</c> (line feed) characters are converted to <c>&lt;br /&gt;&gt;</c> tags.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.IntelliPrompt.CodeSnippets"><summary>
            Gets the object that provides access to all IntelliPrompt code snippet features.
            </summary><value>
            A <see cref="T:ActiproSoftware.SyntaxEditor.IntelliPromptCodeSnippets" /> that provides access to all IntelliPrompt code snippet features.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.IntelliPrompt.DropShadowEnabled"><summary>
            Gets or sets whether drop shadows are enabled on IntelliPrompt popups.
            </summary><value><c>true</c> if drop shadows are enabled on IntelliPrompt popups; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.IntelliPrompt.MemberList"><summary>
            Gets the object that provides access to all IntelliPrompt member list features.
            </summary><value>
            A <see cref="T:ActiproSoftware.SyntaxEditor.IntelliPromptMemberList" /> that provides access to all IntelliPrompt member list features.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.IntelliPrompt.ParameterInfo"><summary>
            Gets the object that provides access to all IntelliPrompt parameter info tooltip features.
            </summary><value>
            A <see cref="T:ActiproSoftware.SyntaxEditor.IntelliPromptParameterInfo" /> that provides access to all IntelliPrompt parameter info tooltip features.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.IntelliPrompt.QuickInfo"><summary>
            Gets the object that provides access to all IntelliPrompt quick info tooltip features.
            </summary><value>
            A <see cref="T:ActiproSoftware.SyntaxEditor.IntelliPromptQuickInfo" /> that provides access to all IntelliPrompt quick info tooltip features.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.IntelliPrompt.SmartTag"><summary>
            Gets the object that provides access to all IntelliPrompt smart tag tooltip features.
            </summary><value>
            A <see cref="T:ActiproSoftware.SyntaxEditor.IntelliPromptSmartTag" /> that provides access to all IntelliPrompt smart tag tooltip features.
            </value></member><member name="T:ActiproSoftware.SyntaxEditor.ILexicalParseTarget"><summary>
            Provides the base requirements for an object that should receive parse output from a lexical parser.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.ILexicalParseTarget.OnPostParse"><summary>
            Occurs after lexical parsing ends.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.ILexicalParseTarget.OnPreParse(System.Int32)"><summary>
            Occurs before lexical parsing starts.
            </summary><param name="startOffset">The offset at which parsing will commence.</param></member><member name="M:ActiproSoftware.SyntaxEditor.ILexicalParseTarget.OnTokenParsed(ActiproSoftware.SyntaxEditor.IToken,System.Int32)"><summary>
            Occurs when an <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> is parsed by the lexical parser.
            </summary><param name="newToken">The <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that was parsed.</param><param name="length">The length of the token.</param><remarks><c>true</c> if the lexical parsing should continue; otherwise, <c>false</c>.
            </remarks></member><member name="T:ActiproSoftware.SyntaxEditor.SyntaxLanguageEventArgs"><summary>
            Provides data for an event related to a <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" />.
            </summary><seealso cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguageEventHandler" /></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguageEventArgs.ToString"><summary>
            Creates and returns a string representation of the current object.
            </summary><returns>A string representation of the current object.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguageEventArgs.#ctor(ActiproSoftware.SyntaxEditor.SyntaxLanguage)"><summary>
            Initializes a new instance of the <c>SyntaxLanguageEventArgs</c> class. 
            </summary><param name="language">The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> that is affected by this event.</param></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxLanguageEventArgs.Language"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> that is affected by this event.
            </summary><value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> that is affected by this event.
            </value></member><member name="T:ActiproSoftware.SyntaxEditor.SyntaxLanguageEventHandler"><summary>
            Represents the method that will handle the events related to a <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" />.
            </summary><param name="sender">Sender of the event.</param><param name="e">A <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguageEventArgs" /> containing event data.</param><remarks>
            When you create a <c>SyntaxLanguageEventHandler</c> delegate, you identify the method that will handle the event. 
            To associate the event with your event handler, add an instance of the delegate to the event. 
            The event handler is called whenever the event occurs, unless you remove the delegate.
            </remarks><seealso cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguageEventArgs" /></member><member name="T:ActiproSoftware.SyntaxEditor.CharClass"><summary>
            Stores information about a character class.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.CharClass.Add(System.Char)"><summary>
            Adds a single character to the character class.
            </summary><param name="ch">The character to add.</param></member><member name="M:ActiproSoftware.SyntaxEditor.CharClass.Add(System.Char,System.Char)"><summary>
            Adds an interval of characters to the character class.
            </summary><param name="start">The start character in the interval.</param><param name="end">The end character in the interval.</param></member><member name="M:ActiproSoftware.SyntaxEditor.CharClass.Add(ActiproSoftware.SyntaxEditor.CharInterval)"><summary>
            Adds an interval of characters to the character class.
            </summary><param name="interval">The interval of characters to add.</param></member><member name="M:ActiproSoftware.SyntaxEditor.CharClass.AddRange(ActiproSoftware.SyntaxEditor.CharInterval[])"><summary>
            Adds the contents of a <see cref="T:ActiproSoftware.SyntaxEditor.CharInterval" /> array to the collection.
            </summary><param name="intervals">The <see cref="T:ActiproSoftware.SyntaxEditor.CharInterval" /> array whose values are to be added.</param></member><member name="M:ActiproSoftware.SyntaxEditor.CharClass.AddRange(ActiproSoftware.SyntaxEditor.CharClass)"><summary>
            Adds the contents of a <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> to the collection.
            </summary><param name="charClass">The <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> whose values are to be added.</param></member><member name="M:ActiproSoftware.SyntaxEditor.CharClass.Contains(System.Char)"><summary>
            Returns whether the specified character is in the character class.
            </summary><param name="ch">The character to look for in the collection.</param><returns><c>true</c> if the character is in the collection; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.CharClass.Contains(System.Char,System.Char)"><summary>
            Returns whether the specified interval of characters is in the character class.
            </summary><param name="start">The start character in the interval.</param><param name="end">The end character in the interval.</param><returns><c>true</c> if the interval of characters is in the collection; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.CharClass.Contains(ActiproSoftware.SyntaxEditor.CharInterval)"><summary>
            Returns whether the specified interval is in the character class.
            </summary><param name="interval">The <see cref="T:ActiproSoftware.SyntaxEditor.CharInterval" /> to look for in the collection.</param><returns><c>true</c> if the interval is in the collection; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.CharClass.Contains(ActiproSoftware.SyntaxEditor.CharClass)"><summary>
            Returns whether the specified character class is in the character class.
            </summary><param name="charClass">The <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> to look for in the collection.</param><returns><c>true</c> if the character class is in the collection; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.CharClass.CopyTo(System.Array,System.Int32)"><summary>
            Copies the entire collection to a compatible one-dimensional <c>Array</c>, 
            starting at the specified index of the target array.
            </summary><param name="array">
            The one-dimensional <c>Array</c> that is the destination of the elements copied from the collection. 
            The <c>Array</c> must have zero-based indexing. 
            </param><param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param></member><member name="M:ActiproSoftware.SyntaxEditor.CharClass.Equals(System.Object)"><summary>
            Determines whether the specified <c>Object</c> is equal to the current <c>Object</c>. 
            </summary><param name="obj">The <c>Object</c> to compare to the current <c>Object</c>.</param><returns><c>true</c> if the specified <c>Object</c> is equal to the current <c>Object</c>; 
            otherwise, <c>false</c>. 
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.CharClass.GetEnumerator"><summary>
            Retrieves an <c>IEnumerator</c> object for the entire collection.
            </summary><returns>An <c>IEnumerator</c> object for the entire collection</returns><remarks>
            Enumerators are intended to be used only to read data in the collection. 
            Enumerators cannot be used to modify the underlying collection.
            <para>
            The enumerator does not have exclusive access to the collection.
            </para><para>
            When an enumerator is instantiated, it takes a snapshot of the current state of the collection. 
            If changes are made to the collection, such as adding, modifying or deleting elements, the 
            snapshot gets out of sync and the enumerator throws an <c>InvalidOperationException</c>. 
            Two enumerators instantiated from the same collection at the same time can have 
            different snapshots of the collection.
            </para></remarks></member><member name="M:ActiproSoftware.SyntaxEditor.CharClass.GetHashCode"><summary>
            Returns a hash code for this object.
            </summary><returns>An integer value that specifies a hash value for this object.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.CharClass.GetNegation"><summary>
            Creates the negation of the character class.
            </summary><remarks>
            The negation is the opposite of the character class, specified by a <c>^</c> character after the open square brace.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.CharClass.Remove(System.Char)"><summary>
            Removes the specified character from the character class.
            </summary><param name="ch">The character to remove.</param></member><member name="M:ActiproSoftware.SyntaxEditor.CharClass.ToString"><summary>
            Converts the object to a <c>String</c>.
            </summary><returns>
            A string whose value represents this object.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.CharClass.#ctor"><summary>
            Initializes a new instance of the <c>CharClass</c> class.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.CharClass.#ctor(System.Char)"><summary>
            Initializes a new instance of the <c>CharClass</c> class with a character.
            </summary><param name="ch">A character to add to the character class.</param></member><member name="M:ActiproSoftware.SyntaxEditor.CharClass.#ctor(ActiproSoftware.SyntaxEditor.CharInterval[])"><summary>
            Initializes a new instance of the <c>CharClass</c> class with an array of <see cref="T:ActiproSoftware.SyntaxEditor.CharInterval" /> objects.
            </summary><param name="intervals">The array of <see cref="T:ActiproSoftware.SyntaxEditor.CharInterval" /> objects that should be added.</param></member><member name="M:ActiproSoftware.SyntaxEditor.CharClass.#ctor(ActiproSoftware.SyntaxEditor.CharClass)"><summary>
            Initializes a new instance of the <c>CharClass</c> class with another <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" />.
            </summary><param name="charClass">The <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> whose items should be added.</param></member><member name="M:ActiproSoftware.SyntaxEditor.CharClass.#ctor(System.Char,System.Char)"><summary>
            Initializes a new instance of the <c>CharClass</c> class with an interval of characters.
            </summary><param name="start">The start character in the interval.</param><param name="end">The end character in the interval.</param></member><member name="M:ActiproSoftware.SyntaxEditor.CharClass.#ctor(System.Char,System.Boolean)"><summary>
            Initializes a new instance of the <c>CharClass</c> class with a character and an optional complement.
            </summary><param name="ch">A character to add to the character class.</param><param name="complement">Whether to complement the character class after adding the initial character.</param></member><member name="M:ActiproSoftware.SyntaxEditor.CharClass.#ctor(System.Char,System.Char,System.Boolean)"><summary>
            Initializes a new instance of the <c>CharClass</c> class with an interval of characters and an optional complement.
            </summary><param name="start">The start character in the interval.</param><param name="end">The end character in the interval.</param><param name="complement">Whether to complement the character class after adding the initial character.</param></member><member name="P:ActiproSoftware.SyntaxEditor.CharClass.All"><summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> that contains all Unicode characters.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> that contains all Unicode characters.</value></member><member name="P:ActiproSoftware.SyntaxEditor.CharClass.Alpha"><summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> that contains all alphabetic characters.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> that contains all alphabetic characters.</value><remarks>This character class is the equivalent of [A-Za-z\u00AA\u00B5\u00BA\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u00FF].</remarks></member><member name="P:ActiproSoftware.SyntaxEditor.CharClass.Digit"><summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> that contains all Unicode decimal digits.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> that contains all Unicode decimal digits.</value><remarks>This character class can be abbreviated by: \d</remarks></member><member name="P:ActiproSoftware.SyntaxEditor.CharClass.HexDigit"><summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> that contains all Unicode hexidecimal digits.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> that contains all Unicode hexidecimal digits.</value></member><member name="P:ActiproSoftware.SyntaxEditor.CharClass.LineTerminator"><summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> that contains all Unicode line terminators.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> that contains all Unicode line terminators.</value></member><member name="P:ActiproSoftware.SyntaxEditor.CharClass.LineTerminatorWhitespace"><summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> that contains all Unicode line terminators and whitespace characters.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> that contains all Unicode line terminators and whitespace characters.</value><remarks>This character class is the equivalent of [\f\n\r\t\v\x85\p{Z}] can be abbreviated by: \s</remarks></member><member name="P:ActiproSoftware.SyntaxEditor.CharClass.NonAlpha"><summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> that contains no alphabetic digits.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> that contains no alphabetic digits.</value><remarks>This character class is the equivalent of [^A-Za-z\u00AA\u00B5\u00BA\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u00FF].</remarks></member><member name="P:ActiproSoftware.SyntaxEditor.CharClass.NonDigit"><summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> that contains no Unicode decimal digits.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> that contains no Unicode decimal digits.</value><remarks>This character class can be abbreviated by: \D</remarks></member><member name="P:ActiproSoftware.SyntaxEditor.CharClass.None"><summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> that contains no characters.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> that contains no characters.</value></member><member name="P:ActiproSoftware.SyntaxEditor.CharClass.NonHexDigit"><summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> that contains no Unicode hexidecimal digits.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> that contains no Unicode hexidecimal digits.</value><remarks>This character class can be abbreviated by: \D</remarks></member><member name="P:ActiproSoftware.SyntaxEditor.CharClass.NonLineTerminator"><summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> that contains no Unicode line terminators.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> that contains no Unicode line terminators.</value></member><member name="P:ActiproSoftware.SyntaxEditor.CharClass.NonLineTerminatorWhitespace"><summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> that contains no Unicode line terminators or whitespace characters.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> that contains no Unicode line terminators or whitespace characters.</value><remarks>This character class is the equivalent of [^\f\n\r\t\v\x85\p{Z}] can be abbreviated by: \S</remarks></member><member name="P:ActiproSoftware.SyntaxEditor.CharClass.NonWhitespace"><summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> that contains no Unicode whitespace characters.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> that contains no Unicode whitespace characters.</value></member><member name="P:ActiproSoftware.SyntaxEditor.CharClass.NonWord"><summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> that contains no word characters.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> that contains no word characters.</value><remarks>This character class can be abbreviated by: \W</remarks></member><member name="P:ActiproSoftware.SyntaxEditor.CharClass.Whitespace"><summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> that contains all Unicode whitespace characters.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> that contains all Unicode whitespace characters.</value></member><member name="P:ActiproSoftware.SyntaxEditor.CharClass.Word"><summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> that contains all word characters.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> that contains all word characters.</value><remarks>
            This character class consists of the union of the <see cref="P:ActiproSoftware.SyntaxEditor.CharClass.Alpha" /> and <see cref="P:ActiproSoftware.SyntaxEditor.CharClass.Digit" /> character
            classes along with the _ (underscore) character and can be abbreviated by: \w
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.CharClass.CharacterCount"><summary>
            Gets the number of characters contained in the <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> instance.
            </summary><value>The number of characters contained in the <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> instance.</value></member><member name="P:ActiproSoftware.SyntaxEditor.CharClass.Count"><summary>
            Gets the number of elements contained in the <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> instance.
            </summary><value>The number of elements contained in the <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> instance.</value></member><member name="P:ActiproSoftware.SyntaxEditor.CharClass.InnerList"><summary>
            Gets the list of elements contained in the <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> instance.
            </summary><value>
            An <see cref="T:System.Collections.ArrayList" /> representing the <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> instance itself.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.CharClass.IsSingleCharacter"><summary>
            Gets whether the character class only contains an interval for a single character.
            </summary><value><c>true</c> if the character class only contains an interval for a single character; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.CharClass.IsSynchronized"><summary>
            Gets a value indicating whether access to the collection is synchronized (thread-safe).
            </summary><value><c>true</c> if the collection is synchronized (thread-safe); otherwise, <c>false</c>.
            </value><remarks>
            To guarantee the thread safety of the collection, all operations must be done through 
            the wrapper returned by the <see cref="P:ActiproSoftware.SyntaxEditor.CharClass.SyncRoot" /> property.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.CharClass.SyncRoot"><summary>
            Gets an <c>Object</c> that can be used to synchronize access to the collection.
            </summary><value>
            An <c>Object</c> that can be used to synchronize access to the collection.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.CharClass.Item(System.Int32)"><summary>
            Gets the interval at the specified index. 
            <para>
            [C#] In C#, this property is the indexer for the <c>CharClass</c> class. 
            </para></summary><param name="index">The index of the interval to return.</param><value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.CharInterval" /> at the specified index. 
            </value></member><member name="T:ActiproSoftware.SyntaxEditor.CharInterval"><summary>
            Stores an interval of characters.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.CharInterval.Contains(System.Char)"><summary>
            Returns whether the specified character is contained by the interval.
            </summary><param name="ch">The character to test.</param><returns><c>true</c> if the specified character is contained by the interval; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.CharInterval.Contains(ActiproSoftware.SyntaxEditor.CharInterval)"><summary>
            Returns whether the specified character interval is contained by the interval.
            </summary><param name="interval">The character interval to test.</param><returns><c>true</c> if the specified character interval is contained by the interval; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.CharInterval.Equals(System.Object)"><summary>
            Determines whether the specified <c>Object</c> is equal to the current <c>Object</c>. 
            </summary><param name="obj">The <c>Object</c> to compare to the current <c>Object</c>.</param><returns><c>true</c> if the specified <c>Object</c> is equal to the current <c>Object</c>; 
            otherwise, <c>false</c>. 
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.CharInterval.GetHashCode"><summary>
            Returns a hash code for this object.
            </summary><returns>An integer value that specifies a hash value for this object.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.CharInterval.IntersectsWith(ActiproSoftware.SyntaxEditor.CharInterval)"><summary>
            Returns whether the specified character interval intersects with the interval.
            </summary><param name="interval">The character interval to test.</param><returns><c>true</c> if the specified character interval intersects with the interval; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.CharInterval.GetIntersection(ActiproSoftware.SyntaxEditor.CharInterval)"><summary>
            Creates the intersection of the interval with another <see cref="T:ActiproSoftware.SyntaxEditor.CharInterval" />.
            </summary><param name="interval">The <see cref="T:ActiproSoftware.SyntaxEditor.CharInterval" /> used to find the intersection.</param><returns>The intersection of the interval with another <see cref="T:ActiproSoftware.SyntaxEditor.CharInterval" />.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.CharInterval.ToString"><summary>
            Converts the object to a <c>String</c>.
            </summary><returns>
            A string whose value represents this object.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.CharInterval.#ctor(System.Char)"><summary>
            Initializes a new instance of the <see cref="T:ActiproSoftware.SyntaxEditor.CharInterval" /> class.
            </summary><param name="ch">The character in the interval.</param></member><member name="M:ActiproSoftware.SyntaxEditor.CharInterval.#ctor(System.Char,System.Char)"><summary>
            Initializes a new instance of the <see cref="T:ActiproSoftware.SyntaxEditor.CharInterval" /> class.
            </summary><param name="start">The start character in the interval.</param><param name="end">The end character in the interval.</param></member><member name="P:ActiproSoftware.SyntaxEditor.CharInterval.Count"><summary>
            Gets the number of characters contained in interval.
            </summary><value>The number of characters contained in interval.</value></member><member name="P:ActiproSoftware.SyntaxEditor.CharInterval.End"><summary>
            Gets or sets the end character in the interval of this <see cref="T:ActiproSoftware.SyntaxEditor.CharInterval" />.
            </summary><value>The end character in the interval of this <see cref="T:ActiproSoftware.SyntaxEditor.CharInterval" />.</value></member><member name="P:ActiproSoftware.SyntaxEditor.CharInterval.Start"><summary>
            Gets or sets the start character in the interval of this <see cref="T:ActiproSoftware.SyntaxEditor.CharInterval" />.
            </summary><value>The start character in the interval of this <see cref="T:ActiproSoftware.SyntaxEditor.CharInterval" />.</value></member><member name="T:ActiproSoftware.SyntaxEditor.SyntaxEditor"><summary>
            Represents a syntax-highlighting editor control.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.OnTokenMouseEnter(ActiproSoftware.SyntaxEditor.EditorViewMouseEventArgs)"><summary>
            Raises the <c>TokenMouseEnter</c> event.
            </summary><param name="e">An <c>EditorViewMouseEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.OnTokenMouseLeave(ActiproSoftware.SyntaxEditor.EditorViewMouseEventArgs)"><summary>
            Raises the <c>TokenMouseLeave</c> event.
            </summary><param name="e">An <c>EditorViewMouseEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.OnTriggerActivated(ActiproSoftware.SyntaxEditor.TriggerEventArgs)"><summary>
            Raises the <c>TriggerActivated</c> event.
            </summary><param name="e">A <c>TriggerEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.OnUserInterfaceUpdate(System.EventArgs)"><summary>
            Raises the <c>UserInterfaceUpdate</c> event.
            </summary><param name="e">An <c>EventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.OnUserMarginPaint(ActiproSoftware.SyntaxEditor.UserMarginPaintEventArgs)"><summary>
            Raises the <c>UserMarginPaint</c> event.
            </summary><param name="e">An <c>UserMarginPaintEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.OnViewBracketHighlightingUpdate(ActiproSoftware.SyntaxEditor.EditorViewBracketHighlightingEventArgs)"><summary>
            Raises the <c>ViewBracketHighlightingUpdate</c> event.
            </summary><param name="e">An <c>EditorViewBracketHighlightingEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.OnViewButtonLinkClicked(ActiproSoftware.SyntaxEditor.EditorViewButtonLinkEventArgs)"><summary>
            Raises the <c>ViewButtonLinkClicked</c> event.
            </summary><param name="e">An <c>EditorViewButtonLinkEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.OnViewHorizontalScroll(ActiproSoftware.SyntaxEditor.EditorViewEventArgs)"><summary>
            Raises the <c>ViewHorizontalScroll</c> event.
            </summary><param name="e">An <c>EditorViewEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.OnViewMouseDown(ActiproSoftware.SyntaxEditor.EditorViewMouseEventArgs)"><summary>
            Raises the <c>ViewMouseDown</c> event.
            </summary><param name="e">An <c>EditorViewMouseEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.OnViewMouseHover(ActiproSoftware.SyntaxEditor.EditorViewMouseEventArgs)"><summary>
            Raises the <c>ViewMouseHover</c> event.
            </summary><param name="e">An <c>EditorViewMouseEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.OnViewSplitAdded(ActiproSoftware.SyntaxEditor.SyntaxEditorSplitEventArgs)"><summary>
            Occurs after an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> split is added.
            </summary><param name="e">An <c>SyntaxEditorSplitEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.OnViewSplitMoved(ActiproSoftware.SyntaxEditor.SyntaxEditorSplitEventArgs)"><summary>
            Occurs after an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> split is moved.
            </summary><param name="e">An <c>SyntaxEditorSplitEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.OnViewSplitRemoved(ActiproSoftware.SyntaxEditor.SyntaxEditorSplitEventArgs)"><summary>
            Occurs after an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> split is removed.
            </summary><param name="e">An <c>SyntaxEditorSplitEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.OnViewVerticalScroll(ActiproSoftware.SyntaxEditor.EditorViewEventArgs)"><summary>
            Raises the <c>ViewVerticalScroll</c> event.
            </summary><param name="e">An <c>EditorViewEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.OnVisibleChanged(System.EventArgs)"><summary>
            Occurs when the <c>Visible</c> property of the control is changed.
            </summary><param name="e">An <c>EventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.OnWordWrapChanged(System.EventArgs)"><summary>
            Raises the <c>WordWrapChanged</c> event.
            </summary><param name="e">An <c>EventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.RaiseCommand(ActiproSoftware.WinUICore.Commands.Command)"><summary>
            Raises the specified <see cref="T:ActiproSoftware.WinUICore.Commands.Command" />.
            </summary><param name="command">The <see cref="T:ActiproSoftware.WinUICore.Commands.Command" /> to raise.</param><returns><c>true</c> if the <see cref="T:ActiproSoftware.WinUICore.Commands.Command" /> was handled; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.RefreshOutlining"><summary>
            Refreshes the outlining state of all display lines within the views and repaints the control.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.RefreshOutlining(ActiproSoftware.SyntaxEditor.TextRange)"><summary>
            Refreshes the outlining state of each display line within a <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> and repaints the control.
            </summary><param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> to refresh.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.ShouldSerializeScrollBarBottomButtons"><summary>
            Indicates whether the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.ScrollBarBottomButtons" /> property should be persisted.
            </summary><returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.ShouldSerializeScrollBarLeftButtons"><summary>
            Indicates whether the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.ScrollBarLeftButtons" /> property should be persisted.
            </summary><returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.ShouldSerializeScrollBarRightButtons"><summary>
            Indicates whether the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.ScrollBarRightButtons" /> property should be persisted.
            </summary><returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.ShouldSerializeScrollBarTopButtons"><summary>
            Indicates whether the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.ScrollBarTopButtons" /> property should be persisted.
            </summary><returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.ShowAboutForm"><summary>
            Displays the <c>About</c> form for the component.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.ShowGoToLineForm(System.Windows.Forms.IWin32Window)"><summary>
            Displays the built-in <c>Go To Line</c> dialog.
            </summary><param name="owner">The owner of the <c>Form</c>.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.ShowPageSetupForm(System.Windows.Forms.IWin32Window)"><summary>
            Displays the built-in <c>Page Setup</c> dialog.
            </summary><param name="owner">The owner of the <c>Form</c>.</param><returns>The <see cref="T:System.Windows.Forms.DialogResult" /> of the dialog.</returns><remarks>
            In the .NET 2.0 and later version of the assembly, the <c>PageSetupDialog.EnabledMetric</c> option is set to <c>true</c>.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.ResetUserMarginFont"><summary>
            Resets the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.UserMarginFont" /> property to its default value.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.ShouldSerializeUserMarginFont"><summary>
            Indicates whether the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.UserMarginFont" /> property should be persisted.
            </summary><returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.ResetViews"><summary>
            Resets the splits and creates an initial view.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.WndProc(System.Windows.Forms.Message@)"><summary>
            Occurs when a message is sent to the control.
            </summary><param name="m">Information about the message.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.ResetFont"><summary>
            Resets the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.Font" /> property to its default value.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.ShouldSerializeFont"><summary>
            Indicates whether the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.Font" /> property should be persisted.
            </summary><returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.GetCursor(System.Drawing.Point)"><summary>
            Gets the <see cref="T:System.Windows.Forms.Cursor" /> that should be used when the mouse is over the element at the specified <see cref="T:System.Drawing.Point" />.
            </summary><param name="point">The <see cref="T:System.Drawing.Point" /> to examine.</param><returns>The <see cref="T:System.Windows.Forms.Cursor" /> that should be used when the mouse is over the element at the specified <see cref="T:System.Drawing.Point" />.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.GetDefaultContextMenu"><summary>
            Gets a <see cref="T:System.Windows.Forms.ContextMenu" /> specifying the default context menu.
            </summary><returns>A <see cref="T:System.Windows.Forms.ContextMenu" /> specifying the default context menu.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.HitTest(System.Drawing.Point)"><summary>
            Hit-tests the control and returns detailed information about what is at the specified client coordinate <see cref="T:System.Drawing.Point" />.
            </summary><param name="point">The client coordinate <see cref="T:System.Drawing.Point" /> to hit-test.</param><returns>A <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditorHitTestResult" /> that contains information about what is at the specified client coordinate.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.IsInputChar(System.Char)"><summary>
            Determines if a character is an input character that the control recognizes.
            </summary><param name="charCode">The character to test.</param><returns><c>true</c> if the character should be sent directly to the control and not preprocessed; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.IsInputKey(System.Windows.Forms.Keys)"><summary>
            Determines whether the specified key is a regular input key or a special key that requires preprocessing.
            </summary><param name="keyData">One of the <see cref="T:System.Windows.Forms.Keys" /> values.</param><returns><c>true</c> if the specified key is a regular input key; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.IsSelectionModeEnabled(ActiproSoftware.SyntaxEditor.SelectionModes)"><summary>
            Gets whether the specified <see cref="T:ActiproSoftware.SyntaxEditor.SelectionModes" /> value is enabled.
            </summary><param name="mode">A <see cref="T:ActiproSoftware.SyntaxEditor.SelectionModes" /> indicating the value to check.</param><returns><c>true</c> if the specified <see cref="T:ActiproSoftware.SyntaxEditor.SelectionModes" /> value is enabled; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.ResetLineNumberMarginFont"><summary>
            Resets the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.LineNumberMarginFont" /> property to its default value.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.ShouldSerializeLineNumberMarginFont"><summary>
            Indicates whether the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.LineNumberMarginFont" /> property should be persisted.
            </summary><returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.OnAutoReplacePerformed(ActiproSoftware.SyntaxEditor.AutoReplaceEventArgs)"><summary>
            Raises the <c>AutoReplacePerformed</c> event.
            </summary><param name="e">An <c>AutoReplaceEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.OnAutoReplacePerforming(ActiproSoftware.SyntaxEditor.AutoReplaceEventArgs)"><summary>
            Raises the <c>AutoReplacePerforming</c> event.
            </summary><param name="e">An <c>AutoReplaceEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.OnCodeSnippetActivating(ActiproSoftware.SyntaxEditor.CodeSnippetEventArgs)"><summary>
            Raises the <c>CodeSnippetActivating</c> event.
            </summary><param name="e">A <c>CodeSnippetEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.OnCodeSnippetDeactivated(ActiproSoftware.SyntaxEditor.CodeSnippetEventArgs)"><summary>
            Raises the <c>CodeSnippetDeactivated</c> event.
            </summary><param name="e">A <c>CodeSnippetEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.OnCodeSnippetFieldActivated(ActiproSoftware.SyntaxEditor.CodeSnippetFieldEventArgs)"><summary>
            Raises the <c>CodeSnippetFieldActivated</c> event.
            </summary><param name="e">A <c>CodeSnippetFieldEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.OnCodeSnippetFieldDeactivating(ActiproSoftware.SyntaxEditor.CodeSnippetFieldEventArgs)"><summary>
            Raises the <c>CodeSnippetFieldDeactivating</c> event.
            </summary><param name="e">A <c>CodeSnippetFieldEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.OnCodeSnippetFieldModified(ActiproSoftware.SyntaxEditor.CodeSnippetFieldEventArgs)"><summary>
            Raises the <c>CodeSnippetFieldModified</c> event.
            </summary><param name="e">A <c>CodeSnippetFieldEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.OnContextMenuRequested(ActiproSoftware.SyntaxEditor.ContextMenuRequestEventArgs)"><summary>
            Raises the <c>ContextMenuRequested</c> event.
            </summary><param name="e">An <c>ContextMenuRequestEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.OnCutCopyDrag(ActiproSoftware.SyntaxEditor.CutCopyDragEventArgs)"><summary>
            Raises the <c>CutCopyDrag</c> event.
            </summary><param name="e">An <c>CutCopyDragEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.OnDocumentAutomaticOutliningComplete(ActiproSoftware.SyntaxEditor.DocumentModificationEventArgs)"><summary>
            Raises the <c>DocumentAutomaticOutliningComplete</c> event.
            </summary><param name="e">An <c>DocumentModificationEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.OnDocumentChanged(System.EventArgs)"><summary>
            Raises the <c>DocumentChanged</c> event.
            </summary><param name="e">An <c>EventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.OnDocumentIndicatorAdded(ActiproSoftware.SyntaxEditor.IndicatorEventArgs)"><summary>
            Raises the <c>DocumentIndicatorAdded</c> event.
            </summary><param name="e">An <c>IndicatorEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.OnDocumentIndicatorRemoved(ActiproSoftware.SyntaxEditor.IndicatorEventArgs)"><summary>
            Raises the <c>DocumentIndicatorRemoved</c> event.
            </summary><param name="e">An <c>IndicatorEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.OnDocumentIndicatorResized(ActiproSoftware.SyntaxEditor.IndicatorEventArgs)"><summary>
            Raises the <c>DocumentIndicatorResized</c> event.
            </summary><param name="e">An <c>IndicatorEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.OnDocumentModifiedChanged(System.EventArgs)"><summary>
            Raises the <c>DocumentModifiedChanged</c> event.
            </summary><param name="e">An <c>EventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.OnDocumentOutliningNodeExpandedChanged(ActiproSoftware.SyntaxEditor.OutliningNodeEventArgs)"><summary>
            Raises the <see cref="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.DocumentOutliningNodeExpandedChanged" /> event.
            </summary><param name="e">An <c>OutliningNodeEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.OnDocumentPreTextChanging(ActiproSoftware.SyntaxEditor.DocumentModificationEventArgs)"><summary>
            Raises the <see cref="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.DocumentPreTextChanging" /> event.
            </summary><param name="e">An <c>DocumentModificationEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.OnDocumentSemanticParseDataChanged(System.EventArgs)"><summary>
            Raises the <c>DocumentSemanticParseDataChanged</c> event.
            </summary><param name="e">An <c>EventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.OnDocumentSyntaxLanguageLoaded(ActiproSoftware.SyntaxEditor.SyntaxLanguageEventArgs)"><summary>
            Raises the <c>DocumentSyntaxLanguageLoaded</c> event.
            </summary><param name="e">A <c>SyntaxLanguageEventArgs</c> that contains the event data.</param><remarks>
            The <c>OnDocumentSyntaxLanguageLoaded</c> method also allows derived classes to handle the event without attaching a delegate. 
            This is the preferred technique for handling the event in a derived class.
            <para>
            When overriding <c>OnDocumentSyntaxLanguageLoaded</c> in a derived class, be sure to call the base class's 
            <c>OnDocumentSyntaxLanguageLoaded</c> method so that registered delegates receive the event.
            </para></remarks></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.OnDocumentSyntaxLanguageLoading(ActiproSoftware.SyntaxEditor.SyntaxLanguageEventArgs)"><summary>
            Raises the <c>DocumentSyntaxLanguageLoading</c> event.
            </summary><param name="e">A <c>SyntaxLanguageEventArgs</c> that contains the event data.</param><remarks>
            The <c>OnDocumentSyntaxLanguageLoading</c> method also allows derived classes to handle the event without attaching a delegate. 
            This is the preferred technique for handling the event in a derived class.
            <para>
            When overriding <c>OnDocumentSyntaxLanguageLoading</c> in a derived class, be sure to call the base class's 
            <c>OnSyntaxLanguageLoading</c> method so that registered delegates receive the event.
            </para></remarks></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.OnDocumentTextChanged(ActiproSoftware.SyntaxEditor.DocumentModificationEventArgs)"><summary>
            Raises the <see cref="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.DocumentTextChanged" /> event.
            </summary><param name="e">An <c>DocumentModificationEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.OnDocumentTextChanging(ActiproSoftware.SyntaxEditor.DocumentModificationEventArgs)"><summary>
            Raises the <see cref="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.DocumentTextChanging" /> event.
            </summary><param name="e">An <c>DocumentModificationEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.OnDocumentUndoRedoStateChanged(ActiproSoftware.SyntaxEditor.UndoRedoStateChangedEventArgs)"><summary>
            Raises the <c>DocumentUndoRedoStateChanged</c> event.
            </summary><param name="e">An <c>UndoRedoStateChangedEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.OnDoubleClick(System.EventArgs)"><summary>
            Raises the <c>DoubleClick</c> event.
            </summary><param name="e">An <c>EventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.OnDragDrop(System.Windows.Forms.DragEventArgs)"><summary>
            Raises the <c>DragDrop</c> event.
            </summary><param name="e">A <c>DragEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.OnDragEnter(System.Windows.Forms.DragEventArgs)"><summary>
            Raises the <c>DragEnter</c> event.
            </summary><param name="e">A <c>DragEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.OnDragLeave(System.EventArgs)"><summary>
            Raises the <c>DragLeave</c> event.
            </summary><param name="e">A <c>DragEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.OnDragOver(System.Windows.Forms.DragEventArgs)"><summary>
            Raises the <c>DragOver</c> event.
            </summary><param name="e">A <c>DragEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.OnFontChanged(System.EventArgs)"><summary>
            Raises the <c>FontChanged</c> event.
            </summary><param name="e">An <c>EventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.OnGotFocus(System.EventArgs)"><summary>
            Raises the <c>GotFocus</c> event.
            </summary><param name="e">An <c>EventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.OnIncrementalSearch(ActiproSoftware.SyntaxEditor.IncrementalSearchEventArgs)"><summary>
            Raises the <c>IncrementalSearch</c> event.
            </summary><param name="e">An <c>IncrementalSearchEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.OnIntelliPromptMemberListClosed(System.ComponentModel.CancelEventArgs)"><summary>
            Raises the <c>IntelliPromptMemberListClosed</c> event.
            </summary><param name="e">A <c>CancelEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.OnIntelliPromptMemberListClosing(System.ComponentModel.CancelEventArgs)"><summary>
            Raises the <c>IntelliPromptMemberListClosing</c> event.
            </summary><param name="e">A <c>CancelEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.OnIntelliPromptMemberListItemDescriptionRequested(System.EventArgs)"><summary>
            Raises the <c>IntelliPromptMemberListItemDescriptionRequested</c> event.
            </summary><param name="e">An <c>EventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.OnIntelliPromptMemberListSelectedItemChanged(System.EventArgs)"><summary>
            Raises the <c>IntelliPromptMemberListSelectedItemChanged</c> event.
            </summary><param name="e">An <c>EventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.OnIntelliPromptParameterInfoParameterIndexChanged(System.EventArgs)"><summary>
            Raises the <c>IntelliPromptParameterInfoParameterIndexChanged</c> event.
            </summary><param name="e">An <c>EventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.OnIntelliPromptParameterInfoSelectedIndexChanged(System.EventArgs)"><summary>
            Raises the <c>IntelliPromptParameterInfoSelectedIndexChanged</c> event.
            </summary><param name="e">An <c>EventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.OnIntelliPromptSmartTagClicked(System.EventArgs)"><summary>
            Raises the <c>IntelliPromptSmartTagClicked</c> event.
            </summary><param name="e">An <c>EventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.OnIntelliPromptTipImageRequested(ActiproSoftware.SyntaxEditor.IntelliPromptTipImageRequestedEventArgs)"><summary>
            Raises the <c>IntelliPromptTipImageRequested</c> event.
            </summary><param name="e">An <c>IntelliPromptTipImageRequestedEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.OnIntelliPromptTipLinkClick(ActiproSoftware.SyntaxEditor.IntelliPromptTipLinkClickEventArgs)"><summary>
            Raises the <c>IntelliPromptTipLinkClick</c> event.
            </summary><param name="e">An <c>IntelliPromptTipLinkClickEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.OnKeyDown(System.Windows.Forms.KeyEventArgs)"><summary>
            Raises the <c>KeyDown</c> event.
            </summary><param name="e">An <c>KeyEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)"><summary>
            Raises the <c>KeyPress</c> event.
            </summary><param name="e">An <c>KeyPressEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.OnKeyTyped(ActiproSoftware.SyntaxEditor.KeyTypedEventArgs)"><summary>
            Raises the <c>KeyTyped</c> event.
            </summary><param name="e">An <c>KeyTypedEventArgs</c> that contains the event data.</param><remarks>
            The <c>OnKeyTyped</c> method also allows derived classes to handle the event without attaching a delegate. 
            This is the preferred technique for handling the event in a derived class.
            <para>
            When overriding <c>OnKeyTyped</c> in a derived class, be sure to call the base class's 
            <c>OnKeyTyped</c> method so that registered delegates receive the event.
            </para></remarks></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.OnKeyTyping(ActiproSoftware.SyntaxEditor.KeyTypingEventArgs)"><summary>
            Raises the <c>KeyTyping</c> event.
            </summary><param name="e">An <c>KeyTypingEventArgs</c> that contains the event data.</param><remarks>
            The <c>OnKeyTyping</c> method also allows derived classes to handle the event without attaching a delegate. 
            This is the preferred technique for handling the event in a derived class.
            <para>
            When overriding <c>OnKeyTyping</c> in a derived class, be sure to call the base class's 
            <c>OnKeyTyping</c> method so that registered delegates receive the event.
            </para></remarks></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.OnLostFocus(System.EventArgs)"><summary>
            Raises the <c>LostFocus</c> event.
            </summary><param name="e">An <c>EventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.OnMacroRecordingStateChanged(System.EventArgs)"><summary>
            Raises the <c>MacroRecordingStateChanged</c> event.
            </summary><param name="e">An <c>EventArgs</c> that contains the event data.</param><remarks>
            The <c>OnMacroRecordingStateChanged</c> method also allows derived classes to handle the event without attaching a delegate. 
            This is the preferred technique for handling the event in a derived class.
            <para>
            When overriding <c>OnMacroRecordingStateChanged</c> in a derived class, be sure to call the base class's 
            <c>OnMacroRecordingStateChanged</c> method so that registered delegates receive the event.
            </para></remarks></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.OnMouseDown(System.Windows.Forms.MouseEventArgs)"><summary>
            Raises the <c>MouseDown</c> event.
            </summary><param name="e">An <c>MouseEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.OnMouseMove(System.Windows.Forms.MouseEventArgs)"><summary>
            Raises the <c>MouseMove</c> event.
            </summary><param name="e">A <c>MouseEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.OnMouseUp(System.Windows.Forms.MouseEventArgs)"><summary>
            Raises the <c>MouseUp</c> event.
            </summary><param name="e">A <c>MouseEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.OnMouseWheel(System.Windows.Forms.MouseEventArgs)"><summary>
            Raises the <c>MouseWheel</c> event.
            </summary><param name="e">A <c>MouseEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.OnOverwriteModeChanged(System.EventArgs)"><summary>
            Raises the <c>OverwriteModeChanged</c> event.
            </summary><param name="e">An <c>EventArgs</c> that contains the event data.</param><remarks>
            The <c>OnOverwriteModeChanged</c> method also allows derived classes to handle the event without attaching a delegate. 
            This is the preferred technique for handling the event in a derived class.
            <para>
            When overriding <c>OnOverwriteModeChanged</c> in a derived class, be sure to call the base class's 
            <c>OnOverwriteModeChanged</c> method so that registered delegates receive the event.
            </para></remarks></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.OnParentChanged(System.EventArgs)"><summary>
            Raises the <c>ParentChanged</c> event.
            </summary><param name="e">An <c>EventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.OnPasteDragDrop(ActiproSoftware.SyntaxEditor.PasteDragDropEventArgs)"><summary>
            Raises the <c>PasteDragDrop</c> event.
            </summary><param name="e">A <c>PasteDragDropEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.OnPrint(System.Windows.Forms.PaintEventArgs)"><summary>
            Renders the control's content.
            </summary><param name="e">A <c>PaintEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.OnRender(System.Windows.Forms.PaintEventArgs)"><summary>
            Renders the element.
            </summary><param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.OnResize(System.EventArgs)"><summary>
            Raises the <c>Resize</c> event.
            </summary><param name="e">An <c>EventArgs</c> that contains the event data.</param><remarks>
            The <c>OnResize</c> method also allows derived classes to handle the event without attaching a delegate. 
            This is the preferred technique for handling the event in a derived class.
            <para>
            When overriding <c>OnResize</c> in a derived class, be sure to call the base class's <c>OnResize</c> 
            method so that registered delegates receive the event.
            </para></remarks></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.OnSelectedViewChanged(System.EventArgs)"><summary>
            Raises the <c>SelectedViewChanged</c> event.
            </summary><param name="e">An <c>EventArgs</c> that contains the event data.</param><remarks>
            The <c>OnSelectedViewChanged</c> method also allows derived classes to handle the event without attaching a delegate. 
            This is the preferred technique for handling the event in a derived class.
            <para>
            When overriding <c>OnSelectedViewChanged</c> in a derived class, be sure to call the base class's 
            <c>OnSelectedViewChanged</c> method so that registered delegates receive the event.
            </para></remarks></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.OnSelectionChanged(ActiproSoftware.SyntaxEditor.SelectionEventArgs)"><summary>
            Raises the <c>SelectionChanged</c> event.
            </summary><param name="e">A <c>SelectionEventArgs</c> that contains the event data.</param><remarks>
            The <c>OnSelectionChanged</c> method also allows derived classes to handle the event without attaching a delegate. 
            This is the preferred technique for handling the event in a derived class.
            <para>
            When overriding <c>OnSelectionChanged</c> in a derived class, be sure to call the base class's 
            <c>OnSelectionChanged</c> method so that registered delegates receive the event.
            </para></remarks></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.OnSmartIndent(ActiproSoftware.SyntaxEditor.SmartIndentEventArgs)"><summary>
            Raises the <c>SmartIndent</c> event.
            </summary><param name="e">A <c>SmartIndentEventArgs</c> that contains the event data.</param><remarks>
            The <c>OnSmartIndent</c> method also allows derived classes to handle the event without attaching a delegate. 
            This is the preferred technique for handling the event in a derived class.
            <para>
            When overriding <c>OnSmartIndent</c> in a derived class, be sure to call the base class's 
            <c>OnSmartIndent</c> method so that registered delegates receive the event.
            </para></remarks></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.Print(System.Boolean)"><summary>
            Prints the current document to the printer.
            </summary><param name="showDialog">Whether to show the standard Print dialog before printing.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.Print(System.Boolean,System.Boolean)"><summary>
            Prints the current document to the printer.
            </summary><param name="showDialog">Whether to show the standard Print dialog before printing.</param><param name="useExtendedDialog">Whether to use the extended dialog.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.PrintPreview"><summary>
            Displays a print preview dialog for the document.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.ShouldSerializePrintSettings"><summary>
            Indicates whether the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.PrintSettings" /> property should be persisted.
            </summary><returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.ArrangeCore"><summary>
            Provides the place to perform arrange logic for the element.
            </summary><remarks>
            Element authors should override this method, call <see cref="M:ActiproSoftware.WinUICore.UIElement.Arrange(System.Drawing.Rectangle)" /> on each visible child element and position each child element.
            It is required that a parent element calls <see cref="M:ActiproSoftware.WinUICore.UIElement.Arrange(System.Drawing.Rectangle)" /> on each child or they won't be rendered.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.ShouldSerializeCaret"><summary>
            Indicates whether the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.Caret" /> property should be persisted.
            </summary><returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.ResetCommandLinks"><summary>
            Resets the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.CommandLinks" /> property to its default value.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.CreateChildren"><summary>
            Invoked when the collection of child elements is to be created.
            </summary><returns>The <see cref="T:System.Collections.IList" /> that should be assigned to the <see cref="P:ActiproSoftware.ComponentModel.ILogicalTreeNode.Children" /> property.</returns><remarks>By default no child collection is created.</remarks></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.ShouldSerializeColumnGuides"><summary>
            Indicates whether the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.ColumnGuides" /> property should be persisted.
            </summary><returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.Dispose(System.Boolean)"><summary>
            Disposes any resources used by the object.
            </summary><param name="disposing">Whether the object is being disposed.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditor.#ctor"><summary>
            Initializes a new instance of the <c>SyntaxEditor</c> class. 
            </summary><remarks>
            The default constructor initializes all fields to their default values.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.PrintSettings"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.PrintSettings" /> that provides settings for controlling printer output.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.PrintSettings" /> that provides settings for controlling printer output.</value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.AcceptsTab"><summary>
            Indicates whether tab characters are accepted as input.
            </summary><value><c>true</c> if tab characters should be accepted as input; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.AllowDrag"><summary>
            Gets or sets whether to allow text to be dragged to start a drag/drop operation.
            </summary><value><c>true</c> if text can be dragged to start a drag/drop operation; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.AutoReplace"><summary>
            Gets or sets an object that provides global auto-replace functionality.
            </summary><value>
            An <see cref="T:ActiproSoftware.SyntaxEditor.AutoReplaceEntryCollection" /> that provides global auto-replace functionality.
            </value><remarks>
            Language-specific auto-replace entries are checked before global editor auto-replace entries.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.AutoReplaceTriggersEnabled"><summary>
            Gets or sets whether auto-replace triggers are enabled.
            </summary><value><c>true</c> if auto-replace triggers are enabled; otherwise, <c>false</c>.
            </value><remarks>
            Since auto-replace triggers take some processing time when they are enabled and a key is pressed,
            it is recommended to disable them when loading languages that do not use them.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.BackColor"><summary>
            Gets or sets the color of the background.
            </summary><value>
            A <c>Color</c> indicating the background color.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.BackgroundImage"><summary>
            Gets or sets the background image displayed in the control.
            </summary><value>
            An <c>Image</c> specifying the image to display in the background of the control.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.BracketHighlightingInclusive"><summary>
            Gets or sets whether to highlight brackets whenever the caret is anywhere next to a bracket.
            </summary><value><c>true</c> if brackets should be highlighted whenever the caret is anywhere next to a bracket; otherwise, <c>false</c>.
            </value><remarks>
            If this value is set to <c>false</c>, brackets are only highlighted if the caret is before the start bracket token
            or after the end bracket token.  If set to <c>true</c>, brackets are highlighted if the caret is before, inside, or after any bracket token.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.BracketHighlightingVisible"><summary>
            Gets or sets whether to highlight brackets.
            </summary><value><c>true</c> if brackets should be highlighted; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.CaptureMouseWhenPressed"><summary>
            Gets whether to automatically capture the mouse when the element is pressed.
            </summary><value><c>true</c> if the mouse should automatically be captured when the element is pressed; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.Caret"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Caret" /> used in the <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor" />.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.Caret" /> used in the <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor" />.</value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.CharacterWidth"><summary>
            Gets the average width of a character.
            </summary><value>The average width of a character.</value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.CodeSnippetImageList"><summary>
            Gets or sets an <see cref="T:System.Windows.Forms.ImageList" /> that can be used for code snippet images in the <see cref="T:ActiproSoftware.SyntaxEditor.IntelliPromptMemberList" />.
            </summary><value>An <see cref="T:System.Windows.Forms.ImageList" /> that can be used for code snippet images in the <see cref="T:ActiproSoftware.SyntaxEditor.IntelliPromptMemberList" />.</value><remarks>
            This method creates a new <see cref="T:System.Windows.Forms.ImageList" /> each time it is called.
            For repeated use, cache the create <see cref="T:System.Windows.Forms.ImageList" /> in your application.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.CommandLinks"><summary>
            Gets a <see cref="T:ActiproSoftware.WinUICore.Commands.CommandLinkCollection" /> containing the command links associated with the object.
            </summary><value>A <see cref="T:ActiproSoftware.WinUICore.Commands.CommandLinkCollection" /> containing the command links associated with the object.</value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.ContentDividersVisible"><summary>
            Gets or sets whether to show content dividers.
            </summary><value><c>true</c> if content dividers should be displayed; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.ColumnGuides"><summary>
            Gets the collection of column guides for the editor.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.ColumnGuideCollection" /> containing column guides for the editor.</value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.CurrentLineHighlightingVisible"><summary>
            Gets or sets whether to apply background highlighting to the line that the caret is on.
            </summary><value><c>true</c> if current line highlighting should be visible; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.Cursor"><summary>
            Gets or sets the cursor that is displayed when the mouse pointer is over the control.
            </summary><value>
            A <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.Cursor" /> object that represents the cursor to display when the mouse pointer is over the control.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.CutCopyBlankLineWhenNoSelection"><summary>
            Indicates whether cut/copy operations on a blank line with no selection overwrites the clipboard with the blank line.
            </summary><value><c>true</c> if cut/copy operations on a blank line with no selection overwrites the clipboard with the blank line; otherwise, <c>false</c>.
            </value><remarks>
            When there is no selection in the editor and a cut or copy operation occurs, the text of the current line will
            be sent to the clipboard.  If the text is subsequently pasted back into the editor while there is no selection, 
            a new link will be created to insert the clipboard data and the caret will not move.
            Even if this property is <c>false</c>, cutting of blank lines will occur but the clipboard will not be changed.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.CutCopyDragWithHtml"><summary>
            Indicates whether the cutting and copying of text to the clipboard or dragging text
            also copies the text in HTML format, which retains syntax highlighting.
            </summary><value><c>true</c> if the cutting and copying of text to the clipboard or dragging text 
            also copies the text in HTML format; otherwise, <c>false</c>.
            </value><remarks>
            Activating this feature will cause a slight delay when cutting, copying, or dragging text 
            since the building of HTML formatted text can take time.  However most likely this delay will be negligible.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.CutCopyDragWithRtf"><summary>
            Indicates whether the cutting and copying of text to the clipboard or dragging text
            also copies the text in RTF format, which retains syntax highlighting.
            </summary><value><c>true</c> if the cutting and copying of text to the clipboard or dragging text 
            also copies the text in RTF format; otherwise, <c>false</c>.
            </value><remarks>
            Activating this feature will cause a slight delay when cutting, copying, or dragging text 
            since the building of RTF formatted text can take time.  However most likely this delay will be negligible.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.DefaultContextMenuEnabled"><summary>
            Indicates whether a default context menu should be enabled.
            </summary><value><c>true</c> if the display of the default context menu is enabled; otherwise, <c>false</c>.
            </value><remarks>
            The default context menu is only displayed when this property is <c>true</c> and no <see cref="P:System.Windows.Forms.Control.ContextMenu" />
            property value is set.  Set this property to <c>false</c> if you implement a custom context menu.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.DefaultSize"><summary>
            Gets the default size of the control.
            </summary><value>The default <see cref="T:System.Drawing.Size" /> of the control.</value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.Document"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> being edited by the control.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> being edited by the control.</value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.DragDropTextReselectEnabled"><summary>
            Gets or sets whether to reselect text that is dragged and dropped into the control.
            </summary><value><c>true</c> if text that is dragged and dropped into the control should be reselected; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.Font"><summary>
            Gets or sets the font of the text displayed by the control.
            </summary><value>The <see cref="T:System.Drawing.Font" /> object to apply to the text displayed by the control.</value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.ForeColor"><summary>
            Gets or sets the foreground color of the control.
            </summary><value>
            The foreground <see cref="T:System.Drawing.Color" /> of the control. The default is the value of the <c>DefaultForeColor</c> property.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.ForwardCommandsTo"><summary>
            Gets or sets the <see cref="T:ActiproSoftware.WinUICore.Commands.ICommandTarget" /> to forward commands to.
            </summary><value>The <see cref="T:ActiproSoftware.WinUICore.Commands.ICommandTarget" /> to forward commands to.</value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.HasHorizontalSplit"><summary>
            Gets or sets whether there currently is a horizontal split.
            </summary><value><c>true</c> if there is a horizontal split; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.HasVerticalSplit"><summary>
            Gets or sets whether there currently is a vertical split.
            </summary><value><c>true</c> if there is a vertical split; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.HideSelection"><summary>
            Indicates whether to hide the selection when the control loses focus.
            </summary><value><c>true</c> if the selection should be hidden when the control loses focus; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.HorizontalSplitPosition"><summary>
            Gets or sets the horizontal split position.
            </summary><value>The horizontal split position.</value><remarks>
            If this value is <c>0</c> then there is no split.
            This value will throw an exception if the control only allows dual vertical splitting.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.IndentationGuidesVisible"><summary>
            Indicates whether to show indentation guides.
            </summary><value><c>true</c> if indentation guides should be shown; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.IndentType"><summary>
            Gets or sets the type of indentation to perform when the ENTER key is pressed.
            </summary><value>
            An <see cref="T:ActiproSoftware.SyntaxEditor.IndentType" /> that specifies the type of indentation to perform.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.IndicatorMarginVisible"><summary>
            Indicates whether to show the indicator margin.
            </summary><value><c>true</c> if the indicator margin should be shown; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.IndicatorMarginWidth"><summary>
            Gets or sets the width of the indicator margin.
            </summary><value>
            The width of the indicator margin.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.IntelliPrompt"><summary>
            Gets the object that provides access to all IntelliPrompt features.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.IntelliPrompt" /> object that provides access to all IntelliPrompt features.</value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.KeyPressTriggersEnabled"><summary>
            Gets or sets whether keypress triggers are enabled.
            </summary><value><c>true</c> if keypress triggers are enabled; otherwise, <c>false</c>.
            </value><remarks>
            Since keypress triggers take some processing time when they are enabled and a key is pressed,
            it is recommended to disable them when loading languages that do not use them.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.LineNumberMarginFont"><summary>
            Gets or sets the font to use for drawing text in the line number margin.
            </summary><value>
            The <c>Font</c> to use for drawing text in the line number margin.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.LineNumberMarginVisible"><summary>
            Indicates whether to show the line number margin.
            </summary><value><c>true</c> if the line number margin should be shown; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.LineNumberMarginWidth"><summary>
            Gets or sets the width of the line number margin.
            </summary><value>
            The width of the line number margin.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.MacroRecording"><summary>
            Gets the object that provides macro recording functionality.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.MacroRecording" /> that provides macro recording functionality.</value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.MinimumDisplayLineHeight"><summary>
            Gets or sets the minimum height of a display line.
            </summary><value>The minimum height of a display line.</value><remarks>This value should be decreased to allow smaller fonts to use less line height space.</remarks></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.MoveCaretToNextLineAtLineEnd"><summary>
            Gets or sets whether to move the caret to the next line when pressing the right-arrow key at the end of a line.
            </summary><value><c>true</c> if the caret should move to the next line when pressing the right-arrow key at the end of a line; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.MoveCaretToPreviousLineAtLineStart"><summary>
            Gets or sets whether to move the caret to the previous line when pressing the left-arrow key at the start of a line.
            </summary><value><c>true</c> if the caret should move to the previous line when pressing the left-arrow key at the start of a line; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.OverwriteMode"><summary>
            Gets or sets whether the control is in overwrite mode.
            </summary><value><c>true</c> if the control is in overwrite mode; otherwise <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.ReflectionImageList"><summary>
            Gets an <see cref="T:System.Windows.Forms.ImageList" /> that can be used for reflection images in the <see cref="T:ActiproSoftware.SyntaxEditor.IntelliPromptMemberList" />.
            </summary><value>An <see cref="T:System.Windows.Forms.ImageList" /> that can be used for reflection images in the <see cref="T:ActiproSoftware.SyntaxEditor.IntelliPromptMemberList" />.</value><remarks>
            This method creates a new <see cref="T:System.Windows.Forms.ImageList" /> each time it is called.
            For repeated use, cache the create <see cref="T:System.Windows.Forms.ImageList" /> in your application.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.Renderer"><summary>
            Gets or sets the control-specific <see cref="T:ActiproSoftware.SyntaxEditor.ISyntaxEditorRenderer" /> used to render the control.
            </summary><value>The control-specific <see cref="T:ActiproSoftware.SyntaxEditor.ISyntaxEditorRenderer" /> used to render the control.</value><remarks>
            If this value is <see langword="null" />, then the global renderer will be used instead.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.RendererResolved"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.ISyntaxEditorRenderer" /> used to render the control.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.ISyntaxEditorRenderer" /> used to render the control.</value><remarks>
            This property will return a global renderer if there is no control instance renderer override.
            The registered renderer type with the <c>UIRendererManager</c> for this property is <see cref="T:ActiproSoftware.SyntaxEditor.ISyntaxEditorRenderer" />.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.ScrollBarBottomButtons"><summary>
            Gets the collection of <see cref="T:ActiproSoftware.SyntaxEditor.EditorViewButtonCommand" /> objects whose links will appear below the vertical scrollbar in each <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" />.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.EditorViewButtonCommandCollection" /> that contains the button commands.</value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.ScrollBarLeftButtons"><summary>
            Gets the collection of <see cref="T:ActiproSoftware.SyntaxEditor.EditorViewButtonCommand" /> objects whose links will appear left of the horizontal scrollbar in each <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" />.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.EditorViewButtonCommandCollection" /> that contains the button commands.</value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.ScrollBarRightButtons"><summary>
            Gets the collection of <see cref="T:ActiproSoftware.SyntaxEditor.EditorViewButtonCommand" /> objects whose links will appear right of the horizontal scrollbar in each <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" />.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.EditorViewButtonCommandCollection" /> that contains the button commands.</value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.ScrollBarTopButtons"><summary>
            Gets the collection of <see cref="T:ActiproSoftware.SyntaxEditor.EditorViewButtonCommand" /> objects whose links will appear above the vertical scrollbar in each <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" />.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.EditorViewButtonCommandCollection" /> that contains the button commands.</value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.ScrollBarType"><summary>
            Gets or sets the type of scrollbars to display.
            </summary><value>
            The type of scrollbars to display.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.ScrollToCaretOnSelectAll"><summary>
            Gets or sets whether to scroll to the caret when selecting all text in a view.
            </summary><value><c>true</c> if a view should scroll to the caret when selecting all its text; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.ScrollPastDocumentEnd"><summary>
            Indicates whether scrolling past the end of the document is enabled.
            </summary><value><c>true</c> if scrolling past the end of the document is enabled; otherwise, <c>false</c>.
            </value><remarks>
            When this property is set to <c>true</c>, the vertical scrollbar will allow scrolling of the 
            last line of the document up to the first display line in the view.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.SelectedView"><summary>
            Gets the selected <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> in the editor.
            </summary><value>The selected <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> in the editor.</value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.SelectionCollapsesOnCopy"><summary>
            Gets or sets whether the selection collapses when a copy operation occurs.
            </summary><value><c>true</c> if the selection collapses when a copy operation occurs; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.SelectionCollapsesToAnchor"><summary>
            Gets or sets whether the selection collapses to the anchor of the selection.
            </summary><value><c>true</c> if the selection collapses to the anchor of the selection; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.SelectionMarginWidth"><summary>
            Gets or sets the width of the selection margin.
            </summary><value>
            The width of the selection margin.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.SelectionModesEnabled"><summary>
            Gets or sets a <see cref="T:ActiproSoftware.SyntaxEditor.SelectionModes" /> indicating the types of selection that are permitted.
            </summary><value>
            A <see cref="T:ActiproSoftware.SyntaxEditor.SelectionModes" /> indicating the types of selection that are permitted.
            The default value is both <c>SelectionModes.ContinuousStream</c> and <c>SelectionModes.Block</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.SelectionMovesOnRightClick"><summary>
            Gets or sets whether the selection moves when a right-click occurs.
            </summary><value><c>true</c> if the selection moves when a right-click occurs; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.SplitType"><summary>
            Gets or sets the type of splitting that is permitted (none, dual, or four-way).
            </summary><value>
            A <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditorSplitType" /> that specifies the type of splitting that is permitted.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.Text"><summary>
            Gets or sets the entire text of the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.Document" /> using <see cref="F:ActiproSoftware.SyntaxEditor.LineTerminator.CarriageReturnNewline" /> for line ends.
            </summary><value>The entire text of the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.Document" /> using <see cref="F:ActiproSoftware.SyntaxEditor.LineTerminator.CarriageReturnNewline" /> for line ends.</value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.UnicodeEnabled"><summary>
            Gets or sets whether Unicode character processing is enabled.
            </summary><value><c>true</c> if Unicode character processing is enabled; otherwise, <c>false</c>.  The default is <c>true</c>.
            </value><remarks>
            If this property is set to <c>true</c>, Unicode characters will always paint correctly.
            If this property is set to <c>false</c>, Unicode characters displayed in fixed-width fonts such as <c>Courier New</c> will
            not always be measured correctly.  However a setting of <c>false</c> will yield faster document loading/rendering results
            if you are sure that only ASCII characters will be used in the editor (characters 0-255).
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.UseDisabledRenderingForReadOnlyMode"><summary>
            Indicates whether the control should be rendered using the disabled background fills when the document is in read-only mode.
            </summary><value><c>true</c> if the disabled background fills should be used when the document is in read-only mode; otherwise, <c>false</c>.
            </value><remarks>
            If this property is set to <c>true</c>, the line number margin, selection margin, and text area will use their
            respective disabled background fills when the document is in read-only mode.  
            If this property is set to <c>false</c>, the normal background fills will be used.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.UserMarginFont"><summary>
            Gets or sets the default font to use for drawing text in the user margin.
            </summary><value>
            The default <c>Font</c> to use for drawing text in the user margin.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.UserMarginVisible"><summary>
            Gets or sets whether to show the user margin.
            </summary><value><c>true</c> if the user margin should be shown; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.UserMarginWidth"><summary>
            Gets or sets the width of the user margin.
            </summary><value>
            The width of the user margin.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.VariableWidthFont"><summary>
            Gets whether the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.Font" /> is a variable-width font.
            </summary><value><c>true</c> if the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.Font" /> is a variable-width font; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.VerticalScrollBarHintDefaultText"><summary>
            Gets or sets the default text to display as a vertical scrollbar hint.
            </summary><value>The default text to display as a vertical scrollbar hint.</value><remarks>
            This text is used in the scrollbar hint popup when the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.VerticalScrollBarHintEnabled" /> property
            is <c>true</c> and scrolling occurs.
            <para>
            This hint text supports the markup constructs that you can use for quick info so bold, italics, etc. are supported.
            Also you may specify <c>{0}</c> for the current line number and <c>{1}</c> for the total line count.
            </para></remarks></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.VerticalScrollBarHintEnabled"><summary>
            Gets or sets whether to display a popup scrollbar hint when scrolling the vertical scrollbar.
            </summary><value><c>true</c> if the hint should be displayed; otherwise, <c>false</c>.
            </value><remarks>
            Use the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.VerticalScrollBarHintDefaultText" /> property to control the text that is displayed in the hint.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.VerticalSplitPosition"><summary>
            Gets or sets the vertical split position.
            </summary><value>The vertical split position.</value><remarks>
            If this value is <c>0</c> then there is no split.
            This value will throw an exception if the control only allows dual horizontal splitting
            or if a word wrapping mode is active.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.Views"><summary>
            Gets the collection of views for the document.
            </summary><value>
            A <see cref="T:ActiproSoftware.SyntaxEditor.EditorViewCollection" /> containing the <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> objects for the document.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.VirtualSpaceAtDocumentEndEnabled"><summary>
            Gets or sets whether virtual space at the end of a <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.Document" /> is enabled.
            </summary><value><c>true</c> if virtual space at the end of a <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.Document" /> is enabled; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.VirtualSpaceAtLineEndEnabled"><summary>
            Gets or sets whether virtual space at the end of lines is enabled.
            </summary><value><c>true</c> if virtual space at the end of lines is enabled; otherwise, <c>false</c>.
            </value><remarks>
            Use of virtual space at the end of lines will disable word wrap.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.WhitespaceHardLineEndCharacter"><summary>
            Indicates the character to use when drawing a hard end-of-line character in place of line feeds.
            </summary><value>
            The character to use when drawing a hard end-of-line character in place of line feeds.
            The default value is Unicode 00B6.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.WhitespaceLineEndsVisible"><summary>
            Indicates whether to show an end-of-line character in place of line feeds.
            </summary><value><c>true</c> if an end-of-line character should be shown; otherwise, <c>false</c>.
            </value><remarks>
            When the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.WordWrapGlyphVisible" /> property is set, this property is not used.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.WhitespaceSoftLineEndCharacter"><summary>
            Indicates the character to use when drawing a soft end-of-line character in place of line feeds.
            </summary><value>
            The character to use when drawing a soft end-of-line character in place of line feeds.
            The default value is Unicode 00B6.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.WhitespaceSpacesVisible"><summary>
            Indicates whether to display a space glyph in place of space.
            </summary><value><c>true</c> if a space glyph should be drawn in place of space; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.WhitespaceTabsVisible"><summary>
            Indicates whether to display a tab glyph in place of tabs.
            </summary><value><c>true</c> if a tab glyph should be drawn in place of tabs; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.WordWrap"><summary>
            Indicates the type of word wrapping to perform.
            </summary><value>
            A <see cref="T:ActiproSoftware.SyntaxEditor.WordWrapType" /> specifying the type of word wrapping to perform.
            </value><remarks>
            Use of word wrap will disable virtual space at the end of lines.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.WordWrapColumnIndex"><summary>
            Gets or sets the index of the column at which word wrapping should be performed.
            </summary><value>
            The index of the column at which word wrapping should be performed.  
            The default is <c>-1</c>, which indicates to wrap at the right side of the control.
            </value><remarks><para>
            This property is only meant to be used with monospace (or uniform-width) fonts, such as Courier New.
            Word wrapping occurs at a location calculated using the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.CharacterWidth" /> property multiplied 
            by the column index indicated by this property.
            This prooperty is only used when the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.WordWrap" /> property is set to a value other than <c>None</c>.
            </para><para>
            This property is zero-based. 
            If <c>80</c> is specified as the value of this property, 80 characters will be permitted on each line.
            </para></remarks></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.WordWrapGlyphVisible"><summary>
            Gets or sets whether to draw a word wrap glyph along the right side of lines with soft line breaks.
            </summary><value><c>true</c> if word wrap glyphs should be drawn; otherwise, <c>false</c>.
            </value><remarks>
            When set, this property prevents the use of the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.WhitespaceLineEndsVisible" /> property.
            This property is only used when word wrap is active.
            </remarks></member><member name="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.AutoReplacePerformed"><summary>
            Occurs after an auto-replace is performed
            </summary><eventdata>
            The event handler receives an argument of type <c>AutoReplaceEventArgs</c> containing data related to this event.
            </eventdata></member><member name="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.AutoReplacePerforming"><summary>
            Occurs before an auto-replace is performed
            </summary><eventdata>
            The event handler receives an argument of type <c>AutoReplaceEventArgs</c> containing data related to this event.
            </eventdata></member><member name="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.CodeSnippetActivating"><summary>
            Occurs before a code snippet is activated.
            </summary><eventdata>
            The event handler receives an argument of type <c>CodeSnippetEventArgs</c> containing data related to this event.
            </eventdata><remarks>
            The <see cref="P:System.ComponentModel.CancelEventArgs.Cancel" /> property can be set to cancel the code snippet.
            The <see cref="P:ActiproSoftware.SyntaxEditor.CodeSnippetEventArgs.CodeText" /> property can be set to to alter the actual text inserted by the code snippet.
            This is useful if context-based indentation needs to be performed on the text before inserting it.
            </remarks></member><member name="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.CodeSnippetDeactivated"><summary>
            Occurs after a code snippet is deactivated.
            </summary><eventdata>
            The event handler receives an argument of type <c>CodeSnippetEventArgs</c> containing data related to this event.
            </eventdata><remarks>
            The <see cref="P:System.ComponentModel.CancelEventArgs.Cancel" /> property of the event arguments indicates whether the code snippet was cancelled or completed.
            </remarks></member><member name="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.CodeSnippetFieldActivated"><summary>
            Occurs after a code snippet field is activated.
            </summary><eventdata>
            The event handler receives an argument of type <c>CodeSnippetFieldEventArgs</c> containing data related to this event.
            </eventdata></member><member name="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.CodeSnippetFieldDeactivating"><summary>
            Occurs before a code snippet field is deactivated.
            </summary><eventdata>
            The event handler receives an argument of type <c>CodeSnippetFieldEventArgs</c> containing data related to this event.
            </eventdata></member><member name="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.CodeSnippetFieldModified"><summary>
            Occurs after a code snippet field is modified.
            </summary><eventdata>
            The event handler receives an argument of type <c>CodeSnippetFieldEventArgs</c> containing data related to this event.
            </eventdata></member><member name="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.ContextMenuRequested"><summary>
            Occurs when a context menu should be displayed.
            </summary><eventdata>
            The event handler receives an argument of type <c>ContextMenuRequestEventArgs</c> containing data related to this event.
            </eventdata></member><member name="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.CutCopyDrag"><summary>
            Occurs before text is cut or copied to the clipboard, and also before a drag occurs.
            </summary><eventdata>
            The event handler receives an argument of type <c>CutCopyDragEventArgs</c> containing data related to this event.
            </eventdata></member><member name="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.DocumentAutomaticOutliningComplete"><summary>
            Occurs after automatic outlining is performed on the current document.
            </summary><eventdata>
            The event handler receives an argument of type <c>DocumentModificationEventArgs</c> containing data related to this event.
            </eventdata><remarks>
            A <see cref="T:ActiproSoftware.SyntaxEditor.DocumentModification" /> may or may not be passed in the event arguments, depending on if the outlining
            is performed in the main thread.
            </remarks></member><member name="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.DocumentChanged"><summary>
            Occurs when the value of the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.Document" /> property is changed.
            </summary><eventdata>
            The event handler receives an argument of type <c>EventArgs</c> containing data related to this event.
            </eventdata></member><member name="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.DocumentIndicatorAdded"><summary>
            Occurs when an indicator is added to the current document.
            </summary><eventdata>
            The event handler receives an argument of type <c>IndicatorEventArgs</c> containing data related to this event.
            </eventdata></member><member name="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.DocumentIndicatorRemoved"><summary>
            Occurs when an indicator is removed from the current document.
            </summary><eventdata>
            The event handler receives an argument of type <c>IndicatorEventArgs</c> containing data related to this event.
            </eventdata></member><member name="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.DocumentIndicatorResized"><summary>
            Occurs when an indicator is resized.
            </summary><eventdata>
            The event handler receives an argument of type <c>IndicatorEventArgs</c> containing data related to this event.
            </eventdata></member><member name="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.DocumentModifiedChanged"><summary>
            Occurs after the current document's <see cref="P:ActiproSoftware.SyntaxEditor.Document.Modified" /> property value has changed.
            </summary><eventdata>
            The event handler receives an argument of type <c>EventArgs</c> containing data related to this event.
            </eventdata></member><member name="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.DocumentOutliningNodeExpandedChanged"><summary>
            Occurs after an outlining node's expanded state is changed.
            </summary><eventdata>
            The event handler receives an argument of type <c>OutliningNodeEventArgs</c> containing data related to this event.
            </eventdata></member><member name="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.DocumentPreTextChanging"><summary>
            Occurs before the current document's text is changed, allowing for the change to be cancelled.
            </summary><eventdata>
            The event handler receives an argument of type <c>DocumentModificationEventArgs</c> containing data related to this event.
            </eventdata><remarks>
            Set the <c>Cancel</c> property of the event arguments to <c>true</c> to cancel the modification before it starts.
            </remarks></member><member name="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.DocumentSemanticParseDataChanged"><summary>
            Occurs after the current document's <see cref="P:ActiproSoftware.SyntaxEditor.Document.SemanticParseData" /> property value has changed.
            </summary><eventdata>
            The event handler receives an argument of type <c>EventArgs</c> containing data related to this event.
            </eventdata></member><member name="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.DocumentSyntaxLanguageLoaded"><summary>
            Occurs after a <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> is finished loading in the current document.
            </summary><eventdata>
            The event handler receives an argument of type <c>SyntaxLanguageEventArgs</c> containing data related to this event.
            </eventdata></member><member name="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.DocumentSyntaxLanguageLoading"><summary>
            Occurs before a <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> is about to load in the current document.
            </summary><eventdata>
            The event handler receives an argument of type <c>SyntaxLanguageEventArgs</c> containing data related to this event.
            </eventdata></member><member name="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.DocumentTextChanged"><summary>
            Occurs after the current document's text is changed.
            </summary><eventdata>
            The event handler receives an argument of type <c>DocumentModificationEventArgs</c> containing data related to this event.
            </eventdata></member><member name="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.DocumentTextChanging"><summary>
            Occurs before the current document's text is changed.
            </summary><eventdata>
            The event handler receives an argument of type <c>DocumentModificationEventArgs</c> containing data related to this event.
            </eventdata></member><member name="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.DocumentUndoRedoStateChanged"><summary>
            Occurs after the undo or redo stack of the current document is changed so that application user interface enabled states, such as toolbar buttons, can be updated.
            </summary><eventdata>
            The event handler receives an argument of type <c>UndoRedoStateChangedEventArgs</c> containing data related to this event.
            </eventdata></member><member name="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.ViewButtonLinkClicked"><summary>
            Occurs when an <see cref="T:ActiproSoftware.SyntaxEditor.EditorViewButtonLink" /> is clicked.
            </summary><eventdata>
            The event handler receives an argument of type <c>EditorViewButtonLinkEventArgs</c> containing data related to this event.
            </eventdata></member><member name="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.IncrementalSearch"><summary>
            Occurs when an event occurs for an <see cref="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.IncrementalSearch" />.
            </summary><eventdata>
            The event handler receives an argument of type <c>IncrementalSearchEventArgs</c> containing data related to this event.
            </eventdata></member><member name="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.IntelliPromptMemberListClosed"><summary>
            Occurs after the IntelliPrompt member list is closed.
            </summary><eventdata>
            The event handler receives an argument of type <c>CancelEventArgs</c> containing data related to this event.
            </eventdata><remarks>
            The <see cref="T:System.ComponentModel.CancelEventArgs" /> indicates whether auto-complete was cancelled during the 
            <see cref="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.IntelliPromptMemberListClosing" /> event.
            </remarks></member><member name="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.IntelliPromptMemberListClosing"><summary>
            Occurs when the IntelliPrompt member list is closing, allowing it to be cancelled.
            </summary><eventdata>
            The event handler receives an argument of type <c>CancelEventArgs</c> containing data related to this event.
            </eventdata></member><member name="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.IntelliPromptMemberListItemDescriptionRequested"><summary>
            Occurs when a description tip is about to be displayed for the selected IntelliPrompt member list item,
            but the item has no description set.
            </summary><eventdata>
            The event handler receives an argument of type <c>EventArgs</c> containing data related to this event.
            </eventdata><remarks>
            Set the <c>Description</c> property for the selected member list item if you'd like a description tip to display.
            </remarks></member><member name="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.IntelliPromptMemberListSelectedItemChanged"><summary>
            Occurs after an IntelliPrompt member list item is selected.
            </summary><eventdata>
            The event handler receives an argument of type <c>EventArgs</c> containing data related to this event.
            </eventdata></member><member name="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.IntelliPromptParameterInfoParameterIndexChanged"><summary>
            Occurs after the parameter index of the IntelliPrompt parameter info is changed while the parameter info is visible.
            </summary><eventdata>
            The event handler receives an argument of type <c>EventArgs</c> containing data related to this event.
            </eventdata></member><member name="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.IntelliPromptParameterInfoSelectedIndexChanged"><summary>
            Occurs after the selected index of the IntelliPrompt parameter info is changed while the parameter info is visible.
            </summary><eventdata>
            The event handler receives an argument of type <c>EventArgs</c> containing data related to this event.
            </eventdata></member><member name="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.IntelliPromptSmartTagClicked"><summary>
            Occurs when the currently active smart tag is clicked.
            </summary><eventdata>
            The event handler receives an argument of type <c>EventArgs</c> containing data related to this event.
            </eventdata><remarks>
            The <see cref="P:ActiproSoftware.SyntaxEditor.IntelliPromptSmartTag.ActiveSmartTag" /> property contains the smart tag that was clicked.
            </remarks></member><member name="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.IntelliPromptTipImageRequested"><summary>
            Occurs when an IntelliPrompt popup requests an <c>Image</c> to display in a tooltip.
            </summary><eventdata>
            The event handler receives an argument of type <c>IntelliPromptTipImageRequestedEventArgs</c> containing data related to this event.
            </eventdata><remarks>
            Any IntelliPrompt popup tooltip may raise this event.
            </remarks></member><member name="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.IntelliPromptTipLinkClick"><summary>
            Occurs when a link on an IntelliPrompt popup tooltip is clicked.
            </summary><eventdata>
            The event handler receives an argument of type <c>IntelliPromptTipLinkClickEventArgs</c> containing data related to this event.
            </eventdata><remarks>
            Any IntelliPrompt popup tooltip may raise this event.
            </remarks></member><member name="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.KeyTyped"><summary>
            Occurs after a key is typed.
            </summary><eventdata>
            The event handler receives an argument of type <c>KeyTypedEventArgs</c> containing data related to this event.
            </eventdata></member><member name="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.KeyTyping"><summary>
            Occurs before a key is typed.
            </summary><eventdata>
            The event handler receives an argument of type <c>KeyTypingEventArgs</c> containing data related to this event.
            </eventdata></member><member name="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.MacroRecordingStateChanged"><summary>
            Occurs when the macro recording state changes.
            </summary><eventdata>
            The event handler receives an argument of type <c>EventArgs</c> containing data related to this event.
            </eventdata></member><member name="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.OverwriteModeChanged"><summary>
            Occurs when the value of the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.OverwriteMode" /> property is changed.
            </summary><eventdata>
            The event handler receives an argument of type <c>EventArgs</c> containing data related to this event.
            </eventdata></member><member name="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.PasteDragDrop"><summary>
            Occurs when a paste or drag/drop operation occurs over the control, allowing for customization of the text to be inserted.
            </summary><eventdata>
            The event handler receives an argument of type <c>PasteDragDropEventArgs</c> containing data related to this event.
            </eventdata><remarks>
            This event allows for any sort of <see cref="T:System.Windows.Forms.IDataObject" /> (such as a file) to be handled when pasted
            or drag/dropped on the editor and representative text inserted.
            </remarks></member><member name="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.SelectedViewChanged"><summary>
            Occurs when the selected <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> is changed.
            </summary><eventdata>
            The event handler receives an argument of type <c>EventArgs</c> containing data related to this event.
            </eventdata></member><member name="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.SelectionChanged"><summary>
            Raised after the selection has changed.
            </summary><eventdata>
            The event handler receives an argument of type <c>SelectionEventArgs</c> containing data related to this event.
            </eventdata></member><member name="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.SmartIndent"><summary>
            Occurs when smart indent should be performed.
            </summary><eventdata>
            The event handler receives an argument of type <c>SmartIndentEventArgs</c> containing data related to this event.
            </eventdata></member><member name="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.TokenMouseEnter"><summary>
            Occurs when the mouse is moved over an <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.
            </summary><eventdata>
            The event handler receives an argument of type <c>EditorViewMouseEventArgs</c> containing data related to this event.
            </eventdata><remarks>
            The event arguments contains a <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditorHitTestResult" /> that specifies detailed information about what is under the mouse.
            </remarks></member><member name="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.TokenMouseLeave"><summary>
            Occurs when the mouse is moved over an <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.
            </summary><eventdata>
            The event handler receives an argument of type <c>EditorViewMouseEventArgs</c> containing data related to this event.
            </eventdata><remarks>
            The event arguments contains a <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditorHitTestResult" /> that specifies detailed information about what is under the mouse.
            The <c>OldMouseOverToken</c> property of the event arguments specifies the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that is being left.
            </remarks></member><member name="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.TriggerActivated"><summary>
            Occurs after a <see cref="T:ActiproSoftware.SyntaxEditor.Trigger" /> is activated.
            </summary><eventdata>
            The event handler receives an argument of type <c>TriggerEventArgs</c> containing data related to this event.
            </eventdata><remarks>
            Triggers can be configured to fire in different situations.
            For instance, <see cref="T:ActiproSoftware.SyntaxEditor.KeyPressTrigger" /> triggers activate when a specified character is typed into the editor.
            </remarks></member><member name="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.UserInterfaceUpdate"><summary>
            Occurs after a delay following the raising of the <see cref="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.DocumentTextChanged" /> and
            <see cref="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.DocumentSemanticParseDataChanged" /> events, allowing for updating of user interface controls external to SyntaxEditor.
            </summary><eventdata>
            The event handler receives an argument of type <c>EventArgs</c> containing data related to this event.
            </eventdata><remarks>
            Consecutive firings of the <see cref="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.DocumentTextChanged" /> and <see cref="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.DocumentSemanticParseDataChanged" /> events
            will reset the timer that raises this event.
            </remarks></member><member name="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.UserMarginPaint"><summary>
            Occurs when a user margin display line needs painting.
            </summary><eventdata>
            The event handler receives an argument of type <c>UserMarginPaintEventArgs</c> containing data related to this event.
            </eventdata></member><member name="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.ViewBracketHighlightingUpdate"><summary>
            Occurs when an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> is about to update its <see cref="T:ActiproSoftware.SyntaxEditor.BracketHighlighting" /> tokens.
            </summary><eventdata>
            The event handler receives an argument of type <c>EditorViewBracketHighlightingEventArgs</c> containing data related to this event.
            </eventdata><remarks>
            Implement code in this event handler to update the <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> bracket tokens specified in the event arguments
            if advanced bracket highlighting routines are required.
            </remarks></member><member name="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.ViewHorizontalScroll"><summary>
            Occurs when an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> is scrolled horizontally.
            </summary><eventdata>
            The event handler receives an argument of type <c>EditorViewEventArgs</c> containing data related to this event.
            </eventdata></member><member name="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.ViewMouseDown"><summary>
            Occurs when a mouse button is pressed over an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" />.
            </summary><eventdata>
            The event handler receives an argument of type <c>EditorViewMouseEventArgs</c> containing data related to this event.
            </eventdata><remarks>
            The event arguments contains a <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditorHitTestResult" /> that specifies detailed information about what is under the mouse.
            </remarks></member><member name="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.ViewMouseHover"><summary>
            Occurs when the mouse is hovered over an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" />.
            </summary><eventdata>
            The event handler receives an argument of type <c>EditorViewMouseEventArgs</c> containing data related to this event.
            </eventdata><remarks>
            The event arguments contains a <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditorHitTestResult" /> that specifies detailed information about what is under the mouse.
            The <c>ToolTipText</c> property of the event arguments can indicate a tooltip to display.
            </remarks></member><member name="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.ViewSplitAdded"><summary>
            Occurs when an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> split is added.
            </summary><eventdata>
            The event handler receives an argument of type <c>SyntaxEditorSplitEventArgs</c> containing data related to this event.
            </eventdata></member><member name="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.ViewSplitMoved"><summary>
            Occurs when an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> split is moved.
            </summary><eventdata>
            The event handler receives an argument of type <c>SyntaxEditorSplitEventArgs</c> containing data related to this event.
            </eventdata></member><member name="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.ViewSplitRemoved"><summary>
            Occurs when an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> split is removed.
            </summary><eventdata>
            The event handler receives an argument of type <c>SyntaxEditorSplitEventArgs</c> containing data related to this event.
            </eventdata></member><member name="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.ViewVerticalScroll"><summary>
            Occurs when an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> is scrolled vertically.
            </summary><eventdata>
            The event handler receives an argument of type <c>EditorViewEventArgs</c> containing data related to this event.
            </eventdata></member><member name="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.WordWrapChanged"><summary>
            Occurs when the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.WordWrap" /> property is changed.
            </summary><eventdata>
            The event handler receives an argument of type <c>EventArgs</c> containing data related to this event.
            </eventdata></member><member name="T:ActiproSoftware.SyntaxEditor.BreakpointSpanIndicator"><summary>
            Represents a breakpoint span indicator.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.BreakpointSpanIndicator.ApplyHighlightingStyleColors(ActiproSoftware.SyntaxEditor.HighlightingStyleResolver)"><summary>
            Applies the foreground and background colors of the span indicator to the specified <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyleResolver" />.
            </summary><param name="resolver">The <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyleResolver" /> to modify.</param></member><member name="M:ActiproSoftware.SyntaxEditor.BreakpointSpanIndicator.DrawGlyph(System.Windows.Forms.PaintEventArgs,System.Drawing.Rectangle)"><summary>
            Draws the glyph associated with the indicator.
            </summary><param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param><param name="bounds">A <c>Rectangle</c> specifying the bounds in which to draw.</param><remarks>
            This method should be implemented by indicators that have a glyph.
            Ensure that the indicator's <see cref="P:ActiproSoftware.SyntaxEditor.BreakpointSpanIndicator.HasGlyph" /> property returns <c>true</c> if this method is implemented.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.BreakpointSpanIndicator.#ctor"><summary>
            Initializes a new instance of the <c>BreakpointSpanIndicator</c> class.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.BreakpointSpanIndicator.#ctor(System.String,System.Drawing.Color,System.Drawing.Color)"><summary>
            Initializes a new instance of the <c>BreakpointSpanIndicator</c> class.
            </summary><param name="name">The name to identify the type of indicator.</param><param name="foreColor">The <see cref="T:System.Drawing.Color" /> to use when drawing the foreground of the indicator.</param><param name="backColor">The <see cref="T:System.Drawing.Color" /> to use when drawing the background of the indicator.</param></member><member name="P:ActiproSoftware.SyntaxEditor.BreakpointSpanIndicator.BackColor"><summary>
            Gets or sets the <see cref="T:System.Drawing.Color" /> to use when drawing the background of the indicator.
            </summary><value>The <see cref="T:System.Drawing.Color" /> to use when drawing the background of the indicator.</value></member><member name="P:ActiproSoftware.SyntaxEditor.BreakpointSpanIndicator.DefaultName"><summary>
            Gets the default name for the indicator.
            </summary><value>The default name for the indicator.</value></member><member name="P:ActiproSoftware.SyntaxEditor.BreakpointSpanIndicator.Enabled"><summary>
            Gets or sets whether the breakpoint is enabled.
            </summary><value><c>true</c> if the breakpoint is enabled; otherwise, <c>false</c>.
            </value><remarks>
            If not enabled, the breakpoint will be drawn with a hollow interior.
            When changing this property, be sure to invalidate the SyntaxEditor control since it will not be automatically repainted.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.BreakpointSpanIndicator.ForeColor"><summary>
            Gets or sets the <see cref="T:System.Drawing.Color" /> to use when drawing the foreground of the indicator.
            </summary><value>The <see cref="T:System.Drawing.Color" /> to use when drawing the foreground of the indicator.</value></member><member name="P:ActiproSoftware.SyntaxEditor.BreakpointSpanIndicator.HasFontChange"><summary>
            Gets whether the span indicator contains a font-related change.
            </summary><value><c>true</c> if the span indicator contains a font-related change; otherwise, <c>false</c>.
            </value><remarks>
            This property lets <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor" /> know whether display lines need to be recalculated
            when the span indicator is added.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.BreakpointSpanIndicator.HasGlyph"><summary>
            Gets whether the indicator has a glyph that appears in the indicator margin.
            </summary><value><c>true</c> if the indicator has a glyph that appears in the indicator margin; otherwise, <c>false</c>.
            </value></member><member name="T:ActiproSoftware.SyntaxEditor.WaveLineSpanIndicator"><summary>
            Represents a span indicator that draws a simple wave line with the specified <see cref="P:ActiproSoftware.SyntaxEditor.WaveLineSpanIndicator.UnderlineColor" />.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.WaveLineSpanIndicator.ApplyHighlightingStyleAdornments(ActiproSoftware.SyntaxEditor.HighlightingStyleResolver)"><summary>
            Applies the adornments of the span indicator to the specified <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyleResolver" />.
            </summary><param name="resolver">The <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyleResolver" /> to modify.</param></member><member name="M:ActiproSoftware.SyntaxEditor.WaveLineSpanIndicator.#ctor(System.Drawing.Color)"><summary>
            Initializes a new instance of the <c>WaveLineSpanIndicator</c> class.
            </summary><param name="underlineColor">The <see cref="T:System.Drawing.Color" /> in which to draw the wave line.</param></member><member name="M:ActiproSoftware.SyntaxEditor.WaveLineSpanIndicator.#ctor(System.String,System.Drawing.Color)"><summary>
            Initializes a new instance of the <c>WaveLineSpanIndicator</c> class.
            </summary><param name="name">The name to identify the type of indicator.</param><param name="underlineColor">The <see cref="T:System.Drawing.Color" /> in which to draw the wave line.</param></member><member name="P:ActiproSoftware.SyntaxEditor.WaveLineSpanIndicator.HasFontChange"><summary>
            Gets whether the span indicator contains a font-related change.
            </summary><value><c>true</c> if the span indicator contains a font-related change; otherwise, <c>false</c>.
            </value><remarks>
            This property lets <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor" /> know whether display lines need to be recalculated
            when the span indicator is added.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.WaveLineSpanIndicator.UnderlineColor"><summary>
            Gets or sets the <see cref="T:System.Drawing.Color" /> in which to draw the wave line.
            </summary><value>The <see cref="T:System.Drawing.Color" /> in which to draw the wave line.</value></member><member name="T:ActiproSoftware.SyntaxEditor.CompilerErrorSpanIndicator"><summary>
            Represents a compiler error wave line span indicator.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.CompilerErrorSpanIndicator.#ctor"><summary>
            Initializes a new instance of the <c>CompilerErrorSpanIndicator</c> class.
            </summary></member><member name="P:ActiproSoftware.SyntaxEditor.CompilerErrorSpanIndicator.DefaultName"><summary>
            Gets the default name for the indicator.
            </summary><value>The default name for the indicator.</value></member><member name="T:ActiproSoftware.SyntaxEditor.SyntaxErrorSpanIndicator"><summary>
            Represents a syntax error wave line span indicator.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxErrorSpanIndicator.#ctor"><summary>
            Initializes a new instance of the <c>SyntaxErrorSpanIndicator</c> class.
            </summary></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxErrorSpanIndicator.DefaultName"><summary>
            Gets the default name for the indicator.
            </summary><value>The default name for the indicator.</value></member><member name="T:ActiproSoftware.SyntaxEditor.SpellingErrorSpanIndicator"><summary>
            Represents a spelling error wave line span indicator.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.SpellingErrorSpanIndicator.#ctor"><summary>
            Initializes a new instance of the <c>SpellingErrorSpanIndicator</c> class.
            </summary></member><member name="P:ActiproSoftware.SyntaxEditor.SpellingErrorSpanIndicator.DefaultName"><summary>
            Gets the default name for the indicator.
            </summary><value>The default name for the indicator.</value></member><member name="T:ActiproSoftware.SyntaxEditor.GrammarErrorSpanIndicator"><summary>
            Represents a grammar error wave line span indicator.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.GrammarErrorSpanIndicator.#ctor"><summary>
            Initializes a new instance of the <c>GrammarErrorSpanIndicator</c> class.
            </summary></member><member name="P:ActiproSoftware.SyntaxEditor.GrammarErrorSpanIndicator.DefaultName"><summary>
            Gets the default name for the indicator.
            </summary><value>The default name for the indicator.</value></member><member name="T:ActiproSoftware.SyntaxEditor.HighlightingStyleSpanIndicator"><summary>
            Represents a span indicator that draws text using the specified <see cref="P:ActiproSoftware.SyntaxEditor.HighlightingStyleSpanIndicator.HighlightingStyle" />.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.HighlightingStyleSpanIndicator.ApplyHighlightingStyleAdornments(ActiproSoftware.SyntaxEditor.HighlightingStyleResolver)"><summary>
            Applies the adornments of the span indicator to the specified <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyleResolver" />.
            </summary><param name="resolver">The <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyleResolver" /> to modify.</param></member><member name="M:ActiproSoftware.SyntaxEditor.HighlightingStyleSpanIndicator.ApplyHighlightingStyleColors(ActiproSoftware.SyntaxEditor.HighlightingStyleResolver)"><summary>
            Applies the foreground and background colors of the span indicator to the specified <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyleResolver" />.
            </summary><param name="resolver">The <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyleResolver" /> to modify.</param></member><member name="M:ActiproSoftware.SyntaxEditor.HighlightingStyleSpanIndicator.ApplyHighlightingStyleFont(ActiproSoftware.SyntaxEditor.HighlightingStyleResolver)"><summary>
            Applies the font changes of the span indicator to the specified <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyleResolver" />.
            </summary><param name="resolver">The <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyleResolver" /> to modify.</param></member><member name="M:ActiproSoftware.SyntaxEditor.HighlightingStyleSpanIndicator.#ctor(System.String,ActiproSoftware.SyntaxEditor.HighlightingStyle)"><summary>
            Initializes a new instance of the <c>HighlightingStyleSpanIndicator</c> class.
            </summary><param name="name">The name to identify the type of indicator.</param><param name="highlightingStyle">The <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyle" /> with which to draw the encompassed text.</param></member><member name="P:ActiproSoftware.SyntaxEditor.HighlightingStyleSpanIndicator.HasFontChange"><summary>
            Gets whether the span indicator contains a font-related change.
            </summary><value><c>true</c> if the span indicator contains a font-related change; otherwise, <c>false</c>.
            </value><remarks>
            This property lets <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor" /> know whether display lines need to be recalculated
            when the span indicator is added.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.HighlightingStyleSpanIndicator.HighlightingStyle"><summary>
            Gets or sets the <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyle" /> with which to draw the encompassed text.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyle" /> with which to draw the encompassed text.</value></member><member name="T:ActiproSoftware.SyntaxEditor.ReadOnlySpanIndicator"><summary>
            Represents a span indicator that can be used to mark read-only ranges of text.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.ReadOnlySpanIndicator.ApplyHighlightingStyleColors(ActiproSoftware.SyntaxEditor.HighlightingStyleResolver)"><summary>
            Applies the foreground and background colors of the span indicator to the specified <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyleResolver" />.
            </summary><param name="resolver">The <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyleResolver" /> to modify.</param></member><member name="M:ActiproSoftware.SyntaxEditor.ReadOnlySpanIndicator.#ctor"><summary>
            Initializes a new instance of the <c>ReadOnlySpanIndicator</c> class.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.ReadOnlySpanIndicator.#ctor(System.String,System.Drawing.Color)"><summary>
            Initializes a new instance of the <c>ReadOnlySpanIndicator</c> class.
            </summary><param name="name">The name to identify the type of indicator.</param><param name="backColor">The background <see cref="T:System.Drawing.Color" /> for the indicator.</param></member><member name="P:ActiproSoftware.SyntaxEditor.ReadOnlySpanIndicator.DefaultName"><summary>
            Gets the default name for the indicator.
            </summary><value>The default name for the indicator.</value></member><member name="P:ActiproSoftware.SyntaxEditor.ReadOnlySpanIndicator.HasFontChange"><summary>
            Gets whether the span indicator contains a font-related change.
            </summary><value><c>true</c> if the span indicator contains a font-related change; otherwise, <c>false</c>.
            </value><remarks>
            This property lets <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor" /> know whether display lines need to be recalculated
            when the span indicator is added.
            </remarks></member><member name="T:ActiproSoftware.SyntaxEditor.SpanIndicatorLayerCollection"><summary>
            Represents collection of <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicatorLayer" /> objects.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.SpanIndicatorLayerCollection.Add(ActiproSoftware.SyntaxEditor.SpanIndicatorLayer)"><summary>
            Adds the <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicatorLayer" /> to the collection.
            </summary><param name="layer">The <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicatorLayer" /> to add.</param><returns>The index at which the <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicatorLayer" /> was inserted.</returns><remarks>
            The <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicatorLayer" /> will be inserted based on its <see cref="P:ActiproSoftware.SyntaxEditor.SpanIndicatorLayer.DisplayPriority" /></remarks></member><member name="M:ActiproSoftware.SyntaxEditor.SpanIndicatorLayerCollection.AddDisappearingSpanIndicator(System.Int32,ActiproSoftware.SyntaxEditor.TextRange)"><summary>
            Provides a shortcut to add a disappearing span indicator.
            </summary><param name="milliseconds">The length in time to display the indicator (in milliseconds).</param><param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> over which to add the indicator.</param><remarks>
            Only one disappearing indicator will be displayed at a time.  Once the time expires, the disappearing indicator will be removed.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.SpanIndicatorLayerCollection.AddDisappearingSpanIndicator(ActiproSoftware.SyntaxEditor.DisappearingSpanIndicator,ActiproSoftware.SyntaxEditor.TextRange)"><summary>
            Provides a shortcut to add a disappearing span indicator.
            </summary><param name="indicator">The <see cref="T:ActiproSoftware.SyntaxEditor.DisappearingSpanIndicator" /> to add.</param><param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> over which to add the indicator.</param><remarks>
            Only one disappearing indicator will be displayed at a time.  Once the time expires, the disappearing indicator will be removed.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.SpanIndicatorLayerCollection.Clear"><summary>
            Removes all <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicatorLayer" /> objects from the collection. 
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.SpanIndicatorLayerCollection.Contains(System.String)"><summary>
            Returns whether the collection contains a <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicatorLayer" /> with the specified key.
            </summary><param name="key">The key of the <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicatorLayer" /> to look for.</param><returns><c>true</c> if the collection contains a <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicatorLayer" /> with the specified key; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.SpanIndicatorLayerCollection.CopyTo(System.Array,System.Int32)"><summary>
            Copies the elements of the collection to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index. 
            </summary><param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from the collection. The <see cref="T:System.Array" /> must have zero-based indexing.</param><param name="index">The zero-based index in array at which copying begins.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SpanIndicatorLayerCollection.GetEnumerator"><summary>
            Retrieves an <c>IEnumerator</c> object for the entire collection.
            </summary><returns>An <c>IEnumerator</c> object for the entire collection</returns><remarks>
            Enumerators are intended to be used only to read data in the collection. 
            Enumerators cannot be used to modify the underlying collection.
            <para>
            The enumerator does not have exclusive access to the collection.
            </para><para>
            When an enumerator is instantiated, it takes a snapshot of the current state of the collection. 
            If changes are made to the collection, such as adding, modifying or deleting elements, the 
            snapshot gets out of sync and the enumerator throws an <c>InvalidOperationException</c>. 
            Two enumerators instantiated from the same collection at the same time can have 
            different snapshots of the collection.
            </para></remarks></member><member name="M:ActiproSoftware.SyntaxEditor.SpanIndicatorLayerCollection.GetIndicatorsForTextRange(ActiproSoftware.SyntaxEditor.TextRange,System.Boolean)"><summary>
            Returns an array of all the <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicator" /> objects that overlap the specified <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" />.
            </summary><param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> to examine.</param><param name="onlyVisible">Whether to only retrieve indicators for visible layers.</param><returns>An array of all the <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicator" /> objects that overlap the specified <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" />.</returns><remarks>
            Use the <see cref="M:ActiproSoftware.SyntaxEditor.SpanIndicatorLayer.GetIndicatorsForTextRange(ActiproSoftware.SyntaxEditor.TextRange)" /> method if you know the specific layer in which to obtain results
            since that will be faster than this method.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.SpanIndicatorLayerCollection.IndexOf(System.String)"><summary>
            Finds the index of the <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicatorLayer" /> with the specified key within the collection.
            </summary><param name="key">The key of the <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicatorLayer" /> to look for.</param><returns>The index of the <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicatorLayer" /> with the specified key within the collection.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.SpanIndicatorLayerCollection.Remove(ActiproSoftware.SyntaxEditor.SpanIndicatorLayer)"><summary>
            Removes the specified <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicatorLayer" /> from the collection. 
            </summary><param name="layer">The <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicatorLayer" /> to remove.</param></member><member name="P:ActiproSoftware.SyntaxEditor.SpanIndicatorLayerCollection.Count"><summary>
            Gets the number of <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicatorLayer" /> objects in the collection.
            </summary><value>The number of <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicatorLayer" /> objects in the collection.</value></member><member name="P:ActiproSoftware.SyntaxEditor.SpanIndicatorLayerCollection.SyncRoot"><summary>
            Gets an object that can be used to synchronize access to the collection. 
            </summary><value>An object that can be used to synchronize access to the collection.</value></member><member name="P:ActiproSoftware.SyntaxEditor.SpanIndicatorLayerCollection.Item(System.Int32)"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicatorLayer" /> at the specified index. 
            <para>
            [C#] In C#, this property is the indexer for the <c>SpanIndicatorLayerCollection</c> class. 
            </para></summary><param name="index">The index of the <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicatorLayer" /> to return.</param><value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicatorLayer" /> at the specified index. 
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.SpanIndicatorLayerCollection.Item(System.String)"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicatorLayer" /> with the specified key. 
            <para>
            [C#] In C#, this property is the indexer for the <c>SpanIndicatorLayerCollection</c> class. 
            </para></summary><param name="key">The key of the <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicatorLayer" /> to return.</param><value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicatorLayer" /> with the specified key. 
            </value></member><member name="T:ActiproSoftware.SyntaxEditor.TextRangeLayerBase"><summary>
            Represents a sorted layer of <see cref="T:ActiproSoftware.SyntaxEditor.ITextRange" /> objects that cannot overlap.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.TextRangeLayerBase.Contains(System.Int32)"><summary>
            Returns whether the specified offset is contained by a <see cref="T:ActiproSoftware.SyntaxEditor.ITextRange" /> in the layer.
            </summary><param name="offset">The offset to look for in the layer.</param><returns><c>true</c> if the offset is in the layer; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.TextRangeLayerBase.CopyTo(System.Array,System.Int32)"><summary>
            Copies the elements of the collection to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index. 
            </summary><param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from the collection. The <see cref="T:System.Array" /> must have zero-based indexing.</param><param name="index">The zero-based index in array at which copying begins.</param></member><member name="M:ActiproSoftware.SyntaxEditor.TextRangeLayerBase.CopyTo(System.Int32,System.Array,System.Int32,System.Int32)"><summary>
            Copies the elements of the collection to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index. 
            </summary><param name="index">The zero-based index at which copying begins.</param><param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from the collection. The <see cref="T:System.Array" /> must have zero-based indexing.</param><param name="arrayIndex">The zero-based index in array at which copying begins.</param><param name="count">The number of items to copy.</param></member><member name="M:ActiproSoftware.SyntaxEditor.TextRangeLayerBase.GetEnumerator"><summary>
            Retrieves an <c>IEnumerator</c> object for the entire collection.
            </summary><returns>An <c>IEnumerator</c> object for the entire collection</returns><remarks>
            Enumerators are intended to be used only to read data in the collection. 
            Enumerators cannot be used to modify the underlying collection.
            <para>
            The enumerator does not have exclusive access to the collection.
            </para><para>
            When an enumerator is instantiated, it takes a snapshot of the current state of the collection. 
            If changes are made to the collection, such as adding, modifying or deleting elements, the 
            snapshot gets out of sync and the enumerator throws an <c>InvalidOperationException</c>. 
            Two enumerators instantiated from the same collection at the same time can have 
            different snapshots of the collection.
            </para></remarks></member><member name="M:ActiproSoftware.SyntaxEditor.TextRangeLayerBase.GetTextRange(System.Int32)"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.ITextRange" /> at the specified index.
            </summary><param name="index">The index to examine.</param><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.ITextRange" /> at the specified index.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.TextRangeLayerBase.IndexOf(System.Int32)"><summary>
            Returns the index of the <see cref="T:ActiproSoftware.SyntaxEditor.ITextRange" /> in the layer that contains the specified offset.
            </summary><param name="offset">The offset to look for in the layer.</param><returns>The index of the <see cref="T:ActiproSoftware.SyntaxEditor.ITextRange" /> in the layer that contains the specified offset.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.TextRangeLayerBase.NotifyDocumentTextChanged(ActiproSoftware.SyntaxEditor.DocumentModificationEventArgs)"><summary>
            Occurs after the document text is changed.
            </summary><param name="e">A <c>DocumentModificationEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.TextRangeLayerBase.NotifyDocumentTextChanging(ActiproSoftware.SyntaxEditor.DocumentModificationEventArgs)"><summary>
            Occurs before the document text is changed.
            </summary><param name="e">A <c>DocumentModificationEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.TextRangeLayerBase.OverlapsWith(ActiproSoftware.SyntaxEditor.TextRange)"><summary>
            Returns whether the specified <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> overlaps with a <see cref="T:ActiproSoftware.SyntaxEditor.ITextRange" /> in the layer.
            </summary><param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> to examine.</param><returns><c>true</c> if the specified <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> overlaps with a <see cref="T:ActiproSoftware.SyntaxEditor.ITextRange" /> in the layer; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.TextRangeLayerBase.#ctor(System.String)"><summary>
            Initializes a new instance of the <c>TextRangeLayerBase</c> class.
            </summary><param name="key">A unique string key that describes the layer.</param></member><member name="P:ActiproSoftware.SyntaxEditor.TextRangeLayerBase.Count"><summary>
            Gets the number of <see cref="T:ActiproSoftware.SyntaxEditor.ITextRange" /> objects in the layer.
            </summary><value>The number of <see cref="T:ActiproSoftware.SyntaxEditor.ITextRange" /> objects in the layer.</value></member><member name="P:ActiproSoftware.SyntaxEditor.TextRangeLayerBase.IsSynchronized"><summary>
            Gets a value indicating whether access to the collection is synchronized (thread safe). 
            </summary><value><c>true</c> if access to the collection is synchronized (thread safe); otherwise, <c>false</c>. 
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.TextRangeLayerBase.Key"><summary>
            Gets a unique string key that describes the layer.
            </summary><value>A unique string key that describes the layer.</value></member><member name="P:ActiproSoftware.SyntaxEditor.TextRangeLayerBase.SyncRoot"><summary>
            Gets an object that can be used to synchronize access to the collection. 
            </summary><value>An object that can be used to synchronize access to the collection.</value></member><member name="P:ActiproSoftware.SyntaxEditor.TextRangeLayerBase.Tag"><summary>
            Gets or sets the object that contains user-defined data about the object.
            </summary><value>
            An <see cref="T:System.Object" /> that contains user-defined data about the control. The default is <see langword="null" />.
            </value><remarks>
            Any type derived from the <see cref="T:System.Object" /> class can be assigned to this property. 
            </remarks></member><member name="T:ActiproSoftware.SyntaxEditor.SpanIndicatorLayer"><summary>
            Represents a sorted layer of <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicator" /> objects that cannot overlap.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.SpanIndicatorLayer.Add(ActiproSoftware.SyntaxEditor.SpanIndicator,System.Int32,System.Int32)"><summary>
            Adds the <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicator" /> to the layer.
            </summary><param name="indicator">The <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicator" /> to add.</param><param name="offset">The offset at which to apply the <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicator" />.</param><param name="length">The length of the <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicator" />.</param><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicator" /> that was added.</returns><remarks>
            The <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicator" /> may not overlap with any other <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicator" /> in the
            layer or an exception will be raised.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.SpanIndicatorLayer.Add(ActiproSoftware.SyntaxEditor.SpanIndicator,ActiproSoftware.SyntaxEditor.TextRange)"><summary>
            Adds the <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicator" /> to the layer.
            </summary><param name="indicator">The <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicator" /> to add.</param><param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> over which to apply the <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicator" />.</param><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicator" /> that was added.</returns><remarks>
            The <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicator" /> may not overlap with any other <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicator" /> in the
            layer or an exception will be raised.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.SpanIndicatorLayer.Add(ActiproSoftware.SyntaxEditor.SpanIndicator,ActiproSoftware.SyntaxEditor.TextRange,System.Boolean)"><summary>
            Adds the <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicator" /> to the layer.
            </summary><param name="indicator">The <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicator" /> to add.</param><param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> over which to apply the <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicator" />.</param><param name="throwOnTextRangeException">Whether to throw an exception if an <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" />-related exception of the indicator occurs.</param><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicator" /> that was added, if the indicator did not overlap another indicator in the layer.</returns><remarks>
            The <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicator" /> may not overlap with any other <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicator" /> in the layer.
            If it does and the <paramref name="throwOnTextRangeException" /> parameter is <c>true</c>, an exception will be raised.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.SpanIndicatorLayer.Clear"><summary>
            Removes all <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicator" /> objects from the layer. 
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.SpanIndicatorLayer.Clear(System.String)"><summary>
            Removes all <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicator" /> objects with the specified <see cref="P:ActiproSoftware.SyntaxEditor.Indicator.Name" /> from the layer. 
            </summary><param name="name">The name of the type of indicators to remove.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SpanIndicatorLayer.Contains(ActiproSoftware.SyntaxEditor.SpanIndicator)"><summary>
            Returns whether the layer contains the specified <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicator" />.
            </summary><param name="indicator">The <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicator" /> to look for.</param><returns><c>true</c> if the layer contains the specified <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicator" />; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.SpanIndicatorLayer.Contains(System.String)"><summary>
            Returns whether the layer contains a <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicator" /> with the specified name.
            </summary><param name="name">The name of the <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicator" /> to look for.</param><returns><c>true</c> if the layer contains a <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicator" /> with the specified name; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.SpanIndicatorLayer.GetIndicatorsForTextRange(ActiproSoftware.SyntaxEditor.TextRange)"><summary>
            Returns an array of all the <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicator" /> objects that overlap the specified <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" />.
            </summary><param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> to examine.</param><returns>An array of all the <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicator" /> objects that overlap the specified <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" />.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.SpanIndicatorLayer.IndexOf(ActiproSoftware.SyntaxEditor.SpanIndicator)"><summary>
            Returns the index of the specified <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicator" /> in the layer.
            </summary><param name="indicator">The <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicator" /> to look for.</param><returns>
            If found, the index where the <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicator" /> is in the layer; otherwise, <c>-1</c>. 
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.SpanIndicatorLayer.IndexOf(System.String)"><summary>
            Finds the index of the <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicator" /> with the specified name within the layer.
            </summary><param name="name">The name of the <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicator" /> to look for.</param><returns>The index of the <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicator" /> with the specified name within the layer.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.SpanIndicatorLayer.NotifyDocumentTextChanged(ActiproSoftware.SyntaxEditor.DocumentModificationEventArgs)"><summary>
            Occurs after the document text is changed.
            </summary><param name="e">A <c>DocumentModificationEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SpanIndicatorLayer.NotifyDocumentTextChanging(ActiproSoftware.SyntaxEditor.DocumentModificationEventArgs)"><summary>
            Occurs before the document text is changed.
            </summary><param name="e">A <c>DocumentModificationEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SpanIndicatorLayer.Remove(ActiproSoftware.SyntaxEditor.SpanIndicator)"><summary>
            Removes the specified <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicator" /> from the layer. 
            </summary><param name="indicator">The <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicator" /> to remove.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SpanIndicatorLayer.RemoveAt(System.Int32)"><summary>
            Removes the <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicator" /> at the specified index from the layer. 
            </summary><param name="index">The index of the <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicator" /> to remove.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SpanIndicatorLayer.#ctor(System.String,System.Int32)"><summary>
            Initializes a new instance of the <c>SpanIndicatorLayer</c> class.
            </summary><param name="key">A unique string key that describes the layer.</param><param name="displayPriority">The display priority of the layer, which is used to sort the layer against other layers.</param></member><member name="P:ActiproSoftware.SyntaxEditor.SpanIndicatorLayer.DisplayPriority"><summary>
            Gets the display priority of the layer, which is used to sort the layer against other layers.
            </summary><value>The display priority of the layer.</value><remarks>
            Higher priority layers can override lower priority layers.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.SpanIndicatorLayer.IsBound"><summary>
            Gets whether the layer is bound to a <see cref="T:ActiproSoftware.SyntaxEditor.Document" />.
            </summary><value><c>true</c> if the indicator is bound to a <see cref="T:ActiproSoftware.SyntaxEditor.Document" />; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.SpanIndicatorLayer.Document"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> that contains the layer.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> that contains the layer.</value></member><member name="P:ActiproSoftware.SyntaxEditor.SpanIndicatorLayer.Item(System.Int32)"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicator" /> at the specified index. 
            <para>
            [C#] In C#, this property is the indexer for the <c>SpanIndicatorLayer</c> class. 
            </para></summary><param name="index">The index of the <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicator" /> to return.</param><value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicator" /> at the specified index. 
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.SpanIndicatorLayer.Visible"><summary>
            Gets or sets whether the layer is visible.
            </summary><value><c>true</c> if the layer is visible; otherwise, <c>false</c>.
            </value></member><member name="F:ActiproSoftware.SyntaxEditor.SpanIndicatorLayer.BracketHighlightingDisplayPriority"><summary>
            The default display priority of the bracket highlighting layer.
            </summary><value>The default value is <c>500</c>.</value></member><member name="F:ActiproSoftware.SyntaxEditor.SpanIndicatorLayer.BracketHighlightingKey"><summary>
            The key of the bracket highlighting layer.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.SpanIndicatorLayer.BreakpointDisplayPriority"><summary>
            The default display priority of the breakpoint layer.
            </summary><value>The default value is <c>200</c>.</value></member><member name="F:ActiproSoftware.SyntaxEditor.SpanIndicatorLayer.BreakpointKey"><summary>
            The key of the breakpoint layer.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.SpanIndicatorLayer.CodeSnippetsDisplayPriority"><summary>
            The default display priority of the code snippets layer.
            </summary><value>The default value is <c>400</c>.</value></member><member name="F:ActiproSoftware.SyntaxEditor.SpanIndicatorLayer.CodeSnippetsKey"><summary>
            The key of the code snippets layer.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.SpanIndicatorLayer.CurrentStatementDisplayPriority"><summary>
            The default display priority of the current statement layer.
            </summary><value>The default value is <c>300</c>.</value></member><member name="F:ActiproSoftware.SyntaxEditor.SpanIndicatorLayer.CurrentStatementKey"><summary>
            The key of the current statement layer.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.SpanIndicatorLayer.DisappearingDisplayPriority"><summary>
            The default display priority of the disappearing layer.
            </summary><value>The default value is <c>700</c>.</value></member><member name="F:ActiproSoftware.SyntaxEditor.SpanIndicatorLayer.DisappearingKey"><summary>
            The key of the disappearing layer.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.SpanIndicatorLayer.FindResultDisplayPriority"><summary>
            The default display priority of the find result layer.
            </summary><value>The default value is <c>600</c>.</value></member><member name="F:ActiproSoftware.SyntaxEditor.SpanIndicatorLayer.FindResultKey"><summary>
            The key of the find result layer.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.SpanIndicatorLayer.ReadOnlyDisplayPriority"><summary>
            The default display priority of the read-only layer.
            </summary><value>The default value is <c>0</c>.</value></member><member name="F:ActiproSoftware.SyntaxEditor.SpanIndicatorLayer.ReadOnlyKey"><summary>
            The key of the read-only layer.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.SpanIndicatorLayer.SmartTagsPriority"><summary>
            The default display priority of the smart tags layer.
            </summary><value>The default value is <c>800</c>.</value></member><member name="F:ActiproSoftware.SyntaxEditor.SpanIndicatorLayer.SmartTagsKey"><summary>
            The key of the smart tags layer.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.SpanIndicatorLayer.SyntaxErrorDisplayPriority"><summary>
            The default display priority of the syntax error layer.
            </summary><value>The default value is <c>900</c>.</value></member><member name="F:ActiproSoftware.SyntaxEditor.SpanIndicatorLayer.SyntaxErrorKey"><summary>
            The key of the syntax error layer.
            </summary></member><member name="T:ActiproSoftware.SyntaxEditor.CaseSensitivity"><summary>
            Represents the type of case sensitivity to apply.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.CaseSensitivity.Sensitive"><summary>
            Case sensitive - exact letter case is matched.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.CaseSensitivity.Insensitive"><summary>
            Case insensitive - upper and lower case of a letter is matched.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.CaseSensitivity.AutoCorrect"><summary>
            Treated the same as <c>Insensitive</c> however the text is converted to the exact pattern if not already equal to it.
            This is useful for languages like <c>VB.NET</c> where keywords should be forced to be certain combinations of mixed case letters.
            </summary></member><member name="T:ActiproSoftware.SyntaxEditor.IWordBreakFinder"><summary>
            Provides the base requirements for an object that finds word breaks within a <see cref="T:ActiproSoftware.SyntaxEditor.Document" />.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.IWordBreakFinder.FindCurrentWordEnd(ActiproSoftware.SyntaxEditor.Document,System.Int32)"><summary>
            Returns the <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> offset of the word end character that occurs at or after the specified start offset.
            </summary><param name="document">The <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> to examine.</param><param name="startOffset">The offset from which to start parsing.</param><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> offset of the word end character that occurs at or after the specified start offset.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.IWordBreakFinder.FindCurrentWordStart(ActiproSoftware.SyntaxEditor.Document,System.Int32)"><summary>
            Returns the <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> offset of the word start character that occurs at or before the specified start offset.
            </summary><param name="document">The <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> to examine.</param><param name="startOffset">The offset from which to start parsing.</param><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> offset of the word start character that occurs at or before the specified start offset.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.IWordBreakFinder.FindNextWordStart(ActiproSoftware.SyntaxEditor.Document,System.Int32)"><summary>
            Returns the <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> offset of the word start character that occurs after the specified start offset.
            </summary><param name="document">The <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> to examine.</param><param name="startOffset">The offset from which to start parsing.</param><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> offset of the word start character that occurs after the specified start offset.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.IWordBreakFinder.FindPreviousWordStart(ActiproSoftware.SyntaxEditor.Document,System.Int32)"><summary>
            Returns the <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> offset of the word start character that occurs before the specified start offset.
            </summary><param name="document">The <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> to examine.</param><param name="startOffset">The offset from which to start parsing.</param><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> offset of the word start character that occurs before the specified start offset.</returns></member><member name="T:ActiproSoftware.SyntaxEditor.DefaultWordBreakFinder"><summary>
            Provides the default implementation of an object that finds word breaks within a <see cref="T:ActiproSoftware.SyntaxEditor.Document" />.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.DefaultWordBreakFinder.FindCurrentWordEnd(ActiproSoftware.SyntaxEditor.Document,System.Int32)"><summary>
            Returns the <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> offset of the word end character that occurs at or after the specified start offset.
            </summary><param name="document">The <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> to examine.</param><param name="startOffset">The offset from which to start parsing.</param><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> offset of the word end character that occurs at or after the specified start offset.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.DefaultWordBreakFinder.FindCurrentWordStart(ActiproSoftware.SyntaxEditor.Document,System.Int32)"><summary>
            Returns the <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> offset of the word start character that occurs at or before the specified start offset.
            </summary><param name="document">The <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> to examine.</param><param name="startOffset">The offset from which to start parsing.</param><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> offset of the word start character that occurs at or before the specified start offset.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.DefaultWordBreakFinder.FindNextWordStart(ActiproSoftware.SyntaxEditor.Document,System.Int32)"><summary>
            Returns the <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> offset of the word start character that occurs after the specified start offset.
            </summary><param name="document">The <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> to examine.</param><param name="startOffset">The offset from which to start parsing.</param><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> offset of the word start character that occurs after the specified start offset.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.DefaultWordBreakFinder.FindPreviousWordStart(ActiproSoftware.SyntaxEditor.Document,System.Int32)"><summary>
            Returns the <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> offset of the word start character that occurs before the specified start offset.
            </summary><param name="document">The <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> to examine.</param><param name="startOffset">The offset from which to start parsing.</param><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> offset of the word start character that occurs before the specified start offset.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.DefaultWordBreakFinder.GetDefaultWordContainsAdditionalCharacters"><summary>
            Gets the default <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> for the <see cref="P:ActiproSoftware.SyntaxEditor.DefaultWordBreakFinder.WordContainsAdditionalCharacters" /> property.
            </summary><returns>The default <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> for the <see cref="P:ActiproSoftware.SyntaxEditor.DefaultWordBreakFinder.WordContainsAdditionalCharacters" /> property.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.DefaultWordBreakFinder.GetDefaultWordStandaloneCharacters"><summary>
            Gets the default <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> for the <see cref="P:ActiproSoftware.SyntaxEditor.DefaultWordBreakFinder.WordStandaloneCharacters" /> property.
            </summary><returns>The default <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> for the <see cref="P:ActiproSoftware.SyntaxEditor.DefaultWordBreakFinder.WordStandaloneCharacters" /> property.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.DefaultWordBreakFinder.ResetWordContainsAdditionalCharacters"><summary>
            Resets the <see cref="P:ActiproSoftware.SyntaxEditor.DefaultWordBreakFinder.WordContainsAdditionalCharacters" /> property to its default value.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.DefaultWordBreakFinder.ShouldSerializeWordContainsAdditionalCharacters"><summary>
            Indicates whether the <see cref="P:ActiproSoftware.SyntaxEditor.DefaultWordBreakFinder.WordContainsAdditionalCharacters" /> property should be persisted.
            </summary><returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.DefaultWordBreakFinder.ResetWordStandaloneCharacters"><summary>
            Resets the <see cref="P:ActiproSoftware.SyntaxEditor.DefaultWordBreakFinder.WordStandaloneCharacters" /> property to its default value.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.DefaultWordBreakFinder.ShouldSerializeWordStandaloneCharacters"><summary>
            Indicates whether the <see cref="P:ActiproSoftware.SyntaxEditor.DefaultWordBreakFinder.WordStandaloneCharacters" /> property should be persisted.
            </summary><returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.DefaultWordBreakFinder.#ctor"><summary>
            Initializes a new instance of the <c>DefaultWordBreakFinder</c> class. 
            </summary><remarks>
            The default constructor initializes all fields to their default values.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.DefaultWordBreakFinder.WordContainsAdditionalCharacters"><summary>
            Gets or sets the set of additional characters that can constitute the inside of a word, other than letters and digits.
            </summary><value>The set of additional characters that can constitute the inside of a word, other than letters and digits.</value><remarks>
            The default value is the <c>_</c> character.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.DefaultWordBreakFinder.WordStandaloneCharacters"><summary>
            Gets or sets the set of characters that are intended to be single character words.
            </summary><value>The set of characters that are intended to be single character words.</value><remarks>
            The default value is the set of <c>.,()&lt;&gt;[]{}?!\/:;'"</c> characters.
            </remarks></member><member name="T:ActiproSoftware.SyntaxEditor.DocumentModification"><summary>
            Represents a document modification.
            </summary><remarks>
            All document modifications are represented in terms of a replace operation.
            The <see cref="P:ActiproSoftware.SyntaxEditor.DocumentModification.StartOffset" /> property indicates the offset at which the modification occurs.
            For delete operations, the <see cref="P:ActiproSoftware.SyntaxEditor.DocumentModification.InsertedText" /> length is <c>0</c>.
            For insert operations that have no selection of text to be replaced, the <see cref="P:ActiproSoftware.SyntaxEditor.DocumentModification.DeletedText" /> length is <c>0</c>.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.DocumentModification.HasFlag(ActiproSoftware.SyntaxEditor.DocumentModificationFlags)"><summary>
            Returns whether the modification has the specified <see cref="T:ActiproSoftware.SyntaxEditor.DocumentModificationFlags" /> flag.
            </summary><param name="flag">The <see cref="T:ActiproSoftware.SyntaxEditor.DocumentModificationFlags" /> to check for.</param><returns><c>true</c> if the modification has the specified <see cref="T:ActiproSoftware.SyntaxEditor.DocumentModificationFlags" /> flag; otherwise, <c>false</c>.
            </returns></member><member name="P:ActiproSoftware.SyntaxEditor.DocumentModification.DeletedText"><summary>
            Gets the text that was deleted by the modification.
            </summary><value>The text that was deleted by the modification.</value></member><member name="P:ActiproSoftware.SyntaxEditor.DocumentModification.DeletionEndOffset"><summary>
            Gets the offset at which the deletion ended.
            </summary><value>The offset at which the deletion ended.</value></member><member name="P:ActiproSoftware.SyntaxEditor.DocumentModification.DeletionEndLineIndex"><summary>
            Gets the document line index at which the deletion ended.
            </summary><value>The document line index at which the deletion ended.</value></member><member name="P:ActiproSoftware.SyntaxEditor.DocumentModification.InsertedText"><summary>
            Gets the text that was inserted by the modification.
            </summary><value>The text that was inserted by the modification.</value></member><member name="P:ActiproSoftware.SyntaxEditor.DocumentModification.InsertionEndOffset"><summary>
            Gets the offset at which the insertion ended.
            </summary><value>The offset at which the insertion ended.</value></member><member name="P:ActiproSoftware.SyntaxEditor.DocumentModification.InsertionEndLineIndex"><summary>
            Gets the document line index at which the insertion ended.
            </summary><value>The document line index at which the insertion ended.</value></member><member name="P:ActiproSoftware.SyntaxEditor.DocumentModification.LengthDelta"><summary>
            Gets the net change in length to the document after performing the modification.
            </summary><value>The net change in length to the document after performing the modification.</value><remarks>
            This value is the length of <see cref="P:ActiproSoftware.SyntaxEditor.DocumentModification.InsertedText" /> minus the length of <see cref="P:ActiproSoftware.SyntaxEditor.DocumentModification.DeletedText" />.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.DocumentModification.LexicalParseTextRange"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> of offsets that were modified by the lexical parsing phase.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> of offsets that were modified by the lexical parsing phase.</value><remarks>
            This property returns <see cref="P:ActiproSoftware.SyntaxEditor.TextRange.Deleted" /> until after the lexical parsing phase is complete.
            Also it is not filled in if lexical parsing is suspended.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.DocumentModification.LinesDeleted"><summary>
            Gets the number of document lines deleted after performing the modification.
            </summary><value>The number of document lines deleted after performing the modification.</value></member><member name="P:ActiproSoftware.SyntaxEditor.DocumentModification.LinesDelta"><summary>
            Gets the net change in document lines after performing the modification.
            </summary><value>The net change in document lines after performing the modification.</value><remarks>
            This value is the <see cref="P:ActiproSoftware.SyntaxEditor.DocumentModification.LinesInserted" /> value minus the <see cref="P:ActiproSoftware.SyntaxEditor.DocumentModification.LinesDeleted" /> value.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.DocumentModification.LinesInserted"><summary>
            Gets the number of lines inserted after performing the modification.
            </summary><value>The number of lines inserted after performing the modification.</value></member><member name="P:ActiproSoftware.SyntaxEditor.DocumentModification.Name"><summary>
            Gets the name describing the modification type.
            </summary><value>A <c>String</c> representing the name describing the modification type.</value></member><member name="P:ActiproSoftware.SyntaxEditor.DocumentModification.OutliningParseTextRange"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> of offsets that were modified by the outlining parsing phase.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> of offsets that were modified by the outlining parsing phase.</value><remarks>
            This property returns <see cref="P:ActiproSoftware.SyntaxEditor.TextRange.Deleted" /> until after the outlining parsing phase is complete.
            Also it is not filled in if parsing is suspended or if outlining is performed in a separate thread.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.DocumentModification.StartOffset"><summary>
            Gets the offset at which the modification occurred.
            </summary><value>The offset at which the modification occurred.</value></member><member name="P:ActiproSoftware.SyntaxEditor.DocumentModification.StartOffsetIsAtLineTerminator"><summary>
            Gets whether the start offset is at a line terminator.
            </summary><value><c>true</c> if the start offset is at a line terminator; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.DocumentModification.StartLineIndex"><summary>
            Gets the document line index at which the modification occurred.
            </summary><value>The document line index at which the modification occurred.</value></member><member name="P:ActiproSoftware.SyntaxEditor.DocumentModification.Type"><summary>
            Gets an <see cref="T:ActiproSoftware.SyntaxEditor.DocumentModificationType" /> that describes why the modification is made.
            </summary><value>An <see cref="T:ActiproSoftware.SyntaxEditor.DocumentModificationType" /> that describes why the modification is made.</value></member><member name="T:ActiproSoftware.SyntaxEditor.DocumentModificationEventArgs"><summary>
            Event arguments for <see cref="P:ActiproSoftware.SyntaxEditor.DocumentModificationEventArgs.Document" /> modification events.
            </summary><remarks>
            This class is used with the <see cref="T:ActiproSoftware.SyntaxEditor.DocumentModificationEventHandler" /> delegate.
            </remarks><seealso cref="T:ActiproSoftware.SyntaxEditor.DocumentModificationEventHandler" /></member><member name="M:ActiproSoftware.SyntaxEditor.DocumentModificationEventArgs.#ctor(ActiproSoftware.SyntaxEditor.Document,ActiproSoftware.SyntaxEditor.DocumentModification)"><summary>
            Initializes a new instance of the <c>DocumentModificationEventArgs</c> class.
            </summary><param name="document">The <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> that is affected by this event.</param><param name="modification">The <see cref="T:ActiproSoftware.SyntaxEditor.DocumentModification" /> that is made to the document.</param></member><member name="P:ActiproSoftware.SyntaxEditor.DocumentModificationEventArgs.Cancel"><summary>
            Gets or sets whether to cancel the modification.
            </summary><value><c>true</c> if the modification should be cancelled; otherwise, <c>false</c>.
            </value><remarks>
            This property is only used by the <see cref="E:ActiproSoftware.SyntaxEditor.Document.PreTextChanging" /> and <see cref="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.DocumentPreTextChanging" /> events.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.DocumentModificationEventArgs.DirtyTextRange"><summary>
            Gets or sets the <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> that stores the range of character offsets that need to be repainted.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> that stores the range of character offsets that need to be repainted.</value></member><member name="P:ActiproSoftware.SyntaxEditor.DocumentModificationEventArgs.Document"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> that is affected by this event.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> that is affected by this event.</value></member><member name="P:ActiproSoftware.SyntaxEditor.DocumentModificationEventArgs.IsProgrammaticTextReplacement"><summary>
            Gets or sets whether the event is for a programmatic text replacement.
            </summary><value><c>true</c> if the event is for a programmatic text replacement; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.DocumentModificationEventArgs.Modification"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.DocumentModification" /> that is made to the document, if known.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.DocumentModification" /> that is made to the document, if known.</value></member><member name="T:ActiproSoftware.SyntaxEditor.DocumentModificationEventHandler"><summary>
            Represents the method that will handle <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> modification events.
            </summary><param name="sender">Sender of the event.</param><param name="e">A <see cref="T:ActiproSoftware.SyntaxEditor.DocumentModificationEventArgs" /> containing event data.</param><remarks>
            When you create a <c>DocumentModificationEventHandler</c> delegate, you identify the method that will handle the event. 
            To associate the event with your event handler, add an instance of the delegate to the event. 
            The event handler is called whenever the event occurs, unless you remove the delegate.
            </remarks><seealso cref="T:ActiproSoftware.SyntaxEditor.DocumentModificationEventArgs" /></member><member name="T:ActiproSoftware.SyntaxEditor.DocumentModificationFlags"><summary>
            Specifies flags for a <see cref="T:ActiproSoftware.SyntaxEditor.DocumentModification" />.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DocumentModificationFlags.None"><summary>
            There are no flags set.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DocumentModificationFlags.Delete"><summary>
            The modification involves a delete operation.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DocumentModificationFlags.Insert"><summary>
            The modification involves an insert operation.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DocumentModificationFlags.TextReplacement"><summary>
            The modification completely replaces the document's text.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DocumentModificationFlags.Undo"><summary>
            The modification is generated by an undo operation.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DocumentModificationFlags.Redo"><summary>
            The modification is generated by a redo operation.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DocumentModificationFlags.ProgrammaticTextReplacement"><summary>
            The modification completely replaces the document's text and is only caused by setting the <see cref="P:ActiproSoftware.SyntaxEditor.Document.Text" /> property.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DocumentModificationFlags.RetainSelection"><summary>
            Prevents the caret from moving to the end of the modification in the selected view.
            </summary></member><member name="T:ActiproSoftware.SyntaxEditor.DocumentModificationType"><summary>
            Designates the type of document modification.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DocumentModificationType.AutoComplete"><summary>
            An IntelliPrompt auto-complete action.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DocumentModificationType.AutoFormat"><summary>
            An auto-format action.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DocumentModificationType.AutoIndent"><summary>
            An auto-indent action.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DocumentModificationType.AutoReplace"><summary>
            An auto-replace action.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DocumentModificationType.Backspace"><summary>
            The press of the Backspace key.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DocumentModificationType.ChangeCase"><summary>
            A character casing change action.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DocumentModificationType.CommentLines"><summary>
            A comment lines action.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DocumentModificationType.ConvertSpacesToTabs"><summary>
            A convert spaces to tabs action.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DocumentModificationType.ConvertTabsToSpaces"><summary>
            A convert tabs to spaces action.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DocumentModificationType.Custom"><summary>
            A custom modification type.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DocumentModificationType.Cut"><summary>
            A cut to the clipboard action.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DocumentModificationType.Delete"><summary>
            A deletion action.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DocumentModificationType.DragAndDrop"><summary>
            A drag and drop action.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DocumentModificationType.DuplicateLine"><summary>
            A duplicate line action.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DocumentModificationType.Enter"><summary>
            The press of the Enter key.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DocumentModificationType.Indent"><summary>
            An indent action.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DocumentModificationType.InsertCodeSnippetTemplate"><summary>
            A code snippet template insertion action.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DocumentModificationType.InsertFile"><summary>
            An insert file action.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DocumentModificationType.Outdent"><summary>
            An outdent action.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DocumentModificationType.OpenLine"><summary>
            An open line action.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DocumentModificationType.Paste"><summary>
            A paste from the clipboard action.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DocumentModificationType.Replace"><summary>
            A replace action.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DocumentModificationType.ReplaceAll"><summary>
            A replace all action.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DocumentModificationType.SpellingChange"><summary>
            A spelling change action.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DocumentModificationType.ToggleCase"><summary>
            A toggle case action.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DocumentModificationType.TransposeCharacters"><summary>
            A transpose characters action.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DocumentModificationType.TransposeLines"><summary>
            A transpose lines action.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DocumentModificationType.TransposeWords"><summary>
            A transpose words action.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DocumentModificationType.TrimTrailingWhitespace"><summary>
            A trim trailing whitespace action.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DocumentModificationType.Typing"><summary>
            A typing action.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DocumentModificationType.UncommentLines"><summary>
            An uncomment lines action.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DocumentModificationType.UpdateCodeSnippetTemplateFields"><summary>
            A code snippet template update fields action.
            </summary></member><member name="T:ActiproSoftware.SyntaxEditor.DocumentLineCollection"><summary>
            Encapsulates a collection of <see cref="T:ActiproSoftware.SyntaxEditor.DocumentLine" /> objects.
            </summary><seealso cref="T:ActiproSoftware.SyntaxEditor.DocumentLine" /></member><member name="M:ActiproSoftware.SyntaxEditor.DocumentLineCollection.GetEnumerator"><summary>
            Retrieves an <c>IEnumerator</c> object for the entire collection.
            </summary><returns>An <c>IEnumerator</c> object for the entire collection</returns><remarks>
            Enumerators are intended to be used only to read data in the collection. 
            Enumerators cannot be used to modify the underlying collection.
            <para>
            The enumerator does not have exclusive access to the collection.
            </para><para>
            When an enumerator is instantiated, it takes a snapshot of the current state of the collection. 
            If changes are made to the collection, such as adding, modifying or deleting elements, the 
            snapshot gets out of sync and the enumerator throws an <c>InvalidOperationException</c>. 
            Two enumerators instantiated from the same collection at the same time can have 
            different snapshots of the collection.
            </para></remarks></member><member name="M:ActiproSoftware.SyntaxEditor.DocumentLineCollection.IndexOf(System.Int32)"><summary>
            Finds the index of the <see cref="T:ActiproSoftware.SyntaxEditor.DocumentLine" /> that contains the specified offset.
            </summary><param name="offset">The offset to look for.</param><returns>The index of the <see cref="T:ActiproSoftware.SyntaxEditor.DocumentLine" /> that contains the specified offset.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.DocumentLineCollection.RemoveAt(System.Int32)"><summary>
            Removes the <see cref="T:ActiproSoftware.SyntaxEditor.DocumentLine" /> at the specified index.
            </summary><param name="index">The index of the <see cref="T:ActiproSoftware.SyntaxEditor.DocumentLine" /> to remove.</param><returns><c>true</c> if the document line was removed; otherwise, <c>false</c>.
            </returns></member><member name="P:ActiproSoftware.SyntaxEditor.DocumentLineCollection.Count"><summary>
            Gets the number of lines in the <see cref="P:ActiproSoftware.SyntaxEditor.DocumentLineCollection.Document" />.
            </summary><value>The number of lines in the <see cref="P:ActiproSoftware.SyntaxEditor.DocumentLineCollection.Document" />.</value></member><member name="P:ActiproSoftware.SyntaxEditor.DocumentLineCollection.Document"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> that contains the lines.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> that contains the lines.</value></member><member name="P:ActiproSoftware.SyntaxEditor.DocumentLineCollection.Item(System.Int32)"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.DocumentLine" /> at the specified index. 
            <para>
            [C#] In C#, this property is the indexer for the <c>DocumentLineCollection</c> class. 
            </para></summary><param name="index">The index of the <see cref="T:ActiproSoftware.SyntaxEditor.DocumentLine" /> to return.</param><value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.DocumentLine" /> at the specified index. 
            </value></member><member name="T:ActiproSoftware.SyntaxEditor.DocumentLine"><summary>
            Represents a single line of text in a <see cref="P:ActiproSoftware.SyntaxEditor.DocumentLine.Document" />.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.DocumentLine.Contains(System.Int32)"><summary>
            Returns whether the line contains the specified offset.
            </summary><param name="offset">The offset to check.</param><returns><c>true</c> if the line contains the offset; otherwise, <c>false</c>.
            </returns><remarks>
            This method returns <c>false</c> if the offset falls on the line terminator of the line.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.DocumentLine.GetAllIndicators"><summary>
            Gets a sorted array by <see cref="P:ActiproSoftware.SyntaxEditor.Indicator.DisplayPriority" /> of all the indicators (span and line) that are on the document line.
            </summary><returns>A sorted array by <see cref="P:ActiproSoftware.SyntaxEditor.Indicator.DisplayPriority" /> of all the indicators (span and line) that are on the document line.</returns><remarks>
            Don't draw glyphs for indicators that are on invisible layers.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.DocumentLine.GetAllVisibleIndicators"><summary>
            Gets a sorted array by <see cref="P:ActiproSoftware.SyntaxEditor.Indicator.DisplayPriority" /> of all the visible indicators (span and line) that are on the document line.
            </summary><returns>A sorted array by <see cref="P:ActiproSoftware.SyntaxEditor.Indicator.DisplayPriority" /> of all the visible indicators (span and line) that are on the document line.</returns><remarks>
            Use this method to return the array of indicators for which to draw glyphs in the indicator margin.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.DocumentLine.IsLineEnd(System.Int32)"><summary>
            Returns whether the specified offset ends the line.
            </summary><param name="offset">The offset to check.</param><returns><c>true</c> if the offset ends the line; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.DocumentLine.IsLineStart(System.Int32)"><summary>
            Returns whether the specified offset starts the line.
            </summary><param name="offset">The offset to check.</param><returns><c>true</c> if the offset starts the line; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.DocumentLine.TrimTrailingWhitespace"><summary>
            Trims the trailing whitespace off the line.
            </summary></member><member name="P:ActiproSoftware.SyntaxEditor.DocumentLine.BackColor"><summary>
            Gets or sets the <see cref="T:System.Drawing.Color" /> used to fill the background of the line.
            </summary><value>The <see cref="T:System.Drawing.Color" /> used to fill the background of the line.</value></member><member name="P:ActiproSoftware.SyntaxEditor.DocumentLine.BorderBottomColor"><summary>
            Gets or sets the <see cref="T:System.Drawing.Color" /> used to draw the bottom border of the line.
            </summary><value>The <see cref="T:System.Drawing.Color" /> used to draw the bottom border of the line.</value></member><member name="P:ActiproSoftware.SyntaxEditor.DocumentLine.BorderColor"><summary>
            Gets or sets the <see cref="T:System.Drawing.Color" /> used to draw the top and bottom border of the line.
            </summary><value>The <see cref="T:System.Drawing.Color" /> used to draw the top and bottom border of the line.</value><remarks>
            This property sets both the <see cref="P:ActiproSoftware.SyntaxEditor.DocumentLine.BorderTopColor" /> and <see cref="P:ActiproSoftware.SyntaxEditor.DocumentLine.BorderBottomColor" /> properties.
            For the getter, if the colors for the top and bottom borders match, the color is returned.
            If they do not match, <c>Color.Empty</c> is returned.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.DocumentLine.BorderTopColor"><summary>
            Gets or sets the <see cref="T:System.Drawing.Color" /> used to draw the top border of the line.
            </summary><value>The <see cref="T:System.Drawing.Color" /> used to draw the top border of the line.</value></member><member name="P:ActiproSoftware.SyntaxEditor.DocumentLine.CustomLineNumber"><summary>
            Gets or sets the custom line number for the document line.
            </summary><value>The custom line number for the document line.</value><remarks>
            If specified, the custom line number is displayed in the line number margin instead of the document line index.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.DocumentLine.EndOffset"><summary>
            Gets the offset at which the line ends.
            </summary><value>The offset at which the line ends.</value></member><member name="P:ActiproSoftware.SyntaxEditor.DocumentLine.IndentAmount"><summary>
            Gets the number of columns that the first non-whitespace character is indented on the line.
            </summary><value>The number of columns that the first non-whitespace character is indented on the line.</value></member><member name="P:ActiproSoftware.SyntaxEditor.DocumentLine.Index"><summary>
            Gets the index of the line within the <see cref="P:ActiproSoftware.SyntaxEditor.DocumentLine.Document" />.
            </summary><value>The index of the line within the <see cref="P:ActiproSoftware.SyntaxEditor.DocumentLine.Document" />.</value></member><member name="P:ActiproSoftware.SyntaxEditor.DocumentLine.Length"><summary>
            Gets the length of the line, excluding the line terminator.
            </summary><value>The length of the line, excluding the line terminator.</value></member><member name="P:ActiproSoftware.SyntaxEditor.DocumentLine.LineIndicators"><summary>
            Gets the collection of <see cref="T:ActiproSoftware.SyntaxEditor.LineIndicator" /> objects that are on the line.
            </summary><value>The collection of <see cref="T:ActiproSoftware.SyntaxEditor.LineIndicator" /> objects that are on the line.</value></member><member name="P:ActiproSoftware.SyntaxEditor.DocumentLine.SelectionMarginMarkColor"><summary>
            Gets or sets the <see cref="T:System.Drawing.Color" /> used to mark the line in the selection margin.
            </summary><value>The <see cref="T:System.Drawing.Color" /> used to mark the line in the selection margin.</value><remarks>
            This value overrides any selection margin mark that would have been displayed for the line
            by automated line modification marking.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.DocumentLine.SpanIndicators"><summary>
            Gets the array of <see cref="P:ActiproSoftware.SyntaxEditor.DocumentLine.SpanIndicators" /> objects that overlap at least one character on the line.
            </summary><value>The array of <see cref="P:ActiproSoftware.SyntaxEditor.DocumentLine.SpanIndicators" /> objects that overlap at least one character on the line.</value></member><member name="P:ActiproSoftware.SyntaxEditor.DocumentLine.StartOffset"><summary>
            Gets the offset at which the line starts.
            </summary><value>The offset at which the line starts.</value></member><member name="P:ActiproSoftware.SyntaxEditor.DocumentLine.TabStopLevel"><summary>
            Gets or sets the tabstop level for the line.
            </summary><value>The tabstop level for the line.</value></member><member name="P:ActiproSoftware.SyntaxEditor.DocumentLine.Tag"><summary>
            Gets or sets the object that contains user-defined data about the object.
            </summary><value>
            An <see cref="T:System.Object" /> that contains user-defined data about the control. The default is <see langword="null" />.
            </value><remarks>
            Any type derived from the <see cref="T:System.Object" /> class can be assigned to this property. 
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.DocumentLine.Text"><summary>
            Gets or sets the text of the line, excluding the line terminator.
            </summary><value>The text of the line, excluding the line terminator.</value></member><member name="P:ActiproSoftware.SyntaxEditor.DocumentLine.TextRange"><summary>
            Gets a <see cref="P:ActiproSoftware.SyntaxEditor.DocumentLine.TextRange" /> that contains the text of the line, excluding the line terminator.
            </summary><value>A <see cref="P:ActiproSoftware.SyntaxEditor.DocumentLine.TextRange" /> that contains the text of the line, excluding the line terminator.</value></member><member name="T:ActiproSoftware.SyntaxEditor.LineTerminator"><summary>
            Specifies a type of line terminator.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.LineTerminator.Newline"><summary>
            A single newline character (ASCII value 10).
            This format is typically used on UNIX machines.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.LineTerminator.CarriageReturn"><summary>
            A single carriage return character (ASCII value 13).
            This format is typically used on Macintosh machines.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.LineTerminator.CarriageReturnNewline"><summary>
            A carriage return character (ASCII value 13) followed by a newline character (ASCII value 10).
            This format is typically used on Windows machines.
            </summary></member><member name="T:ActiproSoftware.SyntaxEditor.Document"><summary>
            Represents a text document.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Document.SaveFile(System.String,System.Text.Encoding,ActiproSoftware.SyntaxEditor.LineTerminator)"><summary>
            Saves document text to a file using the specified encoding.
            </summary><param name="path">The full path of the file of which to save.</param><param name="encoding">The <see cref="T:System.Text.Encoding" /> to use when loading the file.</param><param name="lineTerminator">A <see cref="T:ActiproSoftware.SyntaxEditor.LineTerminator" /> specifying the output format.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Document.SaveFile(System.IO.Stream,System.Text.Encoding,ActiproSoftware.SyntaxEditor.LineTerminator)"><summary>
            Saves document text to a <see cref="T:System.IO.Stream" /> using the specified encoding.
            </summary><param name="stream">The <see cref="T:System.IO.Stream" /> to write to.</param><param name="encoding">The <see cref="T:System.Text.Encoding" /> to use when loading the file.</param><param name="lineTerminator">A <see cref="T:ActiproSoftware.SyntaxEditor.LineTerminator" /> specifying the output format.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Document.SaveFileAsHtml(System.String,ActiproSoftware.SyntaxEditor.HtmlExportType,ActiproSoftware.SyntaxEditor.LineTerminator)"><summary>
            Saves document text with highlighting in HTML format to a UTF-8 encoded file.
            </summary><param name="path">The full path of the file of which to save.</param><param name="exportType">A <see cref="T:ActiproSoftware.SyntaxEditor.HtmlExportType" /> indicating the type of HTML export to perform.</param><param name="lineTerminator">A <see cref="T:ActiproSoftware.SyntaxEditor.LineTerminator" /> specifying the output format.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Document.SaveFileAsHtml(System.String,ActiproSoftware.SyntaxEditor.HtmlExportType,ActiproSoftware.SyntaxEditor.LineTerminator,System.String)"><summary>
            Saves document text with highlighting in HTML format to a UTF-8 encoded file.
            </summary><param name="path">The full path of the file of which to save.</param><param name="exportType">A <see cref="T:ActiproSoftware.SyntaxEditor.HtmlExportType" /> indicating the type of HTML export to perform.</param><param name="lineTerminator">A <see cref="T:ActiproSoftware.SyntaxEditor.LineTerminator" /> specifying the output format.</param><param name="title">The custom title to place in the HTML.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Document.SaveFileAsRtf(System.String,System.Drawing.Font,ActiproSoftware.SyntaxEditor.LineTerminator)"><summary>
            Saves document text with highlighting in rich-text format (RTF) to a UTF-8 encoded file.
            </summary><param name="font">The <see cref="T:System.Drawing.Font" /> to use in the RTF.</param><param name="path">The full path of the file of which to save.</param><param name="lineTerminator">A <see cref="T:ActiproSoftware.SyntaxEditor.LineTerminator" /> specifying the output format.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Document.SaveLanguageToXml(System.String,System.Int32)"><summary>
            Saves the syntax language to a language definition XML file.
            </summary><param name="path">The full path of the language definition file that should be created.</param><param name="encryptionKey">
            The encryption key to use for scrambling the data.
            An encryption key of <c>0</c> means not to encrypt the data, but can only be used if
            the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicSyntaxLanguage.Secure" /> property is set to <see langword="false" />.
            </param></member><member name="M:ActiproSoftware.SyntaxEditor.Document.SaveLanguageToXml(System.IO.Stream,System.Int32)"><summary>
            Saves the syntax language to a language definition XML stream.
            </summary><param name="stream">The <see cref="T:System.IO.Stream" /> into which the language should be serialized.</param><param name="encryptionKey">
            The encryption key to use for scrambling the data.
            An encryption key of <c>0</c> means not to encrypt the data, but can only be used if
            the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicSyntaxLanguage.Secure" /> property is set to <see langword="false" />.
            </param></member><member name="M:ActiproSoftware.SyntaxEditor.Document.TrimTrailingWhitespace"><summary>
            Trims the trailing whitespace off all the lines in the <see cref="T:ActiproSoftware.SyntaxEditor.Document" />.
            </summary><returns><c>true</c> if a modification was made; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.Document.TrimTrailingWhitespace(ActiproSoftware.SyntaxEditor.TextRange)"><summary>
            Trims the trailing whitespace off the specified <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> in the <see cref="T:ActiproSoftware.SyntaxEditor.Document" />.
            </summary><param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> to examine.</param><returns><c>true</c> if a modification was made; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.Document.DeleteText(ActiproSoftware.SyntaxEditor.DocumentModificationType,System.Int32,System.Int32,ActiproSoftware.SyntaxEditor.DocumentModificationOptions)"><summary>
            Performs a delete modification and allows for the specification of other options.
            </summary><param name="type">A <see cref="T:ActiproSoftware.SyntaxEditor.DocumentModificationType" /> specifying the type of modification.</param><param name="offset">The starting offset at which to delete.</param><param name="length">The number of characters to delete.</param><param name="options">The <see cref="T:ActiproSoftware.SyntaxEditor.DocumentModificationOptions" /> for the modification.</param><returns><c>true</c> if a text modification was allowed to occur; otherwise, <c>false</c>.
            </returns><seealso cref="M:ActiproSoftware.SyntaxEditor.Document.AppendText(System.String)" /><seealso cref="M:ActiproSoftware.SyntaxEditor.Document.InsertText(ActiproSoftware.SyntaxEditor.DocumentModificationType,System.Int32,System.String)" /><seealso cref="M:ActiproSoftware.SyntaxEditor.Document.ReplaceText(ActiproSoftware.SyntaxEditor.DocumentModificationType,ActiproSoftware.SyntaxEditor.TextRange,System.String)" /></member><member name="M:ActiproSoftware.SyntaxEditor.Document.Dispose(System.Boolean)"><summary>
            Releases the unmanaged resources used by the object and optionally releases the managed resources.
            </summary><param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources. 
            </param><remarks>
            This method is called by the public <c>Dispose</c> method and the <c>Finalize</c> method. 
            <c>Dispose</c> invokes this method with the <paramref name="disposing" /> parameter set to <c>true</c>. 
            <c>Finalize</c> invokes this method with <paramref name="disposing" /> set to <c>false</c>.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.Document.FindNextLineIndicator(System.Int32,System.String)"><summary>
            Finds the next instance of a specified indicator, using a line-by-line search.
            </summary><param name="startLineIndex">The line at which to base searching.</param><param name="name">The name of the indicator to look for.</param><returns>The next indicator, <see langword="null" /> if none</returns><remarks>This method should be used when searching for indicators that inherit from <see cref="T:ActiproSoftware.SyntaxEditor.LineIndicator" />.</remarks></member><member name="M:ActiproSoftware.SyntaxEditor.Document.FindNextSpanIndicator(ActiproSoftware.SyntaxEditor.SpanIndicatorLayer,System.Int32,System.String)"><summary>
            Finds the next instance of a specified indicator, using a complex positional search.
            </summary><param name="layer">The <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicatorLayer" /> in which to search.</param><param name="startOffset">The offset at which to base searching.</param><param name="name">The name of the indicator to look for.</param><returns>The next <see cref="T:ActiproSoftware.SyntaxEditor.Indicator" /> that matches the criteria.</returns><remarks>This method should be used when searching for indicators that inherit from <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicator" />.</remarks></member><member name="M:ActiproSoftware.SyntaxEditor.Document.FindPreviousLineIndicator(System.Int32,System.String)"><summary>
            Finds the previous instance of a specified indicator, using a line-by-line search.
            </summary><param name="startLineIndex">The line at which to base searching.</param><param name="name">The name of the indicator to look for.</param><returns>The previous indicator, <see langword="null" /> if none</returns><remarks>This method should be used when searching for indicators that inherit from <see cref="T:ActiproSoftware.SyntaxEditor.LineIndicator" />.</remarks></member><member name="M:ActiproSoftware.SyntaxEditor.Document.FindPreviousSpanIndicator(ActiproSoftware.SyntaxEditor.SpanIndicatorLayer,System.Int32,System.String)"><summary>
            Finds the previous instance of a specified indicator, using a complex positional search.
            </summary><param name="layer">The <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicatorLayer" /> in which to search.</param><param name="startOffset">The offset at which to base searching.</param><param name="name">The name of the indicator to look for.</param><returns>The previous <see cref="T:ActiproSoftware.SyntaxEditor.Indicator" /> that matches the criteria.</returns><remarks>This method should be used when searching for indicators that inherit from <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicator" />.</remarks></member><member name="M:ActiproSoftware.SyntaxEditor.Document.GetCoreTextBuffer"><summary>
            Gets the core <see cref="T:System.Text.StringBuilder" /> text buffer that stores the text contents of the document.
            Do not modify the <see cref="T:System.Text.StringBuilder" /> that is returned.
            </summary><returns>The core <see cref="T:System.Text.StringBuilder" /> text buffer.</returns><remarks>
            The returned <see cref="T:System.Text.StringBuilder" /> should only be used for fast read-only access to the text contents of the document.
            Never modify the contents of the returned <see cref="T:System.Text.StringBuilder" /> or unexpected exceptions will occur!
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.Document.GetSubstring(System.Int32,System.Int32)"><summary>
            Returns a substring from the document text using <see cref="F:ActiproSoftware.SyntaxEditor.LineTerminator.CarriageReturnNewline" /> for line ends.
            </summary><param name="offset">The offset at which to retrieve the text.</param><param name="length">The number of characters to return.</param><returns>The substring from the document text using <see cref="F:ActiproSoftware.SyntaxEditor.LineTerminator.CarriageReturnNewline" /> for line ends.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.Document.GetSubstring(ActiproSoftware.SyntaxEditor.TextRange)"><summary>
            Returns a substring from the document text using <see cref="F:ActiproSoftware.SyntaxEditor.LineTerminator.CarriageReturnNewline" /> for line ends.
            </summary><param name="textRange">A <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> indicating the range of text to retrieve.</param><returns>The substring from the document text using <see cref="F:ActiproSoftware.SyntaxEditor.LineTerminator.CarriageReturnNewline" /> for line ends.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.Document.GetSubstring(System.Int32,System.Int32,ActiproSoftware.SyntaxEditor.LineTerminator)"><summary>
            Returns a substring from the document text using the specified <see cref="T:ActiproSoftware.SyntaxEditor.LineTerminator" /> for line ends.
            </summary><param name="offset">The offset at which to retrieve the text.</param><param name="length">The number of characters to return.</param><param name="lineTerminator">A <see cref="T:ActiproSoftware.SyntaxEditor.LineTerminator" /> specifying the type of line terminators to use.</param><returns>The substring from the document text using the specified <see cref="T:ActiproSoftware.SyntaxEditor.LineTerminator" /> for line ends.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.Document.GetSubstring(ActiproSoftware.SyntaxEditor.TextRange,ActiproSoftware.SyntaxEditor.LineTerminator)"><summary>
            Returns a substring from the document text using the specified <see cref="T:ActiproSoftware.SyntaxEditor.LineTerminator" /> for line ends.
            </summary><param name="textRange">A <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> indicating the range of text to retrieve.</param><param name="lineTerminator">A <see cref="T:ActiproSoftware.SyntaxEditor.LineTerminator" /> specifying the type of line terminators to use.</param><returns>The substring from the document text using the specified <see cref="T:ActiproSoftware.SyntaxEditor.LineTerminator" /> for line ends.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.Document.GetSubstringAsHtml(ActiproSoftware.SyntaxEditor.HtmlExportType,System.Int32,System.Int32,ActiproSoftware.SyntaxEditor.LineTerminator)"><summary>
            Returns a substring from the document text formatted in HTML.
            </summary><param name="exportType">A <see cref="T:ActiproSoftware.SyntaxEditor.HtmlExportType" /> indicating the type of HTML export to perform.</param><param name="offset">The offset at which to retrieve the text.</param><param name="length">The number of characters to return.</param><param name="lineTerminator">A <see cref="T:ActiproSoftware.SyntaxEditor.LineTerminator" /> specifying the type of line terminators to use.</param><returns>The substring from the document text formatted in HTML.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.Document.GetSubstringAsHtml(ActiproSoftware.SyntaxEditor.HtmlExportType,System.Int32,System.Int32,ActiproSoftware.SyntaxEditor.LineTerminator,System.String)"><summary>
            Returns a substring from the document text formatted in HTML.
            </summary><param name="exportType">A <see cref="T:ActiproSoftware.SyntaxEditor.HtmlExportType" /> indicating the type of HTML export to perform.</param><param name="offset">The offset at which to retrieve the text.</param><param name="length">The number of characters to return.</param><param name="lineTerminator">A <see cref="T:ActiproSoftware.SyntaxEditor.LineTerminator" /> specifying the type of line terminators to use.</param><param name="title">The custom title to place in the HTML.</param><returns>The substring from the document text formatted in HTML.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.Document.GetSubstringAsRtf(System.Drawing.Font,System.Int32,System.Int32,ActiproSoftware.SyntaxEditor.LineTerminator)"><summary>
            Returns a substring from the document text formatted in rich-text format (RTF).
            </summary><param name="font">The <see cref="T:System.Drawing.Font" /> to use in the RTF.</param><param name="offset">The offset at which to retrieve the text.</param><param name="length">The number of characters to return.</param><param name="lineTerminator">A <see cref="T:ActiproSoftware.SyntaxEditor.LineTerminator" /> specifying the type of line terminators to use.</param><returns>The substring from the document text formatted in rich-text format (RTF).</returns></member><member name="M:ActiproSoftware.SyntaxEditor.Document.GetText(ActiproSoftware.SyntaxEditor.LineTerminator)"><summary>
            Returns the entire text of the document using the specified <see cref="T:ActiproSoftware.SyntaxEditor.LineTerminator" /> for line ends.
            </summary><param name="lineTerminator">A <see cref="T:ActiproSoftware.SyntaxEditor.LineTerminator" /> specifying the type of line terminators to use.</param><returns>The entire text of the document using the specified <see cref="T:ActiproSoftware.SyntaxEditor.LineTerminator" /> for line ends.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.Document.GetTextAsHtml(ActiproSoftware.SyntaxEditor.HtmlExportType,ActiproSoftware.SyntaxEditor.LineTerminator)"><summary>
            Returns the text of the document formatted in HTML.
            </summary><param name="exportType">A <see cref="T:ActiproSoftware.SyntaxEditor.HtmlExportType" /> indicating the type of HTML export to perform.</param><param name="lineTerminator">A <see cref="T:ActiproSoftware.SyntaxEditor.LineTerminator" /> specifying the type of line terminators to use.</param><returns>The text of the document formatted in HTML.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.Document.GetTextAsHtml(ActiproSoftware.SyntaxEditor.HtmlExportType,ActiproSoftware.SyntaxEditor.LineTerminator,System.String)"><summary>
            Returns the text of the document formatted in HTML.
            </summary><param name="exportType">A <see cref="T:ActiproSoftware.SyntaxEditor.HtmlExportType" /> indicating the type of HTML export to perform.</param><param name="lineTerminator">A <see cref="T:ActiproSoftware.SyntaxEditor.LineTerminator" /> specifying the type of line terminators to use.</param><param name="title">The custom title to place in the HTML.</param><returns>The text of the document formatted in HTML.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.Document.GetTextAsRtf(System.Drawing.Font,ActiproSoftware.SyntaxEditor.LineTerminator)"><summary>
            Returns the text of the document formatted in rich-text format (RTF).
            </summary><param name="font">The <see cref="T:System.Drawing.Font" /> to use in the RTF.</param><param name="lineTerminator">A <see cref="T:ActiproSoftware.SyntaxEditor.LineTerminator" /> specifying the type of line terminators to use.</param><returns>The text of the document formatted in rich-text format (RTF).</returns></member><member name="M:ActiproSoftware.SyntaxEditor.Document.GetTextStatistics"><summary>
            Returns the <see cref="T:ActiproSoftware.SyntaxEditor.TextStatistics" /> for the document's text, which provides numerous statistics about the text
            such as word, sentence, character counts as well as readability scores.
            </summary><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.TextStatistics" /> for the document's text.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.Document.GetTextStream(System.Int32)"><summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.TextStream" /> that permits iteration through the <see cref="T:ActiproSoftware.SyntaxEditor.Document" />.
            </summary><param name="offset">The offset with which to initialize the stream's position.</param><returns>A <see cref="T:ActiproSoftware.SyntaxEditor.TextStream" /> that permits iteration through the <see cref="T:ActiproSoftware.SyntaxEditor.Document" />.</returns><remarks>
            Use fo the <see cref="T:ActiproSoftware.SyntaxEditor.TextStream" /> is ideal for character-by-character parsing of a <see cref="T:ActiproSoftware.SyntaxEditor.Document" />.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.Document.GetTokenStream(System.Int32)"><summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.TokenStream" /> that permits iteration through the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> objects in the <see cref="P:ActiproSoftware.SyntaxEditor.Document.Tokens" /> collection.
            </summary><param name="tokenIndex">
            The index of the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> within the <see cref="P:ActiproSoftware.SyntaxEditor.Document.Tokens" /> collection with which to initialize the stream's position.
            </param><returns>
            A <see cref="T:ActiproSoftware.SyntaxEditor.TokenStream" /> that permits iteration through the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> objects in the <see cref="P:ActiproSoftware.SyntaxEditor.Document.Tokens" /> collection.
            </returns><remarks>
            Use of the <see cref="T:ActiproSoftware.SyntaxEditor.TokenStream" /> is ideal for parsing of a <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> during a semantic parsing phase.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.Document.GetTokenStream(ActiproSoftware.SyntaxEditor.IToken)"><summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.TokenStream" /> that permits iteration through the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> objects in the <see cref="P:ActiproSoftware.SyntaxEditor.Document.Tokens" /> collection.
            </summary><param name="token">
            The <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> within the <see cref="P:ActiproSoftware.SyntaxEditor.Document.Tokens" /> collection with which to initialize the stream's position.
            </param><returns>
            A <see cref="T:ActiproSoftware.SyntaxEditor.TokenStream" /> that permits iteration through the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> objects in the <see cref="P:ActiproSoftware.SyntaxEditor.Document.Tokens" /> collection.
            </returns><remarks>
            Use of the <see cref="T:ActiproSoftware.SyntaxEditor.TokenStream" /> is ideal for parsing of a <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> during a semantic parsing phase.
            If the index of the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> is known, use the other overload of this method that accepts the token index as a parameter,
            as this method is a more expensive call than that one.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.Document.GetTokenText(ActiproSoftware.SyntaxEditor.IToken)"><summary>
            Gets the text that is contained in the offset range of a <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.
            </summary><param name="token">The <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> to examine.</param><returns>The text that is contained in the offset range of a <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.Document.GetWordText(System.Int32)"><summary>
            Gets the text of the word at the specified offset.
            </summary><param name="offset">The offset to examine.</param><returns>The text of the word at the specified offset.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.Document.GetWordTextRange(System.Int32)"><summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> of offsets that contain the word at the specified offset.
            </summary><param name="offset">The offset to examine.</param><returns>A <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> containing a range of offsets that contain the word at the specified offset.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.Document.InsertText(ActiproSoftware.SyntaxEditor.DocumentModificationType,System.Int32,System.String)"><summary>
            Performs an insert modification at the specified offset.
            </summary><param name="type">A <see cref="T:ActiproSoftware.SyntaxEditor.DocumentModificationType" /> specifying the type of modification.</param><param name="offset">The offset at which to insert.</param><param name="text">The text to insert.</param><returns><c>true</c> if a text modification was allowed to occur; otherwise, <c>false</c>.
            </returns><seealso cref="M:ActiproSoftware.SyntaxEditor.Document.AppendText(System.String)" /><seealso cref="M:ActiproSoftware.SyntaxEditor.Document.DeleteText(ActiproSoftware.SyntaxEditor.DocumentModificationType,ActiproSoftware.SyntaxEditor.TextRange)" /><seealso cref="M:ActiproSoftware.SyntaxEditor.Document.ReplaceText(ActiproSoftware.SyntaxEditor.DocumentModificationType,ActiproSoftware.SyntaxEditor.TextRange,System.String)" /></member><member name="M:ActiproSoftware.SyntaxEditor.Document.InsertText(ActiproSoftware.SyntaxEditor.DocumentModificationType,System.Int32,System.String,ActiproSoftware.SyntaxEditor.DocumentModificationOptions)"><summary>
            Performs an insert modification at the specified offset and allows for the specification of other options.
            </summary><param name="type">A <see cref="T:ActiproSoftware.SyntaxEditor.DocumentModificationType" /> specifying the type of modification.</param><param name="offset">The offset at which to insert.</param><param name="text">The text to insert.</param><param name="options">The <see cref="T:ActiproSoftware.SyntaxEditor.DocumentModificationOptions" /> for the modification.</param><returns><c>true</c> if a text modification was allowed to occur; otherwise, <c>false</c>.
            </returns><seealso cref="M:ActiproSoftware.SyntaxEditor.Document.AppendText(System.String)" /><seealso cref="M:ActiproSoftware.SyntaxEditor.Document.DeleteText(ActiproSoftware.SyntaxEditor.DocumentModificationType,ActiproSoftware.SyntaxEditor.TextRange)" /><seealso cref="M:ActiproSoftware.SyntaxEditor.Document.ReplaceText(ActiproSoftware.SyntaxEditor.DocumentModificationType,ActiproSoftware.SyntaxEditor.TextRange,System.String)" /></member><member name="M:ActiproSoftware.SyntaxEditor.Document.InvalidatePaint"><summary>
            Notifies any attached <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor" /> controls that they need to repaint.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Document.IsTextRangeReadOnly(ActiproSoftware.SyntaxEditor.TextRange)"><summary>
            Returns whether any character in the specified <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> is flagged as read-only.
            </summary><param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> to examine.</param><returns><c>true</c> if any character in the specified <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> is flagged as read-only; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.Document.ResetLanguage"><summary>
            Resets the <see cref="P:ActiproSoftware.SyntaxEditor.Document.Language" /> property to its default value.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Document.ShouldSerializeLanguage"><summary>
            Indicates whether the <see cref="P:ActiproSoftware.SyntaxEditor.Document.Language" /> property should be persisted.
            </summary><returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.Document.LoadFile(System.String)"><summary>
            Loads document text from a file, using the default UTF-8 character encoding.
            </summary><param name="path">The full path of the file from which to load.</param><returns>
            A <see cref="T:ActiproSoftware.SyntaxEditor.LineTerminator" /> indicating the line terminator of the file that was loaded.
            </returns><remarks>
            This method updates the value of the <see cref="P:ActiproSoftware.SyntaxEditor.Document.Filename" /> property.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.Document.LoadFile(System.String,System.Text.Encoding)"><summary>
            Loads document text from a file using the specified encoding.
            </summary><param name="path">The full path of the file from which to load.</param><param name="encoding">The <see cref="T:System.Text.Encoding" /> to use when loading the file.</param><returns>
            A <see cref="T:ActiproSoftware.SyntaxEditor.LineTerminator" /> indicating the line terminator of the file that was loaded.
            </returns><remarks>
            This method updates the value of the <see cref="P:ActiproSoftware.SyntaxEditor.Document.Filename" /> property.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.Document.LoadFile(System.IO.Stream,System.Text.Encoding)"><summary>
            Loads document text from a <see cref="T:System.IO.Stream" /> using the specified encoding.
            </summary><param name="stream">The <see cref="T:System.IO.Stream" /> from which to load.</param><param name="encoding">The <see cref="T:System.Text.Encoding" /> to use when loading the file.</param><returns>
            A <see cref="T:ActiproSoftware.SyntaxEditor.LineTerminator" /> indicating the line terminator of the file that was loaded.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.Document.LoadLanguageFromXml(System.String,System.Int32)"><summary>
            Loads a syntax language from a language definition XML file.
            </summary><param name="filename">The full path of the language definition XML file from which to load.</param><param name="encryptionKey">
            The encryption key to use for descrambling the data.
            An encryption key of <c>0</c> means not to decrypt the data.
            </param></member><member name="M:ActiproSoftware.SyntaxEditor.Document.LoadLanguageFromXml(System.IO.Stream,System.Int32)"><summary>
            Loads a syntax language from a language definition XML stream.
            </summary><param name="stream">A <see cref="T:System.IO.Stream" /> containing the XML document to deserialize.</param><param name="encryptionKey">
            The encryption key to use for descrambling the data.
            An encryption key of <c>0</c> means not to decrypt the data.
            </param></member><member name="M:ActiproSoftware.SyntaxEditor.Document.OffsetToPosition(System.Int32)"><summary>
            Returns the <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" /> that represents the specified offset within the document lines.
            </summary><param name="offset">The offset of a character within the document.</param><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" /> that represents the specified offset within the document lines.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.Document.OnAutomaticOutliningComplete(ActiproSoftware.SyntaxEditor.DocumentModificationEventArgs)"><summary>
            Raises the <c>AutomaticOutliningComplete</c> event.
            </summary><param name="e">A <c>DocumentModificationEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Document.OnFilenameChanged(System.EventArgs)"><summary>
            Raises the <c>FilenameChanged</c> event.
            </summary><param name="e">An <c>EventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Document.OnIndicatorAdded(ActiproSoftware.SyntaxEditor.IndicatorEventArgs)"><summary>
            Raises the <c>IndicatorAdded</c> event.
            </summary><param name="e">An <c>IndicatorEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Document.OnIndicatorRemoved(ActiproSoftware.SyntaxEditor.IndicatorEventArgs)"><summary>
            Raises the <c>IndicatorRemoved</c> event.
            </summary><param name="e">An <c>IndicatorEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Document.OnIndicatorResized(ActiproSoftware.SyntaxEditor.IndicatorEventArgs)"><summary>
            Raises the <c>IndicatorResized</c> event.
            </summary><param name="e">An <c>IndicatorEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Document.OnModifiedChanged(System.EventArgs)"><summary>
            Raises the <c>ModifiedChanged</c> event.
            </summary><param name="e">An <c>EventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Document.OnMultilineChanged(System.EventArgs)"><summary>
            Raises the <c>MultilineChanged</c> event.
            </summary><param name="e">An <c>EventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Document.OnOutliningModeChanged(System.EventArgs)"><summary>
            Raises the <c>OutliningModeChanged</c> event.
            </summary><param name="e">An <c>EventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Document.OnOutliningNodeExpandedChanged(ActiproSoftware.SyntaxEditor.OutliningNodeEventArgs)"><summary>
            Raises the <see cref="E:ActiproSoftware.SyntaxEditor.Document.OutliningNodeExpandedChanged" /> event.
            </summary><param name="e">An <c>OutliningNodeEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Document.OnSemanticParseDataChanged(System.EventArgs)"><summary>
            Raises the <c>SemanticParseDataChanged</c> event.
            </summary><param name="e">An <c>EventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Document.OnSyntaxLanguageChanged(ActiproSoftware.SyntaxEditor.SyntaxLanguageEventArgs)"><summary>
            Raises the <c>SyntaxLanguageChanged</c> event.
            </summary><param name="e">A <c>SyntaxLanguageEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Document.OnSyntaxLanguageLoaded(ActiproSoftware.SyntaxEditor.SyntaxLanguageEventArgs)"><summary>
            Raises the <c>SyntaxLanguageLoaded</c> event.
            </summary><param name="e">A <c>SyntaxLanguageEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Document.OnSyntaxLanguageLoading(ActiproSoftware.SyntaxEditor.SyntaxLanguageEventArgs)"><summary>
            Raises the <c>SyntaxLanguageLoading</c> event.
            </summary><param name="e">A <c>SyntaxLanguageEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Document.OnTextChanged(ActiproSoftware.SyntaxEditor.DocumentModificationEventArgs)"><summary>
            Raises the <see cref="E:ActiproSoftware.SyntaxEditor.Document.TextChanged" /> event.
            </summary><param name="e">A <c>DocumentModificationEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Document.OnTextChanging(ActiproSoftware.SyntaxEditor.DocumentModificationEventArgs)"><summary>
            Raises the <see cref="E:ActiproSoftware.SyntaxEditor.Document.TextChanging" /> event.
            </summary><param name="e">A <c>DocumentModificationEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Document.OnUndoRedoStateChanged(ActiproSoftware.SyntaxEditor.UndoRedoStateChangedEventArgs)"><summary>
            Raises the <c>UndoRedoStateChanged</c> event.
            </summary><param name="e">An <c>UndoRedoStateChangedEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Document.PositionToOffset(ActiproSoftware.SyntaxEditor.DocumentPosition)"><summary>
            Returns the offset for the specified <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" /> within the document lines.
            </summary><param name="position">The <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" /> of a character within the document lines.</param><returns>The offset for the specified <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" /> within the document lines.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.Document.Reparse"><summary>
            Forces the entire document to be reparsed.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Document.ReplaceText(ActiproSoftware.SyntaxEditor.DocumentModificationType,ActiproSoftware.SyntaxEditor.TextRange,System.String)"><summary>
            Performs a replace modification at the specified offset.
            </summary><param name="type">A <see cref="T:ActiproSoftware.SyntaxEditor.DocumentModificationType" /> specifying the type of modification.</param><param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> of offsets to delete.</param><param name="text">The text to insert.</param><returns><c>true</c> if a text modification was allowed to occur; otherwise, <c>false</c>.
            </returns><seealso cref="M:ActiproSoftware.SyntaxEditor.Document.AppendText(System.String)" /><seealso cref="M:ActiproSoftware.SyntaxEditor.Document.DeleteText(ActiproSoftware.SyntaxEditor.DocumentModificationType,ActiproSoftware.SyntaxEditor.TextRange)" /><seealso cref="M:ActiproSoftware.SyntaxEditor.Document.InsertText(ActiproSoftware.SyntaxEditor.DocumentModificationType,System.Int32,System.String)" /></member><member name="M:ActiproSoftware.SyntaxEditor.Document.ReplaceText(ActiproSoftware.SyntaxEditor.DocumentModificationType,ActiproSoftware.SyntaxEditor.TextRange,System.String,ActiproSoftware.SyntaxEditor.DocumentModificationOptions)"><summary>
            Performs a replace modification at the specified offset and allows for the specification of other options.
            </summary><param name="type">A <see cref="T:ActiproSoftware.SyntaxEditor.DocumentModificationType" /> specifying the type of modification.</param><param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> of offsets to delete.</param><param name="text">The text to insert.</param><param name="options">The <see cref="T:ActiproSoftware.SyntaxEditor.DocumentModificationOptions" /> for the modification.</param><returns><c>true</c> if a text modification was allowed to occur; otherwise, <c>false</c>.
            </returns><seealso cref="M:ActiproSoftware.SyntaxEditor.Document.AppendText(System.String)" /><seealso cref="M:ActiproSoftware.SyntaxEditor.Document.DeleteText(ActiproSoftware.SyntaxEditor.DocumentModificationType,ActiproSoftware.SyntaxEditor.TextRange)" /><seealso cref="M:ActiproSoftware.SyntaxEditor.Document.InsertText(ActiproSoftware.SyntaxEditor.DocumentModificationType,System.Int32,System.String)" /></member><member name="M:ActiproSoftware.SyntaxEditor.Document.ReplaceText(ActiproSoftware.SyntaxEditor.DocumentModificationType,System.Int32,System.Int32,System.String)"><summary>
            Performs a replace modification at the specified offset.
            </summary><param name="type">A <see cref="T:ActiproSoftware.SyntaxEditor.DocumentModificationType" /> specifying the type of modification.</param><param name="offset">The offset at which to insert.</param><param name="length">The number of characters to delete before inserting the text.</param><param name="text">The text to insert.</param><returns><c>true</c> if a text modification was allowed to occur; otherwise, <c>false</c>.
            </returns><seealso cref="M:ActiproSoftware.SyntaxEditor.Document.AppendText(System.String)" /><seealso cref="M:ActiproSoftware.SyntaxEditor.Document.DeleteText(ActiproSoftware.SyntaxEditor.DocumentModificationType,ActiproSoftware.SyntaxEditor.TextRange)" /><seealso cref="M:ActiproSoftware.SyntaxEditor.Document.InsertText(ActiproSoftware.SyntaxEditor.DocumentModificationType,System.Int32,System.String)" /></member><member name="M:ActiproSoftware.SyntaxEditor.Document.ReplaceText(ActiproSoftware.SyntaxEditor.DocumentModificationType,System.Int32,System.Int32,System.String,ActiproSoftware.SyntaxEditor.DocumentModificationOptions)"><summary>
            Performs a replace modification at the specified offset and allows for the specification of other options.
            </summary><param name="type">A <see cref="T:ActiproSoftware.SyntaxEditor.DocumentModificationType" /> specifying the type of modification.</param><param name="offset">The offset at which to insert.</param><param name="length">The number of characters to delete before inserting the text.</param><param name="text">The text to insert.</param><param name="options">The <see cref="T:ActiproSoftware.SyntaxEditor.DocumentModificationOptions" /> for the modification.</param><returns><c>true</c> if a text modification was allowed to occur; otherwise, <c>false</c>.
            </returns><seealso cref="M:ActiproSoftware.SyntaxEditor.Document.AppendText(System.String)" /><seealso cref="M:ActiproSoftware.SyntaxEditor.Document.DeleteText(ActiproSoftware.SyntaxEditor.DocumentModificationType,ActiproSoftware.SyntaxEditor.TextRange)" /><seealso cref="M:ActiproSoftware.SyntaxEditor.Document.InsertText(ActiproSoftware.SyntaxEditor.DocumentModificationType,System.Int32,System.String)" /></member><member name="M:ActiproSoftware.SyntaxEditor.Document.SaveFile(System.String,ActiproSoftware.SyntaxEditor.LineTerminator)"><summary>
            Saves document text to a UTF-8 encoded file.
            </summary><param name="path">The full path of the file of which to save.</param><param name="lineTerminator">A <see cref="T:ActiproSoftware.SyntaxEditor.LineTerminator" /> specifying the output format.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Document.AppendText(System.String)"><summary>
            Appends text to the end of the current document text.
            </summary><param name="text">The text to append to the current contents of the document.</param><returns><c>true</c> if a text modification was allowed to occur; otherwise, <c>false</c>.
            </returns><remarks>
            This method is simply a wrapper for a call to <see cref="M:ActiproSoftware.SyntaxEditor.Document.InsertText(ActiproSoftware.SyntaxEditor.DocumentModificationType,System.Int32,System.String)" />.
            </remarks><seealso cref="M:ActiproSoftware.SyntaxEditor.Document.DeleteText(ActiproSoftware.SyntaxEditor.DocumentModificationType,ActiproSoftware.SyntaxEditor.TextRange)" /><seealso cref="M:ActiproSoftware.SyntaxEditor.Document.InsertText(ActiproSoftware.SyntaxEditor.DocumentModificationType,System.Int32,System.String)" /><seealso cref="M:ActiproSoftware.SyntaxEditor.Document.ReplaceText(ActiproSoftware.SyntaxEditor.DocumentModificationType,ActiproSoftware.SyntaxEditor.TextRange,System.String)" /></member><member name="M:ActiproSoftware.SyntaxEditor.Document.AppendText(System.String,ActiproSoftware.SyntaxEditor.DocumentModificationOptions)"><summary>
            Appends text to the end of the current document text and allows for the specification of other options.
            </summary><param name="text">The text to append to the current contents of the document.</param><param name="options">The <see cref="T:ActiproSoftware.SyntaxEditor.DocumentModificationOptions" /> for the modification.</param><returns><c>true</c> if a text modification was allowed to occur; otherwise, <c>false</c>.
            </returns><remarks>
            This method is simply a wrapper for a call to <see cref="M:ActiproSoftware.SyntaxEditor.Document.InsertText(ActiproSoftware.SyntaxEditor.DocumentModificationType,System.Int32,System.String)" />.
            </remarks><seealso cref="M:ActiproSoftware.SyntaxEditor.Document.DeleteText(ActiproSoftware.SyntaxEditor.DocumentModificationType,ActiproSoftware.SyntaxEditor.TextRange)" /><seealso cref="M:ActiproSoftware.SyntaxEditor.Document.InsertText(ActiproSoftware.SyntaxEditor.DocumentModificationType,System.Int32,System.String)" /><seealso cref="M:ActiproSoftware.SyntaxEditor.Document.ReplaceText(ActiproSoftware.SyntaxEditor.DocumentModificationType,ActiproSoftware.SyntaxEditor.TextRange,System.String)" /></member><member name="M:ActiproSoftware.SyntaxEditor.Document.CaseCorrectText(System.Int32,System.Int32)"><summary>
            Case corrects the specified range of token text, if applicable.
            </summary><param name="startLineIndex">The index of the start document line.</param><param name="endLineIndex">The index of the end document line.</param><returns>
            A <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> indicating the offset range of characters that were updated.
            <see cref="P:ActiproSoftware.SyntaxEditor.TextRange.Deleted" /> is returned if no changes are made.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.Document.ChangeSelectionMarginMarkColor(System.Drawing.Color,System.Drawing.Color)"><summary>
            Allows for quick changing of selection margin markings of a specific <see cref="T:System.Drawing.Color" /> to be changed to another <see cref="T:System.Drawing.Color" />.
            </summary><param name="from">The <see cref="T:System.Drawing.Color" /> of line markings to modify.</param><param name="to">The <see cref="T:System.Drawing.Color" /> to change the markings to.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Document.DeleteText(ActiproSoftware.SyntaxEditor.DocumentModificationType,ActiproSoftware.SyntaxEditor.TextRange)"><summary>
            Performs a delete modification.
            </summary><param name="type">A <see cref="T:ActiproSoftware.SyntaxEditor.DocumentModificationType" /> specifying the type of modification.</param><param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> of offsets to delete.</param><returns><c>true</c> if a text modification was allowed to occur; otherwise, <c>false</c>.
            </returns><seealso cref="M:ActiproSoftware.SyntaxEditor.Document.AppendText(System.String)" /><seealso cref="M:ActiproSoftware.SyntaxEditor.Document.InsertText(ActiproSoftware.SyntaxEditor.DocumentModificationType,System.Int32,System.String)" /><seealso cref="M:ActiproSoftware.SyntaxEditor.Document.ReplaceText(ActiproSoftware.SyntaxEditor.DocumentModificationType,ActiproSoftware.SyntaxEditor.TextRange,System.String)" /></member><member name="M:ActiproSoftware.SyntaxEditor.Document.DeleteText(ActiproSoftware.SyntaxEditor.DocumentModificationType,ActiproSoftware.SyntaxEditor.TextRange,ActiproSoftware.SyntaxEditor.DocumentModificationOptions)"><summary>
            Performs a delete modification and allows for the specification of other options.
            </summary><param name="type">A <see cref="T:ActiproSoftware.SyntaxEditor.DocumentModificationType" /> specifying the type of modification.</param><param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> of offsets to delete.</param><param name="options">The <see cref="T:ActiproSoftware.SyntaxEditor.DocumentModificationOptions" /> for the modification.</param><returns><c>true</c> if a text modification was allowed to occur; otherwise, <c>false</c>.
            </returns><seealso cref="M:ActiproSoftware.SyntaxEditor.Document.AppendText(System.String)" /><seealso cref="M:ActiproSoftware.SyntaxEditor.Document.InsertText(ActiproSoftware.SyntaxEditor.DocumentModificationType,System.Int32,System.String)" /><seealso cref="M:ActiproSoftware.SyntaxEditor.Document.ReplaceText(ActiproSoftware.SyntaxEditor.DocumentModificationType,ActiproSoftware.SyntaxEditor.TextRange,System.String)" /></member><member name="M:ActiproSoftware.SyntaxEditor.Document.DeleteText(ActiproSoftware.SyntaxEditor.DocumentModificationType,System.Int32,System.Int32)"><summary>
            Performs a delete modification.
            </summary><param name="type">A <see cref="T:ActiproSoftware.SyntaxEditor.DocumentModificationType" /> specifying the type of modification.</param><param name="offset">The starting offset at which to delete.</param><param name="length">The number of characters to delete.</param><returns><c>true</c> if a text modification was allowed to occur; otherwise, <c>false</c>.
            </returns><seealso cref="M:ActiproSoftware.SyntaxEditor.Document.AppendText(System.String)" /><seealso cref="M:ActiproSoftware.SyntaxEditor.Document.InsertText(ActiproSoftware.SyntaxEditor.DocumentModificationType,System.Int32,System.String)" /><seealso cref="M:ActiproSoftware.SyntaxEditor.Document.ReplaceText(ActiproSoftware.SyntaxEditor.DocumentModificationType,ActiproSoftware.SyntaxEditor.TextRange,System.String)" /></member><member name="M:ActiproSoftware.SyntaxEditor.Document.#ctor"><summary>
            Initializes a new instance of the <c>Document</c> class.
            </summary></member><member name="P:ActiproSoftware.SyntaxEditor.Document.AutoCaseCorrectEnabled"><summary>
            Gets or sets whether auto case correction is enabled.
            </summary><value><c>true</c> if auto case correction is enabled; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.Document.AutoCaseCorrectOnlyOnModification"><summary>
            Gets or sets whether auto case correction occurs only after a document modification.
            </summary><value><c>true</c> if auto case correction occurs only after a document modification; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.Document.AutoCharacterCasing"><summary>
            Gets or sets how to modify the case of text that is inserted into the document.
            </summary><value>A <see cref="T:System.Windows.Forms.CharacterCasing" /> indicating the desired case of inserted text.</value></member><member name="P:ActiproSoftware.SyntaxEditor.Document.AutoConvertTabsToSpaces"><summary>
            Gets or sets whether to convert tabs to spaces when the Tab key is pressed or indenting occurs.
            </summary><value><c>true</c> if tabs should be converted to spaces when the Tab key is pressed or indenting occurs; otherwise, <c>false</c>.
            </value><remarks>
            The number of spaces inserted is indicated by the <see cref="P:ActiproSoftware.SyntaxEditor.Document.TabSize" /> property.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.Document.AutoLineNumberingBase"><summary>
            Gets or sets the base number to use when performing automatic line numbering for document lines.
            </summary><value>The base number to use when performing automatic line numbering for document lines.</value><remarks>
            The default value is <c>1</c> meaning that the first line in a document will have a line number of <c>1</c> when
            the line number margin is visible.  All other document lines increment their line numbers based off of this value.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.Document.AutoTrimTrailingWhitespaceOnPaste"><summary>
            Gets or sets whether to automatically trim trailing whitespace on pasted text.
            </summary><value><c>true</c> if pasted text should have its trailing whitespace automatically trimmed; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.Document.AutoTrimTrailingWhitespaceOnTextReplacement"><summary>
            Gets or sets whether to automatically trim trailing whitespace on text that replaces the contents of the <see cref="T:ActiproSoftware.SyntaxEditor.Document" />.
            </summary><value><c>true</c> if text should have its trailing whitespace automatically trimmed; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.Document.DeletedTokenTrackingEnabled"><summary>
            Gets or sets whether to track the deleted tokens after each lexical parse operation in the <see cref="P:ActiproSoftware.SyntaxEditor.TokenCollection.DeletedTokens" /> collection.
            </summary><value><c>true</c> if the deleted tokens should be tracked; otherwise, <c>false</c>.
            </value><remarks>
            Activating this feature uses more memory so leave it <c>false</c> if you will not be accessing the <see cref="P:ActiproSoftware.SyntaxEditor.TokenCollection.DeletedTokens" /> collection.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.Document.Filename"><summary>
            Gets or sets the name of the file currently loaded in the document.
            </summary><value>The name of the file currently loaded in the document.</value><remarks>
            This property is automatically set whenever a <see cref="M:ActiproSoftware.SyntaxEditor.Document.LoadFile(System.String)" /> overload is called that accepts a file path.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.Document.FindReplace"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.DocumentFindReplace" /> that provides non-UI find/replace functionality in the document.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.DocumentFindReplace" /> that provides non-UI find/replace functionality in the document.</value></member><member name="P:ActiproSoftware.SyntaxEditor.Document.FooterText"><summary>
            Gets or sets the footer text to append to the end of the document's <see cref="P:ActiproSoftware.SyntaxEditor.Document.Text" /> when building the code for the semantic parser service.
            </summary><value>The footer text to append to the end of the document's <see cref="P:ActiproSoftware.SyntaxEditor.Document.Text" /> when building the code for the semantic parser service.</value><remarks>
            The use of this property, along with <see cref="P:ActiproSoftware.SyntaxEditor.Document.HeaderText" />, allows you use SyntaxEditor for
            editing "fragments" of code.  The header and footer sections provide the outer code that surrounds the
            "fragment" being edited in the document's <see cref="P:ActiproSoftware.SyntaxEditor.Document.Text" /> property.
            <para>
            An example is when editing a method body in a language like <c>C#</c>.
            The <see cref="P:ActiproSoftware.SyntaxEditor.Document.HeaderText" /> would contain the namespace, class, and member declaration starts.
            The <see cref="P:ActiproSoftware.SyntaxEditor.Document.FooterText" /> would contain the namespace, class, and member declaration ends.
            The document would edit the "fragment" of statements within the header and footer and 
            all of them would be combined for parsing by the semantic parser service.
            This allows for proper IntelliPrompt features while editing the "fragment".
            </para></remarks><seealso cref="P:ActiproSoftware.SyntaxEditor.Document.HeaderText" /></member><member name="P:ActiproSoftware.SyntaxEditor.Document.Guid"><summary>
            Gets a unique GUID that identifies the document.
            </summary><value>A unique GUID that identifies the document.</value><remarks>
            The GUID is changed whenever the <see cref="P:ActiproSoftware.SyntaxEditor.Document.Text" /> property is set.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.Document.HasContent"><summary>
            Gets whether there is content in the document.
            </summary><value><c>true</c> if there is content in the document; otherwise, <c>false</c>.
            </value><remarks>
            This property simply checks the <see cref="P:ActiproSoftware.SyntaxEditor.Document.Text" /> property to see if there are any characters entered into the document.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.Document.HeaderText"><summary>
            Gets or sets the header text to append to the start of the document's <see cref="P:ActiproSoftware.SyntaxEditor.Document.Text" /> when building the code for the semantic parser service.
            </summary><value>The header text to append to the start of the document's <see cref="P:ActiproSoftware.SyntaxEditor.Document.Text" /> when building the code for the semantic parser service.</value><remarks>
            The use of this property, along with <see cref="P:ActiproSoftware.SyntaxEditor.Document.FooterText" />, allows you use SyntaxEditor for
            editing "fragments" of code.  The header and footer sections provide the outer code that surrounds the
            "fragment" being edited in the document's <see cref="P:ActiproSoftware.SyntaxEditor.Document.Text" /> property.
            <para>
            An example is when editing a method body in a language like <c>C#</c>.
            The <see cref="P:ActiproSoftware.SyntaxEditor.Document.HeaderText" /> would contain the namespace, class, and member declaration starts.
            The <see cref="P:ActiproSoftware.SyntaxEditor.Document.FooterText" /> would contain the namespace, class, and member declaration ends.
            The document would edit the "fragment" of statements within the header and footer and 
            all of them would be combined for parsing by the semantic parser service.
            This allows for proper IntelliPrompt features while editing the "fragment".
            </para></remarks><seealso cref="P:ActiproSoftware.SyntaxEditor.Document.FooterText" /></member><member name="P:ActiproSoftware.SyntaxEditor.Document.Language"><summary>
            Gets or sets the <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> that is currently loaded.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> that is currently loaded.</value><remarks>The default value is a plain text language.</remarks></member><member name="P:ActiproSoftware.SyntaxEditor.Document.LanguageData"><summary>
            Gets or sets an object that specifies document-specific data for the <see cref="P:ActiproSoftware.SyntaxEditor.Document.Language" /> that is loaded.
            </summary><value>An object that specifies document-specific data for the <see cref="P:ActiproSoftware.SyntaxEditor.Document.Language" /> that is loaded.</value></member><member name="P:ActiproSoftware.SyntaxEditor.Document.Length"><summary>
            Gets the number of characters in the document, excluding any carriage-returns but including newlines.
            </summary><value>The number of characters in the document, excluding any carriage-returns but including newlines.</value></member><member name="P:ActiproSoftware.SyntaxEditor.Document.LexicalParsingEnabled"><summary>
            Gets or sets whether lexical parsing is enabled for the document.
            </summary><value><c>true</c> if lexical parsing is enabled for the document; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.Document.LineIndicators"><summary>
            Gets the collection of <see cref="T:ActiproSoftware.SyntaxEditor.LineIndicator" /> objects within the <see cref="T:ActiproSoftware.SyntaxEditor.Document" />.
            </summary><value>The collection of <see cref="T:ActiproSoftware.SyntaxEditor.LineIndicator" /> objects within the <see cref="T:ActiproSoftware.SyntaxEditor.Document" />.</value></member><member name="P:ActiproSoftware.SyntaxEditor.Document.LineModificationMarkingEnabled"><summary>
            Gets or sets whether line modification marking is enabled.
            </summary><value><c>true</c> if line modification marking is enabled; otherwise, <c>false</c>.
            </value><remarks><para>
            When line modification marks are active they indicate lines upon which modifications have occurred since the last save point.
            The marks appear in the selection margin.
            </para><para>
            Setting this property to <c>true</c> will clear the undo/redo stacks since they must start empty for the line modification
            data to be collected properly.
            </para></remarks></member><member name="P:ActiproSoftware.SyntaxEditor.Document.Lines"><summary>
            Gets the collection of <see cref="T:ActiproSoftware.SyntaxEditor.DocumentLine" /> objects, each of which represents a line in the document.
            </summary><value>
            A <see cref="T:ActiproSoftware.SyntaxEditor.DocumentLineCollection" /> containing the lines in the document.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.Document.Modified"><summary>
            Gets or sets whether the document has been modified.
            </summary><value><c>true</c> if the document has been modified; otherwise, <c>false</c>.
            </value><remarks>This flag is reset when the <see cref="P:ActiproSoftware.SyntaxEditor.Document.Text" /> property is set.</remarks></member><member name="P:ActiproSoftware.SyntaxEditor.Document.Multiline"><summary>
            Gets or sets a value indicating whether this is a multiline text box control.
            </summary><value><c>true</c> if the control is a multiline text box control; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.Document.Outlining"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Outlining" /> that manages the outlining of the <see cref="T:ActiproSoftware.SyntaxEditor.Document" />.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.Outlining" /> that manages the outlining of the <see cref="T:ActiproSoftware.SyntaxEditor.Document" />.</value></member><member name="P:ActiproSoftware.SyntaxEditor.Document.ReadOnly"><summary>
            Controls whether text in the document can be changed.
            </summary><value><c>true</c> if text in the document cannot be changed; otherwise <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.Document.SemanticParseData"><summary>
            Gets or sets the semantic parse data for the document.
            </summary><value>The semantic parse data for the document.</value></member><member name="P:ActiproSoftware.SyntaxEditor.Document.SemanticParsingEnabled"><summary>
            Gets or sets whether semantic parsing is enabled for the document.
            </summary><value><c>true</c> if semantic parsing is enabled for the document; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.Document.SpanIndicatorLayers"><summary>
            Gets the collection of <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicatorLayer" /> objects within the document.
            </summary><value>The collection of <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicatorLayer" /> objects within the document.</value><remarks>
            The collection is sorted by the <see cref="P:ActiproSoftware.SyntaxEditor.SpanIndicatorLayer.DisplayPriority" /> property of each layer.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.Document.SyncRoot"><summary>
            Gets an <c>Object</c> that can be used to synchronize access to the <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> class.
            </summary><value>
            An <c>Object</c> that can be used to synchronize access to the <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> class.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.Document.TabSize"><summary>
            Gets or sets the distance in spaces between tab stops.
            </summary><value>The distance in spaces between tab stops.</value></member><member name="P:ActiproSoftware.SyntaxEditor.Document.Tag"><summary>
            Gets or sets the object that contains user-defined data about the object.
            </summary><value>
            An <see cref="T:System.Object" /> that contains user-defined data about the control. The default is <see langword="null" />.
            </value><remarks>
            Any type derived from the <see cref="T:System.Object" /> class can be assigned to this property. 
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.Document.Text"><summary>
            Gets or sets the entire text of the document using <see cref="F:ActiproSoftware.SyntaxEditor.LineTerminator.CarriageReturnNewline" /> for line ends.
            </summary><value>The entire text of the document using <see cref="F:ActiproSoftware.SyntaxEditor.LineTerminator.CarriageReturnNewline" /> for line ends.</value><remarks>
            To get the text using a different <see cref="T:ActiproSoftware.SyntaxEditor.LineTerminator" />, use the <see cref="M:ActiproSoftware.SyntaxEditor.Document.GetText(ActiproSoftware.SyntaxEditor.LineTerminator)" /> method.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.Document.Characters(System.Int32)"><summary>
            Gets a character in the document.
            </summary><param name="index">The index of the character to return.</param><value>
            A character in the document.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.Document.Tokens"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.TokenCollection" /> that stores the tokens in the document.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.TokenCollection" /> that stores the tokens in the document.</value></member><member name="P:ActiproSoftware.SyntaxEditor.Document.UndoRedo"><summary>
            Gets the undo/redo stacks for the document and provides access to undo/redo functionality.
            </summary><value>
            An <see cref="P:ActiproSoftware.SyntaxEditor.Document.UndoRedo" /> that represents the undo/redo stacks for the document.
            </value></member><member name="E:ActiproSoftware.SyntaxEditor.Document.AutomaticOutliningComplete"><summary>
            Occurs after automatic outlining is performed on the document.
            </summary><eventdata>
            The event handler receives an argument of type <c>DocumentModificationEventArgs</c> containing data related to this event.
            </eventdata><remarks>
            A <see cref="T:ActiproSoftware.SyntaxEditor.DocumentModification" /> may or may not be passed in the event arguments, depending on if the outlining
            is performed in the main thread.
            </remarks></member><member name="E:ActiproSoftware.SyntaxEditor.Document.FilenameChanged"><summary>
            Occurs after the value of the <see cref="P:ActiproSoftware.SyntaxEditor.Document.Filename" /> property has changed.
            </summary><eventdata>
            The event handler receives an argument of type <c>EventArgs</c> containing data related to this event.
            </eventdata></member><member name="E:ActiproSoftware.SyntaxEditor.Document.IndicatorAdded"><summary>
            Occurs when an indicator is added to the current document.
            </summary><eventdata>
            The event handler receives an argument of type <c>IndicatorEventArgs</c> containing data related to this event.
            </eventdata></member><member name="E:ActiproSoftware.SyntaxEditor.Document.IndicatorRemoved"><summary>
            Occurs when an indicator is removed from the current document.
            </summary><eventdata>
            The event handler receives an argument of type <c>IndicatorEventArgs</c> containing data related to this event.
            </eventdata></member><member name="E:ActiproSoftware.SyntaxEditor.Document.IndicatorResized"><summary>
            Occurs when an indicator is resized.
            </summary><eventdata>
            The event handler receives an argument of type <c>IndicatorEventArgs</c> containing data related to this event.
            </eventdata></member><member name="E:ActiproSoftware.SyntaxEditor.Document.ModifiedChanged"><summary>
            Occurs after the value of the <see cref="P:ActiproSoftware.SyntaxEditor.Document.Modified" /> property has changed.
            </summary><eventdata>
            The event handler receives an argument of type <c>EventArgs</c> containing data related to this event.
            </eventdata></member><member name="E:ActiproSoftware.SyntaxEditor.Document.MultilineChanged"><summary>
            Occurs after the value of the <see cref="P:ActiproSoftware.SyntaxEditor.Document.Multiline" /> property has changed.
            </summary><eventdata>
            The event handler receives an argument of type <c>EventArgs</c> containing data related to this event.
            </eventdata></member><member name="E:ActiproSoftware.SyntaxEditor.Document.OutliningModeChanged"><summary>
            Occurs after the value of the <see cref="P:ActiproSoftware.SyntaxEditor.Outlining.Mode" /> property has changed.
            </summary><eventdata>
            The event handler receives an argument of type <c>EventArgs</c> containing data related to this event.
            </eventdata></member><member name="E:ActiproSoftware.SyntaxEditor.Document.OutliningNodeExpandedChanged"><summary>
            Occurs after an outlining node's expanded state is changed.
            </summary><eventdata>
            The event handler receives an argument of type <c>OutliningNodeEventArgs</c> containing data related to this event.
            </eventdata></member><member name="E:ActiproSoftware.SyntaxEditor.Document.PreTextChanging"><summary>
            Occurs before the document's text is changed, allowing for the change to be cancelled.
            </summary><eventdata>
            The event handler receives an argument of type <c>DocumentModificationEventArgs</c> containing data related to this event.
            </eventdata><remarks>
            Set the <c>Cancel</c> property of the event arguments to <c>true</c> to cancel the modification before it starts.
            </remarks></member><member name="E:ActiproSoftware.SyntaxEditor.Document.SemanticParseDataChanged"><summary>
            Occurs after the value of the <see cref="P:ActiproSoftware.SyntaxEditor.Document.SemanticParseData" /> property has changed.
            </summary><eventdata>
            The event handler receives an argument of type <c>EventArgs</c> containing data related to this event.
            </eventdata></member><member name="E:ActiproSoftware.SyntaxEditor.Document.SyntaxLanguageChanged"><summary>
            Occurs after settings on the current <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> are changed.
            </summary><eventdata>
            The event handler receives an argument of type <c>SyntaxLanguageEventArgs</c> containing data related to this event.
            </eventdata></member><member name="E:ActiproSoftware.SyntaxEditor.Document.SyntaxLanguageLoaded"><summary>
            Occurs after a <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> is finished loading.
            </summary><eventdata>
            The event handler receives an argument of type <c>SyntaxLanguageEventArgs</c> containing data related to this event.
            </eventdata></member><member name="E:ActiproSoftware.SyntaxEditor.Document.SyntaxLanguageLoading"><summary>
            Occurs before a <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> is about to load.
            </summary><eventdata>
            The event handler receives an argument of type <c>SyntaxLanguageEventArgs</c> containing data related to this event.
            </eventdata></member><member name="E:ActiproSoftware.SyntaxEditor.Document.TextChanged"><summary>
            Occurs after the document's text is changed.
            </summary><eventdata>
            The event handler receives an argument of type <c>DocumentModificationEventArgs</c> containing data related to this event.
            </eventdata></member><member name="E:ActiproSoftware.SyntaxEditor.Document.TextChanging"><summary>
            Occurs before the document's text is changed.
            </summary><eventdata>
            The event handler receives an argument of type <c>DocumentModificationEventArgs</c> containing data related to this event.
            </eventdata></member><member name="E:ActiproSoftware.SyntaxEditor.Document.UndoRedoStateChanged"><summary>
            Occurs after the undo or redo stack is changed so that application user interface enabled states, such as toolbar buttons, can be updated.
            </summary><eventdata>
            The event handler receives an argument of type <c>UndoRedoStateChangedEventArgs</c> containing data related to this event.
            </eventdata></member><member name="T:ActiproSoftware.SyntaxEditor.TextRange"><summary>
            Represents a range of two offset values within a text document.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.TextRange.BordersOn(System.Int32)"><summary>
            Returns whether the <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> borders on the specified offset.
            </summary><param name="offset">The offset to examine.</param><returns><c>true</c> if the <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> borders on the specified offset; otherwise, <c>false</c>.
            </returns><remarks>
            This method checks to see if the specified offset is either the <see cref="P:ActiproSoftware.SyntaxEditor.TextRange.StartOffset" /> or <see cref="P:ActiproSoftware.SyntaxEditor.TextRange.EndOffset" />.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.TextRange.BordersOn(ActiproSoftware.SyntaxEditor.TextRange)"><summary>
            Returns whether the <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> borders on, but does not overlap the specified <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" />.
            </summary><param name="range">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> to examine.</param><returns><c>true</c> if the <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> borders on, but does not overlap the specified <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" />; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.TextRange.Clone"><summary>
            Creates a copy of this <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> object.
            </summary><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> object that this method creates.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.TextRange.CompareTo(ActiproSoftware.SyntaxEditor.TextRange)"><summary>
            Compares the current instance with another object of the same type.
            </summary><param name="textRange">A <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> to compare with this instance.</param><returns>
            A 32-bit signed integer that indicates the relative order of the comparands.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.TextRange.Contains(System.Int32)"><summary>
            Returns whether the <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> contains the specified offset.
            </summary><param name="offset">The offset to examine.</param><returns><c>true</c> if the <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> contains the specified offset; otherwise, <c>false</c>.
            </returns><remarks>
            This method returns <c>false</c> if the offset falls on the <see cref="P:ActiproSoftware.SyntaxEditor.TextRange.LastOffset" /> offset
            since this method indicates if the offset is encompassed by the <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" />.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.TextRange.Contains(ActiproSoftware.SyntaxEditor.TextRange)"><summary>
            Returns whether the <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> contains the specified <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" />.
            </summary><param name="range">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> to examine.</param><returns><c>true</c> if the <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> contains the specified <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" />; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.TextRange.Equals(System.Object)"><summary>
            Determines whether the specified <c>Object</c> is equal to the current <c>Object</c>. 
            </summary><param name="obj">The <c>Object</c> to compare to the current <c>Object</c>.</param><returns><c>true</c> if the specified <c>Object</c> is equal to the current <c>Object</c>; 
            otherwise, <c>false</c>. 
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.TextRange.GetHashCode"><summary>
            Returns a hash code for this object.
            </summary><returns>An integer value that specifies a hash value for this object.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.TextRange.IntersectsWith(System.Int32)"><summary>
            Returns whether the <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> intersects with the specified offset.
            </summary><param name="offset">The offset to examine.</param><returns><c>true</c> if the <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> intersects with the specified offset; otherwise, <c>false</c>.
            </returns><remarks>
            This method returns whether the specified offset borders on or lies within the <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" />.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.TextRange.IntersectsWith(ActiproSoftware.SyntaxEditor.TextRange)"><summary>
            Returns whether the <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> intersects with the specified <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" />.
            </summary><param name="range">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> to examine.</param><returns><c>true</c> if the <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> intersects with the specified <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" />; otherwise, <c>false</c>.
            </returns><remarks>
            This method returns whether the specified <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> borders on or overlaps the <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" />.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.TextRange.Normalize"><summary>
            Normalizes the range and ensures that the <see cref="P:ActiproSoftware.SyntaxEditor.TextRange.StartOffset" /> occurs at or before the <see cref="P:ActiproSoftware.SyntaxEditor.TextRange.EndOffset" /> offset.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.TextRange.OverlapsWith(ActiproSoftware.SyntaxEditor.TextRange)"><summary>
            Returns whether the <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> overlaps with, or crosses, the specified <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" />.
            </summary><param name="range">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> to examine.</param><returns><c>true</c> if the <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> overlaps with, or crosses, the specified <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" />; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.TextRange.ToString"><summary>
            Converts the object to a <c>String</c>.
            </summary><returns>
            A string whose value represents this object.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.TextRange.Union(ActiproSoftware.SyntaxEditor.TextRange,ActiproSoftware.SyntaxEditor.TextRange)"><summary>
            Returns the normalized union of two <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> objects.
            </summary><param name="range1">The first <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> to examine.</param><param name="range2">The second <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> to examine.</param><returns>
            The normalized union of two <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> objects.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.TextRange.#ctor(System.Int32)"><summary>
            Initializes a new instance of the <c>TextRange</c> class using the specified offset for both the start and end values.
            </summary><param name="offset">The start and end offset in the range.</param></member><member name="M:ActiproSoftware.SyntaxEditor.TextRange.#ctor(System.Int32,System.Int32)"><summary>
            Initializes a new instance of the <c>TextRange</c> class with the specified offset values.
            </summary><param name="startOffset">The start offset in the range.</param><param name="endOffset">The end offset in the range.</param></member><member name="P:ActiproSoftware.SyntaxEditor.TextRange.AbsoluteLength"><summary>
            Gets the absolute number of characters encompassed by the <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" />.
            </summary><value>The absolute number of characters encompassed by the <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" />.</value><remarks>
            This value will always return a positive length, even if the range is not normalized.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.TextRange.Deleted"><summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> that is flagged as deleted.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> that is flagged as deleted.</value></member><member name="P:ActiproSoftware.SyntaxEditor.TextRange.EndOffset"><summary>
            Gets the end offset in the range.
            </summary><value>The end offset in the range.</value><remarks>
            The end offset may occur before the start offset if the range is not normalized.
            The <see cref="P:ActiproSoftware.SyntaxEditor.TextRange.IsNormalized" /> property indicates if the range is normalized.
            To get the normalized first offset in the range, use the <see cref="P:ActiproSoftware.SyntaxEditor.TextRange.FirstOffset" /> property.
            To get the normalized last offset in the range, use the <see cref="P:ActiproSoftware.SyntaxEditor.TextRange.LastOffset" /> property.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.TextRange.FirstOffset"><summary>
            Gets the first offset in the range.
            </summary><value>The first offset in the range.</value><remarks>
            This property returns either the <see cref="P:ActiproSoftware.SyntaxEditor.TextRange.StartOffset" /> or <see cref="P:ActiproSoftware.SyntaxEditor.TextRange.EndOffset" /> property, whichever comes first.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.TextRange.IsDeleted"><summary>
            Gets whether the range has been flagged as deleted.
            </summary><value><c>true</c> if the range has been flagged as deleted; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.TextRange.IsNormalized"><summary>
            Gets whether the range is normalized (<see cref="P:ActiproSoftware.SyntaxEditor.TextRange.StartOffset" /> occurs at or before the <see cref="P:ActiproSoftware.SyntaxEditor.TextRange.EndOffset" />).
            </summary><value><c>true</c> if the range is normalized; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.TextRange.IsZeroLength"><summary>
            Gets whether the range has a zero length.
            </summary><value><c>true</c> if the range has a zero length; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.TextRange.LastOffset"><summary>
            Gets the last offset in the range.
            </summary><value>The last offset in the range.</value><remarks>
            This property returns either the <see cref="P:ActiproSoftware.SyntaxEditor.TextRange.StartOffset" /> or <see cref="P:ActiproSoftware.SyntaxEditor.TextRange.EndOffset" /> property, whichever comes last.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.TextRange.Length"><summary>
            Gets the number of characters encompassed by the <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" />.
            </summary><value>The number of characters encompassed by the <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" />.</value><remarks>
            This value will return a negative length if the range is not normalized.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.TextRange.NormalizedTextRange"><summary>
            Gets a normalized version of this <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> without actually modifying this instance.
            </summary><value>A normalized version of this <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> without actually modifying this instance.</value></member><member name="P:ActiproSoftware.SyntaxEditor.TextRange.StartOffset"><summary>
            Gets the start offset in the range.
            </summary><value>The start offset in the range.</value><remarks>
            The start offset may occur after the end offset if the range is not normalized.
            The <see cref="P:ActiproSoftware.SyntaxEditor.TextRange.IsNormalized" /> property indicates if the range is normalized.
            To get the normalized first offset in the range, use the <see cref="P:ActiproSoftware.SyntaxEditor.TextRange.FirstOffset" /> property.
            To get the normalized last offset in the range, use the <see cref="P:ActiproSoftware.SyntaxEditor.TextRange.LastOffset" /> property.
            </remarks></member><member name="T:ActiproSoftware.SyntaxEditor.TokenCollection"><summary>
            Provides access to a collection of tokens in a <see cref="T:ActiproSoftware.SyntaxEditor.Document" />.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.TokenCollection.GetTokenAtOffset(System.Int32)"><summary>
            Returns the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that contains the specified offset.
            </summary><param name="offset">The offset to look for.</param><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that contains the specified offset.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.TokenCollection.GetTokenEndOffset(System.Int32)"><summary>
            Gets the end offset of the specified <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.
            </summary><param name="index">The index of the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> to examine.</param><returns>The end offset of the specified <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.TokenCollection.GetTokenLength(System.Int32)"><summary>
            Gets the length of the specified <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.
            </summary><param name="index">The index of the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> to examine.</param><returns>The length of the specified <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.TokenCollection.GetTokenTextRange(System.Int32)"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> for the specified <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.
            </summary><param name="index">The index of the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> to examine.</param><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> for the specified <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.TokenCollection.IndexOf(System.Int32)"><summary>
            Finds the index of the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that contains the specified offset.
            </summary><param name="offset">The offset to look for.</param><returns>The index of the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that contains the specified offset.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.TokenCollection.IndexOfRelative(System.Int32,System.Int32)"><summary>
            Finds the index of the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that contains the specified offset using a relative algorithm.
            </summary><param name="tokenIndex">The index of the token at which to start looking.</param><param name="offset">The offset to look for.</param><returns>The index of the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that contains the specified offset.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.TokenCollection.TokenContains(System.Int32,System.Int32)"><summary>
            Returns whether the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> at the specified index contains the offset.
            </summary><param name="index">The index of the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> to examine.</param><param name="offset">The offset to check.</param><returns><c>true</c> if the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> at the specified index contains the offset; otherwise, <c>false</c>.
            </returns></member><member name="P:ActiproSoftware.SyntaxEditor.TokenCollection.DeletedTokens"><summary>
            Gets the collection of <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> objects that were deleted from the <see cref="P:ActiproSoftware.SyntaxEditor.TokenCollection.Document" /> during the last lexical parse.
            </summary><value>The collection of <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> objects that were deleted from the <see cref="P:ActiproSoftware.SyntaxEditor.TokenCollection.Document" /> during the last lexical parse.</value></member><member name="P:ActiproSoftware.SyntaxEditor.TokenCollection.Document"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> referenced by the <see cref="T:ActiproSoftware.SyntaxEditor.TokenCollection" />.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> referenced by the <see cref="T:ActiproSoftware.SyntaxEditor.TokenCollection" />.</value></member><member name="P:ActiproSoftware.SyntaxEditor.TokenCollection.Item(System.Int32)"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> at the specified index. 
            <para>
            [C#] In C#, this property is the indexer for the <c>TokenCollection</c> class. 
            </para></summary><param name="index">The index of the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> to return.</param><value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> at the specified index. 
            </value></member><member name="T:ActiproSoftware.SyntaxEditor.EditorViewButtonLinkEventHandler"><summary>
            Represents the method that will handle <see cref="T:ActiproSoftware.SyntaxEditor.EditorViewButtonLink" /> events.
            </summary><param name="sender">Sender of the event.</param><param name="e">A <see cref="T:ActiproSoftware.SyntaxEditor.EditorViewButtonLinkEventArgs" /> containing event data.</param><remarks>
            When you create a <c>EditorViewButtonLinkEventHandler</c> delegate, you identify the method that will handle the event. 
            To associate the event with your event handler, add an instance of the delegate to the event. 
            The event handler is called whenever the event occurs, unless you remove the delegate.
            </remarks><seealso cref="T:ActiproSoftware.SyntaxEditor.EditorViewButtonLinkEventArgs" /></member><member name="T:ActiproSoftware.SyntaxEditor.EditorViewButtonLinkEventArgs"><summary>
            Provides data for events that apply to an <see cref="T:ActiproSoftware.SyntaxEditor.EditorViewButtonLink" />.
            </summary><seealso cref="T:ActiproSoftware.SyntaxEditor.EditorViewButtonLinkEventHandler" /></member><member name="M:ActiproSoftware.SyntaxEditor.EditorViewButtonLinkEventArgs.#ctor(ActiproSoftware.SyntaxEditor.EditorViewButtonLink)"><summary>
            Initializes a new instance of the <c>EditorViewButtonLinkEventArgs</c> class. 
            </summary><param name="link">The <see cref="T:ActiproSoftware.SyntaxEditor.EditorViewButtonLink" /> for which the event applies.</param></member><member name="P:ActiproSoftware.SyntaxEditor.EditorViewButtonLinkEventArgs.Link"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.EditorViewButtonLink" /> for which the event applies.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.EditorViewButtonLink" /> for which the event applies.</value></member><member name="T:ActiproSoftware.SyntaxEditor.Caret"><summary>
            Represents a blinking caret in an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" />.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Caret.Equals(System.Object)"><summary>
            Determines whether the specified <c>Object</c> is equal to the current <c>Object</c>. 
            </summary><param name="obj">The <c>Object</c> to compare to the current <c>Object</c>.</param><returns><c>true</c> if the specified <c>Object</c> is equal to the current <c>Object</c>; 
            otherwise, <c>false</c>. 
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.Caret.GetHashCode"><summary>
            Returns a hash code for this object.
            </summary><returns>An integer value that specifies a hash value for this object.</returns></member><member name="P:ActiproSoftware.SyntaxEditor.Caret.BlinkInterval"><summary>
            Gets or sets the interval at which the caret blinks.
            </summary><value>The interval at which the caret blinks, in milliseconds.</value></member><member name="P:ActiproSoftware.SyntaxEditor.Caret.CharacterColumn"><summary>
            Gets the character column of the caret within the selected view.
            </summary><value>The character column of the caret within the selected view.</value><remarks>
            This property is the same as calling the <see cref="M:ActiproSoftware.SyntaxEditor.EditorView.GetCharacterColumn(System.Int32)" /> method using
            the value of the <see cref="P:ActiproSoftware.SyntaxEditor.Caret.EditPosition" /> property.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.Caret.DisplayCharacterColumn"><summary>
            Gets the character column of the caret within the selected view and adds one to the value for display purposes.
            </summary><value>The character column of the caret within the selected view, plus one.</value><remarks>
            This property is the same as calling the <see cref="M:ActiproSoftware.SyntaxEditor.EditorView.GetCharacterColumn(System.Int32)" /> method using
            the value of the <see cref="P:ActiproSoftware.SyntaxEditor.Caret.EditPosition" /> property.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.Caret.DisplayDocumentPosition"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" /> of the caret within the selected view,
            and adds one to the line and character values for display purposes.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" /> of the caret within the selected view, offset by one.</value></member><member name="P:ActiproSoftware.SyntaxEditor.Caret.DocumentPosition"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" /> of the caret within the selected view.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" /> of the caret within the selected view.</value><remarks>This property is the same as the <see cref="P:ActiproSoftware.SyntaxEditor.Selection.EndDocumentPosition" /> property.</remarks></member><member name="P:ActiproSoftware.SyntaxEditor.Caret.EditPosition"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" /> of the caret within the selected view.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" /> of the caret within the selected view.</value><remarks>This property is the same as the <see cref="P:ActiproSoftware.SyntaxEditor.Selection.EndEditPosition" /> property.</remarks></member><member name="P:ActiproSoftware.SyntaxEditor.Caret.InsertStyle"><summary>
            Gets or sets the style of the caret when in insert mode.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.CaretStyle" /> indicating the style of the caret when in insert mode.</value></member><member name="P:ActiproSoftware.SyntaxEditor.Caret.InsertWidth"><summary>
            Gets or sets the width of the caret when in insert mode, if a non-block caret style is used.
            </summary><value>The width of the caret when in insert mode.  The width must be within <c>1</c> and <c>8</c>.</value></member><member name="P:ActiproSoftware.SyntaxEditor.Caret.Offset"><summary>
            Gets or sets the offset of the caret within the selected view.
            </summary><value>The offset of the caret within the selected view.</value><remarks>This property is the same as the <see cref="P:ActiproSoftware.SyntaxEditor.Selection.EndOffset" /> property.</remarks></member><member name="P:ActiproSoftware.SyntaxEditor.Caret.OverwriteStyle"><summary>
            Gets or sets the style of the caret when in overwrite mode.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.CaretStyle" /> indicating the style of the caret when in overwrite mode.</value></member><member name="P:ActiproSoftware.SyntaxEditor.Caret.OverwriteWidth"><summary>
            Gets or sets the width of the caret when in overwrite mode, if a non-block caret style is used.
            </summary><value>The width of the caret when in overwrite mode.  The width must be within <c>1</c> and <c>8</c>.</value></member><member name="T:ActiproSoftware.SyntaxEditor.ColumnGuide"><summary>
            Represents a column guide.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.ColumnGuide.ResetColor"><summary>
            Resets the <see cref="P:ActiproSoftware.SyntaxEditor.ColumnGuide.Color" /> property to its default value.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.ColumnGuide.ShouldSerializeColor"><summary>
            Indicates whether the <see cref="P:ActiproSoftware.SyntaxEditor.ColumnGuide.Color" /> property should be persisted.
            </summary><returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.ColumnGuide.#ctor"><summary>
            Initializes the <c>ColumnGuide</c> class. 
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.ColumnGuide.#ctor(ActiproSoftware.SyntaxEditor.ColumnGuideValueType,System.Int32,System.Drawing.Color)"><summary>
            Initializes the <c>ColumnGuide</c> class. 
            </summary><param name="valueType">The <see cref="T:ActiproSoftware.SyntaxEditor.ColumnGuideValueType" /> that specifies the type of value.</param><param name="value">The value of the column guide.</param><param name="color">The color of the column guide.</param></member><member name="M:ActiproSoftware.SyntaxEditor.ColumnGuide.#ctor(ActiproSoftware.SyntaxEditor.ColumnGuideValueType,System.Int32,System.Drawing.Color,System.Drawing.Drawing2D.DashStyle)"><summary>
            Initializes the <c>ColumnGuide</c> class. 
            </summary><param name="valueType">The <see cref="T:ActiproSoftware.SyntaxEditor.ColumnGuideValueType" /> that specifies the type of value.</param><param name="value">The value of the column guide.</param><param name="color">The color of the column guide.</param><param name="dashStyle">The <see cref="P:ActiproSoftware.SyntaxEditor.ColumnGuide.DashStyle" /> of the column guide.</param></member><member name="P:ActiproSoftware.SyntaxEditor.ColumnGuide.Color"><summary>
            Gets or sets the color of the column guide.
            </summary><value>A <c>Color</c> indicating the color of the column guide.</value></member><member name="P:ActiproSoftware.SyntaxEditor.ColumnGuide.DashStyle"><summary>
            Gets or sets the dash style of the column guide.
            </summary><value>A <c>DashStyle</c> indicating the dash style of the column guide.</value></member><member name="P:ActiproSoftware.SyntaxEditor.ColumnGuide.Value"><summary>
            Gets or sets the value of the column guide.
            </summary><value>The value of the column guide.</value></member><member name="P:ActiproSoftware.SyntaxEditor.ColumnGuide.ValueType"><summary>
            Gets or sets the <see cref="T:ActiproSoftware.SyntaxEditor.ColumnGuideValueType" /> that specifies the type of value.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.ColumnGuideValueType" /> that specifies the type of value.</value></member><member name="T:ActiproSoftware.SyntaxEditor.ColumnGuideCollection"><summary>
            Provides a collection of <see cref="T:ActiproSoftware.SyntaxEditor.ColumnGuide" /> objects.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.ColumnGuideCollection.Add(ActiproSoftware.SyntaxEditor.ColumnGuide)"><summary>
            Adds an item to the collection.
            </summary><param name="item">The <see cref="T:ActiproSoftware.SyntaxEditor.ColumnGuide" /> to add.</param><returns>The index at which the item was inserted into the collection.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.ColumnGuideCollection.AddRange(ActiproSoftware.SyntaxEditor.ColumnGuide[])"><summary>
            Adds multiple items to the collection.
            </summary><param name="items">The array of <see cref="T:ActiproSoftware.SyntaxEditor.ColumnGuide" /> objects to add.</param></member><member name="M:ActiproSoftware.SyntaxEditor.ColumnGuideCollection.Contains(ActiproSoftware.SyntaxEditor.ColumnGuide)"><summary>
            Determines whether the specified item is in the collection. 
            </summary><param name="item">
            The <see cref="T:ActiproSoftware.SyntaxEditor.ColumnGuide" /> to look for. 
            </param><returns><c>true</c> if the collection contains the item; otherwise, <c>false</c>. 
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.ColumnGuideCollection.CopyTo(System.Array,System.Int32)"><summary>
            Copies the entire collection to a compatible one-dimensional <c>Array</c>, 
            starting at the specified index of the target array.
            </summary><param name="array">
            The one-dimensional <c>Array</c> that is the destination of the elements copied from the collection. 
            The <c>Array</c> must have zero-based indexing. 
            </param><param name="startIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param></member><member name="M:ActiproSoftware.SyntaxEditor.ColumnGuideCollection.Dispose"><summary>
            Releases the resources used by the object.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.ColumnGuideCollection.IndexOf(ActiproSoftware.SyntaxEditor.ColumnGuide)"><summary>
            Returns the index of the specified item in the collection.
            </summary><param name="item">The <see cref="T:ActiproSoftware.SyntaxEditor.ColumnGuide" /> to look for.</param><returns>
            If found, the index where the item is in the collection; otherwise, <c>-1</c>. 
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.ColumnGuideCollection.Insert(System.Int32,ActiproSoftware.SyntaxEditor.ColumnGuide)"><summary>
            Inserts a <see cref="T:ActiproSoftware.SyntaxEditor.ColumnGuide" /> into the collection at the specified index.
            </summary><param name="index">The zero-based index at which the <see cref="T:ActiproSoftware.SyntaxEditor.ColumnGuide" /> should be inserted.</param><param name="item">The <see cref="T:ActiproSoftware.SyntaxEditor.ColumnGuide" /> to insert into the collection.</param></member><member name="M:ActiproSoftware.SyntaxEditor.ColumnGuideCollection.OnClearComplete"><summary>
            Performs additional custom processes after clearing the contents of the collection. 
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.ColumnGuideCollection.OnInsertComplete(System.Int32,System.Object)"><summary>
            Performs additional custom processes after inserting an item into the collection. 
            </summary><param name="index">The index at which the item was inserted.</param><param name="value">The item that was inserted.</param></member><member name="M:ActiproSoftware.SyntaxEditor.ColumnGuideCollection.OnRemoveComplete(System.Int32,System.Object)"><summary>
            Performs additional custom processes after removing an item from the collection. 
            </summary><param name="index">The index at which the item was removed.</param><param name="value">The item that was removed.</param></member><member name="M:ActiproSoftware.SyntaxEditor.ColumnGuideCollection.Remove(ActiproSoftware.SyntaxEditor.ColumnGuide)"><summary>
            Removes the first occurrence of a specific item from the collection.
            </summary><param name="item">The <see cref="T:ActiproSoftware.SyntaxEditor.ColumnGuide" /> to remove.</param></member><member name="M:ActiproSoftware.SyntaxEditor.ColumnGuideCollection.#ctor(ActiproSoftware.SyntaxEditor.SyntaxEditor)"><summary>
            Initializes a new instance of the <c>ColumnGuideCollection</c> class.
            </summary><param name="syntaxEditor">The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor" /> that owns the collection.</param></member><member name="P:ActiproSoftware.SyntaxEditor.ColumnGuideCollection.Item(System.Int32)"><summary>
            Gets the item at the specified index. 
            <para>
            [C#] In C#, this property is the indexer for the <c>ColumnGuideCollection</c> class. 
            </para></summary><param name="index">The index of the item to return.</param><value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.ColumnGuide" /> at the specified index. 
            </value></member><member name="T:ActiproSoftware.SyntaxEditor.ColumnGuideValueType"><summary>
            Specifies the type of column guide.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.ColumnGuideValueType.Column"><summary>
            The <see cref="P:ActiproSoftware.SyntaxEditor.ColumnGuide.Value" /> property specifies a column value.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.ColumnGuideValueType.Absolute"><summary>
            The <see cref="P:ActiproSoftware.SyntaxEditor.ColumnGuide.Value" /> property specifies a pixel value.
            </summary></member><member name="T:ActiproSoftware.SyntaxEditor.CaretStyle"><summary>
            Specifies the drawing style of a <see cref="T:ActiproSoftware.SyntaxEditor.Caret" />.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.CaretStyle.VerticalLine"><summary>
            Draw a vertical line.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.CaretStyle.HorizontalUnderline"><summary>
            Draw a horizontal underline.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.CaretStyle.Block"><summary>
            Draw a block over the character.
            </summary></member><member name="T:ActiproSoftware.SyntaxEditor.ContextMenuRequestEventArgs"><summary>
            Provides data for context menu events.
            </summary><seealso cref="T:ActiproSoftware.SyntaxEditor.ContextMenuRequestEventHandler" /></member><member name="M:ActiproSoftware.SyntaxEditor.ContextMenuRequestEventArgs.#ctor(System.Drawing.Point,System.Drawing.Point,System.Boolean)"><summary>
            Initializes a new instance of the <c>ContextMenuRequestEventArgs</c> class. 
            </summary><param name="menuLocation">A <see cref="T:System.Drawing.Point" /> specifying the location of where the menu should be displayed.</param><param name="mouseLocation">A <see cref="T:System.Drawing.Point" /> specifying the location of the mouse.</param><param name="causedByMouse">Whether the event was caused by a mouse button press.</param></member><member name="P:ActiproSoftware.SyntaxEditor.ContextMenuRequestEventArgs.CausedByMouse"><summary>
            Gets whether the event was caused by a mouse button press.
            </summary><value><c>true</c> if the event was caused by a mouse button press; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.ContextMenuRequestEventArgs.MenuLocation"><summary>
            Gets the location of where the menu should be displayed.
            </summary><value>A <see cref="T:System.Drawing.Point" /> specifying the location of where the menu should be displayed.</value></member><member name="P:ActiproSoftware.SyntaxEditor.ContextMenuRequestEventArgs.MouseLocation"><summary>
            Gets the location of the mouse.
            </summary><value>A <see cref="T:System.Drawing.Point" /> specifying the location of the mouse.</value></member><member name="T:ActiproSoftware.SyntaxEditor.ContextMenuRequestEventHandler"><summary>
            Represents the method that will handle context menu events.
            </summary><param name="sender">Sender of the event.</param><param name="e">A <see cref="T:ActiproSoftware.SyntaxEditor.ContextMenuRequestEventArgs" /> containing event data.</param><remarks>
            When you create a <c>ContextMenuRequestEventHandler</c> delegate, you identify the method that will handle the event. 
            To associate the event with your event handler, add an instance of the delegate to the event. 
            The event handler is called whenever the event occurs, unless you remove the delegate.
            </remarks><seealso cref="T:ActiproSoftware.SyntaxEditor.ContextMenuRequestEventArgs" /></member><member name="T:ActiproSoftware.SyntaxEditor.EditorViewButtonLink"><summary>
            Represents a button link that appears within an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> next to scrollbars and is based on a <see cref="T:ActiproSoftware.SyntaxEditor.EditorViewButtonCommand" />.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.EditorViewButtonLink.GetDrawState"><summary>
            Gets the <see cref="T:ActiproSoftware.WinUICore.UIElementDrawState" /> for the element.
            </summary><returns>The <see cref="T:ActiproSoftware.WinUICore.UIElementDrawState" /> for the element.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.EditorViewButtonLink.MeasureCore(System.Drawing.Graphics,System.Drawing.Size)"><summary>
            Provides the place to perform measurement logic for the element.
            </summary><param name="g">The <see cref="T:System.Drawing.Graphics" /> object to use for measurement.</param><param name="availableSize">
            The available size that parent can give to the child.
            The child can return bigger in hopes that the parent will become scrollable.
            The value may also be infinity to indicate that the desired measurements of the element are wanted.
            </param><returns><see cref="M:ActiproSoftware.SyntaxEditor.EditorViewButtonLink.MeasureCore(System.Drawing.Graphics,System.Drawing.Size)" /> is designed to be the main customizability point for size control of layout. 
            Element authors should override this method, call <see cref="M:ActiproSoftware.WinUICore.UIElement.Measure(System.Drawing.Graphics,System.Drawing.Size)" /> on each child element, 
            and compute their desired size based upon the measurement of the children. 
            The return value should be the desired size. 
            It is required that a parent element calls <see cref="M:ActiproSoftware.WinUICore.UIElement.Measure(System.Drawing.Graphics,System.Drawing.Size)" /> on each child or they won't be sized/arranged.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.EditorViewButtonLink.OnMouseDown(System.Windows.Forms.MouseEventArgs)"><summary>
            Raises the <see cref="E:ActiproSoftware.WinUICore.UIElement.MouseDown" /> event.
            </summary><param name="e">A <c>MouseEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.EditorViewButtonLink.OnMouseUp(System.Windows.Forms.MouseEventArgs)"><summary>
            Raises the <see cref="E:ActiproSoftware.WinUICore.UIElement.MouseUp" /> event.
            </summary><param name="e">A <c>MouseEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.EditorViewButtonLink.OnRender(System.Windows.Forms.PaintEventArgs)"><summary>
            Renders the element.
            </summary><param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param></member><member name="P:ActiproSoftware.SyntaxEditor.EditorViewButtonLink.Command"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.EditorViewButtonCommand" /> that this link is based on.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.EditorViewButtonCommand" /> that this link is based on.</value></member><member name="P:ActiproSoftware.SyntaxEditor.EditorViewButtonLink.InvalidateOnMouseEvents"><summary>
            Gets whether to invalidate the element when mouse events occur.
            </summary><value><c>true</c> if the element should be invalidated when mouse events occur.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.EditorViewButtonLink.Location"><summary>
            Gets a <see cref="T:ActiproSoftware.Drawing.Sides" /> indicating the location of the link.
            </summary><value>A <see cref="T:ActiproSoftware.Drawing.Sides" /> indicating the location of the link.</value></member><member name="P:ActiproSoftware.SyntaxEditor.EditorViewButtonLink.View"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> that contains the element.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> that contains the element.</value></member><member name="T:ActiproSoftware.SyntaxEditor.EditorViewButtonCommand"><summary>
            Represents a button command whose links appears within an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> next to scrollbars.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.EditorViewButtonCommand.OnRenderLinkForeground(System.Windows.Forms.PaintEventArgs,ActiproSoftware.SyntaxEditor.EditorViewButtonLink)"><summary>
            Renders the element.
            </summary><param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param><param name="link">The <see cref="T:ActiproSoftware.SyntaxEditor.EditorViewButtonLink" /> being drawn.</param></member><member name="M:ActiproSoftware.SyntaxEditor.EditorViewButtonCommand.#ctor"><summary>
            Initializes a new instance of the <c>EditorViewButtonCommand</c> class. 
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.EditorViewButtonCommand.#ctor(System.String)"><summary>
            Initializes a new instance of the <c>EditorViewButtonCommand</c> class. 
            </summary><param name="name">A name that identifies the button.</param></member><member name="M:ActiproSoftware.SyntaxEditor.EditorViewButtonCommand.#ctor(System.String,System.Drawing.Image)"><summary>
            Initializes a new instance of the <c>EditorViewButtonCommand</c> class. 
            </summary><param name="name">A name that identifies the button.</param><param name="image">The <see cref="P:ActiproSoftware.SyntaxEditor.EditorViewButtonCommand.Image" /> to display as the foreground of the button.</param></member><member name="P:ActiproSoftware.SyntaxEditor.EditorViewButtonCommand.Checked"><summary>
            Gets or sets whether the button is checked.
            </summary><value><c>true</c> if the button is checked; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.EditorViewButtonCommand.Enabled"><summary>
            Gets or sets whether the button is enabled.
            </summary><value><c>true</c> if the button is enabled; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.EditorViewButtonCommand.Image"><summary>
            Gets or sets the <see cref="T:System.Drawing.Image" /> that will be painted on the foreground of the button links.
            </summary><value>The <see cref="T:System.Drawing.Image" /> that will be painted on the foreground of the button links.</value></member><member name="P:ActiproSoftware.SyntaxEditor.EditorViewButtonCommand.IsPopupButton"><summary>
            Gets or sets whether the button displays a popup.
            </summary><value><c>true</c> if the button displays a popup; otherwise, <c>false</c>.
            </value><remarks>
            If this property is <c>true</c>, the button will fire the click on mouse down instead of mouse up.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.EditorViewButtonCommand.Name"><summary>
            Gets or sets a name that identifies the button.
            </summary><value>A name that identifies the button.</value></member><member name="P:ActiproSoftware.SyntaxEditor.EditorViewButtonCommand.ToolTipText"><summary>
            Gets or sets the tooltip text for the button links.
            </summary><value>The tooltip text for the button links.</value></member><member name="T:ActiproSoftware.SyntaxEditor.EditorViewEventHandler"><summary>
            Represents the method that will handle <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> events.
            </summary><param name="sender">Sender of the event.</param><param name="e">A <see cref="T:ActiproSoftware.SyntaxEditor.EditorViewEventArgs" /> containing event data.</param><remarks>
            When you create a <c>EditorViewEventHandler</c> delegate, you identify the method that will handle the event. 
            To associate the event with your event handler, add an instance of the delegate to the event. 
            The event handler is called whenever the event occurs, unless you remove the delegate.
            </remarks><seealso cref="T:ActiproSoftware.SyntaxEditor.EditorViewEventArgs" /></member><member name="T:ActiproSoftware.SyntaxEditor.ScrollBarType"><summary>
            Specifies the type of scrollbars to display.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.ScrollBarType.Both"><summary>
            Display both a horizontal and a vertical scroll bar when needed. 
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.ScrollBarType.ForcedBoth"><summary>
            Always display both a horizontal and a vertical scroll bar. 
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.ScrollBarType.ForcedHorizontal"><summary>
            Always display a horizontal scroll bar, but never display the vertical scroll bar.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.ScrollBarType.ForcedVertical"><summary>
            Always display a vertical scroll bar, but never display the horizontal scroll bar. 
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.ScrollBarType.Horizontal"><summary>
            Display a horizontal scroll bar only when text is longer than the width of the control. 
            Never display the vertical scroll bar.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.ScrollBarType.Vertical"><summary>
            Display a vertical scroll bar only when text is longer than the height of the control.
            Never display the horizontal scroll bar.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.ScrollBarType.None"><summary>
            No scroll bars are ever displayed. 
            </summary></member><member name="T:ActiproSoftware.SyntaxEditor.EditorViewButtonCommandCollection"><summary>
            Represents a collection of <see cref="T:ActiproSoftware.SyntaxEditor.EditorViewButtonCommand" /> objects.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.EditorViewButtonCommandCollection.Add(ActiproSoftware.SyntaxEditor.EditorViewButtonCommand)"><summary>
            Adds an item to the collection.
            </summary><param name="item">The <see cref="T:ActiproSoftware.SyntaxEditor.EditorViewButtonCommand" /> to add.</param><returns>The index at which the item was inserted into the collection.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.EditorViewButtonCommandCollection.Contains(ActiproSoftware.SyntaxEditor.EditorViewButtonCommand)"><summary>
            Determines whether the specified item is in the collection. 
            </summary><param name="item">
            The <see cref="T:ActiproSoftware.SyntaxEditor.EditorViewButtonCommand" /> to look for. 
            </param><returns><c>true</c> if the collection contains the item; otherwise, <c>false</c>. 
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.EditorViewButtonCommandCollection.Contains(System.String)"><summary>
            Determines whether an <see cref="T:ActiproSoftware.SyntaxEditor.EditorViewButtonCommand" /> is in the collection with the specified <see cref="P:ActiproSoftware.SyntaxEditor.EditorViewButtonCommand.Name" />.
            </summary><param name="name">The <see cref="P:ActiproSoftware.SyntaxEditor.EditorViewButtonCommand.Name" /> of the <see cref="T:ActiproSoftware.SyntaxEditor.EditorViewButtonCommand" /> to locate in the collection.</param><returns><c>true</c> if the name is found in the collection; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.EditorViewButtonCommandCollection.Dispose"><summary>
            Releases the resources used by the object.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.EditorViewButtonCommandCollection.IndexOf(ActiproSoftware.SyntaxEditor.EditorViewButtonCommand)"><summary>
            Returns the index of the specified item in the collection.
            </summary><param name="item">The <see cref="T:ActiproSoftware.SyntaxEditor.EditorViewButtonCommand" /> to look for.</param><returns>
            If found, the index where the item is in the collection; otherwise, <c>-1</c>. 
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.EditorViewButtonCommandCollection.IndexOf(System.String)"><summary>
            Searches for the specified <see cref="P:ActiproSoftware.SyntaxEditor.EditorViewButtonCommand.Name" /> of an <see cref="T:ActiproSoftware.SyntaxEditor.EditorViewButtonCommand" /> and returns the zero-based index of the first occurrence within the entire collection.
            </summary><param name="name">The <see cref="P:ActiproSoftware.SyntaxEditor.EditorViewButtonCommand.Name" /> of the <see cref="T:ActiproSoftware.SyntaxEditor.EditorViewButtonCommand" /> to locate in the collection.</param><returns>
            The zero-based index of the first occurrence of the <see cref="P:ActiproSoftware.SyntaxEditor.EditorViewButtonCommand.Name" /> within the entire collection, if found; otherwise, <c>-1</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.EditorViewButtonCommandCollection.Insert(System.Int32,ActiproSoftware.SyntaxEditor.EditorViewButtonCommand)"><summary>
            Inserts a <see cref="T:ActiproSoftware.SyntaxEditor.EditorViewButtonCommand" /> into the collection at the specified index.
            </summary><param name="index">The zero-based index at which the <see cref="T:ActiproSoftware.SyntaxEditor.EditorViewButtonCommand" /> should be inserted.</param><param name="item">The <see cref="T:ActiproSoftware.SyntaxEditor.EditorViewButtonCommand" /> to insert into the collection.</param></member><member name="M:ActiproSoftware.SyntaxEditor.EditorViewButtonCommandCollection.OnClear"><summary>
            Performs additional custom processes before clearing the contents of the collection. 
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.EditorViewButtonCommandCollection.OnClearComplete"><summary>
            Performs additional custom processes after clearing the contents of the collection. 
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.EditorViewButtonCommandCollection.OnInsertComplete(System.Int32,System.Object)"><summary>
            Performs additional custom processes after inserting an item into the collection. 
            </summary><param name="index">The index at which the item was inserted.</param><param name="value">The item that was inserted.</param></member><member name="M:ActiproSoftware.SyntaxEditor.EditorViewButtonCommandCollection.OnRemoveComplete(System.Int32,System.Object)"><summary>
            Performs additional custom processes after removing an item from the collection. 
            </summary><param name="index">The index at which the item was removed.</param><param name="value">The item that was removed.</param></member><member name="M:ActiproSoftware.SyntaxEditor.EditorViewButtonCommandCollection.Remove(ActiproSoftware.SyntaxEditor.EditorViewButtonCommand)"><summary>
            Removes the first occurrence of a specific item from the collection.
            </summary><param name="item">The <see cref="T:ActiproSoftware.SyntaxEditor.EditorViewButtonCommand" /> to remove.</param></member><member name="P:ActiproSoftware.SyntaxEditor.EditorViewButtonCommandCollection.Item(System.Int32)"><summary>
            Gets the item at the specified index. 
            <para>
            [C#] In C#, this property is the indexer for the <c>EditorViewButtonCommandCollection</c> class. 
            </para></summary><param name="index">The index of the item to return.</param><value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.EditorViewButtonCommand" /> at the specified index. 
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.EditorViewButtonCommandCollection.Item(System.String)"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.EditorViewButtonCommand" /> with the specified <see cref="P:ActiproSoftware.SyntaxEditor.EditorViewButtonCommand.Name" />. 
            <para>
            [C#] In C#, this property is the indexer for the <c>EditorViewButtonCommandCollection</c> class. 
            </para></summary><param name="name">The <see cref="P:ActiproSoftware.SyntaxEditor.EditorViewButtonCommand.Name" /> of the <see cref="T:ActiproSoftware.SyntaxEditor.EditorViewButtonCommand" /> to return.</param><value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.EditorViewButtonCommand" /> with the specified <see cref="P:ActiproSoftware.SyntaxEditor.EditorViewButtonCommand.Name" />. 
            </value></member><member name="T:ActiproSoftware.SyntaxEditor.SelectionEventArgs"><summary>
            Event arguments for <see cref="T:ActiproSoftware.SyntaxEditor.Selection" /> events.
            </summary><remarks>
            This class is used with the <see cref="T:ActiproSoftware.SyntaxEditor.SelectionEventHandler" /> delegate.
            </remarks><seealso cref="T:ActiproSoftware.SyntaxEditor.SelectionEventHandler" /></member><member name="P:ActiproSoftware.SyntaxEditor.SelectionEventArgs.CaretCharacterColumn"><summary>
            Gets the character column of the caret within the view containing the <see cref="P:ActiproSoftware.SyntaxEditor.SelectionEventArgs.Selection" />.
            </summary><value>The character column of the caret within the view containing the <see cref="P:ActiproSoftware.SyntaxEditor.SelectionEventArgs.Selection" />.</value><remarks>
            This property is the same as calling the <see cref="M:ActiproSoftware.SyntaxEditor.EditorView.GetCharacterColumn(System.Int32)" /> method using
            the value of the <see cref="P:ActiproSoftware.SyntaxEditor.Selection.EndEditPosition" /> property.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.SelectionEventArgs.CaretDocumentPosition"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" /> of the caret within the view containing the <see cref="P:ActiproSoftware.SyntaxEditor.SelectionEventArgs.Selection" />.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" /> of the caret within the view containing the <see cref="P:ActiproSoftware.SyntaxEditor.SelectionEventArgs.Selection" />.</value><remarks>This property is the same as the <see cref="P:ActiproSoftware.SyntaxEditor.Selection.EndDocumentPosition" /> property.</remarks></member><member name="P:ActiproSoftware.SyntaxEditor.SelectionEventArgs.DisplayCaretCharacterColumn"><summary>
            Gets the character column of the caret within the view containing the <see cref="P:ActiproSoftware.SyntaxEditor.SelectionEventArgs.Selection" />. 
            and adds one to the value for display purposes.
            </summary><value>The character column of the caret within the view containing the <see cref="P:ActiproSoftware.SyntaxEditor.SelectionEventArgs.Selection" />, plus one.</value><remarks>
            This property is the same as calling the <see cref="M:ActiproSoftware.SyntaxEditor.EditorView.GetCharacterColumn(System.Int32)" /> method using
            the value of the <see cref="P:ActiproSoftware.SyntaxEditor.Selection.EndEditPosition" /> property.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.SelectionEventArgs.DisplayCaretDocumentPosition"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" /> of the caret within the view containing the <see cref="P:ActiproSoftware.SyntaxEditor.SelectionEventArgs.Selection" />,
            and adds one to the line and character values for display purposes.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" /> of the caret within the view containing the <see cref="P:ActiproSoftware.SyntaxEditor.SelectionEventArgs.Selection" />, offset by one.</value></member><member name="P:ActiproSoftware.SyntaxEditor.SelectionEventArgs.LastCaretDocumentPosition"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" /> of the caret the last time the event was fired.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" /> of the caret the last time the event was fired.</value></member><member name="P:ActiproSoftware.SyntaxEditor.SelectionEventArgs.Selection"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Selection" /> that is affected by this event.
            </summary><value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.Selection" /> that is affected by this event.
            </value></member><member name="T:ActiproSoftware.SyntaxEditor.SelectionEventHandler"><summary>
            Represents the method that will handle <see cref="T:ActiproSoftware.SyntaxEditor.Selection" /> events.
            </summary><param name="sender">Sender of the event.</param><param name="e">A <see cref="T:ActiproSoftware.SyntaxEditor.SelectionEventArgs" /> containing event data.</param><remarks>
            When you create a <c>SelectionEventHandler</c> delegate, you identify the method that will handle the event. 
            To associate the event with your event handler, add an instance of the delegate to the event. 
            The event handler is called whenever the event occurs, unless you remove the delegate.
            </remarks><seealso cref="T:ActiproSoftware.SyntaxEditor.SelectionEventArgs" /></member><member name="T:ActiproSoftware.SyntaxEditor.SelectionModes"><summary>
            Specifies the types of selection.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.SelectionModes.None"><summary>
            No selection is permitted.
            This value should only be used setting the allowed selection modes and not for setting a specific selection mode on the <see cref="T:ActiproSoftware.SyntaxEditor.Selection" /> object.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.SelectionModes.ContinuousStream"><summary>
            Selection proceeds in a continuous, linear stream from the start of the selection to the end, as in a standard edit control. 
            Entire lines are selected when you move to the next or previous line. 
            This is the default selection mode.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.SelectionModes.Block"><summary>
            Only a rectangular portion of text is selected instead of the whole line. 
            The selection includes all of the characters captured within the rectangle defined by the first (anchor) character 
            and the last character in the selection. 
            </summary></member><member name="T:ActiproSoftware.SyntaxEditor.CutCopyDragEventArgs"><summary>
            Event arguments for the <see cref="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.CutCopyDrag" /> event.
            </summary><remarks>
            This class is used with the <see cref="T:ActiproSoftware.SyntaxEditor.CutCopyDragEventHandler" /> delegate.
            </remarks><seealso cref="T:ActiproSoftware.SyntaxEditor.CutCopyDragEventHandler" /></member><member name="M:ActiproSoftware.SyntaxEditor.CutCopyDragEventArgs.#ctor(ActiproSoftware.SyntaxEditor.CutCopyDragSource,System.Windows.Forms.IDataObject)"><summary>
            Initializes a new instance of the <c>CutCopyDragEventArgs</c> class.
            </summary><param name="source">The <see cref="T:ActiproSoftware.SyntaxEditor.CutCopyDragSource" /> describing the source of the event.</param><param name="dataObject">The <see cref="T:System.Windows.Forms.IDataObject" /> that contains the data to be dragged or set to the clipboard.</param></member><member name="P:ActiproSoftware.SyntaxEditor.CutCopyDragEventArgs.DataObject"><summary>
            Gets or sets the <see cref="T:System.Windows.Forms.IDataObject" /> that contains the data to be dragged or set to the clipboard.
            </summary><value>The <see cref="T:System.Windows.Forms.IDataObject" /> that contains the data to be dragged or set to the clipboard.</value></member><member name="P:ActiproSoftware.SyntaxEditor.CutCopyDragEventArgs.Source"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.CutCopyDragSource" /> describing the source of the event.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.CutCopyDragSource" /> describing the source of the event.</value></member><member name="T:ActiproSoftware.SyntaxEditor.CutCopyDragEventHandler"><summary>
            Represents the method that will handle the <see cref="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.CutCopyDrag" /> event.
            </summary><param name="sender">Sender of the event.</param><param name="e">A <see cref="T:ActiproSoftware.SyntaxEditor.CutCopyDragEventArgs" /> containing event data.</param><remarks>
            When you create a <c>CutCopyDragEventHandler</c> delegate, you identify the method that will handle the event. 
            To associate the event with your event handler, add an instance of the delegate to the event. 
            The event handler is called whenever the event occurs, unless you remove the delegate.
            </remarks><seealso cref="T:ActiproSoftware.SyntaxEditor.CutCopyDragEventArgs" /></member><member name="T:ActiproSoftware.SyntaxEditor.CutCopyDragSource"><summary>
            Specifies the source of a <see cref="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.CutCopyDrag" /> event.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.CutCopyDragSource.Copy"><summary>
            The custom <c>IDataObject</c> comes from a copy text operation.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.CutCopyDragSource.Cut"><summary>
            The custom <c>IDataObject</c> comes from a cut text operation.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.CutCopyDragSource.Drag"><summary>
            The custom <c>IDataObject</c> comes from a drag operation.
            </summary></member><member name="T:ActiproSoftware.SyntaxEditor.EditPositionRange"><summary>
            Represents a range of two <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" /> values within the display lines of an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" />.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.EditPositionRange.BordersOn(ActiproSoftware.SyntaxEditor.EditPosition)"><summary>
            Returns whether the <see cref="T:ActiproSoftware.SyntaxEditor.EditPositionRange" /> borders on the specified <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" />.
            </summary><param name="position">The <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" /> to examine.</param><returns><c>true</c> if the <see cref="T:ActiproSoftware.SyntaxEditor.EditPositionRange" /> borders on the specified <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" />; otherwise, <c>false</c>.
            </returns><remarks>
            This method checks to see if the specified <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" /> is either the <see cref="P:ActiproSoftware.SyntaxEditor.EditPositionRange.StartPosition" /> or <see cref="P:ActiproSoftware.SyntaxEditor.EditPositionRange.EndPosition" />.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.EditPositionRange.BordersOn(ActiproSoftware.SyntaxEditor.EditPositionRange)"><summary>
            Returns whether the <see cref="T:ActiproSoftware.SyntaxEditor.EditPositionRange" /> borders on, but does not overlap the specified <see cref="T:ActiproSoftware.SyntaxEditor.EditPositionRange" />.
            </summary><param name="range">The <see cref="T:ActiproSoftware.SyntaxEditor.EditPositionRange" /> to examine.</param><returns><c>true</c> if the <see cref="T:ActiproSoftware.SyntaxEditor.EditPositionRange" /> borders on, but does not overlap the specified <see cref="T:ActiproSoftware.SyntaxEditor.EditPositionRange" />; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.EditPositionRange.Clone"><summary>
            Creates a copy of this <see cref="T:ActiproSoftware.SyntaxEditor.EditPositionRange" /> object.
            </summary><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.EditPositionRange" /> object that this method creates.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.EditPositionRange.Contains(ActiproSoftware.SyntaxEditor.EditPosition)"><summary>
            Returns whether the <see cref="T:ActiproSoftware.SyntaxEditor.EditPositionRange" /> contains the specified <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" />.
            </summary><param name="position">The <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" /> to examine.</param><returns><c>true</c> if the <see cref="T:ActiproSoftware.SyntaxEditor.EditPositionRange" /> contains the specified <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" />; otherwise, <c>false</c>.
            </returns><remarks>
            This method returns <c>false</c> if the <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" /> falls on the <see cref="P:ActiproSoftware.SyntaxEditor.EditPositionRange.LastPosition" /><see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" />
            since this method indicates if the <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" /> is encompassed by the <see cref="T:ActiproSoftware.SyntaxEditor.EditPositionRange" />.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.EditPositionRange.Contains(ActiproSoftware.SyntaxEditor.EditPositionRange)"><summary>
            Returns whether the <see cref="T:ActiproSoftware.SyntaxEditor.EditPositionRange" /> contains the specified <see cref="T:ActiproSoftware.SyntaxEditor.EditPositionRange" />.
            </summary><param name="range">The <see cref="T:ActiproSoftware.SyntaxEditor.EditPositionRange" /> to examine.</param><returns><c>true</c> if the <see cref="T:ActiproSoftware.SyntaxEditor.EditPositionRange" /> contains the specified <see cref="T:ActiproSoftware.SyntaxEditor.EditPositionRange" />; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.EditPositionRange.Equals(System.Object)"><summary>
            Determines whether the specified <c>Object</c> is equal to the current <c>Object</c>. 
            </summary><param name="obj">The <c>Object</c> to compare to the current <c>Object</c>.</param><returns><c>true</c> if the specified <c>Object</c> is equal to the current <c>Object</c>; 
            otherwise, <c>false</c>. 
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.EditPositionRange.GetHashCode"><summary>
            Returns a hash code for this object.
            </summary><returns>An integer value that specifies a hash value for this object.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.EditPositionRange.IntersectsWith(ActiproSoftware.SyntaxEditor.EditPosition)"><summary>
            Returns whether the <see cref="T:ActiproSoftware.SyntaxEditor.EditPositionRange" /> intersects with the specified <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" />.
            </summary><param name="position">The <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" /> to examine.</param><returns><c>true</c> if the <see cref="T:ActiproSoftware.SyntaxEditor.EditPositionRange" /> intersects with the specified <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" />; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.EditPositionRange.IntersectsWith(ActiproSoftware.SyntaxEditor.EditPositionRange)"><summary>
            Returns whether the <see cref="T:ActiproSoftware.SyntaxEditor.EditPositionRange" /> intersects with the specified <see cref="T:ActiproSoftware.SyntaxEditor.EditPositionRange" />.
            </summary><param name="range">The <see cref="T:ActiproSoftware.SyntaxEditor.EditPositionRange" /> to examine.</param><returns><c>true</c> if the <see cref="T:ActiproSoftware.SyntaxEditor.EditPositionRange" /> intersects with the specified <see cref="T:ActiproSoftware.SyntaxEditor.EditPositionRange" />; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.EditPositionRange.Normalize"><summary>
            Normalizes the range and ensures that the <see cref="P:ActiproSoftware.SyntaxEditor.EditPositionRange.StartPosition" /> occurs at or before the <see cref="P:ActiproSoftware.SyntaxEditor.EditPositionRange.EndPosition" /><see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" />.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.EditPositionRange.OverlapsWith(ActiproSoftware.SyntaxEditor.EditPositionRange)"><summary>
            Returns whether the <see cref="T:ActiproSoftware.SyntaxEditor.EditPositionRange" /> overlaps with, or crosses, the specified <see cref="T:ActiproSoftware.SyntaxEditor.EditPositionRange" />.
            </summary><param name="range">The <see cref="T:ActiproSoftware.SyntaxEditor.EditPositionRange" /> to examine.</param><returns><c>true</c> if the <see cref="T:ActiproSoftware.SyntaxEditor.EditPositionRange" /> overlaps with, or crosses, the specified <see cref="T:ActiproSoftware.SyntaxEditor.EditPositionRange" />; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.EditPositionRange.ToString"><summary>
            Converts the object to a <c>String</c>.
            </summary><returns>
            A string whose value represents this object.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.EditPositionRange.Union(ActiproSoftware.SyntaxEditor.EditPositionRange,ActiproSoftware.SyntaxEditor.EditPositionRange)"><summary>
            Returns the normalized union of two <see cref="T:ActiproSoftware.SyntaxEditor.EditPositionRange" /> objects.
            </summary><param name="range1">The first <see cref="T:ActiproSoftware.SyntaxEditor.EditPositionRange" /> to examine.</param><param name="range2">The second <see cref="T:ActiproSoftware.SyntaxEditor.EditPositionRange" /> to examine.</param><returns>
            The normalized union of two <see cref="T:ActiproSoftware.SyntaxEditor.EditPositionRange" /> objects.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.EditPositionRange.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)"><summary>
            Initializes a new instance of the <c>EditPositionRange</c> class with the specified <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" /> values.
            </summary><param name="startLine">The line of the start <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" />in the range.</param><param name="startCharacter">The character of the start <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" />in the range.</param><param name="endLine">The line of the end <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" />in the range.</param><param name="endCharacter">The character of the end <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" />in the range.</param></member><member name="M:ActiproSoftware.SyntaxEditor.EditPositionRange.#ctor(ActiproSoftware.SyntaxEditor.EditPosition,ActiproSoftware.SyntaxEditor.EditPosition)"><summary>
            Initializes a new instance of the <c>EditPositionRange</c> class with the specified <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" /> values.
            </summary><param name="startPosition">The start <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" /> in the range.</param><param name="endPosition">The end <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" />in the range.</param></member><member name="P:ActiproSoftware.SyntaxEditor.EditPositionRange.Empty"><summary>
            Returns an empty <see cref="T:ActiproSoftware.SyntaxEditor.EditPositionRange" />.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.EditPositionRange" /> that is empty.</value></member><member name="P:ActiproSoftware.SyntaxEditor.EditPositionRange.EndPosition"><summary>
            Gets the end <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" /> in the range.
            </summary><value>The end <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" /> in the range.</value><remarks>
            The end <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" /> may occur before the start <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" /> if the range is not normalized.
            The <see cref="P:ActiproSoftware.SyntaxEditor.EditPositionRange.IsNormalized" /> property indicates if the range is normalized.
            To get the normalized first <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" /> in the range, use the <see cref="P:ActiproSoftware.SyntaxEditor.EditPositionRange.FirstPosition" /> property.
            To get the normalized last <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" /> in the range, use the <see cref="P:ActiproSoftware.SyntaxEditor.EditPositionRange.LastPosition" /> property.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.EditPositionRange.FirstPosition"><summary>
            Gets the first <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" /> in the range.
            </summary><value>The first <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" /> in the range.</value><remarks>
            This property returns either the <see cref="P:ActiproSoftware.SyntaxEditor.EditPositionRange.StartPosition" /> or <see cref="P:ActiproSoftware.SyntaxEditor.EditPositionRange.EndPosition" /> property, whichever comes first.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.EditPositionRange.IsEmpty"><summary>
            Returns whether the <see cref="T:ActiproSoftware.SyntaxEditor.EditPositionRange" /> is empty.
            </summary><value><c>true</c> if the <see cref="T:ActiproSoftware.SyntaxEditor.EditPositionRange" /> is empty; otherwise, <c>false</c>.</value></member><member name="P:ActiproSoftware.SyntaxEditor.EditPositionRange.IsNormalized"><summary>
            Gets whether the range is normalized (<see cref="P:ActiproSoftware.SyntaxEditor.EditPositionRange.StartPosition" /> occurs at or before the <see cref="P:ActiproSoftware.SyntaxEditor.EditPositionRange.EndPosition" />).
            </summary><value><c>true</c> if the range is normalized; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.EditPositionRange.IsZeroLength"><summary>
            Gets whether the range has a zero length.
            </summary><value><c>true</c> if the range has a zero length; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.EditPositionRange.LastPosition"><summary>
            Gets the last <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" /> in the range.
            </summary><value>The last <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" /> in the range.</value><remarks>
            This property returns either the <see cref="P:ActiproSoftware.SyntaxEditor.EditPositionRange.StartPosition" /> or <see cref="P:ActiproSoftware.SyntaxEditor.EditPositionRange.EndPosition" /> property, whichever comes last.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.EditPositionRange.Lines"><summary>
            Gets the number of lines encompassed by the <see cref="T:ActiproSoftware.SyntaxEditor.EditPositionRange" />.
            </summary><value>The number of lines encompassed by the <see cref="T:ActiproSoftware.SyntaxEditor.EditPositionRange" />.</value></member><member name="P:ActiproSoftware.SyntaxEditor.EditPositionRange.NormalizedEditPositionRange"><summary>
            Gets a normalized version of this <see cref="T:ActiproSoftware.SyntaxEditor.EditPositionRange" /> without actually modifying this instance.
            </summary><value>A normalized version of this <see cref="T:ActiproSoftware.SyntaxEditor.EditPositionRange" /> without actually modifying this instance.</value></member><member name="P:ActiproSoftware.SyntaxEditor.EditPositionRange.StartPosition"><summary>
            Gets the start <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" /> in the range.
            </summary><value>The start <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" /> in the range.</value><remarks>
            The start <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" /> may occur after the end <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" /> if the range is not normalized.
            The <see cref="P:ActiproSoftware.SyntaxEditor.EditPositionRange.IsNormalized" /> property indicates if the range is normalized.
            To get the normalized first <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" /> in the range, use the <see cref="P:ActiproSoftware.SyntaxEditor.EditPositionRange.FirstPosition" /> property.
            To get the normalized last <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" /> in the range, use the <see cref="P:ActiproSoftware.SyntaxEditor.EditPositionRange.LastPosition" /> property.
            </remarks></member><member name="T:ActiproSoftware.SyntaxEditor.EditPosition"><summary>
            Represents an ordered pair of line and character index values that defines a position within the display lines of an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" />.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.EditPosition.Clone"><summary>
            Creates a copy of this <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" /> object.
            </summary><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" /> object that this method creates.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.EditPosition.CompareTo(System.Object)"><summary>
            Compares the current instance with another object of the same type.
            </summary><param name="obj">An object to compare with this instance.</param><returns>
            A 32-bit signed integer that indicates the relative order of the comparands.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.EditPosition.CompareTo(ActiproSoftware.SyntaxEditor.EditPosition)"><summary>
            Compares the current instance with another <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" />.
            </summary><param name="position">A <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" /> to compare with this instance.</param><returns>
            A 32-bit signed integer that indicates the relative order of the comparands.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.EditPosition.Equals(System.Object)"><summary>
            Determines whether the specified <c>Object</c> is equal to the current <c>Object</c>. 
            </summary><param name="obj">The <c>Object</c> to compare to the current <c>Object</c>.</param><returns><c>true</c> if the specified <c>Object</c> is equal to the current <c>Object</c>; 
            otherwise, <c>false</c>. 
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.EditPosition.First(ActiproSoftware.SyntaxEditor.EditPosition,ActiproSoftware.SyntaxEditor.EditPosition)"><summary>
            Returns the <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" /> that comes first.
            </summary><param name="position1">The first <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" /> to compare.</param><param name="position2">The second <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" /> to compare.</param><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" /> that comes first.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.EditPosition.GetHashCode"><summary>
            Returns a hash code for this object.
            </summary><returns>An integer value that specifies a hash value for this object.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.EditPosition.Last(ActiproSoftware.SyntaxEditor.EditPosition,ActiproSoftware.SyntaxEditor.EditPosition)"><summary>
            Returns the <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" /> that comes last.
            </summary><param name="position1">The first <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" /> to compare.</param><param name="position2">The second <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" /> to compare.</param><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" /> that comes last.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.EditPosition.ToString"><summary>
            Converts the object to a <c>String</c>.
            </summary><returns>
            A string whose value represents this object.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.EditPosition.#ctor(System.Int32,System.Int32)"><summary>
            Initializes a new instance of the <c>EditPosition</c> class with the specified line and character values.
            </summary><param name="line">The line of the position.</param><param name="character">The character of the position.</param></member><member name="P:ActiproSoftware.SyntaxEditor.EditPosition.Character"><summary>
            Gets the character of this <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" />.
            </summary><value>The character of this <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" />.</value></member><member name="P:ActiproSoftware.SyntaxEditor.EditPosition.Empty"><summary>
            Returns an empty <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" />.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" /> that is empty.</value></member><member name="P:ActiproSoftware.SyntaxEditor.EditPosition.IsEmpty"><summary>
            Returns whether the <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" /> is empty.
            </summary><value><c>true</c> if the <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" /> is empty; otherwise, <c>false</c>.</value></member><member name="P:ActiproSoftware.SyntaxEditor.EditPosition.Line"><summary>
            Gets the line of this <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" />.
            </summary><value>The line of this <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" />.</value></member><member name="P:ActiproSoftware.SyntaxEditor.EditPosition.Zero"><summary>
            Returns a <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" /> with line and character values of <c>0</c>.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" /> with line and character values of <c>0</c>.</value></member><member name="T:ActiproSoftware.SyntaxEditor.KeyTypedEventArgs"><summary>
            Provides data for the <see cref="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.KeyTyped" /> event.
            </summary><remarks>
            This class is used with the <see cref="T:ActiproSoftware.SyntaxEditor.KeyTypedEventHandler" /> delegate.
            </remarks><seealso cref="T:ActiproSoftware.SyntaxEditor.KeyTypedEventHandler" /></member><member name="M:ActiproSoftware.SyntaxEditor.KeyTypedEventArgs.ToString"><summary>
            Creates and returns a string representation of the current object.
            </summary><returns>A string representation of the current object.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.KeyTypedEventArgs.#ctor(System.Windows.Forms.Keys,System.Char,System.Boolean,ActiproSoftware.SyntaxEditor.Commands.EditCommand)"><summary>
            Initializes a new instance of the <c>KeyTypedEventArgs</c> class. 
            </summary><param name="keyData">A <see cref="T:System.Windows.Forms.Keys" /> specifying the key that was pressed.</param><param name="keyChar">The <see cref="T:System.Char" /> that was typed.</param><param name="overwrite">Whether overwrite mode was used.</param><param name="command">The <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommand" /> that was executed.</param></member><member name="P:ActiproSoftware.SyntaxEditor.KeyTypedEventArgs.Command"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommand" /> that was executed.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommand" /> that was executed.</value></member><member name="P:ActiproSoftware.SyntaxEditor.KeyTypedEventArgs.KeyChar"><summary>
            Gets the key character that was typed.
            </summary><value>The <see cref="T:System.Char" /> that was typed.</value><remarks>
            This is only populated if the event originates from the <c>OnKeyPress</c> method.
            This property is only applicable if the <see cref="P:ActiproSoftware.SyntaxEditor.KeyTypedEventArgs.KeyData" /> property is set to <c>Keys.None</c>.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.KeyTypedEventArgs.KeyData"><summary>
            Gets the key that was pressed.
            </summary><value>A <see cref="T:System.Windows.Forms.Keys" /> specifying the key that was pressed.</value><remarks>
            This is only populated if the event originates from the <c>OnKeyDown</c> method.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.KeyTypedEventArgs.Overwrite"><summary>
            Gets whether overwrite mode was used when typing the <see cref="P:ActiproSoftware.SyntaxEditor.KeyTypedEventArgs.KeyChar" /> character.
            </summary><value><c>true</c> if overwrite mode was used; otherwise, <c>false</c>.
            </value><remarks>
            This property is only applicable if the <see cref="P:ActiproSoftware.SyntaxEditor.KeyTypedEventArgs.KeyData" /> property is set to <c>Keys.None</c>.
            </remarks></member><member name="T:ActiproSoftware.SyntaxEditor.KeyTypedEventHandler"><summary>
            Represents the method that will handle the <see cref="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.KeyTyped" /> event. 
            </summary><param name="sender">Sender of the event.</param><param name="e">A <see cref="T:ActiproSoftware.SyntaxEditor.KeyTypedEventArgs" /> containing event data.</param><remarks>
            When you create a <c>KeyTypedEventHandler</c> delegate, you identify the method that will handle the event. 
            To associate the event with your event handler, add an instance of the delegate to the event. 
            The event handler is called whenever the event occurs, unless you remove the delegate.
            </remarks><seealso cref="T:ActiproSoftware.SyntaxEditor.KeyTypedEventArgs" /></member><member name="T:ActiproSoftware.SyntaxEditor.KeyTypingEventArgs"><summary>
            Provides data for the <see cref="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.KeyTyping" /> event.
            </summary><remarks>
            This class is used with the <see cref="T:ActiproSoftware.SyntaxEditor.KeyTypingEventHandler" /> delegate.
            </remarks><seealso cref="T:ActiproSoftware.SyntaxEditor.KeyTypingEventHandler" /></member><member name="M:ActiproSoftware.SyntaxEditor.KeyTypingEventArgs.ToString"><summary>
            Creates and returns a string representation of the current object.
            </summary><returns>A string representation of the current object.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.KeyTypingEventArgs.#ctor(System.Windows.Forms.Keys,System.Char,System.Boolean)"><summary>
            Initializes a new instance of the <c>KeyTypingEventArgs</c> class. 
            </summary><param name="keyData">A <see cref="T:System.Windows.Forms.Keys" /> specifying the key that will be pressed.</param><param name="keyChar">The <see cref="T:System.Char" /> that will be typed.</param><param name="overwrite">Whether overwrite mode will be used.</param></member><member name="P:ActiproSoftware.SyntaxEditor.KeyTypingEventArgs.Command"><summary>
            Gets or sets the <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommand" /> that will be executed if the event is not cancelled.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommand" /> that will be executed if the event is not cancelled.</value></member><member name="P:ActiproSoftware.SyntaxEditor.KeyTypingEventArgs.KeyChar"><summary>
            Gets the key character that will be typed.
            </summary><value>The <see cref="T:System.Char" /> that will be typed.</value><remarks>
            This is only populated if the event originates from the <c>OnKeyPress</c> method.
            This property is only used if the <see cref="P:ActiproSoftware.SyntaxEditor.KeyTypingEventArgs.KeyData" /> property is set to <c>Keys.None</c>.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.KeyTypingEventArgs.KeyData"><summary>
            Gets the key that will be pressed.
            </summary><value>A <see cref="T:System.Windows.Forms.Keys" /> specifying the key that will be pressed.</value><remarks>
            This is only populated if the event originates from the <c>ProcessCmdKey</c> method.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.KeyTypingEventArgs.Overwrite"><summary>
            Gets whether overwrite mode will be used when typing the <see cref="P:ActiproSoftware.SyntaxEditor.KeyTypingEventArgs.KeyChar" /> character.
            </summary><value><c>true</c> if overwrite mode will be used; otherwise, <c>false</c>.
            </value><remarks>
            This property is only used if the <see cref="P:ActiproSoftware.SyntaxEditor.KeyTypingEventArgs.KeyData" /> property is set to <c>Keys.None</c>.
            </remarks></member><member name="T:ActiproSoftware.SyntaxEditor.KeyTypingEventHandler"><summary>
            Represents the method that will handle the <see cref="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.KeyTyping" /> event. 
            </summary><param name="sender">Sender of the event.</param><param name="e">A <see cref="T:ActiproSoftware.SyntaxEditor.KeyTypingEventArgs" /> containing event data.</param><remarks>
            When you create a <c>KeyTypingEventHandler</c> delegate, you identify the method that will handle the event. 
            To associate the event with your event handler, add an instance of the delegate to the event. 
            The event handler is called whenever the event occurs, unless you remove the delegate.
            </remarks><seealso cref="T:ActiproSoftware.SyntaxEditor.KeyTypingEventArgs" /></member><member name="T:ActiproSoftware.SyntaxEditor.LocationToPositionAlgorithm"><summary>
            Specifies a type of location to <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" /> algorithm.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.LocationToPositionAlgorithm.BestFit"><summary>
            If the location is over the left half of a character, the character's position is returned.  
            If the location is over the right half of a character, the next character's position is returned.
            If the location is past the last character in a line and virtual space past the end of lines is disabled, the position of the last character in the line is returned.
            If the location is past the end of a document and virtual space past the end of the document is disabled, the position of the last character in the document is returned.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.LocationToPositionAlgorithm.Block"><summary>
            If the location is over a character, the character's offset is returned.  
            If the location is past the last character in a line and virtual space past the end of lines is disabled, the position of the last character in the line is returned.
            If the location is past the end of a document and virtual space past the end of the document is disabled, the position of the last character in the document is returned.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.LocationToPositionAlgorithm.Absolute"><summary>
            If the location is over a character, the character's position is returned.  
            Otherwise, <c>-1</c> is returned.
            </summary></member><member name="T:ActiproSoftware.SyntaxEditor.MacroRecording"><summary>
            Provides access to all macro recording functionality for a <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor" />.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.MacroRecording.Cancel"><summary>
            Cancels recording a macro.
            </summary><remarks>
            When macro recording is cancelled, the old value of the <see cref="P:ActiproSoftware.SyntaxEditor.MacroRecording.LastMacroCommand" /> property is not overwritten.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.MacroRecording.Dispose(System.Boolean)"><summary>
            Releases the unmanaged resources used by the object and optionally releases the managed resources.
            </summary><param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources. 
            </param><remarks>
            This method is called by the public <c>Dispose</c> method and the <c>Finalize</c> method. 
            <c>Dispose</c> invokes this method with the <paramref name="disposing" /> parameter set to <c>true</c>. 
            <c>Finalize</c> invokes this method with <paramref name="disposing" /> set to <c>false</c>.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.MacroRecording.Pause"><summary>
            Pauses recording a macro.
            </summary><remarks>
            Use the <see cref="M:ActiproSoftware.SyntaxEditor.MacroRecording.Resume" /> method to resume recording.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.MacroRecording.Resume"><summary>
            Resumes recording a macro from a paused state.
            </summary><remarks>
            This method should be called after a <see cref="M:ActiproSoftware.SyntaxEditor.MacroRecording.Pause" /> to resume recording.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.MacroRecording.Record"><summary>
            Starts recording a new macro.
            </summary><remarks>
            Use the <see cref="M:ActiproSoftware.SyntaxEditor.MacroRecording.Stop" /> method to end recording and save the macro that was recorded.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.MacroRecording.Stop"><summary>
            Stops recording a macro.
            </summary><returns>
            The <see cref="T:ActiproSoftware.SyntaxEditor.Commands.MacroCommand" /> that was recorded.
            </returns><remarks>
            The <see cref="T:ActiproSoftware.SyntaxEditor.Commands.MacroCommand" /> that is recorded is stored in the <see cref="P:ActiproSoftware.SyntaxEditor.MacroRecording.LastMacroCommand" /> property.
            If no commands were recorded during this recording session, the old value of the <see cref="P:ActiproSoftware.SyntaxEditor.MacroRecording.LastMacroCommand" /> property will
            not be overwritten.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.MacroRecording.CurrentMacroCommand"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Commands.MacroCommand" /> that is currently being recorded.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.Commands.MacroCommand" /> that is currently being recorded.</value><remarks>
            This method returns <see langword="null" /> if no macro recording is currently taking place.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.MacroRecording.LastMacroCommand"><summary>
            Gets the last <see cref="T:ActiproSoftware.SyntaxEditor.Commands.MacroCommand" /> that was recorded.
            </summary><value>The last <see cref="T:ActiproSoftware.SyntaxEditor.Commands.MacroCommand" /> that was recorded.</value><remarks>
            After macro recording is stopped, this property contains what was recorded.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.MacroRecording.State"><summary>
            Gets the current state of macro recording.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.MacroRecordingState" /> that specifies the state.</value></member><member name="T:ActiproSoftware.SyntaxEditor.MacroRecordingState"><summary>
            Specifies the state of macro recording.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.MacroRecordingState.Stopped"><summary>
            No recording is taking place.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.MacroRecordingState.Recording"><summary>
            Macro recording is in progress.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.MacroRecordingState.Paused"><summary>
            Macro recording is in progress, however is currently paused.
            </summary></member><member name="T:ActiproSoftware.SyntaxEditor.PasteDragDropEventArgs"><summary>
            Event arguments for the <see cref="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.PasteDragDrop" /> event.
            </summary><remarks>
            This class is used with the <see cref="T:ActiproSoftware.SyntaxEditor.PasteDragDropEventHandler" /> delegate.
            </remarks><seealso cref="T:ActiproSoftware.SyntaxEditor.PasteDragDropEventHandler" /></member><member name="M:ActiproSoftware.SyntaxEditor.PasteDragDropEventArgs.#ctor(ActiproSoftware.SyntaxEditor.PasteDragDropSource,System.Windows.Forms.IDataObject,System.String)"><summary>
            Initializes a new instance of the <c>PasteDragDropEventArgs</c> class.
            </summary><param name="source">The <see cref="T:ActiproSoftware.SyntaxEditor.PasteDragDropSource" /> describing the source of the event.</param><param name="dataObject">The <see cref="T:System.Windows.Forms.IDataObject" /> that contains the data set to the clipboard.</param><param name="text">The text associated with the <see cref="P:ActiproSoftware.SyntaxEditor.PasteDragDropEventArgs.DataObject" />.</param></member><member name="M:ActiproSoftware.SyntaxEditor.PasteDragDropEventArgs.#ctor(ActiproSoftware.SyntaxEditor.PasteDragDropSource,System.Windows.Forms.DragEventArgs,System.String)"><summary>
            Initializes a new instance of the <c>PasteDragDropEventArgs</c> class.
            </summary><param name="source">The <see cref="T:ActiproSoftware.SyntaxEditor.PasteDragDropSource" /> describing the source of the event.</param><param name="dragEventArgs">The <see cref="P:ActiproSoftware.SyntaxEditor.PasteDragDropEventArgs.DragEventArgs" /> that caused this event.</param><param name="text">The text associated with the drag/drop.</param></member><member name="P:ActiproSoftware.SyntaxEditor.PasteDragDropEventArgs.DataObject"><summary>
            Gets the <see cref="T:System.Windows.Forms.IDataObject" /> that contains the data.
            </summary><value>The <see cref="T:System.Windows.Forms.IDataObject" /> that contains the data.</value></member><member name="P:ActiproSoftware.SyntaxEditor.PasteDragDropEventArgs.DragEventArgs"><summary>
            Gets the <see cref="T:System.Windows.Forms.DragEventArgs" /> that caused this event, if this event was caused by a drag event.
            </summary><value>The <see cref="T:System.Windows.Forms.DragEventArgs" /> that caused this event.</value><remarks>
            If this event was not caused by a drag operation, this property returns <see langword="null" />.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.PasteDragDropEventArgs.Source"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.PasteDragDropSource" /> describing the source of the event.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.PasteDragDropSource" /> describing the source of the event.</value></member><member name="P:ActiproSoftware.SyntaxEditor.PasteDragDropEventArgs.Text"><summary>
            Gets or sets the text associated with the <see cref="P:ActiproSoftware.SyntaxEditor.PasteDragDropEventArgs.DataObject" /> or drag/drop.
            </summary><value>The text associated with the <see cref="P:ActiproSoftware.SyntaxEditor.PasteDragDropEventArgs.DataObject" /> or drag/drop.</value><remarks>
            Set this value to <see langword="null" /> to indicate that no text is associated with the <see cref="P:ActiproSoftware.SyntaxEditor.PasteDragDropEventArgs.DataObject" /> or drag/drop.
            </remarks></member><member name="T:ActiproSoftware.SyntaxEditor.PasteDragDropEventHandler"><summary>
            Represents the method that will handle custom <see cref="T:System.Windows.Forms.IDataObject" /> events.
            </summary><param name="sender">Sender of the event.</param><param name="e">A <see cref="T:ActiproSoftware.SyntaxEditor.PasteDragDropEventArgs" /> containing event data.</param><remarks>
            When you create a <c>PasteDragDropEventHandler</c> delegate, you identify the method that will handle the event. 
            To associate the event with your event handler, add an instance of the delegate to the event. 
            The event handler is called whenever the event occurs, unless you remove the delegate.
            </remarks><seealso cref="T:ActiproSoftware.SyntaxEditor.PasteDragDropEventArgs" /></member><member name="T:ActiproSoftware.SyntaxEditor.PasteDragDropSource"><summary>
            Specifies the source of a <see cref="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.PasteDragDrop" /> event.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.PasteDragDropSource.CanPaste"><summary>
            The custom <c>IDataObject</c> comes from a check by <see cref="P:ActiproSoftware.SyntaxEditor.EditorView.CanPaste" />.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.PasteDragDropSource.Paste"><summary>
            The custom <c>IDataObject</c> comes from a paste operation, immediately before the paste occurs.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.PasteDragDropSource.PasteComplete"><summary>
            The custom <c>IDataObject</c> comes from a paste operation, immediately after the paste occurs.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.PasteDragDropSource.DragEnter"><summary>
            The custom <c>IDataObject</c> comes from a drag operation.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.PasteDragDropSource.DragDrop"><summary>
            The custom <c>IDataObject</c> comes from a drop operation.
            </summary></member><member name="T:ActiproSoftware.SyntaxEditor.DisplayLine"><summary>
            Represents a single display line of text in an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" />.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.DisplayLine.Contains(System.Int32)"><summary>
            Returns whether the line contains the specified offset.
            </summary><param name="offset">The offset to check.</param><returns><c>true</c> if the line contains the offset; otherwise, <c>false</c>.
            </returns><remarks>
            This method returns <c>false</c> if the offset falls on the line terminator of the line.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.DisplayLine.IsLineEnd(System.Int32)"><summary>
            Returns whether the specified offset ends the line.
            </summary><param name="offset">The offset to check.</param><returns><c>true</c> if the offset ends the line; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.DisplayLine.IsLineStart(System.Int32)"><summary>
            Returns whether the specified offset starts the line.
            </summary><param name="offset">The offset to check.</param><returns><c>true</c> if the offset starts the line; otherwise, <c>false</c>.
            </returns></member><member name="P:ActiproSoftware.SyntaxEditor.DisplayLine.DocumentLine"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.DocumentLine" /> with which the display line is associated. 
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.DocumentLine" /> with which the display line is associated.</value></member><member name="P:ActiproSoftware.SyntaxEditor.DisplayLine.DocumentLineIndex"><summary>
            Gets the document line index with which the display line is associated.
            </summary><value>The document line index with which the display line is associated.</value></member><member name="P:ActiproSoftware.SyntaxEditor.DisplayLine.EndOffset"><summary>
            Gets the offset at which the line ends.
            </summary><value>The offset at which the line ends.</value></member><member name="P:ActiproSoftware.SyntaxEditor.DisplayLine.HasContentDividerAfter"><summary>
            Gets or whether the line has a content divider after it.
            </summary><value><c>true</c> if the line has a content divider after it; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.DisplayLine.HasContentDividerBefore"><summary>
            Gets or whether the line has a content divider before it.
            </summary><value><c>true</c> if the line has a content divider before it; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.DisplayLine.HasHardLineBreak"><summary>
            Gets whether the line ends with a hard line break.
            </summary><value><c>true</c> if the line ends with a hard line break; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.DisplayLine.Index"><summary>
            Gets the index of the line within the <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" />.
            </summary><value>The index of the line within the <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" />.</value></member><member name="P:ActiproSoftware.SyntaxEditor.DisplayLine.IsFirstForDocumentLine"><summary>
            Gets whether the display line is the first display line for the <see cref="P:ActiproSoftware.SyntaxEditor.DisplayLine.DocumentLine" />.
            </summary><value><c>true</c> if the display line is the first display line for the <see cref="P:ActiproSoftware.SyntaxEditor.DisplayLine.DocumentLine" />; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.DisplayLine.IsLastForDocumentLine"><summary>
            Gets whether the display line is the last display line for the <see cref="P:ActiproSoftware.SyntaxEditor.DisplayLine.DocumentLine" />.
            </summary><value><c>true</c> if the display line is the last display line for the <see cref="P:ActiproSoftware.SyntaxEditor.DisplayLine.DocumentLine" />; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.DisplayLine.IsVirtual"><summary>
            Returns whether this <see cref="T:ActiproSoftware.SyntaxEditor.DisplayLine" /> is a virtual line, or past the end of the document.
            </summary><value><c>true</c> if this <see cref="T:ActiproSoftware.SyntaxEditor.DisplayLine" /> is a virtual line; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.DisplayLine.Length"><summary>
            Gets the length of the line, excluding the line terminator.
            </summary><value>The length of the line, excluding the line terminator.</value></member><member name="P:ActiproSoftware.SyntaxEditor.DisplayLine.LineModificationChangeType"><summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.UndoableModificationChangeType" /> that indicates the type of change that has been made on the line.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.UndoableModificationChangeType" /> that indicates the type of change that has been made on the line.</value></member><member name="P:ActiproSoftware.SyntaxEditor.DisplayLine.OutliningState"><summary>
            Gets the outlining state of the display line.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.DisplayLineOutliningState" /> specifying the outlining state.</value></member><member name="P:ActiproSoftware.SyntaxEditor.DisplayLine.StartOffset"><summary>
            Gets the offset at which the line starts.
            </summary><value>The offset at which the line starts.</value></member><member name="P:ActiproSoftware.SyntaxEditor.DisplayLine.Text"><summary>
            Gets or sets the text of the line, excluding the line terminator.
            </summary><value>The text of the line, excluding the line terminator.</value></member><member name="P:ActiproSoftware.SyntaxEditor.DisplayLine.TextRange"><summary>
            Gets a <see cref="P:ActiproSoftware.SyntaxEditor.DisplayLine.TextRange" /> that contains the text of the line, excluding the line terminator.
            </summary><value>A <see cref="P:ActiproSoftware.SyntaxEditor.DisplayLine.TextRange" /> that contains the text of the line, excluding the line terminator.</value></member><member name="T:ActiproSoftware.SyntaxEditor.ISyntaxEditorRenderer"><summary>
            Provides the base requirements for a <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor" /> control renderer.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.ISyntaxEditorRenderer.MeasureLineNumberMarginWidth(System.Drawing.Graphics,ActiproSoftware.SyntaxEditor.SyntaxEditor)"><summary>
            Measures the width of the line number margin.
            </summary><param name="g">The <c>Graphics</c> object used to measure.</param><param name="syntaxEditor">The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor" /> that contains the line number margin.</param><returns>The measured width of the line number margin.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.ISyntaxEditorRenderer.DrawEditorViewBorder(System.Windows.Forms.PaintEventArgs,System.Drawing.Rectangle,ActiproSoftware.SyntaxEditor.EditorView)"><summary>
            Draws the border around an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" />.
            </summary><param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param><param name="bounds">The bounds in which to draw.</param><param name="view">The <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> being painted.</param></member><member name="M:ActiproSoftware.SyntaxEditor.ISyntaxEditorRenderer.DrawEditorViewButtonLinkBackground(System.Windows.Forms.PaintEventArgs,System.Drawing.Rectangle,ActiproSoftware.SyntaxEditor.EditorViewButtonLink)"><summary>
            Draws the background of an <see cref="T:ActiproSoftware.SyntaxEditor.EditorViewButtonLink" />.
            </summary><param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param><param name="bounds">The bounds in which to draw.</param><param name="link">The <see cref="T:ActiproSoftware.SyntaxEditor.EditorViewButtonLink" /> being painted.</param></member><member name="M:ActiproSoftware.SyntaxEditor.ISyntaxEditorRenderer.DrawEditorViewSplitButton(System.Windows.Forms.PaintEventArgs,System.Drawing.Rectangle,ActiproSoftware.SyntaxEditor.EditorView,System.Windows.Forms.Orientation)"><summary>
            Draws an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> split-button.
            </summary><param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param><param name="bounds">The bounds in which to draw.</param><param name="view">The <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> being painted.</param><param name="orientation">The <see cref="T:System.Windows.Forms.Orientation" /> of the split button.</param></member><member name="M:ActiproSoftware.SyntaxEditor.ISyntaxEditorRenderer.DrawIndicatorMarginBackground(System.Windows.Forms.PaintEventArgs,System.Drawing.Rectangle,ActiproSoftware.SyntaxEditor.EditorView)"><summary>
            Draws the background of an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> indicator margin.
            </summary><param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param><param name="bounds">The bounds in which to draw.</param><param name="view">The <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> being painted.</param></member><member name="M:ActiproSoftware.SyntaxEditor.ISyntaxEditorRenderer.DrawIndicatorMarginDisplayLine(System.Windows.Forms.PaintEventArgs,System.Drawing.Rectangle,ActiproSoftware.SyntaxEditor.EditorView,ActiproSoftware.SyntaxEditor.DocumentLine,ActiproSoftware.SyntaxEditor.DisplayLine)"><summary>
            Draws a single display line within an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> indicator margin.
            </summary><param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param><param name="bounds">The bounds in which to draw.</param><param name="view">The <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> being painted.</param><param name="documentLine">The <see cref="T:ActiproSoftware.SyntaxEditor.DocumentLine" /> for the <see cref="T:ActiproSoftware.SyntaxEditor.DisplayLine" /> being painted.</param><param name="displayLine">The <see cref="T:ActiproSoftware.SyntaxEditor.DisplayLine" /> being painted.</param></member><member name="M:ActiproSoftware.SyntaxEditor.ISyntaxEditorRenderer.DrawLineNumberMarginBackground(System.Windows.Forms.PaintEventArgs,System.Drawing.Rectangle,ActiproSoftware.SyntaxEditor.EditorView)"><summary>
            Draws the background of an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> line number margin.
            </summary><param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param><param name="bounds">The bounds in which to draw.</param><param name="view">The <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> being painted.</param></member><member name="M:ActiproSoftware.SyntaxEditor.ISyntaxEditorRenderer.DrawLineNumberMarginDisplayLine(System.Windows.Forms.PaintEventArgs,System.Drawing.Rectangle,ActiproSoftware.SyntaxEditor.EditorView,ActiproSoftware.SyntaxEditor.DocumentLine,ActiproSoftware.SyntaxEditor.DisplayLine)"><summary>
            Draws a single display line within an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> line number margin.
            </summary><param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param><param name="bounds">The bounds in which to draw.</param><param name="view">The <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> being painted.</param><param name="documentLine">The <see cref="T:ActiproSoftware.SyntaxEditor.DocumentLine" /> for the <see cref="T:ActiproSoftware.SyntaxEditor.DisplayLine" /> being painted.</param><param name="displayLine">The <see cref="T:ActiproSoftware.SyntaxEditor.DisplayLine" /> being painted.</param></member><member name="M:ActiproSoftware.SyntaxEditor.ISyntaxEditorRenderer.DrawScrollBarBlockBackground(System.Windows.Forms.PaintEventArgs,System.Drawing.Rectangle,ActiproSoftware.SyntaxEditor.EditorView)"><summary>
            Draws the background of the scrollbar block that appears between the horizontal and vertical scrollbars.
            </summary><param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param><param name="bounds">The bounds in which to draw.</param><param name="view">The <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> being painted.</param></member><member name="M:ActiproSoftware.SyntaxEditor.ISyntaxEditorRenderer.DrawSelectionMarginBackground(System.Windows.Forms.PaintEventArgs,System.Drawing.Rectangle,ActiproSoftware.SyntaxEditor.EditorView)"><summary>
            Draws the background of an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> selection margin.
            </summary><param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param><param name="bounds">The bounds in which to draw.</param><param name="view">The <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> being painted.</param></member><member name="M:ActiproSoftware.SyntaxEditor.ISyntaxEditorRenderer.DrawSelectionMarginDisplayLine(System.Windows.Forms.PaintEventArgs,System.Drawing.Rectangle,ActiproSoftware.SyntaxEditor.EditorView,ActiproSoftware.SyntaxEditor.DocumentLine,ActiproSoftware.SyntaxEditor.DisplayLine)"><summary>
            Draws a single display line within an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> selection margin.
            </summary><param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param><param name="bounds">The bounds in which to draw.</param><param name="view">The <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> being painted.</param><param name="documentLine">The <see cref="T:ActiproSoftware.SyntaxEditor.DocumentLine" /> for the <see cref="T:ActiproSoftware.SyntaxEditor.DisplayLine" /> being painted.</param><param name="displayLine">The <see cref="T:ActiproSoftware.SyntaxEditor.DisplayLine" /> being painted.</param></member><member name="M:ActiproSoftware.SyntaxEditor.ISyntaxEditorRenderer.DrawSplitter(System.Windows.Forms.PaintEventArgs,System.Drawing.Rectangle,ActiproSoftware.SyntaxEditor.SyntaxEditor,System.Windows.Forms.Orientation)"><summary>
            Draws a splitter that appears between two views.
            </summary><param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param><param name="bounds">The bounds in which to draw.</param><param name="syntaxEditor">The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor" /> being painted.</param><param name="orientation">The <see cref="T:System.Windows.Forms.Orientation" /> of the splitter.</param></member><member name="M:ActiproSoftware.SyntaxEditor.ISyntaxEditorRenderer.DrawTextAreaBackground(System.Windows.Forms.PaintEventArgs,System.Drawing.Rectangle,ActiproSoftware.SyntaxEditor.EditorView)"><summary>
            Draws the background of an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> text area.
            </summary><param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param><param name="bounds">The bounds in which to draw.</param><param name="view">The <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> being painted.</param></member><member name="M:ActiproSoftware.SyntaxEditor.ISyntaxEditorRenderer.DrawTextAreaDisplayLinePost(System.Windows.Forms.PaintEventArgs,System.Drawing.Rectangle,ActiproSoftware.SyntaxEditor.EditorView,ActiproSoftware.SyntaxEditor.DocumentLine,ActiproSoftware.SyntaxEditor.DisplayLine)"><summary>
            Draws a single display line within an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> text area after the text is actually drawn.
            </summary><param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param><param name="bounds">The bounds in which to draw.</param><param name="view">The <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> being painted.</param><param name="documentLine">The <see cref="T:ActiproSoftware.SyntaxEditor.DocumentLine" /> for the <see cref="T:ActiproSoftware.SyntaxEditor.DisplayLine" /> being painted.</param><param name="displayLine">The <see cref="T:ActiproSoftware.SyntaxEditor.DisplayLine" /> being painted.</param></member><member name="M:ActiproSoftware.SyntaxEditor.ISyntaxEditorRenderer.DrawTextAreaDisplayLinePre(System.Windows.Forms.PaintEventArgs,System.Drawing.Rectangle,ActiproSoftware.SyntaxEditor.EditorView,ActiproSoftware.SyntaxEditor.DocumentLine,ActiproSoftware.SyntaxEditor.DisplayLine)"><summary>
            Draws a single display line within an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> text area before the text is actually drawn.
            </summary><param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param><param name="bounds">The bounds in which to draw.</param><param name="view">The <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> being painted.</param><param name="documentLine">The <see cref="T:ActiproSoftware.SyntaxEditor.DocumentLine" /> for the <see cref="T:ActiproSoftware.SyntaxEditor.DisplayLine" /> being painted.</param><param name="displayLine">The <see cref="T:ActiproSoftware.SyntaxEditor.DisplayLine" /> being painted.</param></member><member name="M:ActiproSoftware.SyntaxEditor.ISyntaxEditorRenderer.DrawUserMarginBackground(System.Windows.Forms.PaintEventArgs,System.Drawing.Rectangle,ActiproSoftware.SyntaxEditor.EditorView)"><summary>
            Draws the background of an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> user margin.
            </summary><param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param><param name="bounds">The bounds in which to draw.</param><param name="view">The <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> being painted.</param></member><member name="M:ActiproSoftware.SyntaxEditor.ISyntaxEditorRenderer.DrawUserMarginDisplayLine(ActiproSoftware.SyntaxEditor.UserMarginPaintEventArgs,System.Drawing.Rectangle,ActiproSoftware.SyntaxEditor.EditorView,ActiproSoftware.SyntaxEditor.DocumentLine,ActiproSoftware.SyntaxEditor.DisplayLine)"><summary>
            Draws a single display line within an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> user margin.
            </summary><param name="e">A <see cref="T:ActiproSoftware.SyntaxEditor.UserMarginPaintEventArgs" /> that contains the event data.</param><param name="bounds">The bounds in which to draw.</param><param name="view">The <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> being painted.</param><param name="documentLine">The <see cref="T:ActiproSoftware.SyntaxEditor.DocumentLine" /> for the <see cref="T:ActiproSoftware.SyntaxEditor.DisplayLine" /> being painted.</param><param name="displayLine">The <see cref="T:ActiproSoftware.SyntaxEditor.DisplayLine" /> being painted.</param></member><member name="M:ActiproSoftware.SyntaxEditor.ISyntaxEditorRenderer.DrawWordWrapMarginBackground(System.Windows.Forms.PaintEventArgs,System.Drawing.Rectangle,ActiproSoftware.SyntaxEditor.EditorView)"><summary>
            Draws the background of an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> word wrap margin.
            </summary><param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param><param name="bounds">The bounds in which to draw.</param><param name="view">The <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> being painted.</param></member><member name="P:ActiproSoftware.SyntaxEditor.ISyntaxEditorRenderer.ContentDividerColor"><summary>
            Gets or sets the <see cref="T:System.Drawing.Color" /> to use when drawing content dividers.
            </summary><value>The <see cref="T:System.Drawing.Color" /> to use when drawing content dividers.</value></member><member name="P:ActiproSoftware.SyntaxEditor.ISyntaxEditorRenderer.ContentDividerDashStyle"><summary>
            Gets or sets the <see cref="T:System.Drawing.Drawing2D.DashStyle" /> to use when drawing content dividers.
            </summary><value>The <see cref="T:System.Drawing.Drawing2D.DashStyle" /> to use when drawing content dividers.</value></member><member name="P:ActiproSoftware.SyntaxEditor.ISyntaxEditorRenderer.CurrentLineHighlightBackColor"><summary>
            Gets or sets the <see cref="T:System.Drawing.Color" /> to use when drawing the background of the current line.
            </summary><value>The <see cref="T:System.Drawing.Color" /> to use when drawing the background of the current line.</value><remarks>
            This property is only used if the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.CurrentLineHighlightingVisible" /> is set to <c>true</c>.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.ISyntaxEditorRenderer.CurrentLineHighlightBorderColor"><summary>
            Gets or sets the <see cref="T:System.Drawing.Color" /> to use when drawing the border of the current line highlight.
            </summary><value>The <see cref="T:System.Drawing.Color" /> to use when drawing the border of the current line highlight.</value><remarks>
            This property can be set to <c>Color.Empty</c> if no border should be displayed.
            This property is only used if the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.CurrentLineHighlightingVisible" /> is set to <c>true</c>.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.ISyntaxEditorRenderer.CurrentLineHighlightExtendsToMargins"><summary>
            Gets or sets whether the current line highlight should extend into the margins.
            </summary><value><c>true</c> if the current line highlight should extend into the margins; otherwise, <c>false</c>.
            </value><remarks>
            If this property is set to <c>false</c> the current line highlight should be drawn only in the text area.
            This property is only used if the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.CurrentLineHighlightingVisible" /> is set to <c>true</c>.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.ISyntaxEditorRenderer.EditorViewBorderWidth"><summary>
            Gets the width of the <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> border.
            </summary><value>The width of the <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> border.</value></member><member name="P:ActiproSoftware.SyntaxEditor.ISyntaxEditorRenderer.IndentationGuideColor"><summary>
            Gets or sets the <see cref="T:System.Drawing.Color" /> to use when drawing indentation guides.
            </summary><value>The <see cref="T:System.Drawing.Color" /> to use when drawing indentation guides.</value></member><member name="P:ActiproSoftware.SyntaxEditor.ISyntaxEditorRenderer.LineModificationMarkingSavedColor"><summary>
            Gets or sets the <see cref="T:System.Drawing.Color" /> to use for displaying saved line modification marks.
            </summary><value>The <see cref="T:System.Drawing.Color" /> to use for displaying saved line modification marks.</value><remarks>
            The marks appear in the selection margin.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.ISyntaxEditorRenderer.LineModificationMarkingUnsavedColor"><summary>
            Gets or sets the <see cref="T:System.Drawing.Color" /> to use for displaying unsaved line modification marks.
            </summary><value>The <see cref="T:System.Drawing.Color" /> to use for displaying unsaved line modification marks.</value><remarks>
            The marks appear in the selection margin.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.ISyntaxEditorRenderer.SelectionFocusedBackColor"><summary>
            Gets or sets the <see cref="T:System.Drawing.Color" /> to use when drawing the background of a focused selection.
            </summary><value>The <see cref="T:System.Drawing.Color" /> to use when drawing the background of a focused selection.</value></member><member name="P:ActiproSoftware.SyntaxEditor.ISyntaxEditorRenderer.SelectionFocusedBorderColor"><summary>
            Gets or sets the <see cref="T:System.Drawing.Color" /> to use when drawing the border of a focused selection.
            </summary><value>The <see cref="T:System.Drawing.Color" /> to use when drawing the border of a focused selection.</value></member><member name="P:ActiproSoftware.SyntaxEditor.ISyntaxEditorRenderer.SelectionFocusedForeColor"><summary>
            Gets or sets the <see cref="T:System.Drawing.Color" /> to use when drawing the foreground of a focused selection.
            </summary><value>The <see cref="T:System.Drawing.Color" /> to use when drawing the foreground of a focused selection.</value></member><member name="P:ActiproSoftware.SyntaxEditor.ISyntaxEditorRenderer.SelectionUnfocusedBackColor"><summary>
            Gets or sets the <see cref="T:System.Drawing.Color" /> to use when drawing the background of an unfocused selection.
            </summary><value>The <see cref="T:System.Drawing.Color" /> to use when drawing the background of an unfocused selection.</value></member><member name="P:ActiproSoftware.SyntaxEditor.ISyntaxEditorRenderer.SelectionUnfocusedBorderColor"><summary>
            Gets or sets the <see cref="T:System.Drawing.Color" /> to use when drawing the border of a unfocused selection.
            </summary><value>The <see cref="T:System.Drawing.Color" /> to use when drawing the border of a unfocused selection.</value></member><member name="P:ActiproSoftware.SyntaxEditor.ISyntaxEditorRenderer.SelectionUnfocusedForeColor"><summary>
            Gets or sets the <see cref="T:System.Drawing.Color" /> to use when drawing the foreground of an unfocused selection.
            </summary><value>The <see cref="T:System.Drawing.Color" /> to use when drawing the foreground of an unfocused selection.</value></member><member name="P:ActiproSoftware.SyntaxEditor.ISyntaxEditorRenderer.TextAreaBackColor"><summary>
            Gets the core background <see cref="T:System.Drawing.Color" /> of the text area, if a solid color is used.
            </summary><value>The core background <see cref="T:System.Drawing.Color" /> of the text area, if a solid color is used.</value></member><member name="P:ActiproSoftware.SyntaxEditor.ISyntaxEditorRenderer.WhitespaceSpaceForeColor"><summary>
            Gets or sets the <see cref="T:System.Drawing.Color" /> to use when drawing spaces in the text area.
            </summary><value>The <see cref="T:System.Drawing.Color" /> to use when drawing spaces in the text area.</value></member><member name="P:ActiproSoftware.SyntaxEditor.ISyntaxEditorRenderer.WhitespaceTabForeColor"><summary>
            Gets or sets the <see cref="T:System.Drawing.Color" /> to use when drawing tabs in the text area.
            </summary><value>The <see cref="T:System.Drawing.Color" /> to use when drawing tabs in the text area.</value></member><member name="P:ActiproSoftware.SyntaxEditor.ISyntaxEditorRenderer.WordWrapGlyphColor"><summary>
            Gets or sets the <see cref="T:System.Drawing.Color" /> to use when drawing word wrap glyphs.
            </summary><value>The <see cref="T:System.Drawing.Color" /> to use when drawing word wrap glyphs.</value></member><member name="T:ActiproSoftware.SyntaxEditor.Selection"><summary>
            Provides access to <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> selection information.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Selection.SelectRange(ActiproSoftware.SyntaxEditor.TextRange)"><summary>
            Selects a range of text using a <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" />.
            </summary><param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> containing the range of characters to select.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Selection.SelectRange(ActiproSoftware.SyntaxEditor.TextRange,ActiproSoftware.SyntaxEditor.SelectionModes)"><summary>
            Selects a range of text using a <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" />.
            </summary><param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> containing the range of characters to select.</param><param name="mode">The <see cref="T:ActiproSoftware.SyntaxEditor.SelectionModes" /> to use.  This value must be either <c>SelectionModes.ContinuousStream</c> or <c>SelectionModes.Block</c>.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Selection.SelectRange(ActiproSoftware.SyntaxEditor.EditPosition,ActiproSoftware.SyntaxEditor.EditPosition)"><summary>
            Selects a range of text using a pair of <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" /> objects.
            </summary><param name="startEditPosition">The <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" /> at which to start the selection.</param><param name="endEditPosition">The <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" /> at which to end the selection.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Selection.SelectRange(ActiproSoftware.SyntaxEditor.EditPositionRange)"><summary>
            Selects a range of text using a <see cref="T:ActiproSoftware.SyntaxEditor.EditPositionRange" />.
            </summary><param name="editPositionRange">The <see cref="T:ActiproSoftware.SyntaxEditor.EditPositionRange" /> containing the range of characters to select.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Selection.SelectRange(ActiproSoftware.SyntaxEditor.EditPosition,ActiproSoftware.SyntaxEditor.EditPosition,ActiproSoftware.SyntaxEditor.SelectionModes)"><summary>
            Selects a range of text using a pair of <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" /> objects.
            </summary><param name="startEditPosition">The <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" /> at which to start the selection.</param><param name="endEditPosition">The <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" /> at which to end the selection.</param><param name="mode">The <see cref="T:ActiproSoftware.SyntaxEditor.SelectionModes" /> to use.  This value must be either <c>SelectionModes.ContinuousStream</c> or <c>SelectionModes.Block</c>.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Selection.SelectRange(ActiproSoftware.SyntaxEditor.EditPositionRange,ActiproSoftware.SyntaxEditor.SelectionModes)"><summary>
            Selects a range of text using a <see cref="T:ActiproSoftware.SyntaxEditor.EditPositionRange" />.
            </summary><param name="editPositionRange">The <see cref="T:ActiproSoftware.SyntaxEditor.EditPositionRange" /> containing the range of characters to select.</param><param name="mode">The <see cref="T:ActiproSoftware.SyntaxEditor.SelectionModes" /> to use.  This value must be either <c>SelectionModes.ContinuousStream</c> or <c>SelectionModes.Block</c>.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Selection.SelectRight"><summary>
            Selects right a character.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Selection.SelectToDocumentEnd"><summary>
            Selects to the end of the document.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Selection.SelectToDocumentStart"><summary>
            Selects to the start of the document.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Selection.SelectToLineEnd"><summary>
            Selects to the end of the current line.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Selection.SelectToLineStartAfterIndentation"><summary>
            Selects to the first non-whitespace character on the current display line.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Selection.SelectToLineStart"><summary>
            Selects to the start of the current line.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Selection.SelectToMatchingBracket"><summary>
            Selects to the matching bracket.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Selection.SelectToNextWord"><summary>
            Selects to the next word.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Selection.SelectToPreviousWord"><summary>
            Selects to the previous word.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Selection.SelectToVisibleBottom"><summary>
            Selects to the bottom of the view.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Selection.SelectToVisibleTop"><summary>
            Selects to the top of the view.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Selection.SelectUp"><summary>
            Selects up a line.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Selection.SelectWord"><summary>
            Selects the current word.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Selection.SuspendEvents"><summary>
            Prevents the selection from raising events.
            </summary><seealso cref="P:ActiproSoftware.SyntaxEditor.Selection.EventsSuspended" /></member><member name="M:ActiproSoftware.SyntaxEditor.Selection.CodeBlockExpand(ActiproSoftware.SyntaxEditor.TextRange)"><summary>
            Selects a code block range of text using a <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" />.
            </summary><param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> containing the range of characters to select.</param><remarks>
            Only languages implementing the <see cref="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.CodeBlockSelectionExpand(ActiproSoftware.SyntaxEditor.SyntaxEditor)" /> method should call this.
            No other code should call this method.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.Selection.Collapse"><summary>
            Collapses the selection.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Selection.Contains(System.Int32)"><summary>
            Returns whether the selection contains the specified offset.
            </summary><param name="offset">The offset to check.</param><returns><c>true</c> if the selection contains the specified offset; otherwise <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.Selection.Contains(ActiproSoftware.SyntaxEditor.DocumentPosition)"><summary>
            Returns whether the selection contains the specified <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" />.
            </summary><param name="position">The <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" /> to check.</param><returns><c>true</c> if the selection contains the specified <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" />; otherwise <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.Selection.Contains(ActiproSoftware.SyntaxEditor.EditPosition)"><summary>
            Returns whether the selection contains the specified <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" />.
            </summary><param name="position">The <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" /> to check.</param><returns><c>true</c> if the selection contains the specified <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" />; otherwise <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.Selection.MoveDown"><summary>
            Moves the selection down a line.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Selection.MoveLeft"><summary>
            Moves the selection left a character.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Selection.MovePageDown"><summary>
            Moves the selection down a page.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Selection.MovePageUp"><summary>
            Moves the selection up a page.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Selection.MoveRight"><summary>
            Moves the selection right a character.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Selection.MoveToDocumentEnd"><summary>
            Moves the selection to the end of the document.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Selection.MoveToDocumentStart"><summary>
            Moves the selection to the start of the document.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Selection.MoveToLineEnd"><summary>
            Moves the selection to the end of the current line.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Selection.MoveToLineStartAfterIndentation"><summary>
            Moves to the first non-whitespace character on the current display line.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Selection.MoveToLineStart"><summary>
            Moves the selection to the start of the current line.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Selection.MoveToMatchingBracket"><summary>
            Moves the selection to the matching bracket.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Selection.MoveToNextLineStartAfterIndentation"><summary>
            Moves the selection to the first non-whitespace character on the next display line.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Selection.MoveToNextWord"><summary>
            Moves the selection to the next word.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Selection.MoveToPreviousLineStartAfterIndentation"><summary>
            Moves the selection to the first non-whitespace character on the previous display line.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Selection.MoveToPreviousWord"><summary>
            Moves the selection to the previous word.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Selection.MoveToVisibleBottom"><summary>
            Moves the selection to the bottom of the view.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Selection.MoveToVisibleTop"><summary>
            Moves the selection to the top of the view.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Selection.MoveUp"><summary>
            Moves the selection up a line.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Selection.ResumeEvents"><summary>
            Allows the object to raise events.
            </summary><seealso cref="P:ActiproSoftware.SyntaxEditor.Selection.EventsSuspended" /></member><member name="M:ActiproSoftware.SyntaxEditor.Selection.SelectAll"><summary>
            Selects all of the text.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Selection.SelectBlockDown"><summary>
            Block selects down a line.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Selection.SelectBlockLeft"><summary>
            Block selects left a character.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Selection.SelectBlockRight"><summary>
            Block selects right a character.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Selection.SelectBlockToNextWord"><summary>
            Block selects to the next word.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Selection.SelectBlockToPreviousWord"><summary>
            Block selects to the previous word.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Selection.SelectBlockUp"><summary>
            Block selects up a line.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Selection.SelectDown"><summary>
            Selects down a line.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Selection.SelectLeft"><summary>
            Selects left a character.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Selection.SelectPageDown"><summary>
            Selects down a page.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Selection.SelectPageUp"><summary>
            Selects up a page.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Selection.SelectRange(System.Int32,System.Int32)"><summary>
            Selects a range of text using an offset and length.
            </summary><param name="offset">The offset at which to start the selection.</param><param name="length">The number of characters to select.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Selection.SelectRange(System.Int32,System.Int32,ActiproSoftware.SyntaxEditor.SelectionModes)"><summary>
            Selects a range of text using an offset and length.
            </summary><param name="offset">The offset at which to start the selection.</param><param name="length">The number of characters to select.</param><param name="mode">The <see cref="T:ActiproSoftware.SyntaxEditor.SelectionModes" /> to use.  This value must be either <c>SelectionModes.ContinuousStream</c> or <c>SelectionModes.Block</c>.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Selection.#ctor(ActiproSoftware.SyntaxEditor.EditorView)"><summary>
            Creates an instance of the <c>Selection</c> class.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> with which this object is associated.</value></member><member name="P:ActiproSoftware.SyntaxEditor.Selection.DocumentPositionRange"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPositionRange" /> that describes the start and end 
            <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" /> of the selection.
            </summary><value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPositionRange" /> that describes the start and end 
            <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" /> of the selection.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.Selection.EditPositionRange"><summary>
            Gets or sets the <see cref="T:ActiproSoftware.SyntaxEditor.EditPositionRange" /> that describes the start and end 
            <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" /> of the selection.
            </summary><value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.EditPositionRange" /> that describes the start and end 
            <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" /> of the selection.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.Selection.EndDocumentPosition"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" /> that represents the end of the selection range.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" /> that represents the end of the selection range.</value><remarks>
            This property's value comes from the end <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" /> of the <see cref="P:ActiproSoftware.SyntaxEditor.Selection.DocumentPositionRange" /> property.
            The <see cref="P:ActiproSoftware.SyntaxEditor.Selection.EndDocumentPosition" /> may occur before the <see cref="P:ActiproSoftware.SyntaxEditor.Selection.StartDocumentPosition" /> if the selection is not normalized.
            The <see cref="P:ActiproSoftware.SyntaxEditor.Selection.IsNormalized" /> property indicates if the selection is normalized.
            To get the normalized first <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" /> in the selection, use the <see cref="P:ActiproSoftware.SyntaxEditor.Selection.FirstDocumentPosition" /> property.
            To get the normalized last <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" /> in the selection, use the <see cref="P:ActiproSoftware.SyntaxEditor.Selection.LastDocumentPosition" /> property.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.Selection.EndEditPosition"><summary>
            Gets or sets the <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" /> that represents the end of the selection range.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" /> that represents the end of the selection range.</value><remarks>
            This property's value comes from the end <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" /> of the <see cref="P:ActiproSoftware.SyntaxEditor.Selection.EditPositionRange" /> property.
            The <see cref="P:ActiproSoftware.SyntaxEditor.Selection.EndEditPosition" /> may occur before the <see cref="P:ActiproSoftware.SyntaxEditor.Selection.StartEditPosition" /> if the selection is not normalized.
            The <see cref="P:ActiproSoftware.SyntaxEditor.Selection.IsNormalized" /> property indicates if the selection is normalized.
            To get the normalized first <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" /> in the selection, use the <see cref="P:ActiproSoftware.SyntaxEditor.Selection.FirstEditPosition" /> property.
            To get the normalized last <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" /> in the selection, use the <see cref="P:ActiproSoftware.SyntaxEditor.Selection.LastEditPosition" /> property.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.Selection.EndOffset"><summary>
            Gets or sets the end offset of the selection.
            </summary><value>The end offset of the selection.</value><remarks>
            The end offset may occur before the start offset if the selection is not normalized.
            The <see cref="P:ActiproSoftware.SyntaxEditor.Selection.IsNormalized" /> property indicates if the selection is normalized.
            To get the normalized first offset in the selection, use the <see cref="P:ActiproSoftware.SyntaxEditor.Selection.FirstOffset" /> property.
            To get the normalized last offset in the selection, use the <see cref="P:ActiproSoftware.SyntaxEditor.Selection.LastOffset" /> property.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.Selection.EventsSuspended"><summary>
            Gets whether the selection events are currently suspended.
            </summary><value><c>true</c> if selection events are currently suspended; otherwise, <c>false</c>.</value><remarks>
            If this flag is set, no selection change events are raised.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.Selection.FirstDocumentPosition"><summary>
            Gets the first <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" /> in the selection.
            </summary><value>The first <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" /> in the selection.</value><remarks>
            This property returns either the <see cref="P:ActiproSoftware.SyntaxEditor.Selection.StartDocumentPosition" /> or <see cref="P:ActiproSoftware.SyntaxEditor.Selection.EndDocumentPosition" /> property, whichever comes first.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.Selection.FirstEditPosition"><summary>
            Gets the first <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" /> in the selection.
            </summary><value>The first <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" /> in the selection.</value><remarks>
            This property returns either the <see cref="P:ActiproSoftware.SyntaxEditor.Selection.StartEditPosition" /> or <see cref="P:ActiproSoftware.SyntaxEditor.Selection.EndEditPosition" /> property, whichever comes first.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.Selection.FirstOffset"><summary>
            Gets the first offset in the selection.
            </summary><value>The first offset in the selection.</value><remarks>
            This property returns either the <see cref="P:ActiproSoftware.SyntaxEditor.Selection.StartOffset" /> or <see cref="P:ActiproSoftware.SyntaxEditor.Selection.EndOffset" /> property, whichever comes first.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.Selection.IsNormalized"><summary>
            Gets whether the selection is normalized (<see cref="P:ActiproSoftware.SyntaxEditor.Selection.StartEditPosition" /> occurs at or before the <see cref="P:ActiproSoftware.SyntaxEditor.Selection.EndEditPosition" />).
            </summary><value><c>true</c> if the selection is normalized; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.Selection.IsReadOnly"><summary>
            Get whether any character in the selection is flagged as read-only.
            </summary><returns><c>true</c> if any character in the selection is flagged as read-only; otherwise, <c>false</c>.
            </returns></member><member name="P:ActiproSoftware.SyntaxEditor.Selection.IsZeroLength"><summary>
            Gets whether the selection has a zero length.
            </summary><value><c>true</c> if the selection has a zero length; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.Selection.LastDocumentPosition"><summary>
            Gets the last <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" /> in the selection.
            </summary><value>The last <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" /> in the selection.</value><remarks>
            This property returns either the <see cref="P:ActiproSoftware.SyntaxEditor.Selection.StartDocumentPosition" /> or <see cref="P:ActiproSoftware.SyntaxEditor.Selection.EndDocumentPosition" /> property, whichever comes last.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.Selection.LastEditPosition"><summary>
            Gets the last <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" /> in the selection.
            </summary><value>The last <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" /> in the selection.</value><remarks>
            This property returns either the <see cref="P:ActiproSoftware.SyntaxEditor.Selection.StartEditPosition" /> or <see cref="P:ActiproSoftware.SyntaxEditor.Selection.EndEditPosition" /> property, whichever comes last.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.Selection.LastOffset"><summary>
            Gets the last offset in the selection.
            </summary><value>The last offset in the selection.</value><remarks>
            This property returns either the <see cref="P:ActiproSoftware.SyntaxEditor.Selection.StartOffset" /> or <see cref="P:ActiproSoftware.SyntaxEditor.Selection.EndOffset" /> property, whichever comes last.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.Selection.Length"><summary>
            Gets the absolute offset length of the selection.
            </summary><value>The absolute offset length of the selection.</value><remarks>This value is always positive.</remarks></member><member name="P:ActiproSoftware.SyntaxEditor.Selection.Mode"><summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.SelectionModes" /> that indicates the selection mode currently in use.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.SelectionModes" /> that indicates the selection mode currently in use.</value></member><member name="P:ActiproSoftware.SyntaxEditor.Selection.StartDocumentPosition"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" /> that represents the start of the selection range.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" /> that represents the start of the selection range.</value><remarks>
            This property's value comes from the start <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" /> of the <see cref="P:ActiproSoftware.SyntaxEditor.Selection.DocumentPositionRange" /> property.
            The <see cref="P:ActiproSoftware.SyntaxEditor.Selection.StartDocumentPosition" /> may occur after the <see cref="P:ActiproSoftware.SyntaxEditor.Selection.EndDocumentPosition" /> if the selection is not normalized.
            The <see cref="P:ActiproSoftware.SyntaxEditor.Selection.IsNormalized" /> property indicates if the selection is normalized.
            To get the normalized first <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" /> in the selection, use the <see cref="P:ActiproSoftware.SyntaxEditor.Selection.FirstDocumentPosition" /> property.
            To get the normalized last <see cref="T:ActiproSoftware.SyntaxEditor.DocumentPosition" /> in the selection, use the <see cref="P:ActiproSoftware.SyntaxEditor.Selection.LastDocumentPosition" /> property.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.Selection.StartEditPosition"><summary>
            Gets or sets the <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" /> that represents the start of the selection range.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" /> that represents the start of the selection range.</value><remarks>
            This property's value comes from the start <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" /> of the <see cref="P:ActiproSoftware.SyntaxEditor.Selection.EditPositionRange" /> property.
            The <see cref="P:ActiproSoftware.SyntaxEditor.Selection.StartEditPosition" /> may occur after the <see cref="P:ActiproSoftware.SyntaxEditor.Selection.EndEditPosition" /> if the selection is not normalized.
            The <see cref="P:ActiproSoftware.SyntaxEditor.Selection.IsNormalized" /> property indicates if the selection is normalized.
            To get the normalized first <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" /> in the selection, use the <see cref="P:ActiproSoftware.SyntaxEditor.Selection.FirstEditPosition" /> property.
            To get the normalized last <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" /> in the selection, use the <see cref="P:ActiproSoftware.SyntaxEditor.Selection.LastEditPosition" /> property.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.Selection.StartOffset"><summary>
            Gets or sets the start offset of the selection.
            </summary><value>The start offset of the selection.</value><remarks>
            The start offset may occur after the end offset if the selection is not normalized.
            The <see cref="P:ActiproSoftware.SyntaxEditor.Selection.IsNormalized" /> property indicates if the selection is normalized.
            To get the normalized first offset in the selection, use the <see cref="P:ActiproSoftware.SyntaxEditor.Selection.FirstOffset" /> property.
            To get the normalized last offset in the selection, use the <see cref="P:ActiproSoftware.SyntaxEditor.Selection.LastOffset" /> property.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.Selection.TextRange"><summary>
            Gets or sets the <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> that specifies the offset range of the selection.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> that specifies the offset range of the selection.</value></member><member name="P:ActiproSoftware.SyntaxEditor.Selection.View"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> with which the <see cref="T:ActiproSoftware.SyntaxEditor.Selection" /> is associated.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> with which the <see cref="T:ActiproSoftware.SyntaxEditor.Selection" /> is associated.</value></member><member name="T:ActiproSoftware.SyntaxEditor.SyntaxEditorSplitEventArgs"><summary>
            Provides data for <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> split events.
            </summary><remarks>
            This class is used with the <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditorSplitEventHandler" /> delegate.
            </remarks><seealso cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditorSplitEventHandler" /></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditorSplitEventArgs.ToString"><summary>
            Creates and returns a string representation of the current object.
            </summary><returns>A string representation of the current object.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditorSplitEventArgs.#ctor(System.Windows.Forms.Orientation)"><summary>
            Initializes a new instance of the <c>SyntaxEditorSplitEventArgs</c> class. 
            </summary><param name="splitOrientation">An <see cref="T:System.Windows.Forms.Orientation" /> that specifies the orientation of the split that is affected.</param></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditorSplitEventArgs.SplitOrientation"><summary>
            Gets an <see cref="T:System.Windows.Forms.Orientation" /> that specifies the orientation of the split that is affected.
            </summary><value>
            An <see cref="T:System.Windows.Forms.Orientation" /> that specifies the orientation of the split that is affected.
            </value></member><member name="T:ActiproSoftware.SyntaxEditor.SyntaxEditorSplitEventHandler"><summary>
            Represents the method that will handle various <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> split events.
            </summary><param name="sender">Sender of the event.</param><param name="e">A <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditorSplitEventArgs" /> containing event data.</param><remarks>
            When you create a <c>EditorViewRepaintEventHandler</c> delegate, you identify the method that will handle the event. 
            To associate the event with your event handler, add an instance of the delegate to the event. 
            The event handler is called whenever the event occurs, unless you remove the delegate.
            </remarks><seealso cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditorSplitEventArgs" /></member><member name="T:ActiproSoftware.SyntaxEditor.SyntaxEditorSplitType"><summary>
            Specifies the type of <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> splitting that is permitted in a <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor" /> control.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.SyntaxEditorSplitType.None"><summary>
            No splitting is permitted.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.SyntaxEditorSplitType.DualHorizontal"><summary>
            Horizontal dual splitting is permitted.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.SyntaxEditorSplitType.DualVertical"><summary>
            Vertical dual splitting is permitted.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.SyntaxEditorSplitType.FourWay"><summary>
            Four-way splitting is permitted.
            </summary></member><member name="T:ActiproSoftware.SyntaxEditor.EditorViewMouseEventArgs"><summary>
            Provides data for <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> mouse events.
            </summary><remarks>
            This class is used with the <see cref="T:ActiproSoftware.SyntaxEditor.EditorViewMouseEventHandler" /> delegate.
            The <see cref="P:ActiproSoftware.SyntaxEditor.EditorViewMouseEventArgs.HitTestResult" /> property returns detailed information about what is under the mouse.
            </remarks><seealso cref="T:ActiproSoftware.SyntaxEditor.EditorViewMouseEventHandler" /></member><member name="M:ActiproSoftware.SyntaxEditor.EditorViewMouseEventArgs.ToString"><summary>
            Creates and returns a string representation of the current object.
            </summary><returns>A string representation of the current object.</returns></member><member name="P:ActiproSoftware.SyntaxEditor.EditorViewMouseEventArgs.Cancel"><summary>
            Gets or sets whether to cancel any processing that occurs after this event.
            </summary><value><c>true</c> if processing should be cancelled; otherwise, <c>false</c>.
            </value><remarks>
            This property should only be used for mouse down events.
            When set to <c>true</c> it will cancel any selection from being started.
            This is useful in situations where a mouse down has special meaning to the
            but should not start start a selection.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.EditorViewMouseEventArgs.HitTestResult"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditorHitTestResult" /> that contains detailed information about what the mouse is over.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditorHitTestResult" /> that contains detailed information about what the mouse is over.</value></member><member name="P:ActiproSoftware.SyntaxEditor.EditorViewMouseEventArgs.OldMouseOverToken"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that the mouse was over before this event fired.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that the mouse was over before this event fired.</value><remarks>
            This property is only filled in for the <see cref="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.TokenMouseEnter" /> and <see cref="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.TokenMouseLeave" /> events.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.EditorViewMouseEventArgs.ResetClickCount"><summary>
            Gets or sets whether to reset the click count after this event.
            </summary><value><c>true</c> if the click count should be reset; otherwise, <c>false</c>.
            </value><remarks>
            This property should only be used for mouse down events.
            When set to <c>true</c> it will reset the click count for the next time the event fires.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.EditorViewMouseEventArgs.ToolTipTargetOffset"><summary>
            Gets or sets the offset at which a tooltip with <see cref="P:ActiproSoftware.SyntaxEditor.EditorViewMouseEventArgs.ToolTipText" /> should be displayed.
            </summary><value>The offset at which a tooltip with <see cref="P:ActiproSoftware.SyntaxEditor.EditorViewMouseEventArgs.ToolTipText" /> should be displayed.</value><remarks>
            This property should only be used for hover events.
            If the mouse location should be used as the location for tooltip display, return <c>-1</c>.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.EditorViewMouseEventArgs.ToolTipText"><summary>
            Gets or sets the text that should be displayed in a tooltip.
            </summary><value>The text that should be displayed in a tooltip.</value><remarks>
            This property should only be used for hover events.
            If no text should be displayed, return <see langword="null" />.
            </remarks></member><member name="T:ActiproSoftware.SyntaxEditor.EditorViewMouseEventHandler"><summary>
            Represents the method that will handle <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> mouse events.
            </summary><param name="sender">Sender of the event.</param><param name="e">A <see cref="T:ActiproSoftware.SyntaxEditor.EditorViewMouseEventArgs" /> containing event data.</param><remarks>
            When you create a <c>EditorViewMouseEventHandler</c> delegate, you identify the method that will handle the event. 
            To associate the event with your event handler, add an instance of the delegate to the event. 
            The event handler is called whenever the event occurs, unless you remove the delegate.
            </remarks><seealso cref="T:ActiproSoftware.SyntaxEditor.EditorViewMouseEventArgs" /></member><member name="T:ActiproSoftware.SyntaxEditor.TokenContentDividerType"><summary>
            Specifies the type of content divider to display for an <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.TokenContentDividerType.LexicalPatternGroup"><summary>
            Use the content divider type indicated by the lexical pattern group, if any, of the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.TokenContentDividerType.Before"><summary>
            Display a content divider before the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.TokenContentDividerType.After"><summary>
            Display a content divider after the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.TokenContentDividerType.None"><summary>
            Don't display a content divider for the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.
            </summary></member><member name="T:ActiproSoftware.SyntaxEditor.UserMarginPaintEventArgs"><summary>
            Provides data for user margin paint events.
            </summary><seealso cref="T:ActiproSoftware.SyntaxEditor.UserMarginPaintEventHandler" /></member><member name="P:ActiproSoftware.SyntaxEditor.UserMarginPaintEventArgs.DisplayLineBounds"><summary>
            Gets the bounds of the display line within the user margin.
            </summary><value>A <see cref="T:System.Drawing.Rectangle" /> indicating the bounds of the display line within the user margin.</value></member><member name="P:ActiproSoftware.SyntaxEditor.UserMarginPaintEventArgs.DisplayLineIndex"><summary>
            Gets the index of the display line whose user margin is being painted.
            </summary><value>The index of the display line whose user margin is being painted.</value></member><member name="P:ActiproSoftware.SyntaxEditor.UserMarginPaintEventArgs.DocumentLineDisplayLineIndexRange"><summary>
            Gets the range of display line indices for the document line.
            </summary><value>A <see cref="T:ActiproSoftware.Drawing.Range" /> indicating the range of display line indices for the document line.</value></member><member name="P:ActiproSoftware.SyntaxEditor.UserMarginPaintEventArgs.DocumentLineIndex"><summary>
            Gets the index of the document line whose user margin is being painted.
            </summary><value>The index of the document line whose user margin is being painted.</value></member><member name="P:ActiproSoftware.SyntaxEditor.UserMarginPaintEventArgs.IsFirstDisplayLineForDocumentLine"><summary>
            Gets whether the display line is the first display line for the document line.
            </summary><value><c>true</c> if the display line is the first display line for the document line; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.UserMarginPaintEventArgs.IsLastDisplayLineForDocumentLine"><summary>
            Gets whether the display line is the last display line for the document line.
            </summary><value><c>true</c> if the display line is the last display line for the document line; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.UserMarginPaintEventArgs.Font"><summary>
            Gets or sets the <see cref="T:System.Drawing.Font" /> with which to automatically draw the <see cref="P:ActiproSoftware.SyntaxEditor.UserMarginPaintEventArgs.Text" />.
            </summary><value>The <see cref="T:System.Drawing.Font" /> with which to automatically draw the <see cref="P:ActiproSoftware.SyntaxEditor.UserMarginPaintEventArgs.Text" />.</value><remarks>
            If this property's value is <see langword="null" />, the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.UserMarginFont" /> will be used as the <see cref="T:System.Drawing.Font" />.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.UserMarginPaintEventArgs.ForeColor"><summary>
            Gets or sets the <see cref="T:System.Drawing.Color" /> with which to automatically draw the <see cref="P:ActiproSoftware.SyntaxEditor.UserMarginPaintEventArgs.Text" />.
            </summary><value>The <see cref="T:System.Drawing.Color" /> with which to automatically draw the <see cref="P:ActiproSoftware.SyntaxEditor.UserMarginPaintEventArgs.Text" />.</value><remarks>
            If this property's value is <c>Color.Empty</c>, a default color will be used by the renderer.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.UserMarginPaintEventArgs.Text"><summary>
            Gets or sets the text to automatically draw in the user margin for the display line.
            </summary><value>The text to automatically draw in the user margin for the display line.</value><remarks>
            If the value is <see langword="null" />, nothing will be drawn.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.UserMarginPaintEventArgs.View"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> that contains the display line.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> that contains the display line.</value></member><member name="T:ActiproSoftware.SyntaxEditor.UserMarginPaintEventHandler"><summary>
            Represents the method that will handle user margin paint events.
            </summary><param name="sender">Sender of the event.</param><param name="e">A <see cref="T:ActiproSoftware.SyntaxEditor.UserMarginPaintEventArgs" /> containing event data.</param><remarks>
            When you create a <c>UserMarginPaintEventHandler</c> delegate, you identify the method that will handle the event. 
            To associate the event with your event handler, add an instance of the delegate to the event. 
            The event handler is called whenever the event occurs, unless you remove the delegate.
            </remarks><seealso cref="T:ActiproSoftware.SyntaxEditor.UserMarginPaintEventArgs" /></member><member name="T:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer"><summary>
            Provides a base renderer for the <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor" /> control.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.ResetContentDividerColor"><summary>
            Resets the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.ContentDividerColor" /> property to its default value.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.ShouldSerializeContentDividerColor"><summary>
            Indicates whether the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.ContentDividerColor" /> property should be persisted.
            </summary><returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.ResetContentDividerDashStyle"><summary>
            Resets the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.ContentDividerDashStyle" /> property to its default value.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.ShouldSerializeContentDividerDashStyle"><summary>
            Indicates whether the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.ContentDividerDashStyle" /> property should be persisted.
            </summary><returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.ResetCurrentLineHighlightBackColor"><summary>
            Resets the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.CurrentLineHighlightBackColor" /> property to its default value.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.ShouldSerializeCurrentLineHighlightBackColor"><summary>
            Indicates whether the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.CurrentLineHighlightBackColor" /> property should be persisted.
            </summary><returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.ResetCurrentLineHighlightBorderColor"><summary>
            Resets the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.CurrentLineHighlightBorderColor" /> property to its default value.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.ShouldSerializeCurrentLineHighlightBorderColor"><summary>
            Indicates whether the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.CurrentLineHighlightBorderColor" /> property should be persisted.
            </summary><returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.ResetCurrentLineHighlightExtendsToMargins"><summary>
            Resets the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.CurrentLineHighlightExtendsToMargins" /> property to its default value.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.ShouldSerializeCurrentLineHighlightExtendsToMargins"><summary>
            Indicates whether the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.CurrentLineHighlightExtendsToMargins" /> property should be persisted.
            </summary><returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.Dispose(System.Boolean)"><summary>
            Disposes any resources used by the object.
            </summary><param name="disposing">Whether the object is being disposed.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.DrawCurrentLineHighlightBackground(System.Windows.Forms.PaintEventArgs,System.Drawing.Rectangle)"><summary>
            Draws the current line highlight background over the specified bounds.
            </summary><param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param><param name="bounds">The bounds in which to draw.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.DrawCurrentLineHighlightBorder(System.Windows.Forms.PaintEventArgs,System.Drawing.Rectangle)"><summary>
            Draws the current line highlight border over the specified bounds.
            </summary><param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param><param name="bounds">The bounds in which to draw.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.DrawEditorViewBorder(System.Windows.Forms.PaintEventArgs,System.Drawing.Rectangle,ActiproSoftware.SyntaxEditor.EditorView)"><summary>
            Draws the border around an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" />.
            </summary><param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param><param name="bounds">The bounds in which to draw.</param><param name="view">The <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> being painted.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.DrawEditorViewButtonLinkBackground(System.Windows.Forms.PaintEventArgs,System.Drawing.Rectangle,ActiproSoftware.SyntaxEditor.EditorViewButtonLink)"><summary>
            Draws the background of an <see cref="T:ActiproSoftware.SyntaxEditor.EditorViewButtonLink" />.
            </summary><param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param><param name="bounds">The bounds in which to draw.</param><param name="link">The <see cref="T:ActiproSoftware.SyntaxEditor.EditorViewButtonLink" /> being painted.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.DrawEditorViewSplitButton(System.Windows.Forms.PaintEventArgs,System.Drawing.Rectangle,ActiproSoftware.SyntaxEditor.EditorView,System.Windows.Forms.Orientation)"><summary>
            Draws an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> split-button.
            </summary><param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param><param name="bounds">The bounds in which to draw.</param><param name="view">The <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> being painted.</param><param name="orientation">The <see cref="T:System.Windows.Forms.Orientation" /> of the split button.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.DrawIndicatorMarginBackground(System.Windows.Forms.PaintEventArgs,System.Drawing.Rectangle,ActiproSoftware.SyntaxEditor.EditorView)"><summary>
            Draws the background of an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> indicator margin.
            </summary><param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param><param name="bounds">The bounds in which to draw.</param><param name="view">The <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> being painted.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.DrawIndicatorMarginDisplayLine(System.Windows.Forms.PaintEventArgs,System.Drawing.Rectangle,ActiproSoftware.SyntaxEditor.EditorView,ActiproSoftware.SyntaxEditor.DocumentLine,ActiproSoftware.SyntaxEditor.DisplayLine)"><summary>
            Draws a single display line within an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> indicator margin.
            </summary><param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param><param name="bounds">The bounds in which to draw.</param><param name="view">The <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> being painted.</param><param name="documentLine">The <see cref="T:ActiproSoftware.SyntaxEditor.DocumentLine" /> for the <see cref="T:ActiproSoftware.SyntaxEditor.DisplayLine" /> being painted.</param><param name="displayLine">The <see cref="T:ActiproSoftware.SyntaxEditor.DisplayLine" /> being painted.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.DrawLineNumberMarginBackground(System.Windows.Forms.PaintEventArgs,System.Drawing.Rectangle,ActiproSoftware.SyntaxEditor.EditorView)"><summary>
            Draws the background of an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> line number margin.
            </summary><param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param><param name="bounds">The bounds in which to draw.</param><param name="view">The <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> being painted.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.DrawLineNumberMarginDisplayLine(System.Windows.Forms.PaintEventArgs,System.Drawing.Rectangle,ActiproSoftware.SyntaxEditor.EditorView,ActiproSoftware.SyntaxEditor.DocumentLine,ActiproSoftware.SyntaxEditor.DisplayLine)"><summary>
            Draws a single display line within an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> line number margin.
            </summary><param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param><param name="bounds">The bounds in which to draw.</param><param name="view">The <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> being painted.</param><param name="documentLine">The <see cref="T:ActiproSoftware.SyntaxEditor.DocumentLine" /> for the <see cref="T:ActiproSoftware.SyntaxEditor.DisplayLine" /> being painted.</param><param name="displayLine">The <see cref="T:ActiproSoftware.SyntaxEditor.DisplayLine" /> being painted.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.DrawOutliningIndicator(System.Windows.Forms.PaintEventArgs,System.Drawing.Rectangle,ActiproSoftware.SyntaxEditor.EditorView,ActiproSoftware.SyntaxEditor.DocumentLine,ActiproSoftware.SyntaxEditor.DisplayLine)"><summary>
            Draws an outlining indicator for the specified <see cref="T:ActiproSoftware.SyntaxEditor.DisplayLine" />.
            </summary><param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param><param name="bounds">The bounds in which to draw.</param><param name="view">The <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> being painted.</param><param name="documentLine">The <see cref="T:ActiproSoftware.SyntaxEditor.DocumentLine" /> for the <see cref="T:ActiproSoftware.SyntaxEditor.DisplayLine" /> being painted.</param><param name="displayLine">The <see cref="T:ActiproSoftware.SyntaxEditor.DisplayLine" /> being painted.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.DrawScrollBarBackground(System.Windows.Forms.PaintEventArgs,System.Drawing.Rectangle,ActiproSoftware.WinUICore.ScrollBar)"><summary>
            Draws the background of a <see cref="T:ActiproSoftware.WinUICore.ScrollBar" /> control.
            </summary><param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param><param name="bounds">The bounds in which to draw.</param><param name="scrollBar">The <see cref="T:ActiproSoftware.WinUICore.ScrollBar" /> being painted.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.DrawScrollBarBlockBackground(System.Windows.Forms.PaintEventArgs,System.Drawing.Rectangle,ActiproSoftware.SyntaxEditor.EditorView)"><summary>
            Draws the background of the scrollbar block that appears between the horizontal and vertical scrollbars.
            </summary><param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param><param name="bounds">The bounds in which to draw.</param><param name="view">The <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> being painted.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.DrawScrollBarButton(System.Windows.Forms.PaintEventArgs,System.Drawing.Rectangle,ActiproSoftware.WinUICore.ScrollBarButton)"><summary>
            Draws a <see cref="T:ActiproSoftware.WinUICore.ScrollBarButton" />.
            </summary><param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param><param name="bounds">The bounds in which to draw.</param><param name="button">The <see cref="T:ActiproSoftware.WinUICore.ScrollBarButton" /> that is being painted.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.DrawScrollBarThumb(System.Windows.Forms.PaintEventArgs,System.Drawing.Rectangle,ActiproSoftware.WinUICore.ScrollBarThumb)"><summary>
            Draws a <see cref="T:ActiproSoftware.WinUICore.ScrollBarThumb" />.
            </summary><param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param><param name="bounds">The bounds in which to draw.</param><param name="thumb">The <see cref="T:ActiproSoftware.WinUICore.ScrollBarThumb" /> that is being painted.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.DrawSelectionMarginBackground(System.Windows.Forms.PaintEventArgs,System.Drawing.Rectangle,ActiproSoftware.SyntaxEditor.EditorView)"><summary>
            Draws the background of an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> selection margin.
            </summary><param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param><param name="bounds">The bounds in which to draw.</param><param name="view">The <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> being painted.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.DrawSelectionMarginDisplayLine(System.Windows.Forms.PaintEventArgs,System.Drawing.Rectangle,ActiproSoftware.SyntaxEditor.EditorView,ActiproSoftware.SyntaxEditor.DocumentLine,ActiproSoftware.SyntaxEditor.DisplayLine)"><summary>
            Draws a single display line within an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> selection margin.
            </summary><param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param><param name="bounds">The bounds in which to draw.</param><param name="view">The <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> being painted.</param><param name="documentLine">The <see cref="T:ActiproSoftware.SyntaxEditor.DocumentLine" /> for the <see cref="T:ActiproSoftware.SyntaxEditor.DisplayLine" /> being painted.</param><param name="displayLine">The <see cref="T:ActiproSoftware.SyntaxEditor.DisplayLine" /> being painted.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.DrawSplitter(System.Windows.Forms.PaintEventArgs,System.Drawing.Rectangle,ActiproSoftware.SyntaxEditor.SyntaxEditor,System.Windows.Forms.Orientation)"><summary>
            Draws a splitter that appears between two views.
            </summary><param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param><param name="bounds">The bounds in which to draw.</param><param name="syntaxEditor">The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor" /> being painted.</param><param name="orientation">The <see cref="T:System.Windows.Forms.Orientation" /> of the splitter.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.DrawTextAreaBackground(System.Windows.Forms.PaintEventArgs,System.Drawing.Rectangle,ActiproSoftware.SyntaxEditor.EditorView)"><summary>
            Draws the background of an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> text area.
            </summary><param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param><param name="bounds">The bounds in which to draw.</param><param name="view">The <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> being painted.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.DrawTextAreaDisplayLinePost(System.Windows.Forms.PaintEventArgs,System.Drawing.Rectangle,ActiproSoftware.SyntaxEditor.EditorView,ActiproSoftware.SyntaxEditor.DocumentLine,ActiproSoftware.SyntaxEditor.DisplayLine)"><summary>
            Draws a single display line within an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> text area after the text is actually drawn.
            </summary><param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param><param name="bounds">The bounds in which to draw.</param><param name="view">The <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> being painted.</param><param name="documentLine">The <see cref="T:ActiproSoftware.SyntaxEditor.DocumentLine" /> for the <see cref="T:ActiproSoftware.SyntaxEditor.DisplayLine" /> being painted.</param><param name="displayLine">The <see cref="T:ActiproSoftware.SyntaxEditor.DisplayLine" /> being painted.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.DrawTextAreaDisplayLinePre(System.Windows.Forms.PaintEventArgs,System.Drawing.Rectangle,ActiproSoftware.SyntaxEditor.EditorView,ActiproSoftware.SyntaxEditor.DocumentLine,ActiproSoftware.SyntaxEditor.DisplayLine)"><summary>
            Draws a single display line within an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> text area before the text is actually drawn.
            </summary><param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param><param name="bounds">The bounds in which to draw.</param><param name="view">The <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> being painted.</param><param name="documentLine">The <see cref="T:ActiproSoftware.SyntaxEditor.DocumentLine" /> for the <see cref="T:ActiproSoftware.SyntaxEditor.DisplayLine" /> being painted.</param><param name="displayLine">The <see cref="T:ActiproSoftware.SyntaxEditor.DisplayLine" /> being painted.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.DrawUserMarginBackground(System.Windows.Forms.PaintEventArgs,System.Drawing.Rectangle,ActiproSoftware.SyntaxEditor.EditorView)"><summary>
            Draws the background of an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> user margin.
            </summary><param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param><param name="bounds">The bounds in which to draw.</param><param name="view">The <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> being painted.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.DrawUserMarginDisplayLine(ActiproSoftware.SyntaxEditor.UserMarginPaintEventArgs,System.Drawing.Rectangle,ActiproSoftware.SyntaxEditor.EditorView,ActiproSoftware.SyntaxEditor.DocumentLine,ActiproSoftware.SyntaxEditor.DisplayLine)"><summary>
            Draws a single display line within an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> user margin.
            </summary><param name="e">A <see cref="T:ActiproSoftware.SyntaxEditor.UserMarginPaintEventArgs" /> that contains the event data.</param><param name="bounds">The bounds in which to draw.</param><param name="view">The <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> being painted.</param><param name="documentLine">The <see cref="T:ActiproSoftware.SyntaxEditor.DocumentLine" /> for the <see cref="T:ActiproSoftware.SyntaxEditor.DisplayLine" /> being painted.</param><param name="displayLine">The <see cref="T:ActiproSoftware.SyntaxEditor.DisplayLine" /> being painted.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.DrawWordWrapMarginBackground(System.Windows.Forms.PaintEventArgs,System.Drawing.Rectangle,ActiproSoftware.SyntaxEditor.EditorView)"><summary>
            Draws the background of an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> word wrap margin.
            </summary><param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param><param name="bounds">The bounds in which to draw.</param><param name="view">The <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> being painted.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.Equals(System.Object)"><summary>
            Determines whether the specified <c>Object</c> is equal to the current <c>Object</c>. 
            </summary><param name="obj">The <c>Object</c> to compare to the current <c>Object</c>.</param><returns><c>true</c> if the specified <c>Object</c> is equal to the current <c>Object</c>; 
            otherwise, <c>false</c>. 
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.GetHashCode"><summary>
            Returns a hash code for this object.
            </summary><returns>An integer value that specifies a hash value for this object.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.ResetIndentationGuideColor"><summary>
            Resets the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.IndentationGuideColor" /> property to its default value.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.ShouldSerializeIndentationGuideColor"><summary>
            Indicates whether the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.IndentationGuideColor" /> property should be persisted.
            </summary><returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.ResetLineModificationMarkingSavedColor"><summary>
            Resets the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.LineModificationMarkingSavedColor" /> property to its default value.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.ShouldSerializeLineModificationMarkingSavedColor"><summary>
            Indicates whether the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.LineModificationMarkingSavedColor" /> property should be persisted.
            </summary><returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.ResetLineModificationMarkingUnsavedColor"><summary>
            Resets the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.LineModificationMarkingUnsavedColor" /> property to its default value.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.ShouldSerializeLineModificationMarkingUnsavedColor"><summary>
            Indicates whether the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.LineModificationMarkingUnsavedColor" /> property should be persisted.
            </summary><returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.MeasureLineNumberMarginWidth(System.Drawing.Graphics,ActiproSoftware.SyntaxEditor.SyntaxEditor)"><summary>
            Measures the width of the line number margin.
            </summary><param name="g">The <c>Graphics</c> object used to measure.</param><param name="syntaxEditor">The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor" /> that contains the line number margin.</param><returns>The measured width of the line number margin.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.OnPropertyChanged(System.EventArgs)"><summary>
            Raises the <c>PropertyChanged</c> event.
            </summary><param name="e">An <c>EventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.ResetOutliningIndicatorBackColor"><summary>
            Resets the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.OutliningIndicatorBackColor" /> property to its default value.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.ShouldSerializeOutliningIndicatorBackColor"><summary>
            Indicates whether the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.OutliningIndicatorBackColor" /> property should be persisted.
            </summary><returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.ResetOutliningIndicatorForeColor"><summary>
            Resets the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.OutliningIndicatorForeColor" /> property to its default value.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.ShouldSerializeOutliningIndicatorForeColor"><summary>
            Indicates whether the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.OutliningIndicatorForeColor" /> property should be persisted.
            </summary><returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.ResetAll(System.Boolean)"><summary>
            Resets all property values to their defaults.
            </summary><param name="force">Whether to force resetting.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.ResetResetAllPropertiesOnSystemColorChange"><summary>
            Resets the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.ResetAllPropertiesOnSystemColorChange" /> property to its default value.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.ShouldSerializeResetAllPropertiesOnSystemColorChange"><summary>
            Indicates whether the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.ResetAllPropertiesOnSystemColorChange" /> property should be persisted.
            </summary><returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.ResetSelectionFocusedBackColor"><summary>
            Resets the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.SelectionFocusedBackColor" /> property to its default value.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.ShouldSerializeSelectionFocusedBackColor"><summary>
            Indicates whether the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.SelectionFocusedBackColor" /> property should be persisted.
            </summary><returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.ResetSelectionFocusedBorderColor"><summary>
            Resets the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.SelectionFocusedBorderColor" /> property to its default value.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.ShouldSerializeSelectionFocusedBorderColor"><summary>
            Indicates whether the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.SelectionFocusedBorderColor" /> property should be persisted.
            </summary><returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.ResetSelectionFocusedForeColor"><summary>
            Resets the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.SelectionFocusedForeColor" /> property to its default value.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.ShouldSerializeSelectionFocusedForeColor"><summary>
            Indicates whether the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.SelectionFocusedForeColor" /> property should be persisted.
            </summary><returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.ResetSelectionUnfocusedBackColor"><summary>
            Resets the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.SelectionUnfocusedBackColor" /> property to its default value.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.ShouldSerializeSelectionUnfocusedBackColor"><summary>
            Indicates whether the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.SelectionUnfocusedBackColor" /> property should be persisted.
            </summary><returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.ResetSelectionUnfocusedBorderColor"><summary>
            Resets the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.SelectionUnfocusedBorderColor" /> property to its default value.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.ShouldSerializeSelectionUnfocusedBorderColor"><summary>
            Indicates whether the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.SelectionUnfocusedBorderColor" /> property should be persisted.
            </summary><returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.ResetSelectionUnfocusedForeColor"><summary>
            Resets the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.SelectionUnfocusedForeColor" /> property to its default value.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.ShouldSerializeSelectionUnfocusedForeColor"><summary>
            Indicates whether the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.SelectionUnfocusedForeColor" /> property should be persisted.
            </summary><returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.ResetWhitespaceSpaceForeColor"><summary>
            Resets the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.WhitespaceSpaceForeColor" /> property to its default value.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.ShouldSerializeWhitespaceSpaceForeColor"><summary>
            Indicates whether the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.WhitespaceSpaceForeColor" /> property should be persisted.
            </summary><returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.ResetWhitespaceTabForeColor"><summary>
            Resets the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.WhitespaceTabForeColor" /> property to its default value.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.ShouldSerializeWhitespaceTabForeColor"><summary>
            Indicates whether the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.WhitespaceTabForeColor" /> property should be persisted.
            </summary><returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.ResetWordWrapGlyphColor"><summary>
            Resets the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.WordWrapGlyphColor" /> property to its default value.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.ShouldSerializeWordWrapGlyphColor"><summary>
            Indicates whether the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.WordWrapGlyphColor" /> property should be persisted.
            </summary><returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.#ctor"><summary>
            Initializes a new instance of the <c>SyntaxEditorRenderer</c> class. 
            </summary><remarks>
            The default constructor initializes all fields to their default values.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.ContentDividerColor"><summary>
            Gets or sets the <see cref="T:System.Drawing.Color" /> to use when drawing content dividers.
            </summary><value>The <see cref="T:System.Drawing.Color" /> to use when drawing content dividers.</value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.ContentDividerDashStyle"><summary>
            Gets or sets the <see cref="T:System.Drawing.Drawing2D.DashStyle" /> to use when drawing content dividers.
            </summary><value>The <see cref="T:System.Drawing.Drawing2D.DashStyle" /> to use when drawing content dividers.</value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.CurrentLineHighlightBackColor"><summary>
            Gets or sets the <see cref="T:System.Drawing.Color" /> to use when drawing the background of the current line.
            </summary><value>The <see cref="T:System.Drawing.Color" /> to use when drawing the background of the current line.</value><remarks>
            This property is only used if the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.CurrentLineHighlightingVisible" /> is set to <c>true</c>.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.CurrentLineHighlightBorderColor"><summary>
            Gets or sets the <see cref="T:System.Drawing.Color" /> to use when drawing the border of the current line highlight.
            </summary><value>The <see cref="T:System.Drawing.Color" /> to use when drawing the border of the current line highlight.</value><remarks>
            This property can be set to <c>Color.Empty</c> if no border should be displayed.
            This property is only used if the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.CurrentLineHighlightingVisible" /> is set to <c>true</c>.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.CurrentLineHighlightExtendsToMargins"><summary>
            Gets or sets whether the current line highlight should extend into the margins.
            </summary><value><c>true</c> if the current line highlight should extend into the margins; otherwise, <c>false</c>.
            </value><remarks>
            If this property is set to <c>false</c> the current line highlight should be drawn only in the text area.
            This property is only used if the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxEditor.CurrentLineHighlightingVisible" /> is set to <c>true</c>.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.DefaultRenderer"><summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer" /> that should be used based on the current system settings.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer" /> that should be used based on the current system settings.</value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.EditorViewBorderWidth"><summary>
            Gets the width of the <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> border.
            </summary><value>The width of the <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> border.</value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.IndentationGuideColor"><summary>
            Gets or sets the <see cref="T:System.Drawing.Color" /> to use when drawing indentation guides.
            </summary><value>The <see cref="T:System.Drawing.Color" /> to use when drawing indentation guides.</value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.LineModificationMarkingSavedColor"><summary>
            Gets or sets the <see cref="T:System.Drawing.Color" /> to use for displaying saved line modification marks.
            </summary><value>The <see cref="T:System.Drawing.Color" /> to use for displaying saved line modification marks.</value><remarks>
            The marks appear in the selection margin.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.LineModificationMarkingUnsavedColor"><summary>
            Gets or sets the <see cref="T:System.Drawing.Color" /> to use for displaying unsaved line modification marks.
            </summary><value>The <see cref="T:System.Drawing.Color" /> to use for displaying unsaved line modification marks.</value><remarks>
            The marks appear in the selection margin.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.OutliningIndicatorBackColor"><summary>
            Gets or sets the <see cref="T:System.Drawing.Color" /> to use for drawing the background of outlining indicators.
            </summary><value>The <see cref="T:System.Drawing.Color" /> to use for drawing the background of outlining indicators.</value><remarks>
            The marks appear in the selection margin.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.OutliningIndicatorForeColor"><summary>
            Gets or sets the <see cref="T:System.Drawing.Color" /> to use for drawing the foreground of outlining indicators.
            </summary><value>The <see cref="T:System.Drawing.Color" /> to use for drawing the foreground of outlining indicators.</value><remarks>
            The marks appear in the selection margin.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.ResetAllPropertiesOnSystemColorChange"><summary>
            Gets or sets whether to reset all properties when a system color change event occurs.
            </summary><value><c>true</c> if all properties should be reset; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.SelectionFocusedBackColor"><summary>
            Gets or sets the <see cref="T:System.Drawing.Color" /> to use when drawing the background of a focused selection.
            </summary><value>The <see cref="T:System.Drawing.Color" /> to use when drawing the background of a focused selection.</value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.SelectionFocusedBorderColor"><summary>
            Gets or sets the <see cref="T:System.Drawing.Color" /> to use when drawing the border of a focused selection.
            </summary><value>The <see cref="T:System.Drawing.Color" /> to use when drawing the border of a focused selection.</value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.SelectionFocusedForeColor"><summary>
            Gets or sets the <see cref="T:System.Drawing.Color" /> to use when drawing the foreground of a focused selection.
            </summary><value>The <see cref="T:System.Drawing.Color" /> to use when drawing the foreground of a focused selection.</value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.SelectionUnfocusedBackColor"><summary>
            Gets or sets the <see cref="T:System.Drawing.Color" /> to use when drawing the background of a unfocused selection.
            </summary><value>The <see cref="T:System.Drawing.Color" /> to use when drawing the background of a unfocused selection.</value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.SelectionUnfocusedBorderColor"><summary>
            Gets or sets the <see cref="T:System.Drawing.Color" /> to use when drawing the border of a unfocused selection.
            </summary><value>The <see cref="T:System.Drawing.Color" /> to use when drawing the border of a unfocused selection.</value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.SelectionUnfocusedForeColor"><summary>
            Gets or sets the <see cref="T:System.Drawing.Color" /> to use when drawing the foreground of a unfocused selection.
            </summary><value>The <see cref="T:System.Drawing.Color" /> to use when drawing the foreground of a unfocused selection.</value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.TextAreaBackColor"><summary>
            Gets the core background <see cref="T:System.Drawing.Color" /> of the text area, if a solid color is used.
            </summary><value>The core background <see cref="T:System.Drawing.Color" /> of the text area, if a solid color is used.</value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.WhitespaceSpaceForeColor"><summary>
            Gets or sets the <see cref="T:System.Drawing.Color" /> to use when drawing spaces in the text area.
            </summary><value>The <see cref="T:System.Drawing.Color" /> to use when drawing spaces in the text area.</value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.WhitespaceTabForeColor"><summary>
            Gets or sets the <see cref="T:System.Drawing.Color" /> to use when drawing tabs in the text area.
            </summary><value>The <see cref="T:System.Drawing.Color" /> to use when drawing tabs in the text area.</value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.WordWrapGlyphColor"><summary>
            Gets or sets the <see cref="T:System.Drawing.Color" /> to use when drawing word wrap glyphs.
            </summary><value>The <see cref="T:System.Drawing.Color" /> to use when drawing word wrap glyphs.</value></member><member name="E:ActiproSoftware.SyntaxEditor.SyntaxEditorRenderer.PropertyChanged"><summary>
            Occurs after a property is changed.
            </summary><eventdata>
            The event handler receives an argument of type <c>EventArgs</c> containing data related to this event.
            </eventdata></member><member name="T:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer"><summary>
            Provides a renderer for the <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor" /> control that draws using a Visual Studio 2005 style.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.ResetUserMarginBorderDashStyle"><summary>
            Resets the <see cref="P:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.UserMarginBorderDashStyle" /> property to its default value.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.ShouldSerializeUserMarginBorderDashStyle"><summary>
            Indicates whether the <see cref="P:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.UserMarginBorderDashStyle" /> property should be persisted.
            </summary><returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.ResetUserMarginDisabledBackgroundFill"><summary>
            Resets the <see cref="P:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.UserMarginDisabledBackgroundFill" /> property to its default value.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.ShouldSerializeUserMarginDisabledBackgroundFill"><summary>
            Indicates whether the <see cref="P:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.UserMarginDisabledBackgroundFill" /> property should be persisted.
            </summary><returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.ResetUserMarginForeColor"><summary>
            Resets the <see cref="P:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.UserMarginForeColor" /> property to its default value.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.ShouldSerializeUserMarginForeColor"><summary>
            Indicates whether the <see cref="P:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.UserMarginForeColor" /> property should be persisted.
            </summary><returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.ResetUserMarginTextAlignment"><summary>
            Resets the <see cref="P:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.UserMarginTextAlignment" /> property to its default value.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.ShouldSerializeUserMarginTextAlignment"><summary>
            Indicates whether the <see cref="P:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.UserMarginTextAlignment" /> property should be persisted.
            </summary><returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.ResetWordWrapMarginBackgroundFill"><summary>
            Resets the <see cref="P:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.WordWrapMarginBackgroundFill" /> property to its default value.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.ShouldSerializeWordWrapMarginBackgroundFill"><summary>
            Indicates whether the <see cref="P:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.WordWrapMarginBackgroundFill" /> property should be persisted.
            </summary><returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.ResetWordWrapMarginBorderColor"><summary>
            Resets the <see cref="P:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.WordWrapMarginBorderColor" /> property to its default value.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.ShouldSerializeWordWrapMarginBorderColor"><summary>
            Indicates whether the <see cref="P:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.WordWrapMarginBorderColor" /> property should be persisted.
            </summary><returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.ResetWordWrapMarginBorderDashStyle"><summary>
            Resets the <see cref="P:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.WordWrapMarginBorderDashStyle" /> property to its default value.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.ShouldSerializeWordWrapMarginBorderDashStyle"><summary>
            Indicates whether the <see cref="P:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.WordWrapMarginBorderDashStyle" /> property should be persisted.
            </summary><returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.ResetBorder"><summary>
            Resets the <see cref="P:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.Border" /> property to its default value.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.ShouldSerializeBorder"><summary>
            Indicates whether the <see cref="P:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.Border" /> property should be persisted.
            </summary><returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.Dispose(System.Boolean)"><summary>
            Disposes any resources used by the object.
            </summary><param name="disposing">Whether the object is being disposed.</param></member><member name="M:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.DrawEditorViewBorder(System.Windows.Forms.PaintEventArgs,System.Drawing.Rectangle,ActiproSoftware.SyntaxEditor.EditorView)"><summary>
            Draws the border around an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" />.
            </summary><param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param><param name="bounds">The bounds in which to draw.</param><param name="view">The <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> being painted.</param></member><member name="M:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.DrawEditorViewButtonLinkBackground(System.Windows.Forms.PaintEventArgs,System.Drawing.Rectangle,ActiproSoftware.SyntaxEditor.EditorViewButtonLink)"><summary>
            Draws the background of an <see cref="T:ActiproSoftware.SyntaxEditor.EditorViewButtonLink" />.
            </summary><param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param><param name="bounds">The bounds in which to draw.</param><param name="link">The <see cref="T:ActiproSoftware.SyntaxEditor.EditorViewButtonLink" /> being painted.</param></member><member name="M:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.DrawEditorViewSplitButton(System.Windows.Forms.PaintEventArgs,System.Drawing.Rectangle,ActiproSoftware.SyntaxEditor.EditorView,System.Windows.Forms.Orientation)"><summary>
            Draws an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> split-button.
            </summary><param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param><param name="bounds">The bounds in which to draw.</param><param name="view">The <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> being painted.</param><param name="orientation">The <see cref="T:System.Windows.Forms.Orientation" /> of the split button.</param></member><member name="M:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.DrawIndicatorMarginBackground(System.Windows.Forms.PaintEventArgs,System.Drawing.Rectangle,ActiproSoftware.SyntaxEditor.EditorView)"><summary>
            Draws the background of an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> indicator margin.
            </summary><param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param><param name="bounds">The bounds in which to draw.</param><param name="view">The <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> being painted.</param></member><member name="M:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.DrawIndicatorMarginDisplayLine(System.Windows.Forms.PaintEventArgs,System.Drawing.Rectangle,ActiproSoftware.SyntaxEditor.EditorView,ActiproSoftware.SyntaxEditor.DocumentLine,ActiproSoftware.SyntaxEditor.DisplayLine)"><summary>
            Draws a single display line within an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> indicator margin.
            </summary><param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param><param name="bounds">The bounds in which to draw.</param><param name="view">The <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> being painted.</param><param name="documentLine">The <see cref="T:ActiproSoftware.SyntaxEditor.DocumentLine" /> for the <see cref="T:ActiproSoftware.SyntaxEditor.DisplayLine" /> being painted.</param><param name="displayLine">The <see cref="T:ActiproSoftware.SyntaxEditor.DisplayLine" /> being painted.</param></member><member name="M:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.DrawLineNumberMarginBackground(System.Windows.Forms.PaintEventArgs,System.Drawing.Rectangle,ActiproSoftware.SyntaxEditor.EditorView)"><summary>
            Draws the background of an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> line number margin.
            </summary><param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param><param name="bounds">The bounds in which to draw.</param><param name="view">The <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> being painted.</param></member><member name="M:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.DrawLineNumberMarginDisplayLine(System.Windows.Forms.PaintEventArgs,System.Drawing.Rectangle,ActiproSoftware.SyntaxEditor.EditorView,ActiproSoftware.SyntaxEditor.DocumentLine,ActiproSoftware.SyntaxEditor.DisplayLine)"><summary>
            Draws a single display line within an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> line number margin.
            </summary><param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param><param name="bounds">The bounds in which to draw.</param><param name="view">The <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> being painted.</param><param name="documentLine">The <see cref="T:ActiproSoftware.SyntaxEditor.DocumentLine" /> for the <see cref="T:ActiproSoftware.SyntaxEditor.DisplayLine" /> being painted.</param><param name="displayLine">The <see cref="T:ActiproSoftware.SyntaxEditor.DisplayLine" /> being painted.</param></member><member name="M:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.DrawScrollBarBackground(System.Windows.Forms.PaintEventArgs,System.Drawing.Rectangle,ActiproSoftware.WinUICore.ScrollBar)"><summary>
            Draws the background of a <see cref="T:ActiproSoftware.WinUICore.ScrollBar" /> control.
            </summary><param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param><param name="bounds">The bounds in which to draw.</param><param name="scrollBar">The <see cref="T:ActiproSoftware.WinUICore.ScrollBar" /> being painted.</param></member><member name="M:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.DrawScrollBarBlockBackground(System.Windows.Forms.PaintEventArgs,System.Drawing.Rectangle,ActiproSoftware.SyntaxEditor.EditorView)"><summary>
            Draws the background of the scrollbar block that appears between the horizontal and vertical scrollbars.
            </summary><param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param><param name="bounds">The bounds in which to draw.</param><param name="view">The <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> being painted.</param></member><member name="M:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.DrawScrollBarButton(System.Windows.Forms.PaintEventArgs,System.Drawing.Rectangle,ActiproSoftware.WinUICore.ScrollBarButton)"><summary>
            Draws a <see cref="T:ActiproSoftware.WinUICore.ScrollBarButton" />.
            </summary><param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param><param name="bounds">The bounds in which to draw.</param><param name="button">The <see cref="T:ActiproSoftware.WinUICore.ScrollBarButton" /> that is being painted.</param></member><member name="M:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.DrawScrollBarThumb(System.Windows.Forms.PaintEventArgs,System.Drawing.Rectangle,ActiproSoftware.WinUICore.ScrollBarThumb)"><summary>
            Draws a <see cref="T:ActiproSoftware.WinUICore.ScrollBarThumb" />.
            </summary><param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param><param name="bounds">The bounds in which to draw.</param><param name="thumb">The <see cref="T:ActiproSoftware.WinUICore.ScrollBarThumb" /> that is being painted.</param></member><member name="M:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.DrawSelectionMarginBackground(System.Windows.Forms.PaintEventArgs,System.Drawing.Rectangle,ActiproSoftware.SyntaxEditor.EditorView)"><summary>
            Draws the background of an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> selection margin.
            </summary><param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param><param name="bounds">The bounds in which to draw.</param><param name="view">The <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> being painted.</param></member><member name="M:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.DrawSelectionMarginDisplayLine(System.Windows.Forms.PaintEventArgs,System.Drawing.Rectangle,ActiproSoftware.SyntaxEditor.EditorView,ActiproSoftware.SyntaxEditor.DocumentLine,ActiproSoftware.SyntaxEditor.DisplayLine)"><summary>
            Draws a single display line within an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> selection margin.
            </summary><param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param><param name="bounds">The bounds in which to draw.</param><param name="view">The <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> being painted.</param><param name="documentLine">The <see cref="T:ActiproSoftware.SyntaxEditor.DocumentLine" /> for the <see cref="T:ActiproSoftware.SyntaxEditor.DisplayLine" /> being painted.</param><param name="displayLine">The <see cref="T:ActiproSoftware.SyntaxEditor.DisplayLine" /> being painted.</param></member><member name="M:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.DrawTextAreaBackground(System.Windows.Forms.PaintEventArgs,System.Drawing.Rectangle,ActiproSoftware.SyntaxEditor.EditorView)"><summary>
            Draws the background of an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> text area.
            </summary><param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param><param name="bounds">The bounds in which to draw.</param><param name="view">The <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> being painted.</param></member><member name="M:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.DrawUserMarginBackground(System.Windows.Forms.PaintEventArgs,System.Drawing.Rectangle,ActiproSoftware.SyntaxEditor.EditorView)"><summary>
            Draws the background of an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> user margin.
            </summary><param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param><param name="bounds">The bounds in which to draw.</param><param name="view">The <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> being painted.</param></member><member name="M:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.DrawUserMarginDisplayLine(ActiproSoftware.SyntaxEditor.UserMarginPaintEventArgs,System.Drawing.Rectangle,ActiproSoftware.SyntaxEditor.EditorView,ActiproSoftware.SyntaxEditor.DocumentLine,ActiproSoftware.SyntaxEditor.DisplayLine)"><summary>
            Draws a single display line within an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> user margin.
            </summary><param name="e">A <see cref="T:ActiproSoftware.SyntaxEditor.UserMarginPaintEventArgs" /> that contains the event data.</param><param name="bounds">The bounds in which to draw.</param><param name="view">The <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> being painted.</param><param name="documentLine">The <see cref="T:ActiproSoftware.SyntaxEditor.DocumentLine" /> for the <see cref="T:ActiproSoftware.SyntaxEditor.DisplayLine" /> being painted.</param><param name="displayLine">The <see cref="T:ActiproSoftware.SyntaxEditor.DisplayLine" /> being painted.</param></member><member name="M:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.DrawWordWrapMarginBackground(System.Windows.Forms.PaintEventArgs,System.Drawing.Rectangle,ActiproSoftware.SyntaxEditor.EditorView)"><summary>
            Draws the background of an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> word wrap margin.
            </summary><param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param><param name="bounds">The bounds in which to draw.</param><param name="view">The <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> being painted.</param></member><member name="M:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.DrawSplitter(System.Windows.Forms.PaintEventArgs,System.Drawing.Rectangle,ActiproSoftware.SyntaxEditor.SyntaxEditor,System.Windows.Forms.Orientation)"><summary>
            Draws a <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor" /> splitter that appears between two views.
            </summary><param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param><param name="bounds">The bounds in which to draw.</param><param name="syntaxEditor">The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor" /> being painted.</param><param name="orientation">The <see cref="T:System.Windows.Forms.Orientation" /> of the splitter.</param></member><member name="M:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.ResetIndicatorMarginBackgroundFill"><summary>
            Resets the <see cref="P:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.IndicatorMarginBackgroundFill" /> property to its default value.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.ShouldSerializeIndicatorMarginBackgroundFill"><summary>
            Indicates whether the <see cref="P:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.IndicatorMarginBackgroundFill" /> property should be persisted.
            </summary><returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.ResetIndicatorMarginBorderColor"><summary>
            Resets the <see cref="P:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.IndicatorMarginBorderColor" /> property to its default value.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.ShouldSerializeIndicatorMarginBorderColor"><summary>
            Indicates whether the <see cref="P:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.IndicatorMarginBorderColor" /> property should be persisted.
            </summary><returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.ResetIndicatorMarginBorderDashStyle"><summary>
            Resets the <see cref="P:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.IndicatorMarginBorderDashStyle" /> property to its default value.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.ShouldSerializeIndicatorMarginBorderDashStyle"><summary>
            Indicates whether the <see cref="P:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.IndicatorMarginBorderDashStyle" /> property should be persisted.
            </summary><returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.ResetLineNumberMarginBackgroundFill"><summary>
            Resets the <see cref="P:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.LineNumberMarginBackgroundFill" /> property to its default value.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.ShouldSerializeLineNumberMarginBackgroundFill"><summary>
            Indicates whether the <see cref="P:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.LineNumberMarginBackgroundFill" /> property should be persisted.
            </summary><returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.ResetLineNumberMarginBorderColor"><summary>
            Resets the <see cref="P:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.LineNumberMarginBorderColor" /> property to its default value.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.ShouldSerializeLineNumberMarginBorderColor"><summary>
            Indicates whether the <see cref="P:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.LineNumberMarginBorderColor" /> property should be persisted.
            </summary><returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.ResetLineNumberMarginBorderDashStyle"><summary>
            Resets the <see cref="P:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.LineNumberMarginBorderDashStyle" /> property to its default value.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.ShouldSerializeLineNumberMarginBorderDashStyle"><summary>
            Indicates whether the <see cref="P:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.LineNumberMarginBorderDashStyle" /> property should be persisted.
            </summary><returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.ResetLineNumberMarginDisabledBackgroundFill"><summary>
            Resets the <see cref="P:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.LineNumberMarginDisabledBackgroundFill" /> property to its default value.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.ShouldSerializeLineNumberMarginDisabledBackgroundFill"><summary>
            Indicates whether the <see cref="P:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.LineNumberMarginDisabledBackgroundFill" /> property should be persisted.
            </summary><returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.ResetLineNumberMarginForeColor"><summary>
            Resets the <see cref="P:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.LineNumberMarginForeColor" /> property to its default value.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.ShouldSerializeLineNumberMarginForeColor"><summary>
            Indicates whether the <see cref="P:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.LineNumberMarginForeColor" /> property should be persisted.
            </summary><returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.ResetLineNumberMarginTextAlignment"><summary>
            Resets the <see cref="P:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.LineNumberMarginTextAlignment" /> property to its default value.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.ShouldSerializeLineNumberMarginTextAlignment"><summary>
            Indicates whether the <see cref="P:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.LineNumberMarginTextAlignment" /> property should be persisted.
            </summary><returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.MeasureLineNumberMarginWidth(System.Drawing.Graphics,ActiproSoftware.SyntaxEditor.SyntaxEditor)"><summary>
            Measures the width of the line number margin.
            </summary><param name="g">The <c>Graphics</c> object used to measure.</param><param name="syntaxEditor">The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor" /> that contains the line number margin.</param><returns>The measured width of the line number margin.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.ResetAll(System.Boolean)"><summary>
            Resets all property values to their defaults.
            </summary><param name="force">Whether to force resetting.</param></member><member name="M:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.ResetScrollBarBlockBackgroundFill"><summary>
            Resets the <see cref="P:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.ScrollBarBlockBackgroundFill" /> property to its default value.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.ShouldSerializeScrollBarBlockBackgroundFill"><summary>
            Indicates whether the <see cref="P:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.ScrollBarBlockBackgroundFill" /> property should be persisted.
            </summary><returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.ResetSelectionMarginBackgroundFill"><summary>
            Resets the <see cref="P:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.SelectionMarginBackgroundFill" /> property to its default value.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.ShouldSerializeSelectionMarginBackgroundFill"><summary>
            Indicates whether the <see cref="P:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.SelectionMarginBackgroundFill" /> property should be persisted.
            </summary><returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.ResetSelectionMarginBorderColor"><summary>
            Resets the <see cref="P:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.SelectionMarginBorderColor" /> property to its default value.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.ShouldSerializeSelectionMarginBorderColor"><summary>
            Indicates whether the <see cref="P:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.SelectionMarginBorderColor" /> property should be persisted.
            </summary><returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.ResetSelectionMarginBorderDashStyle"><summary>
            Resets the <see cref="P:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.SelectionMarginBorderDashStyle" /> property to its default value.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.ShouldSerializeSelectionMarginBorderDashStyle"><summary>
            Indicates whether the <see cref="P:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.SelectionMarginBorderDashStyle" /> property should be persisted.
            </summary><returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.ResetSelectionMarginDisabledBackgroundFill"><summary>
            Resets the <see cref="P:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.SelectionMarginDisabledBackgroundFill" /> property to its default value.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.ShouldSerializeSelectionMarginDisabledBackgroundFill"><summary>
            Indicates whether the <see cref="P:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.SelectionMarginDisabledBackgroundFill" /> property should be persisted.
            </summary><returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.ResetSplitterBackgroundFill"><summary>
            Resets the <see cref="P:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.SplitterBackgroundFill" /> property to its default value.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.ShouldSerializeSplitterBackgroundFill"><summary>
            Indicates whether the <see cref="P:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.SplitterBackgroundFill" /> property should be persisted.
            </summary><returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.ResetTextAreaBackgroundFill"><summary>
            Resets the <see cref="P:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.TextAreaBackgroundFill" /> property to its default value.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.ShouldSerializeTextAreaBackgroundFill"><summary>
            Indicates whether the <see cref="P:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.TextAreaBackgroundFill" /> property should be persisted.
            </summary><returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.ResetTextAreaDisabledBackgroundFill"><summary>
            Resets the <see cref="P:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.TextAreaDisabledBackgroundFill" /> property to its default value.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.ShouldSerializeTextAreaDisabledBackgroundFill"><summary>
            Indicates whether the <see cref="P:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.TextAreaDisabledBackgroundFill" /> property should be persisted.
            </summary><returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.ResetUserMarginBackgroundFill"><summary>
            Resets the <see cref="P:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.UserMarginBackgroundFill" /> property to its default value.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.ShouldSerializeUserMarginBackgroundFill"><summary>
            Indicates whether the <see cref="P:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.UserMarginBackgroundFill" /> property should be persisted.
            </summary><returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.ResetUserMarginBorderColor"><summary>
            Resets the <see cref="P:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.UserMarginBorderColor" /> property to its default value.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.ShouldSerializeUserMarginBorderColor"><summary>
            Indicates whether the <see cref="P:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.UserMarginBorderColor" /> property should be persisted.
            </summary><returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.#ctor"><summary>
            Creates an instance of the <c>VisualStudio2005SyntaxEditorRenderer</c> class.
            </summary></member><member name="P:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.Border"><summary>
            Gets or sets the <see cref="P:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.Border" /> for the views in the document.
            </summary><value>The <see cref="P:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.Border" /> for the views in the document.</value></member><member name="P:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.EditorViewBorderWidth"><summary>
            Gets the width of the <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> border.
            </summary><value>The width of the <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> border.</value></member><member name="P:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.IndicatorMarginBackgroundFill"><summary>
            Gets or sets the <see cref="T:ActiproSoftware.Drawing.BackgroundFill" /> for the indicator margin.
            </summary><value>The <see cref="T:ActiproSoftware.Drawing.BackgroundFill" /> for the indicator margin.</value></member><member name="P:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.IndicatorMarginBorderColor"><summary>
            Gets or sets the <see cref="T:System.Drawing.Color" /> to use when drawing the border of the indicator margin.
            </summary><value>The <see cref="T:System.Drawing.Color" /> to use when drawing the border of the indicator margin.</value></member><member name="P:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.IndicatorMarginBorderDashStyle"><summary>
            Gets or sets the <see cref="T:System.Drawing.Drawing2D.DashStyle" /> to use when drawing the border of the indicator margin.
            </summary><value>The <see cref="T:System.Drawing.Drawing2D.DashStyle" /> to use when drawing the border of the indicator margin.</value></member><member name="P:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.LineNumberMarginBackgroundFill"><summary>
            Gets or sets the <see cref="T:ActiproSoftware.Drawing.BackgroundFill" /> for the line number margin.
            </summary><value>The <see cref="T:ActiproSoftware.Drawing.BackgroundFill" /> for the line number margin.</value></member><member name="P:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.LineNumberMarginBorderColor"><summary>
            Gets or sets the <see cref="T:System.Drawing.Color" /> to use when drawing the border of the line number margin.
            </summary><value>The <see cref="T:System.Drawing.Color" /> to use when drawing the border of the line number margin.</value></member><member name="P:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.LineNumberMarginBorderDashStyle"><summary>
            Gets or sets the <see cref="T:System.Drawing.Drawing2D.DashStyle" /> to use when drawing the border of the line number margin.
            </summary><value>The <see cref="T:System.Drawing.Drawing2D.DashStyle" /> to use when drawing the border of the line number margin.</value></member><member name="P:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.LineNumberMarginDisabledBackgroundFill"><summary>
            Gets or sets the <see cref="T:ActiproSoftware.Drawing.BackgroundFill" /> for the line number margin when the control is disabled..
            </summary><value>The <see cref="T:ActiproSoftware.Drawing.BackgroundFill" /> for the line number margin when the control is disabled..</value></member><member name="P:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.LineNumberMarginForeColor"><summary>
            Gets or sets the <see cref="T:System.Drawing.Color" /> to use when drawing text in the line number margin.
            </summary><value>The <see cref="T:System.Drawing.Color" /> to use when drawing text in the line number margin.</value></member><member name="P:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.LineNumberMarginTextAlignment"><summary>
            Gets or sets the alignment of text in the line number margin.
            </summary><value>
            A <see cref="T:System.Drawing.StringAlignment" /> indicating the alignment of text in the line number margin.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.ScrollBarBlockBackgroundFill"><summary>
            Gets or sets the <see cref="T:ActiproSoftware.Drawing.BackgroundFill" /> for the scrollbar block.
            </summary><value>The <see cref="T:ActiproSoftware.Drawing.BackgroundFill" /> for the scrollbar block.</value></member><member name="P:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.SelectionMarginBackgroundFill"><summary>
            Gets or sets the <see cref="T:ActiproSoftware.Drawing.BackgroundFill" /> for the selection margin.
            </summary><value>The <see cref="T:ActiproSoftware.Drawing.BackgroundFill" /> for the selection margin.</value></member><member name="P:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.SelectionMarginBorderColor"><summary>
            Gets or sets the <see cref="T:System.Drawing.Color" /> to use when drawing the border of the selection margin.
            </summary><value>The <see cref="T:System.Drawing.Color" /> to use when drawing the border of the selection margin.</value></member><member name="P:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.SelectionMarginBorderDashStyle"><summary>
            Gets or sets the <see cref="T:System.Drawing.Drawing2D.DashStyle" /> to use when drawing the border of the selection margin.
            </summary><value>The <see cref="T:System.Drawing.Drawing2D.DashStyle" /> to use when drawing the border of the selection margin.</value></member><member name="P:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.SelectionMarginDisabledBackgroundFill"><summary>
            Gets or sets the <see cref="T:ActiproSoftware.Drawing.BackgroundFill" /> for the selection margin.
            </summary><value>The <see cref="T:ActiproSoftware.Drawing.BackgroundFill" /> for the selection margin.</value></member><member name="P:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.SplitterBackgroundFill"><summary>
            Gets or sets the <see cref="T:ActiproSoftware.Drawing.BackgroundFill" /> for a <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor" /> splitter that appears between two views.
            </summary><value>The <see cref="T:ActiproSoftware.Drawing.BackgroundFill" /> for a <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor" /> splitter that appears between two views.</value></member><member name="P:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.TextAreaBackColor"><summary>
            Gets the core background <see cref="T:System.Drawing.Color" /> of the text area, if a solid color is used.
            </summary><value>The core background <see cref="T:System.Drawing.Color" /> of the text area, if a solid color is used.</value></member><member name="P:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.TextAreaBackgroundFill"><summary>
            Gets or sets the <see cref="T:ActiproSoftware.Drawing.BackgroundFill" /> for the text area.
            </summary><value>The <see cref="T:ActiproSoftware.Drawing.BackgroundFill" /> for the text area.</value></member><member name="P:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.TextAreaDisabledBackgroundFill"><summary>
            Gets or sets the <see cref="T:ActiproSoftware.Drawing.BackgroundFill" /> for the text area when the control is disabled.
            </summary><value>The <see cref="T:ActiproSoftware.Drawing.BackgroundFill" /> for the text area when the control is disabled.</value></member><member name="P:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.UserMarginBackgroundFill"><summary>
            Gets or sets the <see cref="T:ActiproSoftware.Drawing.BackgroundFill" /> for the user margin.
            </summary><value>The <see cref="T:ActiproSoftware.Drawing.BackgroundFill" /> for the user margin.</value></member><member name="P:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.UserMarginBorderColor"><summary>
            Gets or sets the <see cref="T:System.Drawing.Color" /> to use when drawing the border of the user margin.
            </summary><value>The <see cref="T:System.Drawing.Color" /> to use when drawing the border of the user margin.</value></member><member name="P:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.UserMarginBorderDashStyle"><summary>
            Gets or sets the <see cref="T:System.Drawing.Drawing2D.DashStyle" /> to use when drawing the border of the user margin.
            </summary><value>The <see cref="T:System.Drawing.Drawing2D.DashStyle" /> to use when drawing the border of the user margin.</value></member><member name="P:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.UserMarginDisabledBackgroundFill"><summary>
            Gets or sets the <see cref="T:ActiproSoftware.Drawing.BackgroundFill" /> for the user margin when the control is disabled.
            </summary><value>The <see cref="T:ActiproSoftware.Drawing.BackgroundFill" /> for the user margin when the control is disabled.</value></member><member name="P:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.UserMarginForeColor"><summary>
            Gets or sets the <see cref="T:System.Drawing.Color" /> to use when drawing text in the user margin.
            </summary><value>The <see cref="T:System.Drawing.Color" /> to use when drawing text in the user margin.</value></member><member name="P:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.UserMarginTextAlignment"><summary>
            Gets or sets the alignment of text in the user margin.
            </summary><value>
            A <see cref="T:System.Drawing.StringAlignment" /> indicating the alignment of text in the user margin.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.WordWrapMarginBackgroundFill"><summary>
            Gets or sets the <see cref="T:ActiproSoftware.Drawing.BackgroundFill" /> for the word wrap margin.
            </summary><value>The <see cref="T:ActiproSoftware.Drawing.BackgroundFill" /> for the word wrap margin.</value></member><member name="P:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.WordWrapMarginBorderColor"><summary>
            Gets or sets the <see cref="T:System.Drawing.Color" /> to use when drawing the border of the word wrap margin.
            </summary><value>The <see cref="T:System.Drawing.Color" /> to use when drawing the border of the word wrap margin.</value></member><member name="P:ActiproSoftware.SyntaxEditor.VisualStudio2005SyntaxEditorRenderer.WordWrapMarginBorderDashStyle"><summary>
            Gets or sets the <see cref="T:System.Drawing.Drawing2D.DashStyle" /> to use when drawing the border of the word wrap margin.
            </summary><value>The <see cref="T:System.Drawing.Drawing2D.DashStyle" /> to use when drawing the border of the word wrap margin.</value></member><member name="T:ActiproSoftware.SyntaxEditor.DisplayLineCollection"><summary>
            Encapsulates a collection of <see cref="T:ActiproSoftware.SyntaxEditor.DisplayLine" /> objects.
            </summary><seealso cref="T:ActiproSoftware.SyntaxEditor.DisplayLine" /></member><member name="M:ActiproSoftware.SyntaxEditor.DisplayLineCollection.IndexOf(System.Int32)"><summary>
            Finds the index of the <see cref="T:ActiproSoftware.SyntaxEditor.DisplayLine" /> that contains the specified offset.
            </summary><param name="offset">The offset to look for.</param><returns>The index of the <see cref="T:ActiproSoftware.SyntaxEditor.DisplayLine" /> that contains the specified offset.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.DisplayLineCollection.IsVirtualLine(System.Int32)"><summary>
            Returns whether the <see cref="T:ActiproSoftware.SyntaxEditor.DisplayLine" /> at the specified index is a virtual line.
            </summary><param name="index">The index of the <see cref="T:ActiproSoftware.SyntaxEditor.DisplayLine" /> to examine.</param><returns><c>true</c> if the <see cref="T:ActiproSoftware.SyntaxEditor.DisplayLine" /> at the specified index is a virtual line; otherwise, <c>false</c>.
            </returns></member><member name="P:ActiproSoftware.SyntaxEditor.DisplayLineCollection.Count"><summary>
            Gets the number of lines in the <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" />.
            </summary><value>The number of lines in the <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" />.</value></member><member name="P:ActiproSoftware.SyntaxEditor.DisplayLineCollection.Item(System.Int32)"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.DisplayLine" /> at the specified index. 
            <para>
            [C#] In C#, this property is the indexer for the <c>DisplayLineCollection</c> class. 
            </para></summary><param name="index">The index of the <see cref="T:ActiproSoftware.SyntaxEditor.DisplayLine" /> to return.</param><value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.DisplayLine" /> at the specified index. 
            </value></member><member name="T:ActiproSoftware.SyntaxEditor.EditorView"><summary>
            Controls the user interface for a view in a <see cref="P:ActiproSoftware.SyntaxEditor.EditorView.SyntaxEditor" /> control.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.TabifySelectedLines"><summary>
            Converts spaces at the beginning of the selected display lines to tabs.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.ToggleCharacterCasing"><summary>
            Toggles, or inverts, the character casing of the selected text.
            </summary><remarks>
            If no text is currently selected, only the character after the caret is changed.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.TransposeCharacters"><summary>
            Transposes the characters before and after the caret.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.TransposeLines"><summary>
            Transposes the current display line with the next display line.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.TransposeWords"><summary>
            Transposes the current word with the next word.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.TrimTrailingWhitespace"><summary>
            Trims the trailing whitespace off all the lines in the selected text, or the current document line if no text is selected.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.UncommentLines"><summary>
            Uncomments the currently selected lines, using the line comment delimiter specified by the current <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" />.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.UncommentLines(System.String)"><summary>
            Uncomments the currently selected lines, using the specified comment delimiter.
            </summary><param name="commentText">The string to look for when uncommenting each line.</param><remarks>In C# to uncomment several lines, <c>//</c> would be passed as a parameter.</remarks></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.UntabifySelectedLines"><summary>
            Converts tabs at the beginning of the selected display lines to spaces.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.Dispose(System.Boolean)"><summary>
            Releases the unmanaged resources used by the object and optionally releases the managed resources.
            </summary><param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources. 
            </param><remarks>
            This method is called by the public <c>Dispose</c> method and the <c>Finalize</c> method. 
            <c>Dispose</c> invokes this method with the <paramref name="disposing" /> parameter set to <c>true</c>. 
            <c>Finalize</c> invokes this method with <paramref name="disposing" /> set to <c>false</c>.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.DuplicateLine"><summary>
            Duplicates the current display line.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.EnsureVisible(System.Int32,System.Boolean)"><summary>
            Ensures that the specified offset is visible.
            </summary><param name="offset">The offset to ensure is visible.</param><param name="expandOutlining">Whether to force any collapsed container outlining nodes to expand.</param></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.FindCurrentWordEnd"><summary>
            Returns the <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> offset of the word end character that occurs at or after the caret.
            </summary><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> offset of the word end character that occurs at or after the caret.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.FindCurrentWordStart"><summary>
            Returns the <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> offset of the word start character that occurs at or before the caret.
            </summary><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> offset of the word start character that occurs at or before the caret.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.FindNextLineIndicator(System.String)"><summary>
            Finds the next instance of a specified indicator from the current position, using a line-by-line search.
            </summary><param name="name">The name of the indicator to look for.</param><returns>The indicator that appears on the next line, <see langword="null" /> if none.</returns><remarks>This method should be used when searching for indicators that inherit from <see cref="T:ActiproSoftware.SyntaxEditor.LineIndicator" />.</remarks></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.FindNextSpanIndicator(ActiproSoftware.SyntaxEditor.SpanIndicatorLayer,System.String)"><summary>
            Finds the next instance of a specified indicator from the current position, using a complex positional search.
            </summary><param name="layer">The <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicatorLayer" /> in which to search.</param><param name="name">The name of the indicator to look for.</param><returns>The next <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicator" /> that matches the criteria.</returns><remarks>This method should be used when searching for indicators that inherit from <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicator" />.</remarks></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.FindNextWordStart"><summary>
            Returns the <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> offset of the word start character that occurs after the caret.
            </summary><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> offset of the word start character that occurs after the caret.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.FindPreviousLineIndicator(System.String)"><summary>
            Finds the previous instance of a specified indicator from the current position, using a line-by-line search.
            </summary><param name="name">The name of the indicator to look for.</param><returns>The indicator that appears on the next line, <see langword="null" /> if none</returns><remarks>This method should be used when searching for indicators that inherit from <see cref="T:ActiproSoftware.SyntaxEditor.LineIndicator" />.</remarks></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.FindPreviousSpanIndicator(ActiproSoftware.SyntaxEditor.SpanIndicatorLayer,System.String)"><summary>
            Finds the previous instance of a specified indicator from the current position, using a complex positional search.
            </summary><param name="layer">The <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicatorLayer" /> in which to search.</param><param name="name">The name of the indicator to look for.</param><returns>The previous <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicator" /> that matches the criteria.</returns><remarks>This method should be used when searching for indicators that inherit from <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicator" />.</remarks></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.FindPreviousWordStart"><summary>
            Returns the <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> offset of the word start character that occurs before the caret.
            </summary><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> offset of the word start character that occurs before the caret.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.Focus"><summary>
            Ensures that the view is the active view.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.GetCharacterBounds(System.Int32)"><summary>
            Returns the visible character bounds for the specified offset.
            </summary><param name="offset">The offset whose bounds need to be retrieved.</param><returns>A <c>Rectangle</c> containing the visible bounds for the specified offset.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.GetCharacterBounds(ActiproSoftware.SyntaxEditor.EditPosition)"><summary>
            Returns the visible character bounds for the specified <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" />.
            </summary><param name="position">The <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" /> whose bounds need to be retrieved.</param><returns>A <c>Rectangle</c> containing the visible character bounds for the specified <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" />.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.GetCharacterColumn(System.Int32)"><summary>
            Returns the column index within the view for the specified offset.
            </summary><param name="offset">The offset whose column index is being requested.</param><returns>The column index within the view for the specified offset.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.GetCharacterColumn(ActiproSoftware.SyntaxEditor.EditPosition)"><summary>
            Returns the column index within the view for the specified <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" />.
            </summary><param name="editPosition">The <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" /> whose column index is being requested.</param><returns>The column index within the view for the specified <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" />.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.GetCurrentLanguageForContext"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> that should be used for contextual operations.
            </summary><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> that should be used for contextual operations.</returns><remarks>
            This method's return value will return the <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> of the previous <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />,
            unless the current <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> is a language start, in which case it will return the
            <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> of the current <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.GetCurrentToken"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that encompasses the current caret offset.
            </summary><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that encompasses the current caret offset.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.GetCurrentWordText"><summary>
            Gets the text of the current word.
            </summary><returns>The text of the current word.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.GetCurrentWordTextRange"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> for the current word.
            </summary><returns>A <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> containing the offset range for the current word.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.GetCursor(System.Drawing.Point)"><summary>
            Gets the <see cref="T:System.Windows.Forms.Cursor" /> that should be used when the mouse is over the element at the specified <see cref="T:System.Drawing.Point" />.
            </summary><param name="point">The <see cref="T:System.Drawing.Point" /> to examine.</param><returns>The <see cref="T:System.Windows.Forms.Cursor" /> that should be used when the mouse is over the element at the specified <see cref="T:System.Drawing.Point" />.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.GetDisplayLineBounds(System.Int32)"><summary>
            Gets the user margin bounds for the specified display line.
            </summary><param name="displayLineIndex"></param><returns>The user margin bounds for the specified display line.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.GetDisplayLineIndexFromYLocation(System.Int32,ActiproSoftware.SyntaxEditor.LocationToPositionAlgorithm)"><summary>
            Gets the display line index from the specified y-coordinate.
            </summary><param name="y">The y-coordinate to examine.</param><param name="algorithm">The <see cref="T:ActiproSoftware.SyntaxEditor.LocationToPositionAlgorithm" /> to use for calculation.</param><returns>The display line index from the specified y-coordinate.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.GetPreviousToken"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that occurs in the <see cref="T:ActiproSoftware.SyntaxEditor.TokenCollection" /> immediately before the current token.
            </summary><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that occurs in the <see cref="T:ActiproSoftware.SyntaxEditor.TokenCollection" /> immediately before the current token.</returns><remarks>
            The previous token is the token directly before the token currently containing the caret.
            If there is no previous token (i.e. the caret is in the first token in the document), <see langword="null" /> is returned.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.GetTextStatisticsForSelectedText"><summary>
            Returns the <see cref="T:ActiproSoftware.SyntaxEditor.TextStatistics" /> for the selected text in the view, which provides numerous statistics about the text
            such as word, sentence, character counts as well as readability scores.
            </summary><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.TextStatistics" /> for the selected text in the view.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.GoToLine(System.Int32)"><summary>
            Moves the caret to the specified document line.
            </summary><param name="documentLineIndex">The index of the document line to go to.</param><remarks>
            The document line will be scrolled into view but may end up appearing anywhere within the view depending on whether the view
            is currently positioned above or below the specified document line.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.GoToLine(System.Int32,System.Int32)"><summary>
            Moves the caret to the specified document line.
            </summary><param name="documentLineIndex">The index of the document line to go to.</param><param name="displayLinesAbove">The number of display lines to display above the specified line.</param><remarks>
            If the <paramref name="displayLinesAbove" /> value is <c>0</c>, the specified line will appear at the top of the view.
            If the <paramref name="displayLinesAbove" /> value is less than <c>0</c>, the specified line will be scrolled into view,
            however it may end up appearing anywhere within the view.
            If the <paramref name="displayLinesAbove" /> value is greater than <c>0</c>, the specified line will appear down from the top
            by the number of lines indicated by <paramref name="displayLinesAbove" />.  
            A <paramref name="displayLinesAbove" /> value of <c>2</c> means that the specified line will be the third display line from the top.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.GotoNextLineIndicator(System.String)"><summary>
            Goes to the next line indicator with the specified name from the current position.
            </summary><param name="name">The name of the indicator to look for.</param><remarks>This method should be used when searching for indicators that inherit from <see cref="T:ActiproSoftware.SyntaxEditor.LineIndicator" />.</remarks></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.GotoNextSpanIndicator(ActiproSoftware.SyntaxEditor.SpanIndicatorLayer,System.String)"><summary>
            Goes to the next span indicator with the specified name from the current position.
            </summary><param name="layer">The <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicatorLayer" /> in which to search.</param><param name="name">The name of the indicator to look for.</param><remarks>This method should be used when searching for indicators that inherit from <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicator" />.</remarks></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.GotoPreviousLineIndicator(System.String)"><summary>
            Goes to the previous line indicator with the specified name from the current position.
            </summary><param name="name">The name of the indicator to look for.</param></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.GotoPreviousSpanIndicator(ActiproSoftware.SyntaxEditor.SpanIndicatorLayer,System.String)"><summary>
            Goes to the previous span indicator with the specified name from the current position.
            </summary><param name="layer">The <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicatorLayer" /> in which to search.</param><param name="name">The name of the indicator to look for.</param><remarks>This method should be used when searching for indicators that inherit from <see cref="T:ActiproSoftware.SyntaxEditor.SpanIndicator" />.</remarks></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.Indent"><summary>
            Indents the currently selected lines.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.InsertFile(System.String)"><summary>
            Inserts the text contents of the specified file into the view, replacing any selected text.
            </summary><param name="path">The fully qualified path to the file that will be inserted.</param></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.InsertLineBreak"><summary>
            Inserts a line break at the current position.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.InsertSurroundingText(System.String,System.String)"><summary>
            Inserts text into the document that surrounds the currently selected text in the view, using a <c>DocumentModificationType.Typing</c> modification type.
            </summary><param name="preText">The text to insert before the current selection.</param><param name="postText">The text to insert after the current selection.</param><returns><c>true</c> if a text modification was allowed to occur; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.InsertSurroundingText(ActiproSoftware.SyntaxEditor.DocumentModificationType,System.String,System.String)"><summary>
            Inserts text into the document that surrounds the currently selected text in the view.
            </summary><param name="type">A <see cref="T:ActiproSoftware.SyntaxEditor.DocumentModificationType" /> specifying the type of modification.</param><param name="preText">The text to insert before the current selection.</param><param name="postText">The text to insert after the current selection.</param><returns><c>true</c> if a text modification was allowed to occur; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.InsertSurroundingText(ActiproSoftware.SyntaxEditor.DocumentModificationType,System.String,System.String,System.Boolean)"><summary>
            Inserts text into the document that surrounds the currently selected text in the view.
            </summary><param name="type">A <see cref="T:ActiproSoftware.SyntaxEditor.DocumentModificationType" /> specifying the type of modification.</param><param name="preText">The text to insert before the current selection.</param><param name="postText">The text to insert after the current selection.</param><param name="reselect">Whether to reselect the inner text.</param><returns><c>true</c> if a text modification was allowed to occur; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.InvalidateDisplayLine(System.Int32)"><summary>
            Invalidates the specified display line.
            </summary><param name="displayLineIndex">The index of the display line to invalidate.</param></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.InvalidateUserMargin(System.Int32)"><summary>
            Invalidates the user margin for the specified display line.
            </summary><param name="displayLineIndex">The index of the display line to invalidate, or <c>-1</c> to invalidate the entire user margin.</param></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.IsEditPositionVirtual(ActiproSoftware.SyntaxEditor.EditPosition,System.Boolean)"><summary>
            Returns whether the specified <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" /> is a virtual character.
            </summary><param name="position">The <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" /> to examine.</param><param name="flagLineTerminatorsAsVirtual">Whether to flag line terminators (such as <c>\n</c> characters or the document end) as a virtual character.</param><returns><c>true</c> if the specified <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" /> is a virtual character; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.LocationToOffset(System.Drawing.Point,ActiproSoftware.SyntaxEditor.LocationToPositionAlgorithm)"><summary>
            Returns the offset for the specified location.
            </summary><param name="location">A <c>Point</c> specifying a location in client coordinates.</param><param name="algorithm">The <see cref="T:ActiproSoftware.SyntaxEditor.LocationToPositionAlgorithm" /> to use for calculation.</param><returns>The offset for the specified location.</returns><remarks>
            If using an absolute algorithm and no valid offset is located, <c>-1</c> will be returned.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.LocationToPosition(System.Drawing.Point,ActiproSoftware.SyntaxEditor.LocationToPositionAlgorithm)"><summary>
            Returns the <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" /> for the specified location.
            </summary><param name="location">A <c>Point</c> specifying a location in client coordinates.</param><param name="algorithm">The <see cref="T:ActiproSoftware.SyntaxEditor.LocationToPositionAlgorithm" /> to use for calculation.</param><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" /> for the specified location.</returns><remarks>
            If using an absolute algorithm and no valid <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" /> is located, <c>EditPosition.Empty</c> will be returned.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.MeasureCore(System.Drawing.Graphics,System.Drawing.Size)"><summary>
            Provides the place to perform measurement logic for the element.
            </summary><param name="g">The <see cref="T:System.Drawing.Graphics" /> object to use for measurement.</param><param name="availableSize">
            The available size that parent can give to the child.
            The child can return bigger in hopes that the parent will become scrollable.
            The value may also be infinity to indicate that the desired measurements of the element are wanted.
            </param><returns><see cref="M:ActiproSoftware.SyntaxEditor.EditorView.MeasureCore(System.Drawing.Graphics,System.Drawing.Size)" /> is designed to be the main customizability point for size control of layout. 
            Element authors should override this method, call <see cref="M:ActiproSoftware.WinUICore.UIElement.Measure(System.Drawing.Graphics,System.Drawing.Size)" /> on each child element, 
            and compute their desired size based upon the measurement of the children. 
            The return value should be the desired size. 
            It is required that a parent element calls <see cref="M:ActiproSoftware.WinUICore.UIElement.Measure(System.Drawing.Graphics,System.Drawing.Size)" /> on each child or they won't be sized/arranged.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.OffsetToPosition(System.Int32)"><summary>
            Returns the <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" /> that represents the specified offset within the display lines.
            </summary><param name="offset">The offset of a character within the document.</param><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" /> that represents the specified offset within the display lines.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.OnMouseDown(System.Windows.Forms.MouseEventArgs)"><summary>
            Raises the <see cref="E:ActiproSoftware.WinUICore.UIElement.MouseDown" /> event.
            </summary><param name="e">A <c>MouseEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.OnMouseHover(System.Windows.Forms.MouseEventArgs)"><summary>
            Raises the <see cref="E:ActiproSoftware.WinUICore.UIElement.MouseHover" /> event.
            </summary><param name="e">A <c>MouseEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.OnMouseLeave(System.Windows.Forms.MouseEventArgs)"><summary>
            Raises the <c>MouseLeave</c> event.
            </summary><param name="e">A <c>MouseEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.OnMouseMove(System.Windows.Forms.MouseEventArgs)"><summary>
            Raises the <see cref="E:ActiproSoftware.WinUICore.UIElement.MouseMove" /> event.
            </summary><param name="e">A <c>MouseEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.OnMouseUp(System.Windows.Forms.MouseEventArgs)"><summary>
            Raises the <see cref="E:ActiproSoftware.WinUICore.UIElement.MouseUp" /> event.
            </summary><param name="e">A <c>MouseEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.OnRender(System.Windows.Forms.PaintEventArgs)"><summary>
            Renders the element.
            </summary><param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.OpenLineAbove"><summary>
            Inserts a new line above the current display line.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.OpenLineBelow"><summary>
            Inserts a new line below the current display line.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.Outdent"><summary>
            Outdents the currently selected lines.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.PasteFromClipboard"><summary>
            Pastes text from the clipboard into the selection.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.PasteFromClipboard(System.Windows.Forms.IDataObject)"><summary>
            Pastes text from the specified clipboard <see cref="T:System.Windows.Forms.IDataObject" /> into the selection.
            </summary><param name="clipboardData">An <see cref="T:System.Windows.Forms.IDataObject" /> containing clipboard data.</param></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.PerformAutoReplace"><summary>
            Performs an auto-replace if the selection is next to text that is in the auto-replace find table.
            </summary><returns><c>true</c> if auto-replace was performed; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.PerformInsertTyping(System.Char)"><summary>
            Simulates the typing of a character while in insert mode.
            </summary><param name="ch">The character to add to the document.</param></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.PerformOverwriteTyping(System.Char)"><summary>
            Simulates the typing of a character while in overwrite mode.
            </summary><param name="ch">The character to add to the document.</param></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.PositionToOffset(ActiproSoftware.SyntaxEditor.EditPosition)"><summary>
            Returns the offset for the specified <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" /> within the display lines.
            </summary><param name="position">The <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" /> of a character within the display lines.</param><returns>The offset for the specified <see cref="T:ActiproSoftware.SyntaxEditor.EditPosition" /> within the display lines.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.RaiseEditCommand(ActiproSoftware.SyntaxEditor.Commands.EditCommand)"><summary>
            Raises the specified <see cref="T:System.Windows.Forms.Command" />.
            </summary><param name="command">The <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommand" /> to raise.</param><returns><c>true</c> if the <see cref="T:System.Windows.Forms.Command" /> was handled; otherwise, <c>false</c>.
            </returns><remarks>
            Use this method to execute an <see cref="T:ActiproSoftware.SyntaxEditor.Commands.EditCommand" />.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.ReplaceSelectedText(ActiproSoftware.SyntaxEditor.DocumentModificationType,System.String)"><summary>
            Performs a replace modification by overwriting the view's selected text.
            </summary><param name="type">A <see cref="T:ActiproSoftware.SyntaxEditor.DocumentModificationType" /> specifying the type of modification.</param><param name="text">The text to insert.</param><returns><c>true</c> if a text modification was allowed to occur; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.ReplaceSelectedText(ActiproSoftware.SyntaxEditor.DocumentModificationType,System.String,ActiproSoftware.SyntaxEditor.DocumentModificationOptions)"><summary>
            Performs a replace modification by overwriting the view's selected text.
            </summary><param name="type">A <see cref="T:ActiproSoftware.SyntaxEditor.DocumentModificationType" /> specifying the type of modification.</param><param name="text">The text to insert.</param><param name="options">The <see cref="T:ActiproSoftware.SyntaxEditor.DocumentModificationOptions" /> for the modification.</param><returns><c>true</c> if a text modification was allowed to occur; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.ScrollDown"><summary>
            Scrolls down a line.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.ScrollLeft"><summary>
            Scrolls left a column.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.ScrollLineToVisibleBottom"><summary>
            Scrolls the current display line to the bottom of the view.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.ScrollLineToVisibleMiddle"><summary>
            Scrolls the current display line to the middle of the view.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.ScrollLineToVisibleTop"><summary>
            Scrolls the current display line to the top of the view.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.ScrollPageDown"><summary>
            Scrolls down a page.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.ScrollPageUp"><summary>
            Scrolls up a page.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.ScrollRight"><summary>
            Scrolls right a column.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.ScrollToCaret"><summary>
            Scroll the view to the caret position.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.ScrollToDocumentEnd"><summary>
            Scrolls to the end of the document.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.ScrollToDocumentStart"><summary>
            Scrolls to the start of the document.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.ScrollUp"><summary>
            Scrolls up a line.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.ArrangeCore"><summary>
            Provides the place to perform arrange logic for the element.
            </summary><remarks>
            Element authors should override this method, call <see cref="M:ActiproSoftware.WinUICore.UIElement.Arrange(System.Drawing.Rectangle)" /> on each visible child element and position each child element.
            It is required that a parent element calls <see cref="M:ActiproSoftware.WinUICore.UIElement.Arrange(System.Drawing.Rectangle)" /> on each child or they won't be rendered.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.Backspace"><summary>
            Deletes the currently selected text if text is selected; otherwise, deletes the previous character.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.BackspaceToPreviousWord"><summary>
            Backspaces and deletes text to the beginning of the previous word.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.ChangeCharacterCasing(System.Windows.Forms.CharacterCasing)"><summary>
            Changes the character casing of the selected text in the <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" />.
            </summary><param name="casing">A <see cref="T:System.Windows.Forms.CharacterCasing" /> indicating the character case to change to.</param><remarks>
            If no text is currently selected in the <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" />, only the character after the <see cref="T:ActiproSoftware.SyntaxEditor.Caret" /> is changed.
            A <paramref name="casing" /> value of <c>CharacterCasing.Normal</c> will capitalize the first letter of each word.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.CommentLines"><summary>
            Comments the currently selected lines, using the line comment delimiter specified by the current <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" />.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.CommentLines(System.String)"><summary>
            Comments the currently selected lines, using the specified comment delimiter.
            </summary><param name="commentText">The string to use when commenting each line.</param><remarks>In C# to comment several lines, <c>//</c> would be passed as a parameter.</remarks></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.ConvertSpacesToTabs"><summary>
            Converts all spaces in the selection to an equivalent number of tabs.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.ConvertTabsToSpaces"><summary>
            Converts all tabs in the selection to an equivalent number of spaces.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.CopyToClipboard"><summary>
            Copies the currently selected text to the clipboard.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.CopyAndAppendToClipboard"><summary>
            Copies the currently selected text and appends it to the existing text on the clipboard.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.CreateChildren"><summary>
            Invoked when the collection of child elements is to be created.
            </summary><returns>The <see cref="T:System.Collections.IList" /> that should be assigned to the <see cref="P:ActiproSoftware.ComponentModel.ILogicalTreeNode.Children" /> property.</returns><remarks>By default no child collection is created.</remarks></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.CreateOutliningNodeFromSelection(ActiproSoftware.SyntaxEditor.IOutliningNodeParseData)"><summary>
            Adds a new outlining node for the current selection in the <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> while in manual outlining mode.
            </summary><param name="parseData">The <see cref="T:ActiproSoftware.SyntaxEditor.IOutliningNodeParseData" /> to assigned to the node that is created.</param><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.OutliningNode" /> that was created.</returns><remarks><para>This method may only be called in manual outlining mode and will throw an exception if not.</para></remarks></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.CutLineToClipboard"><summary>
            Cuts the currently selected display line to the clipboard.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.CutToClipboard"><summary>
            Cuts the currently selected text to the clipboard.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.CutAndAppendToClipboard"><summary>
            Cuts the currently selected text and appends it to the existing text on the clipboard.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.Delete"><summary>
            Deletes the currently selected text if text is selected; otherwise, deletes the next character.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.DeleteBlankLines"><summary>
            Deletes the blank lines in the selected text, or the current display line if no text is selected and it is blank.
            </summary><remarks>
            If there is no selection and the current line is not blank, any blank display lines immediately before the current display line will be deleted.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.DeleteHorizontalWhitespace"><summary>
            Deletes the horizontal whitespace within the current selection.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.DeleteLine"><summary>
            Deletes the currently selected display line.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.DeleteSelectedText(ActiproSoftware.SyntaxEditor.DocumentModificationType)"><summary>
            Performs a delete modification by deleting the view's selected text.
            </summary><param name="type">A <see cref="T:ActiproSoftware.SyntaxEditor.DocumentModificationType" /> specifying the type of modification.</param><returns><c>true</c> if a text modification was allowed to occur; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.DeleteSelectedText(ActiproSoftware.SyntaxEditor.DocumentModificationType,ActiproSoftware.SyntaxEditor.DocumentModificationOptions)"><summary>
            Performs a delete modification by deleting the view's selected text.
            </summary><param name="type">A <see cref="T:ActiproSoftware.SyntaxEditor.DocumentModificationType" /> specifying the type of modification.</param><param name="options">The <see cref="T:ActiproSoftware.SyntaxEditor.DocumentModificationOptions" /> for the modification.</param><returns><c>true</c> if a text modification was allowed to occur; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.DeleteToLineEnd"><summary>
            Deletes the currently selected text through to the end of the current display line.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.DeleteToLineStart"><summary>
            Deletes the currently selected text through to the start of the current display line.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.EditorView.DeleteToNextWord"><summary>
            Deletes text to the beginning of the next word.
            </summary></member><member name="P:ActiproSoftware.SyntaxEditor.EditorView.BracketHighlighting"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.BracketHighlighting" /> that represents the current bracket highlighting for the view.
            </summary><value>a <see cref="T:ActiproSoftware.SyntaxEditor.BracketHighlighting" /> that represents the current bracket highlighting for the view.</value></member><member name="P:ActiproSoftware.SyntaxEditor.EditorView.CanDelete"><summary>
            Gets whether a delete operation can occur using the current selection.
            </summary><value><c>true</c> if a delete operation can occur using the current selection; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.EditorView.CanPaste"><summary>
            Gets whether there is text data available on the clipboard that can be pasted.
            </summary><value><c>true</c> if there is text data available on the clipboard that can be pasted; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.EditorView.CaptureMouseWhenPressed"><summary>
            Indicates whether to automatically capture the mouse when the element is pressed.
            </summary><value><c>true</c> if the mouse should automatically be captured when the element is pressed; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.EditorView.CurrentDisplayLine"><summary>
            Gets the current <see cref="T:ActiproSoftware.SyntaxEditor.DisplayLine" /> that the caret appears on within the <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" />.
            </summary><value>The current <see cref="T:ActiproSoftware.SyntaxEditor.DisplayLine" /> that the caret appears on within the <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" />.</value></member><member name="P:ActiproSoftware.SyntaxEditor.EditorView.CurrentDocumentLine"><summary>
            Gets the current <see cref="T:ActiproSoftware.SyntaxEditor.DocumentLine" /> that the caret appears on within the <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" />.
            </summary><value>The current <see cref="T:ActiproSoftware.SyntaxEditor.DocumentLine" /> that the caret appears on within the <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" />.</value></member><member name="P:ActiproSoftware.SyntaxEditor.EditorView.DisplayLineHeight"><summary>
            Gets the height of a display line.
            </summary><value>The height of a display line.</value></member><member name="P:ActiproSoftware.SyntaxEditor.EditorView.DisplayLines"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.DisplayLineCollection" /> that contains display line information.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.DisplayLineCollection" /> that contains display line information.</value></member><member name="P:ActiproSoftware.SyntaxEditor.EditorView.FindReplace"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.EditorViewFindReplace" /> used to perform visual find and replace operations in this view.
            </summary><value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.EditorViewFindReplace" /> used to perform visual find and replace operations in this view.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.EditorView.FirstVisibleDisplayLineIndex"><summary>
            Gets or sets the index of the first visible display line in the view.
            </summary><value>The index of the first visible display line in the view.</value></member><member name="P:ActiproSoftware.SyntaxEditor.EditorView.FirstVisibleX"><summary>
            Gets or sets the first visible x-coordinate in the view.
            </summary><value>The index of the first visible x-coordinate in the view.</value></member><member name="P:ActiproSoftware.SyntaxEditor.EditorView.HasFocus"><summary>
            Gets whether the view currently has focus.
            </summary><value><c>true</c> if the view currently has focus; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.EditorView.HorizontalScrollBarMaximum"><summary>
            Gets the resolved maximum value for the horizontal scrollbar.
            </summary><value>The resolved maximum value for the horizontal scrollbar.</value></member><member name="P:ActiproSoftware.SyntaxEditor.EditorView.HorizontalScrollbarVisible"><summary>
            Gets whether the horizontal scrollbar is currently visible.
            </summary><value><c>true</c> if the horizontal scrollbar is currently visible; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.EditorView.IndicatorMarginBounds"><summary>
            Gets the bounds of the indicator margin.
            </summary><value>A <see cref="T:System.Drawing.Rectangle" /> indicating the bounds of the indicator margin.</value></member><member name="P:ActiproSoftware.SyntaxEditor.EditorView.IsCaretVisible"><summary>
            Gets whether the caret is in the view and is visible within the <see cref="P:ActiproSoftware.SyntaxEditor.EditorView.TextAreaBounds" />.
            </summary><value><c>true</c> if the caret is in the view and is visible within the <see cref="P:ActiproSoftware.SyntaxEditor.EditorView.TextAreaBounds" />; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.EditorView.LineNumberMarginBounds"><summary>
            Gets the bounds of the line number margin.
            </summary><value>A <see cref="T:System.Drawing.Rectangle" /> indicating the bounds of the line number margin.</value></member><member name="P:ActiproSoftware.SyntaxEditor.EditorView.SelectedText"><summary>
            Gets or sets the text that is currently selected in the view.
            </summary><value>The text that is currently selected in the view.</value></member><member name="P:ActiproSoftware.SyntaxEditor.EditorView.Selection"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Selection" /> for the view.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.Selection" /> that contains selection information for the view.</value></member><member name="P:ActiproSoftware.SyntaxEditor.EditorView.SelectionMarginBounds"><summary>
            Gets the bounds of the selection margin.
            </summary><value>A <see cref="T:System.Drawing.Rectangle" /> indicating the bounds of the selection margin.</value></member><member name="P:ActiproSoftware.SyntaxEditor.EditorView.SyntaxEditor"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor" /> that contains the view.
            </summary><value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor" /> that contains the view.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.EditorView.Tag"><summary>
            Gets or sets the object that contains user-defined data about the object.
            </summary><value>
            An <see cref="T:System.Object" /> that contains user-defined data about the control. The default is <see langword="null" />.
            </value><remarks>
            Any type derived from the <see cref="T:System.Object" /> class can be assigned to this property. 
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.EditorView.TextAreaBounds"><summary>
            Gets the bounds of the text area.
            </summary><value>A <see cref="T:System.Drawing.Rectangle" /> indicating the bounds of the text area.</value></member><member name="P:ActiproSoftware.SyntaxEditor.EditorView.UserMarginBounds"><summary>
            Gets the bounds of the user margin.
            </summary><value>A <see cref="T:System.Drawing.Rectangle" /> indicating the bounds of the user margin.</value></member><member name="P:ActiproSoftware.SyntaxEditor.EditorView.VerticalScrollBarMaximum"><summary>
            Gets the resolved maximum value for the vertical scrollbar.
            </summary><value>The resolved maximum value for the vertical scrollbar.</value></member><member name="P:ActiproSoftware.SyntaxEditor.EditorView.VerticalScrollbarVisible"><summary>
            Gets whether the vertical scrollbar is currently visible.
            </summary><value><c>true</c> if the vertical scrollbar is currently visible; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.EditorView.VisibleColumnCount"><summary>
            Gets the count of visible columns in the view.
            </summary><value>The count of visible columns in the view.</value><remarks>
            This value will only be accurate if a fixed-width font is used.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.EditorView.VisibleDisplayLineCount"><summary>
            Gets the count of visible display lines in the view.
            </summary><value>The count of visible display lines in the view.</value></member><member name="P:ActiproSoftware.SyntaxEditor.EditorView.WordWrapMarginBounds"><summary>
            Gets the bounds of the word wrap margin.
            </summary><value>A <see cref="T:System.Drawing.Rectangle" /> indicating the bounds of the word wrap margin.</value></member><member name="T:ActiproSoftware.SyntaxEditor.EditorViewCollection"><summary>
            Represents a collection of <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> objects.
            </summary></member><member name="P:ActiproSoftware.SyntaxEditor.EditorViewCollection.Item(System.Int32)"><summary>
            Gets the item at the specified index. 
            <para>
            [C#] In C#, this property is the indexer for the <c>EditorViewCollection</c> class. 
            </para></summary><param name="index">The index of the item to return.</param><value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.EditorView" /> at the specified index. 
            </value></member><member name="T:ActiproSoftware.SyntaxEditor.WordWrapType"><summary>
            Specifies the type of word wrapping to perform.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.WordWrapType.None"><summary>
            Do not perform any word wrapping.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.WordWrapType.Character"><summary>
            Perform character-based word wrap.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.WordWrapType.Token"><summary>
            Perform token-based word wrap.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.WordWrapType.Word"><summary>
            Perform word-boundary-based word wrap.
            </summary></member><member name="T:ActiproSoftware.SyntaxEditor.UndoableModificationChangeType"><summary>
            Specifies the type of changes that have been made to a display line since its last save point.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.UndoableModificationChangeType.None"><summary>
            There are no changes from the original text.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.UndoableModificationChangeType.UnsavedChanges"><summary>
            There are unsaved changes made since the last save point.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.UndoableModificationChangeType.SavedChanges"><summary>
            There are saved changed made since the last save point.
            </summary></member><member name="T:ActiproSoftware.SyntaxEditor.HighlightingStyleResolver"><summary>
            Resolves final highlighting style settings from mulitiple layers of highlighting style overrides.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.HighlightingStyleResolver.ApplyBorder(System.Drawing.Color,ActiproSoftware.SyntaxEditor.HighlightingStyleLineStyle,ActiproSoftware.SyntaxEditor.HighlightingStyleBorderCornerStyle)"><summary>
            Applies a border.
            </summary><param name="color">The color of the line.</param><param name="style">The style of the line.</param><param name="cornerStyle">The style of the corners.</param></member><member name="M:ActiproSoftware.SyntaxEditor.HighlightingStyleResolver.ApplyHighlightingStyleAdornments(ActiproSoftware.SyntaxEditor.HighlightingStyle)"><summary>
            Applies the adornments of a <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyle" />.
            </summary><param name="highlightingStyle">The <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyle" /> to apply.</param></member><member name="M:ActiproSoftware.SyntaxEditor.HighlightingStyleResolver.ApplyHighlightingStyleColors(ActiproSoftware.SyntaxEditor.HighlightingStyle)"><summary>
            Applies the foreground and background colors of a <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyle" />.
            </summary><param name="highlightingStyle">The <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyle" /> to apply.</param></member><member name="M:ActiproSoftware.SyntaxEditor.HighlightingStyleResolver.ApplyHighlightingStyleFont(ActiproSoftware.SyntaxEditor.HighlightingStyle)"><summary>
            Applies the font changes of a <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyle" />.
            </summary><param name="highlightingStyle">The <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyle" /> to apply.</param></member><member name="M:ActiproSoftware.SyntaxEditor.HighlightingStyleResolver.ApplyStrikeOut(System.Drawing.Color,ActiproSoftware.SyntaxEditor.HighlightingStyleLineStyle,ActiproSoftware.SyntaxEditor.HighlightingStyleLineWeight)"><summary>
            Applies a strike-out.
            </summary><param name="color">The color of the line.</param><param name="style">The style of the line.</param><param name="weight">The weight of the line.</param></member><member name="M:ActiproSoftware.SyntaxEditor.HighlightingStyleResolver.ApplyUnderline(System.Drawing.Color,ActiproSoftware.SyntaxEditor.HighlightingStyleLineStyle,ActiproSoftware.SyntaxEditor.HighlightingStyleLineWeight)"><summary>
            Applies an underline.
            </summary><param name="color">The color of the line.</param><param name="style">The style of the line.</param><param name="weight">The weight of the line.</param></member><member name="M:ActiproSoftware.SyntaxEditor.HighlightingStyleResolver.SetBackColor(System.Drawing.Color)"><summary>
            Sets the background color.
            </summary><param name="value">A <c>Color</c> indicating the background color.</param></member><member name="M:ActiproSoftware.SyntaxEditor.HighlightingStyleResolver.SetBold(System.Boolean)"><summary>
            Sets whether to use an bold font style.
            </summary><param name="value"><c>true</c> if an bold font style should be used; otherwise, <c>false</c>.
            </param></member><member name="M:ActiproSoftware.SyntaxEditor.HighlightingStyleResolver.SetFontFamilyName(System.String)"><summary>
            Sets the name of the font family.
            </summary><param name="value">The name of the font family.</param></member><member name="M:ActiproSoftware.SyntaxEditor.HighlightingStyleResolver.SetFontSize(System.Single)"><summary>
            Sets the font size, in points.
            </summary><param name="value">The font size, in points.</param></member><member name="M:ActiproSoftware.SyntaxEditor.HighlightingStyleResolver.SetForeColor(System.Drawing.Color)"><summary>
            Sets the foreground color.
            </summary><param name="value">A <c>Color</c> indicating the foreground color.</param></member><member name="M:ActiproSoftware.SyntaxEditor.HighlightingStyleResolver.SetItalic(System.Boolean)"><summary>
            Sets whether to use an italic font style.
            </summary><param name="value"><c>true</c> if an italic font style should be used; otherwise, <c>false</c>.
            </param></member><member name="T:ActiproSoftware.SyntaxEditor.HighlightingStyleLineWeight"><summary>
            Specifies the weight of a <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyle" /> line, used for underlines.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.HighlightingStyleLineWeight.Single"><summary>
            Draw a single line that is a single pixel in width.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.HighlightingStyleLineWeight.Double"><summary>
            Draw two lines that each are a single pixel in width.  The lines are spaced a single pixel apart.
            </summary></member><member name="T:ActiproSoftware.SyntaxEditor.HighlightingStyleLineStyle"><summary>
            Specifies the style of a <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyle" /> line, used for borders, strikeouts, and underlines.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.HighlightingStyleLineStyle.Solid"><summary>
            Draw a solid line.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.HighlightingStyleLineStyle.DashDot"><summary>
            Draw a line with a dash-dot pattern.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.HighlightingStyleLineStyle.Dot"><summary>
            Draw a line with a dot pattern.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.HighlightingStyleLineStyle.Dash"><summary>
            Draw a line with a dash pattern.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.HighlightingStyleLineStyle.Wave"><summary>
            Draw a wave line.  If specified for a border, then a solid line will be drawn instead.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.HighlightingStyleLineStyle.None"><summary>
            Don't draw a line.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.HighlightingStyleLineStyle.Default"><summary>
            Use the default resolved settings.
            </summary></member><member name="T:ActiproSoftware.SyntaxEditor.HighlightingStyle"><summary>
            Tracks information for a highlighting style.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.HighlightingStyle.Clone"><summary>
            Creates an exact duplicate of the <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyle" /> object.
            </summary><returns>An exact duplicate of the <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyle" /> object.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.HighlightingStyle.CopyTo(ActiproSoftware.SyntaxEditor.HighlightingStyle)"><summary>
            Copies the style data from this instance to another <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyle" /> instance.
            </summary><param name="highlightingStyle">The target <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyle" />.</param><remarks>
            This method will not copy the <see cref="P:ActiproSoftware.SyntaxEditor.HighlightingStyle.Key" /> or <see cref="P:ActiproSoftware.SyntaxEditor.HighlightingStyle.Name" /> properties.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.HighlightingStyle.Dispose(System.Boolean)"><summary>
            Releases the unmanaged resources used by the object and optionally releases the managed resources.
            </summary><param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources. 
            </param><remarks>
            This method is called by the public <c>Dispose</c> method and the <c>Finalize</c> method. 
            <c>Dispose</c> invokes this method with the <paramref name="disposing" /> parameter set to <c>true</c>. 
            <c>Finalize</c> invokes this method with <paramref name="disposing" /> set to <c>false</c>.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.HighlightingStyle.Equals(System.Object)"><summary>
            Determines whether the specified <c>Object</c> is equal to the current <c>Object</c>. 
            </summary><param name="obj">The <c>Object</c> to compare to the current <c>Object</c>.</param><returns><c>true</c> if the specified <c>Object</c> is equal to the current <c>Object</c>; 
            otherwise, <c>false</c>. 
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.HighlightingStyle.GetHashCode"><summary>
            Returns a hash code for this object.
            </summary><returns>An integer value that specifies a hash value for this object.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.HighlightingStyle.#ctor(System.String,System.String,System.Drawing.Color,System.Drawing.Color)"><summary>
            Initializes the <c>HighlightingStyle</c> class. 
            </summary><param name="key">The key of the higlighting style.</param><param name="name">The display name of the higlighting style.</param><param name="foreColor">The foreground color of the highlighting style.</param><param name="backColor">The background color of the highlighting style.</param></member><member name="M:ActiproSoftware.SyntaxEditor.HighlightingStyle.#ctor(System.String,System.String,System.Drawing.Color,System.Drawing.Color,ActiproSoftware.ComponentModel.DefaultableBoolean,ActiproSoftware.ComponentModel.DefaultableBoolean,ActiproSoftware.SyntaxEditor.HighlightingStyleLineStyle)"><summary>
            Initializes the <c>HighlightingStyle</c> class. 
            </summary><param name="key">The key of the higlighting style.</param><param name="name">The display name of the higlighting style.</param><param name="foreColor">The foreground color of the highlighting style.</param><param name="backColor">The background color of the highlighting style.</param><param name="bold">A <see cref="T:ActiproSoftware.ComponentModel.DefaultableBoolean" /> indicating whether the highlighting style uses boldface.</param><param name="italic">A <see cref="T:ActiproSoftware.ComponentModel.DefaultableBoolean" /> indicating whether the highlighting style uses italics.</param><param name="underlineStyle">A <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyleLineStyle" /> indicating the underline style.</param></member><member name="P:ActiproSoftware.SyntaxEditor.HighlightingStyle.BackColor"><summary>
            Gets or sets the background color of the highlighting style.
            </summary><value>
            A <c>Color</c> indicating the background color of the highlighting style.  
            Specify <c>Color.Empty</c> to use a default color, which is the default property value.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.HighlightingStyle.Bold"><summary>
            Gets or sets a <see cref="T:ActiproSoftware.ComponentModel.DefaultableBoolean" /> indicating whether the highlighting style uses boldface.
            </summary><value>
            A <see cref="T:ActiproSoftware.ComponentModel.DefaultableBoolean" /> indicating whether the highlighting style uses boldface.
            Specify <c>DefaultableBoolean.Default</c> to use a default value, which is the default property value.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.HighlightingStyle.BorderColor"><summary>
            Gets or sets the border color of the highlighting style.
            </summary><value>
            A <c>Color</c> indicating the border color of the highlighting style.  
            Specify <c>Color.Empty</c> to use a default color, which is the default property value.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.HighlightingStyle.BorderCornerStyle"><summary>
            Gets or sets a <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyleBorderCornerStyle" /> indicating the style of border corners.
            </summary><value>
            A <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyleBorderCornerStyle" /> indicating the style of border corners.
            Specify <c>HighlightingStyleBorderCornerStyle.Default</c> to use a default style, which is the default property value.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.HighlightingStyle.BorderStyle"><summary>
            Gets or sets a <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyleLineStyle" /> indicating the style of border to use.
            </summary><value>
            A <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyleLineStyle" /> indicating the style of border to use.
            Specify <c>HighlightingStyleLineStyle.Default</c> to use a default style, which is the default property value.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.HighlightingStyle.Cursor"><summary>
            Gets or sets the custom <c>Cursor</c> to display when mouse is over text that uses this highlighting style.
            </summary><value>
            The custom <c>Cursor</c> to display when mouse is over text that uses this highlighting style.
            </value><remarks>
            The <see cref="P:ActiproSoftware.SyntaxEditor.HighlightingStyle.CursorName" /> property is cleared by setting this property.
            Use the <see cref="P:ActiproSoftware.SyntaxEditor.HighlightingStyle.CursorName" /> property if a built-in <c>Cursor</c> from the <c>Cursors</c> property should be set.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.HighlightingStyle.CursorModifierKeys"><summary>
            Gets or sets the <see cref="T:ActiproSoftware.WinUICore.Input.ModifierKeys" /> that allow the custom <see cref="P:ActiproSoftware.SyntaxEditor.HighlightingStyle.Cursor" /> to display when
            the mouse over text that uses this highlighting style.
            </summary><value>
            The <see cref="T:ActiproSoftware.WinUICore.Input.ModifierKeys" /> that allow the custom <see cref="P:ActiproSoftware.SyntaxEditor.HighlightingStyle.Cursor" /> to display.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.HighlightingStyle.CursorName"><summary>
            Gets or sets the name of a built-in <c>Cursor</c> from the <c>Cursors</c> class to use for the <see cref="P:ActiproSoftware.SyntaxEditor.HighlightingStyle.Cursor" /> property.
            </summary><value>
            The name of a built-in <c>Cursor</c> from the <c>Cursors</c> class to use for the <see cref="P:ActiproSoftware.SyntaxEditor.HighlightingStyle.Cursor" /> property.
            </value><remarks>
            Use this property if a built-in <c>Cursor</c> from the <c>Cursors</c> class should be assigned to the <see cref="P:ActiproSoftware.SyntaxEditor.HighlightingStyle.Cursor" /> property.
            Otherwise, the cursor name will not be serialized if the language definition is saved.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.HighlightingStyle.FontFamilyName"><summary>
            Gets or sets the name of the font family to use for drawing text with the highlighting style.
            </summary><value>
            The name of the font family to use for drawing text with the highlighting style.
            Specify <see langword="null" /> to use a default value, which is the default property value.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.HighlightingStyle.FontSize"><summary>
            Gets or sets the size of the font to use for drawing text with the highlighting style.
            </summary><value>
            The size of the font to use for drawing text with the highlighting style.
            Specify <c>0</c> to use a default value, which is the default property value.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.HighlightingStyle.ForeColor"><summary>
            Gets or sets the foreground color of the highlighting style.
            </summary><value>A <c>Color</c> indicating the foreground color of the highlighting style.</value></member><member name="P:ActiproSoftware.SyntaxEditor.HighlightingStyle.HasAdornments"><summary>
            Gets whether the highlighting style contains adornments such as a border, strike-through, or underline.
            </summary><value><c>true</c> if the highlighting style contains adornments such as a border, strike-through, or underline; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.HighlightingStyle.HasFontChange"><summary>
            Gets whether the highlighting style contains a font-related change.
            </summary><value><c>true</c> if the highlighting style contains a font-related change; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.HighlightingStyle.Italic"><summary>
            Gets or sets a <see cref="T:ActiproSoftware.ComponentModel.DefaultableBoolean" /> indicating whether the highlighting style uses italics.
            </summary><value>
            A <see cref="T:ActiproSoftware.ComponentModel.DefaultableBoolean" /> indicating whether the highlighting style uses italics.
            Specify <c>DefaultableBoolean.Default</c> to use a default value, which is the default property value.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.HighlightingStyle.Key"><summary>
            Gets a string-based key that identifies the object.
            </summary><value>A string-based key that identifies the object.</value></member><member name="P:ActiproSoftware.SyntaxEditor.HighlightingStyle.Name"><summary>
            Gets or sets the display name of the highlighting style.
            </summary><value>The display name of the highlighting style.</value><remarks>This value should be used when displaying the name of the highlighting style within an application dialog.</remarks></member><member name="P:ActiproSoftware.SyntaxEditor.HighlightingStyle.StrikeOutColor"><summary>
            Gets or sets the strike-out color of the highlighting style.
            </summary><value>
            A <c>Color</c> indicating the strike-out color of the highlighting style.  
            Specify <c>Color.Empty</c> to use a default color, which is the default property value.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.HighlightingStyle.StrikeOutStyle"><summary>
            Gets or sets a <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyleLineStyle" /> indicating the style of strike-out to use.
            </summary><value>
            A <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyleLineStyle" /> indicating the style of strike-out to use.
            Specify <c>HighlightingStyleLineStyle.Default</c> to use a default style, which is the default property value.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.HighlightingStyle.StrikeOutWeight"><summary>
            Gets or sets a <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyleLineWeight" /> indicating the strike-out line weight to use.
            </summary><value>
            A <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyleLineWeight" /> indicating the strike-out line weight to use.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.HighlightingStyle.Tag"><summary>
            Gets or sets the object that contains user-defined data about the object.
            </summary><value>
            An <see cref="T:System.Object" /> that contains user-defined data about the control. The default is <see langword="null" />.
            </value><remarks>
            Any type derived from the <see cref="T:System.Object" /> class can be assigned to this property. 
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.HighlightingStyle.UnderlineColor"><summary>
            Gets or sets the underline color of the highlighting style.
            </summary><value>
            A <c>Color</c> indicating the underline color of the highlighting style.  
            Specify <c>Color.Empty</c> to use a default color, which is the default property value.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.HighlightingStyle.UnderlineStyle"><summary>
            Gets or sets a <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyleLineStyle" /> indicating the style of underlining to use.
            </summary><value>
            A <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyleLineStyle" /> indicating the style of underlining to use.
            Specify <c>HighlightingStyleLineStyle.Default</c> to use a default style, which is the default property value.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.HighlightingStyle.UnderlineWeight"><summary>
            Gets or sets a <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyleLineWeight" /> indicating the underlining line weight to use.
            </summary><value>
            A <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyleLineWeight" /> indicating the underlining line weight to use.
            </value></member><member name="T:ActiproSoftware.SyntaxEditor.IUndoableModification"><summary>
            Provides the base requirements for an undoable modification.
            </summary></member><member name="P:ActiproSoftware.SyntaxEditor.IUndoableModification.Name"><summary>
            Gets the name describing the modification.
            </summary><value>A <c>String</c> representing the name describing the modification.</value></member><member name="P:ActiproSoftware.SyntaxEditor.IUndoableModification.Type"><summary>
            Gets an <see cref="T:ActiproSoftware.SyntaxEditor.DocumentModificationType" /> that describes why the modification is made.
            </summary><value>An <see cref="T:ActiproSoftware.SyntaxEditor.DocumentModificationType" /> that describes why the modification is made.</value></member><member name="T:ActiproSoftware.SyntaxEditor.UndoableModificationStack"><summary>
            Provides a simple last-in-first-out collection of <see cref="T:ActiproSoftware.SyntaxEditor.IUndoableModification" /> objects.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.UndoableModificationStack.CopyTo(System.Array,System.Int32)"><summary>
            Copies the entire collection to a compatible one-dimensional <c>Array</c>, 
            starting at the specified index of the target array.
            </summary><param name="array">
            The one-dimensional <c>Array</c> that is the destination of the elements copied from the collection. 
            The <c>Array</c> must have zero-based indexing. 
            </param><param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param></member><member name="M:ActiproSoftware.SyntaxEditor.UndoableModificationStack.Dispose(System.Boolean)"><summary>
            Releases the unmanaged resources used by the object and optionally releases the managed resources.
            </summary><param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources. 
            </param><remarks>
            This method is called by the public <c>Dispose</c> method and the <c>Finalize</c> method. 
            <c>Dispose</c> invokes this method with the <paramref name="disposing" /> parameter set to <c>true</c>. 
            <c>Finalize</c> invokes this method with <paramref name="disposing" /> set to <c>false</c>.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.UndoableModificationStack.GetEnumerator"><summary>
            Retrieves an <c>IEnumerator</c> object for the entire collection.
            </summary><returns>An <c>IEnumerator</c> object for the entire collection</returns><remarks>
            Enumerators are intended to be used only to read data in the collection. 
            Enumerators cannot be used to modify the underlying collection.
            <para>
            The enumerator does not have exclusive access to the collection.
            </para><para>
            When an enumerator is instantiated, it takes a snapshot of the current state of the collection. 
            If changes are made to the collection, such as adding, modifying or deleting elements, the 
            snapshot gets out of sync and the enumerator throws an <c>InvalidOperationException</c>. 
            Two enumerators instantiated from the same collection at the same time can have 
            different snapshots of the collection.
            </para></remarks></member><member name="M:ActiproSoftware.SyntaxEditor.UndoableModificationStack.GetName(System.Int32)"><summary>
            Gets the name of the specified modification on the stack.
            </summary><param name="index">The index of the modification to check.</param><returns>The name of the specified modification on the stack.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.UndoableModificationStack.OnCapacityChanged(System.EventArgs)"><summary>
            Raises the <c>CapacityChanged</c> event.
            </summary><param name="e">An <c>EventArgs</c> that contains the event data.</param></member><member name="P:ActiproSoftware.SyntaxEditor.UndoableModificationStack.Capacity"><summary>
            Gets or sets the capacity of the stack.
            </summary><value>The capacity of the stack.</value><remarks>
            If a new modification added to the stack causes the stack to exceed its capacity, the modifications
            at the bottom of the stack are removed until the stack no longer exceeds its capacity.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.UndoableModificationStack.Count"><summary>
            Gets the count of modifications on the stack.
            </summary><value>The count of modifications on the stack.</value></member><member name="P:ActiproSoftware.SyntaxEditor.UndoableModificationStack.IsSynchronized"><summary>
            Gets a value indicating whether access to the collection is synchronized (thread-safe).
            </summary><value><c>true</c> if the collection is synchronized (thread-safe); otherwise, <c>false</c>.
            </value><remarks>
            To guarantee the thread safety of the collection, all operations must be done through 
            the wrapper returned by the <see cref="P:ActiproSoftware.SyntaxEditor.UndoableModificationStack.SyncRoot" /> property.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.UndoableModificationStack.SyncRoot"><summary>
            Gets an <c>Object</c> that can be used to synchronize access to the collection.
            </summary><value>
            An <c>Object</c> that can be used to synchronize access to the collection.
            </value></member><member name="E:ActiproSoftware.SyntaxEditor.UndoableModificationStack.CapacityChanged"><summary>
            Occurs when the capacity of the stack is changed.
            </summary></member><member name="T:ActiproSoftware.SyntaxEditor.UndoRedo"><summary>
            Manages stacks of undo and redo modifications.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.UndoRedo.Clear"><summary>
            Clears the undo and redo stacks.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.UndoRedo.Dispose(System.Boolean)"><summary>
            Releases the unmanaged resources used by the object and optionally releases the managed resources.
            </summary><param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources. 
            </param><remarks>
            This method is called by the public <c>Dispose</c> method and the <c>Finalize</c> method. 
            <c>Dispose</c> invokes this method with the <paramref name="disposing" /> parameter set to <c>true</c>. 
            <c>Finalize</c> invokes this method with <paramref name="disposing" /> set to <c>false</c>.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.UndoRedo.EndGroup"><summary>
            Completes grouping and adds a group modification if applicable.
            </summary><remarks>
            Each call to <see cref="M:ActiproSoftware.SyntaxEditor.UndoRedo.StartGroup(ActiproSoftware.SyntaxEditor.DocumentModificationType)" /> must have a corresponding call to <see cref="M:ActiproSoftware.SyntaxEditor.UndoRedo.EndGroup" />.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.UndoRedo.Redo"><summary>
            Peform the top redo modification.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.UndoRedo.StartGroup(ActiproSoftware.SyntaxEditor.DocumentModificationType)"><summary>
            Enables grouping for the next modifications that are added to the stack.
            </summary><param name="groupModificationType">The <see cref="T:ActiproSoftware.SyntaxEditor.DocumentModificationType" /> of the grouping.</param><remarks>
            Each call to <see cref="M:ActiproSoftware.SyntaxEditor.UndoRedo.StartGroup(ActiproSoftware.SyntaxEditor.DocumentModificationType)" /> must have a corresponding call to <see cref="M:ActiproSoftware.SyntaxEditor.UndoRedo.EndGroup" />.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.UndoRedo.StartGroup(ActiproSoftware.SyntaxEditor.DocumentModificationType,ActiproSoftware.SyntaxEditor.TextRange)"><summary>
            Enables grouping for the next modifications that are added to the stack.
            </summary><param name="groupModificationType">The <see cref="T:ActiproSoftware.SyntaxEditor.DocumentModificationType" /> of the grouping.</param><param name="selectionRange">A <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> that specifies the range of text that was selected before the group executed.</param><remarks>
            Each call to <see cref="M:ActiproSoftware.SyntaxEditor.UndoRedo.StartGroup(ActiproSoftware.SyntaxEditor.DocumentModificationType)" /> must have a corresponding call to <see cref="M:ActiproSoftware.SyntaxEditor.UndoRedo.EndGroup" />.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.UndoRedo.Undo"><summary>
            Perform the top undo modification.
            </summary></member><member name="P:ActiproSoftware.SyntaxEditor.UndoRedo.CanRedo"><summary>
            Gets whether at least one redo modification is available to execute.
            </summary><value><c>true</c> if there is at least one redo modification is available to execute; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.UndoRedo.CanUndo"><summary>
            Gets whether at least one undo modification is available to execute.
            </summary><value><c>true</c> if there is at least one undo modification is available to execute; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.UndoRedo.RedoStack"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.UndoableModificationStack" /> containing the redo stack.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.UndoableModificationStack" /> containing the redo stack.</value></member><member name="P:ActiproSoftware.SyntaxEditor.UndoRedo.Tag"><summary>
            Gets or sets the object that contains user-defined data about the object.
            </summary><value>
            An <see cref="T:System.Object" /> that contains user-defined data about the control. The default is <see langword="null" />.
            </value><remarks>
            Any type derived from the <see cref="T:System.Object" /> class can be assigned to this property. 
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.UndoRedo.UndoStack"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.UndoableModificationStack" /> containing the undo stack.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.UndoableModificationStack" /> containing the undo stack.</value></member><member name="T:ActiproSoftware.SyntaxEditor.UndoRedoStateChangedEventArgs"><summary>
            Event arguments for <see cref="P:ActiproSoftware.SyntaxEditor.UndoRedoStateChangedEventArgs.Document" /> undo/redo state change events.
            </summary><remarks>
            This class is used with the <see cref="T:ActiproSoftware.SyntaxEditor.UndoRedoStateChangedEventHandler" /> delegate.
            </remarks><seealso cref="T:ActiproSoftware.SyntaxEditor.UndoRedoStateChangedEventHandler" /></member><member name="M:ActiproSoftware.SyntaxEditor.UndoRedoStateChangedEventArgs.#ctor(ActiproSoftware.SyntaxEditor.Document,ActiproSoftware.SyntaxEditor.IUndoableModification,ActiproSoftware.SyntaxEditor.UndoRedoStateChangeType,System.Boolean)"><summary>
            Initializes a new instance of the <c>UndoRedoStateChangedEventArgs</c> class.
            </summary><param name="document">The <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> that is affected by this event.</param><param name="modification">The <see cref="T:ActiproSoftware.SyntaxEditor.IUndoableModification" /> that is affected by this event.</param><param name="changeType">A <see cref="T:ActiproSoftware.SyntaxEditor.UndoRedoStateChangeType" /> indicating the type of change.</param><param name="enabledStatesChanged">Whether the enabled state of either the undo or redo stacks have changed.</param></member><member name="P:ActiproSoftware.SyntaxEditor.UndoRedoStateChangedEventArgs.ChangeType"><summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.UndoRedoStateChangeType" /> indicating the type of change.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.UndoRedoStateChangeType" /> indicating the type of change.</value></member><member name="P:ActiproSoftware.SyntaxEditor.UndoRedoStateChangedEventArgs.Document"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> that is affected by this event.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> that is affected by this event.</value></member><member name="P:ActiproSoftware.SyntaxEditor.UndoRedoStateChangedEventArgs.EnabledStatesChanged"><summary>
            Gets whether the enabled state of either the undo or redo stacks have changed.
            </summary><value><c>true</c> if the enabled state of either the undo or redo stacks have changed; otherwise, <c>false</c>.
            </value><remarks>
            Use this property to know when the user interface (for toolbar buttons) should have its enabled state 
            changed for undo/redo commands.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.UndoRedoStateChangedEventArgs.Modification"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.IUndoableModification" /> that is affected by this event.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.IUndoableModification" /> that is affected by this event.</value></member><member name="T:ActiproSoftware.SyntaxEditor.UndoRedoStateChangedEventHandler"><summary>
            Represents the method that will handle <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> undo/redo state change events.
            </summary><param name="sender">Sender of the event.</param><param name="e">A <see cref="T:ActiproSoftware.SyntaxEditor.UndoRedoStateChangedEventArgs" /> containing event data.</param><remarks>
            When you create a <c>UndoRedoStateChangedEventHandler</c> delegate, you identify the method that will handle the event. 
            To associate the event with your event handler, add an instance of the delegate to the event. 
            The event handler is called whenever the event occurs, unless you remove the delegate.
            </remarks><seealso cref="T:ActiproSoftware.SyntaxEditor.UndoRedoStateChangedEventArgs" /></member><member name="T:ActiproSoftware.SyntaxEditor.UndoRedoStateChangeType"><summary>
            Specifies the type of state change for the undo/redo stacks.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.UndoRedoStateChangeType.Add"><summary>
            A new modification was added to the undo stack.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.UndoRedoStateChangeType.AddMerge"><summary>
            A new modification was added to the undo stack but merged with the last modification on the stack.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.UndoRedoStateChangeType.Clear"><summary>
            The undo and redo stacks were cleared.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.UndoRedoStateChangeType.TopLevelGroupEnded"><summary>
            The top-level undo group was ended.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.UndoRedoStateChangeType.Undo"><summary>
            An undo modification occurred.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.UndoRedoStateChangeType.Redo"><summary>
            An redo modification occurred.
            </summary></member></members></doc>