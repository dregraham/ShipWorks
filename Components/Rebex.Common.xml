<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Rebex.Common</name>
    </assembly>
    <members>
        <member name="F:Rebex.BatchOperationStep.HierarchyRetrievalStarted">
            <summary>
            Retrieving of the file system hierarchy was started.
            </summary>
        </member>
        <member name="F:Rebex.BatchOperationStep.HierarchyRetrieved">
            <summary>
            Retrieving of the file system hierarchy was successfully completed.
            </summary>
        </member>
        <member name="F:Rebex.BatchOperationStep.HierarchyRetrievalFailed">
            <summary>
            Retrieving of the file system hierarchy failed or operation was canceled by user.
            </summary>
        </member>
        <member name="F:Rebex.BatchOperationStep.FileProcessingStarted">
            <summary>
            Processing of a file was started.
            </summary>
        </member>
        <member name="F:Rebex.BatchOperationStep.FileTransferStarting">
            <summary>
            File transfer is starting.
            </summary>
        </member>
        <member name="F:Rebex.BatchOperationStep.FileTransferred">
            <summary>
            File was successfully transferred.
            </summary>
        </member>
        <member name="F:Rebex.BatchOperationStep.FileSkipped">
            <summary>
            File was skipped.
            </summary>
        </member>
        <member name="F:Rebex.BatchOperationStep.FileProcessingFailed">
            <summary>
            File transfer failed or the operation was canceled by user.
            </summary>
        </member>
        <member name="F:Rebex.BatchOperationStep.DirectoryProcessingStarted">
            <summary>
            Directory processing was started.
            </summary>
        </member>
        <member name="F:Rebex.BatchOperationStep.DirectoryCreated">
            <summary>
            Directory was successfully created. If directory already exists, this event is not raised.
            </summary>
        </member>
        <member name="F:Rebex.BatchOperationStep.DirectorySkipped">
            <summary>
            Directory was skipped.
            </summary>
        </member>
        <member name="F:Rebex.BatchOperationStep.DirectoryProcessingFailed">
            <summary>
            Creation of directory failed or the operation was canceled by user.
            </summary>
        </member>
        <member name="F:Rebex.BatchOperationStep.FileDataBlockProcessed">
            <summary>
            A file data block was processed.
            </summary>
        </member>
        <member name="F:Rebex.BatchOperationStep.FileDeleted">
            <summary>
            File was successfully deleted.
            </summary>
        </member>
        <member name="F:Rebex.BatchOperationStep.DirectoryDeleted">
            <summary>
            Directory was successfully deleted.
            </summary>
        </member>
        <member name="F:Rebex.BatchOperationStep.DirectoryRetrievalStarted">
            <summary>
            Retrieval of the particular directory hierarchy was started.
            </summary>
        </member>
        <member name="F:Rebex.BatchOperationStep.DirectoryRetrieved">
            <summary>
            Retrieval of the particular directory hierarchy was successfully completed.
            </summary>
        </member>
        <member name="F:Rebex.BatchOperationStep.DirectoryRetrievalSkipped">
            <summary>
            Retrieval of the particular directory hierarchy was skipped (no files or subdirectories of the directory are to be processed).
            </summary>
        </member>
        <member name="F:Rebex.BatchOperationStep.DirectoryRetrievalFailed">
            <summary>
            Retrieval of the particular directory hierarchy failed or operation was canceled.
            </summary>
        </member>
        <member name="F:Rebex.BatchOperationStep.TransferCompleted">
            <summary>
            The batch operation was completed.
            </summary>
        </member>
        <member name="T:Rebex.IO.FileSystemItem">
            <summary>
            Represents a file or directory item.
            </summary>
        </member>
        <member name="M:Rebex.IO.FileSystemItem.GetLastWriteTime">
            <summary>
            Gets the last modification time of the item.
            </summary>
        </member>
        <member name="M:Rebex.IO.FileSystemItem.GetLastAccessTime">
            <summary>
            Gets the last access time of the item.
            </summary>
        </member>
        <member name="M:Rebex.IO.FileSystemItem.GetCreationTime">
            <summary>
            Gets the creation time of the item.
            </summary>
        </member>
        <member name="P:Rebex.IO.FileSystemItem.Length">
            <summary>
            Gets file length.
            </summary>
        </member>
        <member name="P:Rebex.IO.FileSystemItem.LastWriteTime">
            <summary>
            Gets the last modification time of the item.
            </summary>
        </member>
        <member name="P:Rebex.IO.FileSystemItem.LastAccessTime">
            <summary>
            Gets the last access time of the item.
            </summary>
        </member>
        <member name="P:Rebex.IO.FileSystemItem.CreationTime">
            <summary>
            Gets the creation time of the item.
            </summary>
        </member>
        <member name="P:Rebex.IO.FileSystemItem.IsFile">
            <summary>
            Gets a value indicating whether the item is a file.
            </summary>
            <returns>True if the item is a file; false otherwise.</returns>
        </member>
        <member name="P:Rebex.IO.FileSystemItem.IsDirectory">
            <summary>
            Gets a value indicating whether the item is a directory.
            </summary>
            <returns>True if the archive item is directory; false otherwise.</returns>
        </member>
        <member name="P:Rebex.IO.FileSystemItem.IsLink">
            <summary>
            Gets a value indicating whether the item is a link.
            </summary>
            <returns>True if the archive item is a link; false otherwise.</returns>
        </member>
        <member name="P:Rebex.IO.FileSystemItem.Name">
            <summary>
            Gets the name of the file or directory.
            </summary>
            <returns>The name of the file or directory.</returns>
        </member>
        <member name="P:Rebex.IO.FileSystemItem.Path">
            <summary>
            Gets the path of the file or directory.
            It can be relative or absolute path depending on the way of use.
            </summary>
            <remarks>It contains a full path if returned by the GetItems method or a file/directory name only if returned by the GetList method.</remarks>
            <value>The path of the file or directory.</value>
        </member>
        <member name="P:Rebex.Common.MscorlibVersion">
            <summary>
            Gets version of the mscorlib assembly.<br/>
            If the version cannot be somehow retrieved, returns <see cref="F:Rebex.Common.UnknownVerison"/> object (so never retuns null). 
            </summary>
        </member>
        <member name="T:Rebex.Crc32">
            <summary>
            Implements CRC-32 checksum, a type of hash function used to produce
            a checksum which is a small number of bits from a large block of data.
            Useful to detect errors in transmission or storage.
            </summary>
        </member>
        <member name="M:Rebex.Crc32.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:Rebex.Crc32"/> class.
            </summary>
        </member>
        <member name="M:Rebex.Crc32.Reset">
            <summary>
            Resets the instance of a <see cref="T:Rebex.Crc32"/> class to an initial state.
            </summary>
        </member>
        <member name="M:Rebex.Crc32.Process(System.Byte)">
            <summary>
            Updates the checksum with the specified byte.
            </summary>
            <param name="data">A byte to process.</param>
        </member>
        <member name="M:Rebex.Crc32.Process(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Updates the checksum with the contents of an array.
            </summary>
            <param name="data">An array of bytes.</param>
            <param name="offset">A zero-based offset in buffer at which to begin processing.</param>
            <param name="count">The number of bytes to process.</param>
        </member>
        <member name="M:Rebex.Crc32.Process(System.Byte[])">
            <summary>
            Updates the checksum with the contents of an array.
            </summary>
            <param name="data">An array of bytes.</param>
        </member>
        <member name="M:Rebex.Crc32.Process(System.IO.Stream)">
            <summary>
            Updates the checksum with the contents of a stream.
            </summary>
            <param name="input">A readable input stream.</param>
        </member>
        <member name="M:Rebex.Crc32.Process(System.IO.Stream,System.Int64)">
            <summary>
            Updates the checksum with the contents of a stream.
            </summary>
            <param name="input">A readable input stream.</param>
            <param name="count">Number of bytes to process.</param>
        </member>
        <member name="M:Rebex.Crc32.ProcessFile(System.String)">
            <summary>
            Updates the checksum with the contents of a file.
            </summary>
            <param name="path">Path to a file.</param>
        </member>
        <member name="M:Rebex.Crc32.ProcessFile(System.String,System.Int64,System.Int64)">
            <summary>
            Updates the checksum with the contents of a file.
            </summary>
            <param name="path">Path to a file.</param>
            <param name="offset">Byte offset to a position at which to start CRC calculating.</param>
            <param name="count">Number of bytes to process.</param>
        </member>
        <member name="P:Rebex.Crc32.Checksum">
            <summary>
            Returns the checksum computed so far.
            </summary>
        </member>
        <member name="T:Rebex.Messages">
            <summary>
            Provides methods for constructing exception messages.
            </summary>
        </member>
        <member name="T:Rebex.IO.QueueStream">
            <summary>
            QueueStream stores all data written to it in a FIFO queue, from which it can be read later.
            </summary>
        </member>
        <member name="M:Rebex.IO.QueueStream.#ctor">
            <summary>
            Constructs an empty queue.
            </summary>
        </member>
        <member name="M:Rebex.IO.QueueStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write bytes to the end of this queue.
            </summary>
        </member>
        <member name="M:Rebex.IO.QueueStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read bytes from the beginning of this queue.
            </summary>
        </member>
        <member name="P:Rebex.IO.QueueStream.CanRead">
            <summary>
            Indicates whether the stream supports reading.
            </summary>
            <value>Always returns true.</value>
        </member>
        <member name="P:Rebex.IO.QueueStream.CanSeek">
            <summary>
            Indicates whether the stream supports seeking.
            </summary>
            <value>Always returns false.</value>
        </member>
        <member name="P:Rebex.IO.QueueStream.CanWrite">
            <summary>
            Indicates whether the stream supports writing.
            </summary>
            <value>Always returns true.</value>
        </member>
        <member name="P:Rebex.IO.QueueStream.Length">
            <summary>
            Returns the size of data in the queue.
            </summary>
            <value>Size of data in the queue.</value>
        </member>
        <member name="M:Rebex.StringUtil.BitConverterGetBytes(System.String)">
            <summary>
            Gets the bytes array from specified hexadecimal string representation. 
            Inverse method to BitConverter.GetString(byte[]).
            </summary>
            <param name="data">Hexadecimal string in format AA-BB-CC.</param>
            <returns>An array of bytes converted from specified hexadecimal string.</returns>
        </member>
        <member name="M:Rebex.StringUtil.HexStringGetBytes(System.String)">
            <summary>
            Gets the bytes array from specified hexadecimal string representation. 
            </summary>
            <param name="data">Hexadecimal string in format AABBCC.</param>
            <returns>An array of bytes converted from specified hexadecimal string.</returns>
        </member>
        <member name="T:Rebex.IO.TransferAction">
            <summary>
            Currently executed operation.
            </summary>
        </member>
        <member name="F:Rebex.IO.TransferAction.Uploading">
            <summary>Uploading files.</summary>
        </member>
        <member name="F:Rebex.IO.TransferAction.Downloading">
            <summary>Downloading files.</summary>
        </member>
        <member name="F:Rebex.IO.TransferAction.Deleting">
            <summary>Deleting files.</summary>
        </member>
        <member name="F:Rebex.IO.TransferAction.Listing">
            <summary>Getting item list.</summary>
        </member>
        <member name="T:Rebex.IO.TraversingState">
            <summary>
            Current traversal state of the <see cref="T:Rebex.IO.TransferAction"/>.
            </summary>
        </member>
        <member name="F:Rebex.IO.TraversingState.HierarchyRetrieving">
            <summary>
            Retrieving of the file system hierarchy was started.
            </summary>
        </member>
        <member name="F:Rebex.IO.TraversingState.HierarchyRetrieved">
            <summary>
            Retrieving of the file system hierarchy was successfully completed.
            </summary>
        </member>
        <member name="F:Rebex.IO.TraversingState.DirectoryRetrieving">
            <summary>
            Retrieving of the particular directory hierarchy was started.
            </summary>
        </member>
        <member name="F:Rebex.IO.TraversingState.DirectoryRetrieved">
            <summary>
            Retrieving of the particular directory hierarchy was successfully completed.
            </summary>
        </member>
        <member name="T:Rebex.IO.TransferProgressState">
            <summary>
            Current transfer state of the <see cref="T:Rebex.IO.TransferAction"/>.
            </summary>
        </member>
        <member name="F:Rebex.IO.TransferProgressState.DirectoryProcessing">
            <summary>
            Directory processing was started.
            </summary>
        </member>
        <member name="F:Rebex.IO.TransferProgressState.FileTransferring">
            <summary>
            Processing of a file was started.
            </summary>
        </member>
        <member name="F:Rebex.IO.TransferProgressState.FileTransferred">
            <summary>
            File was successfully transferred.
            </summary>
        </member>
        <member name="F:Rebex.IO.TransferProgressState.DataBlockProcessed">
            <summary>
            A file data block was processed.
            </summary>
        </member>
        <member name="F:Rebex.IO.TransferProgressState.TransferCompleted">
            <summary>
            The transfer action was successfully completed.
            </summary>
        </member>
        <member name="T:Rebex.IO.DeleteProgressState">
            <summary>
            Current delete state of the <see cref="F:Rebex.IO.TransferAction.Deleting"/>.
            </summary>
        </member>
        <member name="F:Rebex.IO.DeleteProgressState.FileDeleting">
            <summary>
            File processing was started.
            </summary>
        </member>
        <member name="F:Rebex.IO.DeleteProgressState.FileDeleted">
            <summary>
            File was successfully deleted.
            </summary>
        </member>
        <member name="F:Rebex.IO.DeleteProgressState.DirectoryProcessing">
            <summary>
            Directory processing was started.
            </summary>
        </member>
        <member name="F:Rebex.IO.DeleteProgressState.DirectoryDeleted">
            <summary>
            Directory was successfully deleted.
            </summary>
        </member>
        <member name="F:Rebex.IO.DeleteProgressState.DeleteCompleted">
            <summary>
            The delete action was successfully completed.
            </summary>
        </member>
        <member name="T:Rebex.IO.TransferProblemType">
            <summary>
            Detailed specification of a problem that occurred during a multi-file operation.
            </summary>
        </member>
        <member name="F:Rebex.IO.TransferProblemType.FileExists">
            <summary>
            A target file with the same name already exists.
            </summary>
        </member>
        <member name="F:Rebex.IO.TransferProblemType.LinkDetected">
            <summary>
            A symbolic link was detected.
            </summary>
        </member>
        <member name="F:Rebex.IO.TransferProblemType.InfiniteLoopDetected">
            <summary>
            Symbolic link is probably a part of an infinite loop in the file system hierarchy.
            </summary>
        </member>
        <member name="F:Rebex.IO.TransferProblemType.CannotCreateDirectory">
            <summary>
            Cannot create target directory.
            </summary>
        </member>
        <member name="F:Rebex.IO.TransferProblemType.CannotTransferFile">
            <summary>
            Cannot transfer file.
            </summary>
        </member>
        <member name="F:Rebex.IO.TransferProblemType.CannotReadFromDirectory">
            <summary>
            Cannot read from a directory.
            </summary>
        </member>
        <member name="F:Rebex.IO.TransferProblemType.CannotFindFile">
            <summary>
            Cannot find the file which was found while retrieving file system hierarchy earlier.
            </summary>
        </member>
        <member name="F:Rebex.IO.TransferProblemType.FileNameIsInvalidOnTargetFileSystem">
            <summary>
            Name of the file is invalid on the target file system.
            For example, backslash is a valid filename character on Unix FTP servers, but invalid in local Windows file system.
            </summary>
        </member>
        <member name="F:Rebex.IO.TransferProblemType.DirectoryNameIsInvalidOnTargetFileSystem">
            <summary>
            Name of the directory is invalid on the target file system. 
            For example, backslash is a valid directory name character on Unix FTP servers, but invalid in local Windows file system.
            </summary>
        </member>
        <member name="F:Rebex.IO.TransferProblemType.CannotFindDirectory">
            <summary>
            Cannot find the directory which was found while retrieving file system hierarchy earlier.
            </summary>
        </member>
        <member name="F:Rebex.IO.TransferProblemType.CannotFindLink">
            <summary>
            Cannot find the link which was found while retrieving file system hierarchy earlier.
            </summary>
        </member>
        <member name="F:Rebex.IO.TransferProblemType.CannotResolveLink">
            <summary>
            Link is corrupted or its target cannot be found.
            </summary>
        </member>
        <member name="F:Rebex.IO.TransferProblemType.NotFileOrDirectory">
            <summary>
            Currently processed item is neither a file nor a directory.
            </summary>
        </member>
        <member name="F:Rebex.IO.TransferProblemType.OperationCanceled">
            <summary>
            Operation was canceled.
            </summary>
        </member>
        <member name="F:Rebex.IO.TransferProblemType.UnsupportedFeature">
            <summary>
            Feature required to complete the operation is not supported.
            </summary>
        </member>
        <member name="F:Rebex.IO.TransferProblemType.CannotDeleteFile">
            <summary>
            Cannot delete the file.
            </summary>
        </member>
        <member name="F:Rebex.IO.TransferProblemType.CannotDeleteDirectory">
            <summary>
            Cannot delete the directory.
            </summary>
        </member>
        <member name="F:Rebex.IO.TransferProblemType.CannotCalculateChecksum">
            <summary>
            Cannot calculate checksum.
            </summary>
        </member>
        <member name="T:Rebex.IO.TransferProblemReaction">
            <summary>
            Specifies the reaction to resolve the current problem that occurred during a multi-file operation.
            </summary>
        </member>
        <member name="F:Rebex.IO.TransferProblemReaction.Cancel">
            <summary>
            Cancel the whole operation. An exception with the <see cref="F:Rebex.IO.TransferProblemType.OperationCanceled"/> value is thrown.
            </summary>
        </member>
        <member name="F:Rebex.IO.TransferProblemReaction.Fail">
            <summary>
            Cancel the whole operation. An exception is thrown.
            </summary>
        </member>
        <member name="F:Rebex.IO.TransferProblemReaction.Skip">
            <summary>
            Skip the current problematic item.
            </summary>
        </member>
        <member name="F:Rebex.IO.TransferProblemReaction.Retry">
            <summary>
            Retry the current operation again.
            </summary>
        </member>
        <member name="F:Rebex.IO.TransferProblemReaction.Overwrite">
            <summary>
            Overwrite target file with the same name.
            </summary>
        </member>
        <member name="F:Rebex.IO.TransferProblemReaction.Rename">
            <summary>
            Transfer the source file to a different name.
            </summary>
        </member>
        <member name="F:Rebex.IO.TransferProblemReaction.Resume">
            <summary>
            Resume target file.
            </summary>
        </member>
        <member name="F:Rebex.IO.TransferProblemReaction.FollowLink">
            <summary>
            Resolve the symbolic link.
            </summary>
        </member>
        <member name="T:Rebex.IO.OverwriteCondition">
            <summary>
            Specifies the condition for overwriting a file.
            </summary>
        </member>
        <member name="F:Rebex.IO.OverwriteCondition.None">
            <summary>
            No condition = always overwrite.
            </summary>
        </member>
        <member name="F:Rebex.IO.OverwriteCondition.SizeDiffers">
            <summary>
            Overwrite if size differs.
            </summary>
        </member>
        <member name="F:Rebex.IO.OverwriteCondition.Older">
            <summary>
            Overwrite if the target file is older than the source file.
            If working with remote servers, this condition is strongly discouraged 
            because modification dates are often misreported by FTP servers, 
            making this mode highly unreliable.
            </summary>
        </member>
        <member name="F:Rebex.IO.OverwriteCondition.ChecksumDiffers">
            <summary>
            Overwrite if checksum differs.
            Available for ZIP and FTP; only some FTP servers support checksums.<br/>
            You can check availibility of this condition using <see cref="M:Rebex.IO.ProblemDetectedEventArgs.IsOverwriteConditionPossible(Rebex.IO.OverwriteCondition)"/> method.
            </summary>
        </member>
        <member name="T:Rebex.IO.ProblemDetectedEventArgs">
            <summary>
            Provides data for the ProblemDetected event.
            </summary>
        </member>
        <member name="F:Rebex.IO.ProblemDetectedEventArgs._checksumType">
            <summary>
            See comments for BatchTransfer.RemoteChecksumType.
            </summary>
        </member>
        <member name="M:Rebex.IO.ProblemDetectedEventArgs.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Rebex.IO.ProblemDetectedEventArgs"/> class (for internal use only).
            </summary>
            <param name="info">Event data.</param>
        </member>
        <member name="M:Rebex.IO.ProblemDetectedEventArgs.IsReactionPossible(Rebex.IO.TransferProblemReaction)">
            <summary>
            Determines whether the specified reaction is currently possible - use this to determine which reactions can be applied.
            </summary>
            <param name="reaction">Desired reaction.</param>
            <returns>True if the specified reaction is possible; false otherwise.</returns>
        </member>
        <member name="M:Rebex.IO.ProblemDetectedEventArgs.IsOverwriteConditionPossible(Rebex.IO.OverwriteCondition)">
            <summary>
            Determines whether the specified overwrite condition is currently possible - use this to determine which overwrite conditions can be applied.
            </summary>
            <param name="condition">Desired condition.</param>
            <returns>True if the specified condition is possible; false otherwise.</returns>
        </member>
        <member name="M:Rebex.IO.ProblemDetectedEventArgs.Skip">
            <summary>
            Indicate to the sender that the problematic item should be skipped.
            </summary>
        </member>
        <member name="M:Rebex.IO.ProblemDetectedEventArgs.Cancel">
            <summary>
            Indicate to the sender that the operation should be canceled.
            </summary>
        </member>
        <member name="M:Rebex.IO.ProblemDetectedEventArgs.Fail">
            <summary>
            Indicate to the sender that an exception should be raised.
            </summary>
        </member>
        <member name="M:Rebex.IO.ProblemDetectedEventArgs.Retry">
            <summary>
            Indicate to the sender that the operation on the current item should be retired.
            </summary>
        </member>
        <member name="M:Rebex.IO.ProblemDetectedEventArgs.Resume">
            <summary>
            Indicate to the sender that the current item should be resumed.
            </summary>
        </member>
        <member name="M:Rebex.IO.ProblemDetectedEventArgs.FollowLink">
            <summary>
            Indicate to the sender that the current link should be resolved.
            </summary>
        </member>
        <member name="M:Rebex.IO.ProblemDetectedEventArgs.Rename">
            <summary>
            Indicate to the sender that the current item should be renamed.
            New name is generated from the current item according the pattern "filename[number].extension".
            </summary>
        </member>
        <member name="M:Rebex.IO.ProblemDetectedEventArgs.Rename(System.String)">
            <summary>
            Indicate to the sender that the current item should be renamed.
            </summary>
            <param name="newName">New name of the item or null (Nothing in Visual Basic) to use generated name according the pattern "filename[number].extension".</param>
        </member>
        <member name="M:Rebex.IO.ProblemDetectedEventArgs.Overwrite">
            <summary>
            Indicate to the sender that the current item should be overwritten.
            </summary>
        </member>
        <member name="M:Rebex.IO.ProblemDetectedEventArgs.Overwrite(Rebex.IO.OverwriteCondition)">
            <summary>
            Indicate to the sender that the current item should be overwritten if the specified condition is met.
            </summary>
            <param name="condition">Condition for the overwrite.</param>
        </member>
        <member name="P:Rebex.IO.ProblemDetectedEventArgs.Action">
            <summary>
            Gets the current transfer action.
            </summary>
            <value>Current transfer action.</value>
        </member>
        <member name="P:Rebex.IO.ProblemDetectedEventArgs.Exception">
            <summary>
            Gets the exception which will be raised if chosen Reaction is <see cref="F:Rebex.IO.TransferProblemReaction.Fail"/>. 
            </summary>
            <value>Exception.</value>
        </member>
        <member name="P:Rebex.IO.ProblemDetectedEventArgs.ProblemType">
            <summary>
            Gets the type of the error that classifies the problem.
            </summary>
            <value>Problem type.</value>
        </member>
        <member name="P:Rebex.IO.ProblemDetectedEventArgs.LocalPath">
            <summary>
            Gets the path of the local file or directory that is currently processed.
            </summary>
            <value>Local path.</value>
        </member>
        <member name="P:Rebex.IO.ProblemDetectedEventArgs.LocalItem">
            <summary>
            Gets the local file or directory that is currently processed or null (Nothing in Visual Basic) if not available.
            </summary>
            <value>Local item.</value>
        </member>
        <member name="P:Rebex.IO.ProblemDetectedEventArgs.RemotePath">
            <summary>
            Gets the path of the remote file or directory that is currently processed.
            </summary>
            <value>Remote path.</value>
        </member>
        <member name="P:Rebex.IO.ProblemDetectedEventArgs.RemoteItem">
            <summary>
            Gets the remote file or directory that is currently processed or null (Nothing in Visual Basic) if not available.
            </summary>
            <value>Remote item.</value>
        </member>
        <member name="P:Rebex.IO.ProblemDetectedEventArgs.Reaction">
            <summary>
            Gets the currently selected reaction to the current problem.
            </summary>
            <value>The operation to be performed as the next step of the multi-file operation execution.</value>
        </member>
        <member name="P:Rebex.IO.ProblemDetectedEventArgs.OverwriteCondition">
            <summary>
            Gets the condition to apply for the Overwrite reaction.
            If the chosen reaction is not Overwrite, this property is ignored.
            </summary>
            <value>Overwrite condition.</value>
        </member>
        <member name="P:Rebex.IO.ProblemDetectedEventArgs.NewName">
            <summary>
            Gets the new name for the currently processed file or directory.
            If the chosen reaction is not Rename, this property is ignored.
            </summary>
            <value>New name.</value>
        </member>
        <member name="P:Rebex.IO.ProblemDetectedEventArgs.UserState">
            <summary>
            Gets a user state object.
            </summary>
            <value>User state object.</value>
        </member>
        <member name="T:Rebex.IO.TraversingEventArgs">
            <summary>
            Provides data for the Traversing event.
            </summary>
        </member>
        <member name="M:Rebex.IO.TraversingEventArgs.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Rebex.IO.TraversingEventArgs"/> class (for internal use only).
            </summary>
            <param name="info">Event data.</param>
        </member>
        <member name="P:Rebex.IO.TraversingEventArgs.Action">
            <summary>
            Gets the current transfer action.
            </summary>
            <value>Current transfer action.</value>
        </member>
        <member name="P:Rebex.IO.TraversingEventArgs.TraversingState">
            <summary>
            Gets the current traversing state of the current <see cref="P:Rebex.IO.TraversingEventArgs.Action"/>.
            </summary>
            <value>Current traversing state of the current <see cref="P:Rebex.IO.TraversingEventArgs.Action"/>.</value>
        </member>
        <member name="P:Rebex.IO.TraversingEventArgs.Item">
            <summary>
            Gets the file or directory which is currently processed.
            </summary>
            <value>Currently processed item.</value>
        </member>
        <member name="P:Rebex.IO.TraversingEventArgs.FilesTotal">
            <summary>
            Gets the current total number of files to be processed (traversed so far). 
            </summary>
            <value>Current total number of files to be processed (traversed so far). </value>
        </member>
        <member name="P:Rebex.IO.TraversingEventArgs.BytesTotal">
            <summary>
            Gets the current total number of bytes to be processed (traversed so far).
            </summary>
            <value>Current total number of bytes (traversed so far).</value>
        </member>
        <member name="P:Rebex.IO.TraversingEventArgs.UserState">
            <summary>
            Gets a user state object.
            </summary>
            <value>User state object.</value>
        </member>
        <member name="T:Rebex.IO.TransferProgressChangedEventArgs">
            <summary>
            Provides data for the TransferProgressChanged event.
            </summary>
        </member>
        <member name="M:Rebex.IO.TransferProgressChangedEventArgs.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Rebex.IO.TransferProgressChangedEventArgs"/> class (for internal use only).
            </summary>
            <param name="info">Event data.</param>
        </member>
        <member name="P:Rebex.IO.TransferProgressChangedEventArgs.Action">
            <summary>
            Gets the current transfer action.
            </summary>
            <value>Current transfer action.</value>
        </member>
        <member name="P:Rebex.IO.TransferProgressChangedEventArgs.TransferState">
            <summary>
            Gets the current transfer state of the current <see cref="P:Rebex.IO.TransferProgressChangedEventArgs.Action"/>.
            </summary>
            <value>Current transfer state of the current <see cref="P:Rebex.IO.TransferProgressChangedEventArgs.Action"/>.</value>
        </member>
        <member name="P:Rebex.IO.TransferProgressChangedEventArgs.SourceItem">
            <summary>
            Gets the file or directory which is currently processed.
            </summary>
            <value>Currently processed item.</value>
        </member>
        <member name="P:Rebex.IO.TransferProgressChangedEventArgs.TargetPath">
            <summary>
            Gets the target path of the file or directory which is currently processed.
            </summary>
            <value>Target path.</value>
        </member>
        <member name="P:Rebex.IO.TransferProgressChangedEventArgs.CurrentFileBytesTransferred">
            <summary>
            Gets the total number of bytes transferred during the transfer of the current file.
            </summary>
            <value>The number of bytes transferred.</value>
        </member>
        <member name="P:Rebex.IO.TransferProgressChangedEventArgs.FilesTotal">
            <summary>
            Gets the total number of files to be transferred.
            </summary>
            <value>Number of files.</value>
        </member>
        <member name="P:Rebex.IO.TransferProgressChangedEventArgs.FilesProcessed">
            <summary>
            Gets the number of files that were already processed (either transferred or skipped).
            </summary>
            <value>Number of files.</value>
        </member>
        <member name="P:Rebex.IO.TransferProgressChangedEventArgs.FilesTransferred">
            <summary>
            Gets the number of files that were already successfully transferred.
            </summary>
            <value>Number of files.</value>
        </member>
        <member name="P:Rebex.IO.TransferProgressChangedEventArgs.BytesTotal">
            <summary>
            Gets the total number of bytes to be transferred.
            </summary>
            <value>Number of bytes.</value>
        </member>
        <member name="P:Rebex.IO.TransferProgressChangedEventArgs.BytesTransferred">
            <summary>
            Gets the total number of bytes transferred.
            </summary>
            <value>Number of bytes.</value>
        </member>
        <member name="P:Rebex.IO.TransferProgressChangedEventArgs.BytesSinceLastEvent">
            <summary>
            Gets the number of bytes transferred during the current transfer since the last time the event was raised.
            </summary>
            <value>The number of bytes transferred since the last time the event was raised.</value>
        </member>
        <member name="P:Rebex.IO.TransferProgressChangedEventArgs.BytesPerSecond">
            <summary>
            Gets the current transfer speed in bytes transferred per second (or 0 if not available).
            </summary>
            <value>An estimate of the current speed in number of bytes per second.</value>
            <remarks>Value of 0 indicates that this information is not available.</remarks>
        </member>
        <member name="P:Rebex.IO.TransferProgressChangedEventArgs.ProgressPercentage">
            <summary>
            Gets a number between 0 and 100 representing the percentage of completeness of the operation.
            </summary>
            <value>Percentage value (0..100).</value>
        </member>
        <member name="P:Rebex.IO.TransferProgressChangedEventArgs.CurrentFileProgressPercentage">
            <summary>
            Gets a number between 0 and 100 representing the percentage of completeness of the current file transfer.
            </summary>
            <value>Percentage value (0..100).</value>
        </member>
        <member name="T:Rebex.IO.DeleteProgressChangedEventArgs">
            <summary>
            Provides data for the DeleteProgressChanged event.
            </summary>
        </member>
        <member name="M:Rebex.IO.DeleteProgressChangedEventArgs.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Rebex.IO.DeleteProgressChangedEventArgs"/> class (for internal use only).
            </summary>
            <param name="info">Event data.</param>
        </member>
        <member name="P:Rebex.IO.DeleteProgressChangedEventArgs.DeleteState">
            <summary>
            Gets the current delete state of the current <see cref="F:Rebex.IO.TransferAction.Deleting"/>.
            </summary>
            <value>Current delete state of the current <see cref="F:Rebex.IO.TransferAction.Deleting"/>.</value>
        </member>
        <member name="P:Rebex.IO.DeleteProgressChangedEventArgs.Item">
            <summary>
            Gets the file or directory which is currently processed.
            </summary>
            <value>Remote item.</value>
        </member>
        <member name="P:Rebex.IO.DeleteProgressChangedEventArgs.FilesTotal">
            <summary>
            Gets the total number of files to be deleted.
            </summary>
            <value>Number of files.</value>
        </member>
        <member name="P:Rebex.IO.DeleteProgressChangedEventArgs.FilesProcessed">
            <summary>
            Gets the number of files that were already processed (either deleted or skipped).
            </summary>
            <value>Number of files.</value>
        </member>
        <member name="P:Rebex.IO.DeleteProgressChangedEventArgs.FilesDeleted">
            <summary>
            Gets the number of files that were already successfully deleted.
            </summary>
            <value>Number of files.</value>
        </member>
        <member name="P:Rebex.IO.DeleteProgressChangedEventArgs.ProgressPercentage">
            <summary>
            Gets a number between 0 and 100 representing the percentage of completeness of the operation.
            </summary>
            <value>Percentage value (0..100).</value>
        </member>
        <member name="T:Rebex.ConsoleLogWriter">
            <summary>
            Console-based log writer that writes log messages to the console.
            </summary>
        </member>
        <member name="T:Rebex.LogWriterBase">
            <summary>
            Common base class for log writers. A derived class must override either the WriteMessage or Write method.
            </summary>
        </member>
        <member name="T:Rebex.ILogWriter">
            <summary>
            Defines methods and properties all log writers must implement.
            </summary>
        </member>
        <member name="M:Rebex.ILogWriter.Write(Rebex.LogLevel,System.Type,System.Int32,System.String,System.String)">
            <summary>
            Write a message into the log.
            </summary>
            <param name="level">Message level.</param>
            <param name="objectType">Logging object type.</param>
            <param name="objectId">Logging object ID.</param>
            <param name="area">Logging area.</param>
            <param name="message">Message.</param>
        </member>
        <member name="M:Rebex.ILogWriter.Write(Rebex.LogLevel,System.Type,System.Int32,System.String,System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write a message and data block into the log.
            </summary>
            <param name="level">Message level.</param>
            <param name="objectType">Logging object type.</param>
            <param name="objectId">Logging object ID.</param>
            <param name="area">Logging area.</param>
            <param name="message">Message.</param>
            <param name="buffer">Data block.</param>
            <param name="offset">Data offset.</param>
            <param name="length">Date length.</param>
        </member>
        <member name="P:Rebex.ILogWriter.Level">
            <summary>
            Get or set the log level - only log messages with log level equal to or greater than the specified one.
            </summary>
            <value>Log level.</value>
        </member>
        <member name="M:Rebex.LogWriterBase.Close">
            <summary>
            Closes the log writer.
            </summary>
        </member>
        <member name="M:Rebex.LogWriterBase.Dispose(System.Boolean)">
            <summary>
            Dispose(bool disposing) executes in two distinct scenarios.
            If disposing equals true, the method has been called directly
            or indirectly by a user's code. Managed and unmanaged resources
            can be disposed.
            If disposing equals false, the method has been called by the 
            runtime from inside the finalizer and you should not reference 
            other objects. Only unmanaged resources can be disposed.
            </summary>
            <param name="disposing"> If true, is called by IDisposable.Dispose. 
            Otherwise it is called by finalizer.</param>
        </member>
        <member name="M:Rebex.LogWriterBase.Write(Rebex.LogLevel,System.Type,System.Int32,System.String,System.String)">
            <summary>
            Writes a message into the log.
            </summary>
            <param name="level">Message level.</param>
            <param name="objectType">Logging object type.</param>
            <param name="objectId">Logging object ID.</param>
            <param name="area">Logging area.</param>
            <param name="message">Message.</param>
        </member>
        <member name="M:Rebex.LogWriterBase.Write(Rebex.LogLevel,System.Type,System.Int32,System.String,System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a message and data block into the log.
            </summary>
            <param name="level">Message level.</param>
            <param name="objectType">Logging object type.</param>
            <param name="objectId">Logging object ID.</param>
            <param name="area">Logging area.</param>
            <param name="message">Message.</param>
            <param name="buffer">Data block.</param>
            <param name="offset">Data offset.</param>
            <param name="length">Date length.</param>
        </member>
        <member name="M:Rebex.LogWriterBase.WriteMessage(System.String)">
            <summary>
            Appends the specified message text into a text-based log. This method is only called by <see cref="M:Rebex.LogWriterBase.Write(Rebex.LogLevel,System.Type,System.Int32,System.String,System.String)"/> method
            and is only used by text-based loggers.
            </summary>
            <param name="message">Full message info.</param>
        </member>
        <member name="M:Rebex.LogWriterBase.Dispose">
            <summary>
            Implements the interface method IDisposable.Dispose
            Use this method to explicitly release all resources hold by the object instance.
            </summary>
        </member>
        <member name="P:Rebex.LogWriterBase.Level">
            <summary>
            Gets or sets the log level - only log messages with log level equal to or greater than the specified one.
            </summary>
            <value>Log level.</value>
        </member>
        <member name="P:Rebex.LogWriterBase.IsClosed">
            <summary>
            Get a value indicating whether the log writer is closed.
            </summary>
            <value>True when log writer is closed. False if log writer is opened and ready for writing.</value>
            <remarks>Implementation in this base class returns false, as the close method actually does not close any resource.</remarks>
        </member>
        <member name="M:Rebex.ConsoleLogWriter.#ctor">
            <summary>
            Creates a new instance of console log writer with a log level of Info.
            </summary>
        </member>
        <member name="M:Rebex.ConsoleLogWriter.#ctor(Rebex.LogLevel)">
            <summary>
            Creates a new instance of console log writer with the specified log level.
            </summary>
            <param name="level">Log level.</param>
        </member>
        <member name="M:Rebex.ConsoleLogWriter.Write(Rebex.LogLevel,System.Type,System.Int32,System.String,System.String)">
            <summary>
            Writes a message into the log.
            </summary>
            <param name="level">Message level.</param>
            <param name="objectType">Logging object type.</param>
            <param name="objectId">Logging object ID.</param>
            <param name="area">Logging area.</param>
            <param name="message">Message.</param>
        </member>
        <member name="M:Rebex.ConsoleLogWriter.Write(Rebex.LogLevel,System.Type,System.Int32,System.String,System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a message and data block into the log.
            </summary>
            <param name="level">Message level.</param>
            <param name="objectType">Logging object type.</param>
            <param name="objectId">Logging object ID.</param>
            <param name="area">Logging area.</param>
            <param name="message">Message.</param>
            <param name="buffer">Data block.</param>
            <param name="offset">Data offset.</param>
            <param name="length">Date length.</param>
        </member>
        <member name="M:Rebex.ConsoleLogWriter.WriteMessage(System.String)">
            <summary>
            Appends the specified message text into a text-based log.
            </summary>
            <param name="message">Full message info.</param>
        </member>
        <member name="P:Rebex.ConsoleLogWriter.UseColors">
            <summary>
            Gets or sets a value that indicates whether to use console colors.
            </summary>
        </member>
        <member name="T:Rebex.EncodingTools">
            <summary>
            Various methods related to encoding (charset) used by Rebex components.
            </summary>
        </member>
        <member name="M:Rebex.EncodingTools.GetEncodingNames">
            <summary>
            Gets a list of supported encoding names.
            </summary>
            <returns>List of encoding names.</returns>
        </member>
        <member name="M:Rebex.EncodingTools.GetEncoding(System.String)">
            <summary>
            Returns the encoding associated with the specified code page name.
            </summary>
            <param name="name">Code page name.</param>
            <returns>Encoding.</returns>
        </member>
        <member name="M:Rebex.EncodingTools.GetEncoding(System.Int32)">
            <summary>
            Returns the encoding associated with the specified code page.
            </summary>
            <param name="codePage">Code page.</param>
            <returns>Encoding.</returns>
        </member>
        <member name="P:Rebex.EncodingTools.ASCII">
            <summary>
            ASCII encoding.
            </summary>
        </member>
        <member name="P:Rebex.EncodingTools.Default">
            <summary>
            Default encoding.
            </summary>
        </member>
        <member name="T:Rebex.IO.FileSystemItemComparerType">
            <summary>
            List of possible compare types for the FileSystemItemComparer class.
            </summary>
        </member>
        <member name="F:Rebex.IO.FileSystemItemComparerType.Name">
            <summary>
            Compare by <see cref="P:Rebex.IO.FileSystemItem.Name"/>.
            </summary>
        </member>
        <member name="F:Rebex.IO.FileSystemItemComparerType.Length">
            <summary>
            Compare by <see cref="P:Rebex.IO.FileSystemItem.Length"/>.
            </summary>
        </member>
        <member name="F:Rebex.IO.FileSystemItemComparerType.CreationTime">
            <summary>
            Compare by creation date and time of the item.
            </summary>
        </member>
        <member name="F:Rebex.IO.FileSystemItemComparerType.LastWriteTime">
            <summary>
            Compare by last modification date and time of the item.
            </summary>
        </member>
        <member name="F:Rebex.IO.FileSystemItemComparerType.LastAccessTime">
            <summary>
            Compare by last access date and time of the item.
            </summary>
        </member>
        <member name="F:Rebex.IO.FileSystemItemComparerType.FileType">
            <summary>
            Compare by type of the item (directory/file/link).
            </summary>
        </member>
        <member name="T:Rebex.IO.FileSystemItemComparer">
            <summary>
            Class used to compare <see cref="T:Rebex.IO.FileSystemItem"/> objects.
            </summary>
        </member>
        <member name="M:Rebex.IO.FileSystemItemComparer.#ctor">
            <summary>
            Creates a new instance of FileSystemItemComparer with default sorting by file name and with ascending sort mode.
            </summary>
        </member>
        <member name="M:Rebex.IO.FileSystemItemComparer.#ctor(Rebex.IO.FileSystemItemComparerType)">
            <summary>
            Creates a new instance of FileSystemItemComparer with specified comparer type and ascending sort mode.
            </summary>
            <param name="comparerType">Type of the comparer.</param>
        </member>
        <member name="M:Rebex.IO.FileSystemItemComparer.#ctor(Rebex.IO.FileSystemItemComparerType,Rebex.SortingOrder)">
            <summary>
            Creates a new instance of FileSystemItemComparer with specified comparer type and sort mode.
            </summary>
            <param name="comparerType">Type of the comparer.</param>
            <param name="sortOrder">Sorting order.</param>
        </member>
        <member name="M:Rebex.IO.FileSystemItemComparer.Compare(System.Object,System.Object)">
            <summary>
            IComparer interface implementation. Compares two instances of <see cref="T:Rebex.IO.FileSystemItem"/>.
            </summary>
            <param name="x">First object to compare.</param>
            <param name="y">Second object to compare.</param>
            <returns>Value greater than zero when x is greater then y, zero when they are equal, or less than zero when x is lesser than y.</returns>
        </member>
        <member name="T:Rebex.IO.LocalItem">
            <summary>
            Represents a file or directory on the local file system.
            </summary>
        </member>
        <member name="M:Rebex.IO.LocalItem.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rebex.IO.LocalItem"/> class.
            </summary>
            <param name="path">Path to a file or directory on the local file system.</param>
        </member>
        <member name="M:Rebex.IO.LocalItem.CheckLinkIsValid">
            <summary>
            Checks whether the link is valid (whether the target file or directory exists).
            If the target does not exist, sets false to IsFile or IsDirectory property. 
            </summary>
        </member>
        <member name="M:Rebex.IO.LocalItem.GetLastWriteTime">
            <summary>
            Gets the last modification time of the item.
            </summary>
        </member>
        <member name="M:Rebex.IO.LocalItem.SetLastWriteTime(System.DateTime)">
            <summary>
            Sets the last modification time of the item.
            </summary>
            <param name="date">The last modification time.</param>
        </member>
        <member name="M:Rebex.IO.LocalItem.GetLastAccessTime">
            <summary>
            Gets the last access time of the item.
            </summary>
        </member>
        <member name="M:Rebex.IO.LocalItem.SetLastAccessTime(System.DateTime)">
            <summary>
            Sets the last access time of the item.
            </summary>
            <param name="date">The last access time.</param>
        </member>
        <member name="M:Rebex.IO.LocalItem.GetCreationTime">
            <summary>
            Gets the creation time of the item.
            </summary>
        </member>
        <member name="M:Rebex.IO.LocalItem.SetCreationTime(System.DateTime)">
            <summary>
            Sets the creation time of the item.
            </summary>
            <param name="date">The creation time.</param>
        </member>
        <member name="M:Rebex.IO.LocalItem.ToString">
            <summary>
            Returns the full path of the item.
            </summary>
            <returns>The full path of the item.</returns>
        </member>
        <member name="M:Rebex.IO.LocalItem.Delete">
            <summary>
            Deletes the local item.
            </summary>
        </member>
        <member name="M:Rebex.IO.LocalItem.GetFiles">
            <summary>
            Gets the list of file items in a directory represented by this object.
            Fails if this object is not a directory.
            </summary>
            <remarks>
            This is only valid for directories.
            </remarks>
            <returns>List of file items.</returns>
        </member>
        <member name="M:Rebex.IO.LocalItem.GetDirectories">
            <summary>
            Gets the list of directory items in a directory represented by this object.
            Fails if this object is not a directory.
            </summary>
            <remarks>
            This is only valid for directories.
            </remarks>
            <returns>List of directory items.</returns>
        </member>
        <member name="M:Rebex.IO.LocalItem.ComputeCrc32">
            <summary>
            Computes the CRC32 (Cyclic Redundancy Check) value of the file.
            </summary>
            <remarks>
            This is only valid for files.
            </remarks>
            <returns>
            CRC32 checksum value.
            </returns>
        </member>
        <member name="P:Rebex.IO.LocalItem.Exists">
            <summary>
            Gets a value indicating whether the file or directory exists.
            </summary>
            <returns>True if the file or directory exists; false otherwise.</returns>
        </member>
        <member name="P:Rebex.IO.LocalItem.Length">
            <summary>
            Gets file length.
            </summary>
        </member>
        <member name="P:Rebex.IO.LocalItem.IsFile">
            <summary>
            Gets a value indicating whether the item is a file.
            </summary>
            <returns>True if the item is a file; false otherwise.</returns>
        </member>
        <member name="P:Rebex.IO.LocalItem.IsDirectory">
            <summary>
            Gets a value indicating whether the item is a directory.
            </summary>
            <returns>True if the archive item is directory; false otherwise.</returns>
        </member>
        <member name="P:Rebex.IO.LocalItem.IsLink">
            <summary>
            Gets a value indicating whether the item is a link.
            </summary>
            <returns>True if the archive item is a link; false otherwise.</returns>
        </member>
        <member name="P:Rebex.IO.LocalItem.Name">
            <summary>
            Gets the name of the file or directory.
            </summary>
            <returns>The name of the file or directory.</returns>
        </member>
        <member name="P:Rebex.IO.LocalItem.Path">
            <summary>
            Gets the relative path of the file or directory. 
            </summary>
            <returns>The relative path of the file or directory.</returns>
        </member>
        <member name="P:Rebex.IO.LocalItem.FullPath">
            <summary>
            Gets the full path of the file or directory. 
            </summary>
            <returns>The full path of the file or directory.</returns>
        </member>
        <member name="P:Rebex.IO.LocalItem.Attributes">
            <summary>
            Gets item attributes.
            </summary>
        </member>
        <member name="T:Rebex.IO.LocalItemCollection">
            <summary>
            Provides a container for a collection of <see cref="T:Rebex.IO.LocalItem"/> objects.
            </summary>
        </member>
        <member name="T:Rebex.IO.FileSystemItemCollection">
            <summary>
            Provides a container for a collection of <see cref="T:Rebex.IO.FileSystemItem"/> objects.
            </summary>
        </member>
        <member name="M:Rebex.IO.FileSystemItemCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rebex.IO.FileSystemItemCollection"/> class.
            </summary>
        </member>
        <member name="M:Rebex.IO.FileSystemItemCollection.CheckItem(Rebex.IO.FileSystemItem)">
            <summary>
            Validates whether the item is correct and can be added.
            </summary>
            <param name="item">Item to add.</param>
        </member>
        <member name="M:Rebex.IO.FileSystemItemCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the collection
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/>.</returns>
            <remarks>GetEnumerator is the method that implements the foreach statement (For Each in Visual Basic). You should not need to call this method directly.</remarks>
        </member>
        <member name="M:Rebex.IO.FileSystemItemCollection.GetEnumerator">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerator`1"/> for the collection.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> for the collection.</returns>
        </member>
        <member name="M:Rebex.IO.FileSystemItemCollection.AddRange(System.Collections.Generic.IEnumerable{Rebex.IO.FileSystemItem})">
            <summary>
             Adds the elements of the specified collection to the end of the FileSystemItemCollection.
            </summary>
            <param name="collection">The collection whose elements should be added to the end of the FileSystemItemCollection.</param>
        </member>
        <member name="M:Rebex.IO.FileSystemItemCollection.Add(Rebex.IO.FileSystemItem)">
            <summary>
            Adds the specified item to the collection.
            </summary>
            <param name="item">The item to be added to the collection.</param>
        </member>
        <member name="M:Rebex.IO.FileSystemItemCollection.Remove(Rebex.IO.FileSystemItem)">
            <summary>
            Removes the specified item from the collection.
            </summary>
            <param name="item">The item to remove from the collection.</param>
            <returns>
            True if item was successfully removed from the collection; false otherwise.
            </returns>
        </member>
        <member name="M:Rebex.IO.FileSystemItemCollection.Remove(System.String)">
            <summary>
            Removes the item with the specified path from the collection.
            </summary>
            <param name="path">The path of an item to remove from the collection.</param>
        </member>
        <member name="M:Rebex.IO.FileSystemItemCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index from the collection.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="M:Rebex.IO.FileSystemItemCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:Rebex.IO.FileSystemItemCollection.CopyTo(Rebex.IO.FileSystemItem[],System.Int32)">
            <summary>
            Copies the range of elements from the collection to a one-dimensional
            <see cref="T:Rebex.IO.FileSystemItem"/> array, starting at the specified index of the target array.
            </summary>
            <param name="array">One-dimensional zero-based <see cref="T:Rebex.IO.FileSystemItem"/> array that is the destination of the elements copied from the collection.</param>
            <param name="index">A zero-based index in the destination array at which copying begins.</param>
        </member>
        <member name="M:Rebex.IO.FileSystemItemCollection.Contains(Rebex.IO.FileSystemItem)">
            <summary>
            Determines whether the item is in the collection.
            </summary>
            <param name="item">The item to locate in the collection.</param>
            <returns>True if the item is located in the collection; false otherwise.</returns>
        </member>
        <member name="M:Rebex.IO.FileSystemItemCollection.Contains(System.String)">
            <summary>
            Determines whether the item with the specified path is in the collection.
            </summary>
            <param name="path">The path to locate in the collection.</param>
            <returns>True if the item with the specified path is located in the collection; false otherwise.</returns>
        </member>
        <member name="M:Rebex.IO.FileSystemItemCollection.GetTotalSize">
            <summary>
            Gets the total size of files contained in the collection.
            </summary>
            <returns>The total size of files contained it the collection.</returns>
        </member>
        <member name="M:Rebex.IO.FileSystemItemCollection.GetFiles(System.Text.RegularExpressions.Regex)">
            <summary>
            Returns the paths of files in the collection that match the specified search pattern.
            </summary>
            <param name="regExp">The regular expression to match the paths or filenames against.</param>
            <returns>A <see cref="T:System.String"/> array containing the paths or names of files in the specified directory that match the specified search pattern.</returns>
            <remarks>
            The method works in two different modes (determined by <see cref="P:Rebex.IO.FileSystemItemCollection.UsePath"/> property):
            <list type="alpha">
            	<item><see cref="P:Rebex.IO.FileSystemItem.Name">Filenames without path</see> are searched and returned. This mode is used by default for collections returned by GetList method.</item>
            	<item><see cref="P:Rebex.IO.FileSystemItem.Path">Filenames with path</see> are searched and returned. This mode is used by default for collection returned by GetItems method.</item>
            </list>
            </remarks>
        </member>
        <member name="M:Rebex.IO.FileSystemItemCollection.GetFiles(System.String,System.Boolean)">
            <summary>
            Returns the names of files in the collection that match the specified search pattern.
            </summary>
            <param name="searchPattern">The search string to match the items against.</param>
            <param name="caseSensitive">If tree, perform unix-like case-sensitive matching.</param>
            <returns>A <see cref="T:System.String"/> array containing the names of files in the specified directory that match the specified search pattern.</returns>
            <remarks>
            <p>The following wildcards are permitted in <i>searchPattern</i>:<br/>
            <b>*</b> - Zero or more characters.<br/>
            <b>?</b> - Exactly one character.<br/>
            Characters other than the wildcards represent themselves.
            For example, the searchPattern string "*.txt" searches for all names/paths
            ending with the ".txt". The searchPattern string "s*" searches for all
            names/paths beginning with the letter "s".
            </p>
            <p>
            The method works in two different modes (determined by <see cref="P:Rebex.IO.FileSystemItemCollection.UsePath"/> property):
            <list type="alpha">
            	<item><see cref="P:Rebex.IO.FileSystemItem.Name">Filenames without path</see> are searched and returned. This mode is used by default for collections returned by GetList method.</item>
            	<item><see cref="P:Rebex.IO.FileSystemItem.Path">Filenames with path</see> are searched and returned. This mode is used by default for collection returned by GetItems method.</item>
            </list>
            </p>
            </remarks>
        </member>
        <member name="M:Rebex.IO.FileSystemItemCollection.GetFiles(System.String)">
            <summary>
            Returns the names of files in the collection that match the specified search pattern.
            </summary>
            <param name="searchPattern">The search string to match the items against.</param>
            <returns>A <see cref="T:System.String"/> array containing the names of files in the specified directory that match the specified search pattern.</returns>
            <remarks>
            <p>The following wildcard specifiers are permitted in <i>searchPattern</i>:<br/>
            <b>*</b> - Zero or more characters.<br/>
            <b>?</b> - Exactly one character.<br/>
            Characters other than the wild card specifiers represent themselves.
            For example, the searchPattern string "*t" searches for all names in path
            ending with the letter "t". The searchPattern string "s*" searches for all
            names in path beginning with the letter "s".
            </p>
            <p>
            The method works in two different modes (determined by <see cref="P:Rebex.IO.FileSystemItemCollection.UsePath"/> property):
            <list type="alpha">
            	<item><see cref="P:Rebex.IO.FileSystemItem.Name">Filenames without path</see> are searched and returned. This mode is used by default for collections returned by GetList method.</item>
            	<item><see cref="P:Rebex.IO.FileSystemItem.Path">Filenames with path</see> are searched and returned. This mode is used by default for collection returned by GetItems method.</item>
            </list>
            </p>
            </remarks>
        </member>
        <member name="M:Rebex.IO.FileSystemItemCollection.Sort">
            <summary>
            Sorts the items in the entire collection alphabetically.
            </summary>
        </member>
        <member name="M:Rebex.IO.FileSystemItemCollection.Sort(System.Collections.IComparer)">
            <summary>
            Sorts the elements in the entire collection using the specified comparer.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.IComparer"/> implementation to use when comparing elements, or a null reference to sort alphabetically.</param>
            <remarks>This method uses <see cref="M:System.Collections.ArrayList.Sort(System.Collections.IComparer)"/>, which uses QuickSort algorithm. See its description for more information.</remarks>
        </member>
        <member name="M:Rebex.IO.FileSystemItemCollection.Sort(System.Int32,System.Int32,System.Collections.IComparer)">
            <summary>
            Sorts the elements in a section of the collection using the specified comparer.
            </summary>
            <param name="index">The zero-based starting index of the range to sort.</param>
            <param name="count">The length of the range to sort.</param>
            <param name="comparer">The <see cref="T:System.Collections.IComparer"/> implementation to use when comparing elements, or a null reference to sort alphabetically.</param>
            <remarks>This method uses <see cref="M:System.Collections.ArrayList.Sort(System.Int32,System.Int32,System.Collections.IComparer)"/>, which uses QuickSort algorithm. See its description for more information.</remarks>
        </member>
        <member name="P:Rebex.IO.FileSystemItemCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
            <value>An object that can be used to synchronize access to the collection.</value>
        </member>
        <member name="P:Rebex.IO.FileSystemItemCollection.Count">
            <summary>
            Gets the number of elements contained in the collection.
            </summary>
            <value>The number of elements contained in the collection.</value>
        </member>
        <member name="P:Rebex.IO.FileSystemItemCollection.Item(System.Int32)">
            <summary>
            Gets the item at the specified index.
            </summary>
            <param name="index">A zero-based index of the item to get.</param>
            <value>Item at the specified index.</value>
        </member>
        <member name="P:Rebex.IO.FileSystemItemCollection.Item(System.String)">
            <summary>
            Gets the item of the specified path.
            </summary>
            <param name="path">The path of the item to get.</param>
            <value>Item with the specified path, or null if not found.</value>
        </member>
        <member name="P:Rebex.IO.FileSystemItemCollection.System#Collections#Generic#ICollection{Rebex#IO#FileSystemItem}#IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
            <returns>
            Always returns false.
            </returns>
        </member>
        <member name="P:Rebex.IO.FileSystemItemCollection.UsePath">
            <summary>
            Gets or sets a value that indicates whether to use a <see cref="P:Rebex.IO.FileSystemItem.Path">Path</see> or <see cref="P:Rebex.IO.FileSystemItem.Name">Name</see> for pattern matching
            and return values in the <see cref="M:Rebex.IO.FileSystemItemCollection.GetFiles(System.Text.RegularExpressions.Regex)"/> method.
            </summary>
        </member>
        <member name="M:Rebex.IO.LocalItemCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rebex.IO.LocalItemCollection"/> class.
            </summary>
        </member>
        <member name="M:Rebex.IO.LocalItemCollection.CheckItem(Rebex.IO.FileSystemItem)">
            <summary>
            Validates whether the item is correct and can be added.
            </summary>
            <param name="item">Item to add.</param>
        </member>
        <member name="M:Rebex.IO.LocalItemCollection.Add(Rebex.IO.LocalItem)">
            <summary>
            Adds the item to the collection.
            </summary>
            <param name="item">The item to be added to the collection.</param>
        </member>
        <member name="M:Rebex.IO.LocalItemCollection.Add(Rebex.IO.FileSystemItem)">
            <summary>
            Adds the item to the collection.
            </summary>
            <param name="item">The item to be added to the collection.</param>
        </member>
        <member name="M:Rebex.IO.LocalItemCollection.AddRange(System.Collections.Generic.IEnumerable{Rebex.IO.FileSystemItem})">
            <summary>
            Adds the elements of the specified collection to the end of the LocalItemCollection.
            </summary>
            <param name="collection">The collection whose elements should be added to the end of the FtpItemCollection.</param>
        </member>
        <member name="M:Rebex.IO.LocalItemCollection.AddRange(System.Collections.Generic.IEnumerable{Rebex.IO.LocalItem})">
            <summary>
             Adds the elements of the specified collection to the end of the LocalItemCollection.
            </summary>
            <param name="collection">The collection whose elements should be added to the end of the FtpItemCollection.</param>
        </member>
        <member name="M:Rebex.IO.LocalItemCollection.Contains(Rebex.IO.LocalItem)">
            <summary>
            Determines whether the item is in the collection.
            </summary>
            <param name="item">The item to locate in the collection.</param>
            <returns>True if the item is located in the collection; false otherwise.</returns>
        </member>
        <member name="M:Rebex.IO.LocalItemCollection.Contains(Rebex.IO.FileSystemItem)">
            <summary>
            Determines whether the item is in the collection.
            </summary>
            <param name="item">The item to locate in the collection.</param>
            <returns>True if the item is located in the collection; false otherwise.</returns>
        </member>
        <member name="M:Rebex.IO.LocalItemCollection.Contains(System.String)">
            <summary>
            Determines whether the item with the specified path is in the colleciton.
            </summary>
            <param name="path">The path to locate in the collection.</param>
            <returns>True if the item with the specified path is located in the collection; false otherwise.</returns>
        </member>
        <member name="M:Rebex.IO.LocalItemCollection.CopyTo(Rebex.IO.LocalItem[],System.Int32)">
            <summary>
            Copies the range of elements from the collection to a one-dimensional
            <see cref="T:Rebex.IO.LocalItem"/> array, starting at the specified index of the target array.
            </summary>
            <param name="array">One-dimensional zero-based <see cref="T:Rebex.IO.LocalItem"/> array that is the destination of the elements copied from the collection.</param>
            <param name="arrayIndex">A zero-based index in the destination array at which copying begins.</param>
        </member>
        <member name="M:Rebex.IO.LocalItemCollection.Remove(Rebex.IO.LocalItem)">
            <summary>
            Removes the specified item from the collection.
            </summary>
            <param name="item">The item to remove from the collection.</param>
            <returns>
            True if item was successfully removed from the collection; false otherwise.
            </returns>
        </member>
        <member name="M:Rebex.IO.LocalItemCollection.Remove(Rebex.IO.FileSystemItem)">
            <summary>
            Removes the specified item from the collection.
            </summary>
            <param name="item">The item to remove from the collection.</param>
            <returns>
            True if item was successfully removed from the collection; false otherwise.
            </returns>
        </member>
        <member name="M:Rebex.IO.LocalItemCollection.GetEnumerator">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerator`1"/> for the collection.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> for the collection.</returns>
        </member>
        <member name="P:Rebex.IO.LocalItemCollection.System#Collections#Generic#ICollection{Rebex#IO#LocalItem}#IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
            <returns>
            Always returns false.
            </returns>
        </member>
        <member name="P:Rebex.IO.LocalItemCollection.Item(System.Int32)">
            <summary>
            Gets the item at the specified index.
            </summary>
            <param name="index">A zero-based index of the item to get.</param>
            <value>Item at the specified index.</value>
        </member>
        <member name="P:Rebex.IO.LocalItemCollection.Item(System.String)">
            <summary>
            Gets the item of the specified path.
            </summary>
            <param name="path">The path of the item to get.</param>
            <value>Item with the specified path, or null if not found.</value>
        </member>
        <member name="T:Rebex.MonoHelper">
            <summary>
            Provides a specific functionality, which either differs on Mono (from standard .NET) or which exists on Mono only.
            </summary>
        </member>
        <member name="P:Rebex.MonoHelper.PosixAssembly">
            <summary>
            Gets assembly Mono.Posix, Version=2.0.0.0 (loaded via reflection). 
            </summary>
            <value>Assembly, never null.</value>
        </member>
        <member name="T:Rebex.MonoHelper.UnixSymbolicLinkInfoWrapper">
            <summary>
            A wraper providing part of the Mono.Unix.UnixSymbolicLinkInfo class functionality
            </summary>
        </member>
        <member name="F:Rebex.MonoHelper.UnixSymbolicLinkInfoWrapper._inner">
            <summary>
            The instance of Mono.Unix.UnixSymbolicLinkInfo we are wrapping. 
            </summary>
        </member>
        <member name="F:Rebex.MonoHelper.UnixSymbolicLinkInfoWrapper._innerType">
            <summary>
            An actual Type of the _inner instance.
            </summary>
        </member>
        <member name="M:Rebex.MonoHelper.UnixSymbolicLinkInfoWrapper.#ctor(System.String)">
            <summary>
            Create an instance of UnixSymbolicLinkInfoWrapper over given path.
            </summary>
            <param name="path">Path to a symbolic link</param>
        </member>
        <member name="P:Rebex.MonoHelper.UnixSymbolicLinkInfoWrapper.ContentsPath">
            <summary>
            Gets target path of this symbolic link.
            </summary>
            <remarks>
            It is a direct (shallow) target. If the target is also a link, it is not resolved, just its path is returned. 
            </remarks>
        </member>
        <member name="T:Rebex.SortingOrder">
            <summary>
            Represents sorting order.
            </summary>
        </member>
        <member name="F:Rebex.SortingOrder.Ascending">
            <summary>
            Ascending sort order.
            </summary>
        </member>
        <member name="F:Rebex.SortingOrder.Descending">
            <summary>
            Descending sort order.
            </summary>
        </member>
        <member name="T:Rebex.TimeComparisonGranularity">
            <summary>
            Specifies granularity for time comparisons.
            </summary>
        </member>
        <member name="F:Rebex.TimeComparisonGranularity.None">
            <summary>
            Time is taken as is.
            </summary>
            <remarks>
            Useful when working with NTFS file system.
            </remarks>
        </member>
        <member name="F:Rebex.TimeComparisonGranularity.Seconds">
            <summary>
            The smallest time unit is one second (milliseconds are ignored). 
            E.g. 11:33:55.999 is rounded to 11:33:55.000.
            </summary>
            <remarks>
            Useful when working with some UNIX FTP or SFTP servers.
            </remarks>
        </member>
        <member name="F:Rebex.TimeComparisonGranularity.TwoSeconds">
            <summary>
            The smallest time unit is two-second. So odd seconds are rounded to lower even value (milliseconds are ignored). 
            E.g. 11:33:55.999 is rounded to 11:33:54.000.
            </summary>
            <remarks>
            Useful when working with FAT file system (.NET CF, MS-DOS).
            </remarks>
        </member>
        <member name="F:Rebex.TimeComparisonGranularity.Days">
            <summary>
            The smallest time unit is one day (time component is ignored).
            E.g. 2012-12-12 11:33:55.999 is rounded to 2012-12-12 00:00:00.000.
            </summary>
            <remarks>
            Useful when working with some UNIX FTP or SFTP servers.
            </remarks>
        </member>
        <member name="T:Rebex.FileLogWriter">
            <summary>
            File-based log writer that saves log messages into a text file.
            </summary>
        </member>
        <member name="M:Rebex.FileLogWriter.#ctor(System.String)">
            <summary>
            Creates a new instance of file log writer based on the specified file and the default &quot;Info&quot; log level.
            </summary>
            <param name="path">Path to log file.</param>
        </member>
        <member name="M:Rebex.FileLogWriter.#ctor(System.String,Rebex.LogLevel)">
            <summary>
            Creates a new instance of file log writer based on the specified file and log level.
            </summary>
            <param name="path">Path to log file.</param>
            <param name="level">Log level.</param>
        </member>
        <member name="M:Rebex.FileLogWriter.Dispose(System.Boolean)">
            <summary>
            Dispose(bool disposing) executes in two distinct scenarios.
            If disposing equals true, the method has been called directly
            or indirectly by a user's code. Managed and unmanaged resources
            can be disposed.
            If disposing equals false, the method has been called by the 
            runtime from inside the finalizer and you should not reference 
            other objects. Only unmanaged resources can be disposed.
            </summary>
            <param name="disposing"> If true, is called by IDisposable.Dispose. 
            Otherwise it is called by finalizer.</param>
        </member>
        <member name="M:Rebex.FileLogWriter.WriteMessage(System.String)">
            <summary>
            Appends the specified message text into a text-based log.
            </summary>
            <param name="message">Full message info.</param>
        </member>
        <member name="M:Rebex.FileLogWriter.Finalize">
            <summary>
            Finalizer. Called by garbage collector during object destruction.
            </summary>
        </member>
        <member name="P:Rebex.FileLogWriter.Path">
            <summary>
            Path to the log file.
            </summary>
        </member>
        <member name="P:Rebex.FileLogWriter.Filename">
            <summary>
            Path to the log file.
            </summary>
        </member>
        <member name="P:Rebex.FileLogWriter.IsClosed">
            <summary>
            Get a value indicating whether the log writer is closed.
            </summary>
            <value>True when logfile is closed. False if logfile is opened and ready for writing.</value>
        </member>
        <member name="T:Rebex.LogLevel">
            <summary>
            Log level - specifies the levels of severity.
            </summary>
        </member>
        <member name="F:Rebex.LogLevel.Verbose">
            <summary>
            Be verbose - log everything.
            </summary>
        </member>
        <member name="F:Rebex.LogLevel.Debug">
            <summary>
            Log all messages useful for debugging purposes.
            </summary>
        </member>
        <member name="F:Rebex.LogLevel.Info">
            <summary>
            Only log informative messages.
            </summary>
        </member>
        <member name="F:Rebex.LogLevel.Error">
            <summary>
            Only log errors.
            </summary>
        </member>
        <member name="F:Rebex.LogLevel.Off">
            <summary>
            The Off level designates a higher level than all the rest.
            </summary>
        </member>
        <member name="T:Rebex.ILogWriterProvider">
            <summary>
            Define properties and methods for logging providers.
            </summary>
        </member>
        <member name="P:Rebex.ILogWriterProvider.LogWriter">
            <summary>
            Gets a <see cref="T:Rebex.ILogWriter"/> to use for logging.
            </summary>
        </member>
        <member name="T:Rebex.Licensing">
            <summary>
            License key infrastructure for trial versions of Rebex components.
            </summary>
        </member>
        <member name="P:Rebex.Licensing.Key">
            <summary>
            Gets or sets the license key.
            </summary>
            <value>License key.</value>
        </member>
        <member name="T:Rebex.MultiComparer">
            <summary>
            Class for chained comparison of objects.
            </summary>
        </member>
        <member name="F:Rebex.MultiComparer._comparerChain">
            <summary>
            Chain of comparers used for multi comparison.
            </summary>
        </member>
        <member name="M:Rebex.MultiComparer.#ctor(System.Collections.IComparer[])">
            <summary>
            Creates a new instance of MultiComparer.
            </summary>
            <param name="comparerChain">An array of comparers to use.</param>
        </member>
        <member name="M:Rebex.MultiComparer.Compare(System.Object,System.Object)">
            <summary>
            IComparer interface implementation. Compares two instances of provided objects.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            A signed integer that indicates the result of of x and y comparison.
            Value Less than zero means x is less than y. Zero x equals y. Greater than zero x is greater than y.
            </returns>
        </member>
        <member name="T:Rebex.IO.FileSetMatchMode">
            <summary>
            Specifies modes of the <see cref="M:Rebex.IO.FileSet.IsMatch(System.String,Rebex.IO.FileSetMatchMode)"/> method.
            </summary>
        </member>
        <member name="F:Rebex.IO.FileSetMatchMode.MatchFile">
            <summary>
            Specifies whether the specified regular file matches the the <see cref="T:Rebex.IO.FileSet"/>.
            </summary>
        </member>
        <member name="F:Rebex.IO.FileSetMatchMode.MatchDirectory">
            <summary>
            Specifies whether the specified directory matches the the <see cref="T:Rebex.IO.FileSet"/>.
            </summary>
        </member>
        <member name="F:Rebex.IO.FileSetMatchMode.TraverseDirectory">
            <summary>
            Specifies whether the specified directory should be traversed to retrieve another matches.
            </summary>
        </member>
        <member name="T:Rebex.IO.FileSet">
            <summary>
            Set of inclusion and exclusion patterns.
            It doesn't depend on the order how the inclusion and exclusion patterns are added into the <see cref="T:Rebex.IO.FileSet"/>.
            </summary>
        </member>
        <member name="M:Rebex.IO.FileSet.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rebex.IO.FileSet"/> class.
            </summary>
        </member>
        <member name="M:Rebex.IO.FileSet.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rebex.IO.FileSet"/> class.
            </summary>
            <param name="basePath">A path to be considered as a base path of the set.</param>
        </member>
        <member name="M:Rebex.IO.FileSet.#ctor(System.Char[])">
            <summary>
            Initializes a new instance of the <see cref="T:Rebex.IO.FileSet"/> class.
            </summary>
            <param name="directorySeparators">Directory separators to be used in all paths.</param>
        </member>
        <member name="M:Rebex.IO.FileSet.#ctor(System.String,System.Char[])">
            <summary>
            Initializes a new instance of the <see cref="T:Rebex.IO.FileSet"/> class.
            </summary>
            <param name="basePath">A path to be considered as a base path of the set.</param>
            <param name="directorySeparators">Directory separators to be used in all paths.</param>
        </member>
        <member name="M:Rebex.IO.FileSet.#ctor(System.String,System.String)">
            <summary>
            Initializes the <see cref="T:Rebex.IO.FileSet"/> object.
            </summary>
            <param name="basePath">A path to be considered as a base path of the set.</param>
            <param name="pattern">A path or mask relative to a base path which define an initial inclusion pattern.</param>
        </member>
        <member name="M:Rebex.IO.FileSet.#ctor(System.String,System.String,Rebex.IO.TraversalMode)">
            <summary>
            Initializes the <see cref="T:Rebex.IO.FileSet"/> object.
            </summary>
            <param name="basePath">A path to be considered as a base path of the set.</param>
            <param name="pattern">A path or mask relative to a base path which define an initial inclusion pattern.</param>
            <param name="mode">Specifies traversal mode of directories for the <paramref name="pattern"/>.</param>
        </member>
        <member name="M:Rebex.IO.FileSet.SetDirectorySeparators(System.Char[])">
            <summary>
            Sets the directory separators of the <see cref="T:Rebex.IO.FileSet"/> object.
            </summary>
            <param name="directorySeparators">A directory separators array.</param>
        </member>
        <member name="M:Rebex.IO.FileSet.Include(System.String)">
            <summary>
            Adds a path or mask into collection of inclusion patterns. The supported wildcards are '?' and '*' and '**'.
            For detailed specification with examples see the documentation.
            </summary>
            <param name="pattern">A path or mask relative to a base path which define an inclusion pattern.</param>	
        </member>
        <member name="M:Rebex.IO.FileSet.Include(System.String,Rebex.IO.TraversalMode)">
            <summary>
            Adds a path or mask into collection of inclusion patterns. The supported wildcards are '?' and '*' and '**'.
            For detailed specification with examples see the documentation.
            </summary>
            <param name="pattern">A path or mask relative to a base path which define an inclusion pattern.</param>
            <param name="mode">Specifies traversal mode of directories for the <paramref name="pattern"/>.</param>
            <remarks>
            '?' matches any single character.<br/>
            '*' matches any number of any characters except the directory separators.<br/>
            '**' matches any number of any characters (directory separators can be reduced e.g. "a\**\b" is equivalent to "a\**\**\b" which matches "a\x\y\z\b" and also "a\b" but not "ab").<br/>
            </remarks>
            <example>
            <table>
            <tr><td>data\file-???.txt</td><td>Matches files within the "data" directory e.g. "data\file-007.txt", but not "data\file-7.txt".</td></tr>
            <tr><td>data\*.txt</td><td>Matches any ".txt" file within the "data" directory (only within the "data" directory, not in subdirectories) e.g. "data\file.txt", but not "data\a\b\c\file.txt".</td></tr>
            <tr><td>data\**\*.txt</td><td>Matches any ".txt" file anywhere within the "data" directory and its subdirectories e.g. "data\file.txt" and also "data\a\b\c\file.txt".</td></tr>
            </table>
            </example>
        </member>
        <member name="M:Rebex.IO.FileSet.Exclude(System.String)">
            <summary>
            Adds a path or mask into collection of exclusion patterns. The supported wildcards are '?' and '*' and '**'.
            For detailed specification with examples see the documentation.
            </summary>
            <param name="pattern">A path or mask relative to a base path which define an exclusion pattern.</param>
        </member>
        <member name="M:Rebex.IO.FileSet.Exclude(System.String,Rebex.IO.TraversalMode)">
            <summary>
            Adds a path or mask into collection of exclusion patterns. The supported wildcards are '?' and '*' and '**'.
            For detailed specification with examples see the documentation.
            </summary>
            <param name="pattern">A path or mask relative to a base path which define an exclusion pattern.</param>
            <param name="mode">Specifies traversal mode of directories for the <paramref name="pattern"/>.</param>
            <remarks>
            '?' matches any single character.<br/>
            '*' matches any number of any characters except the directory separators.<br/>
            '**' matches any number of any characters (directory separators can be reduced e.g. "a\**\b" is equivalent to "a\**\**\b" which matches "a\x\y\z\b" and also "a\b" but not "ab").<br/>
            </remarks>
            <example>
            <table>
            <tr><td>data\file-???.txt</td><td>Matches files within the "data" directory e.g. "data\file-007.txt", but not "data\file-7.txt".</td></tr>
            <tr><td>data\*.txt</td><td>Matches any ".txt" file within the "data" directory (only within the "data" directory, not in subdirectories) e.g. "data\file.txt", but not "data\a\b\c\file.txt".</td></tr>
            <tr><td>data\**\*.txt</td><td>Matches any ".txt" file anywhere within the "data" directory and its subdirectories e.g. "data\file.txt" and also "data\a\b\c\file.txt".</td></tr>
            </table>
            </example>
        </member>
        <member name="M:Rebex.IO.FileSet.IsMatch(System.String,Rebex.IO.FileSetMatchMode)">
            <summary>
            Returns a value indicating whether the specified relative path matches the <see cref="T:Rebex.IO.FileSet"/>.
            This method is intended to be overwritten by descendants.
            In this case please note that for optimization issues when called with parameters equal to "." and <see cref="F:Rebex.IO.FileSetMatchMode.TraverseDirectory"/> 
            this method should return false if no inclusion pattern was specified; true otherwise.
            </summary>
            <param name="relativePath">A relative path to a base path to be tested for a match.</param>
            <param name="mode">Specifies how the <paramref name="relativePath"/> should be treated for match.</param>
            <returns>True if the path matches the set; false otherwise.</returns>
        </member>
        <member name="M:Rebex.IO.FileSet.GetLocalItems">
            <summary>
            Gets a collection of local file system items (files and directories) which matches this <see cref="T:Rebex.IO.FileSet"/>.
            Only items which matches no exclusion pattern and matches at leas one inclusion pattern are included into result collection.
            It doesn't depend on the order how the inclusion and exclusion patterns were added into the <see cref="T:Rebex.IO.FileSet"/>.<br/>
            If you don't want to include empty directories into result collection, please set the <see cref="P:Rebex.IO.FileSet.EmptyDirectoriesIncluded"/> to false.
            </summary>
            <returns>&gt;A collection of local file system items which matches this <see cref="T:Rebex.IO.FileSet"/>.</returns>
        </member>
        <member name="P:Rebex.IO.FileSet.DirectorySeparator">
            <summary>
            Gets the first directory separator valid for this <see cref="T:Rebex.IO.FileSet"/>.
            </summary>
            <value>The first directory separator valid for this <see cref="T:Rebex.IO.FileSet"/>.</value>
        </member>
        <member name="P:Rebex.IO.FileSet.BasePath">
            <summary>
            Gets or sets the base path of the set.
            </summary>
            <value>A path to be considered as a base path of the set.</value>
        </member>
        <member name="P:Rebex.IO.FileSet.IsCaseSensitive">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:Rebex.IO.FileSet"/> is case sensitive.
            </summary>
            <value>True if the <see cref="T:Rebex.IO.FileSet"/> is case sensitive; false otherwise.</value>
        </member>
        <member name="P:Rebex.IO.FileSet.EmptyDirectoriesIncluded">
            <summary>
            Gets or sets a value indicating whether a consumer of the <see cref="T:Rebex.IO.FileSet"/> should include empty directories or not.
            Also used in the <see cref="M:Rebex.IO.FileSet.GetLocalItems"/> method.
            </summary>
            <value>True if empty directories should not be included; false otherwise.</value>
        </member>
        <member name="P:Rebex.IO.FileSet.ContainingDirectoriesIncluded">
            <summary>
            Gets or sets a value indicating whether a consumer of the <see cref="T:Rebex.IO.FileSet"/> should also include directories where the files are located.
            Also used in the <see cref="M:Rebex.IO.FileSet.GetLocalItems"/> method.
            Example: Ftp.GetItems("DIR/*.txt") - this property determines whether item "DIR" should be also included in output collection.
            </summary>
            <value>True if directories where the files are located should be included; false otherwise.</value>
        </member>
        <member name="P:Rebex.IO.FileSet.Flatten">
            <summary>
            Gets or sets a value indicating whether a consumer of the <see cref="T:Rebex.IO.FileSet"/> should flatten the output.
            Flatten means to don't persist directory structure. 
            For example if used to upload files "A/a.txt" and "B/b.txt" to the "/data" directory on a FTP server,
            files "a.txt" and "b.txt" are uploaded directly into the "/data" directory
            (directories "A" and "B" are not created in the "/data" directory).
            </summary>
            <value>True if flatten the output; false otherwise.</value>
        </member>
        <member name="T:Rebex.IO.FileSet.FileSetElement">
            <summary>
            Defines an include or exclude element for the <see cref="T:Rebex.IO.FileSet"/> object.
            </summary>
        </member>
        <member name="M:Rebex.IO.FileSet.FileSetElement.Equals(System.Object)">
            <summary>
            Determines whether this instance and other <see cref="T:Rebex.IO.FileSet.FileSetElement"/> instance have the same value.
            </summary>
            <param name="obj">An instance of the <see cref="T:Rebex.IO.FileSet.FileSetElement"/>.</param>
            <returns>True if the values of instances are equal; false otherwise.</returns>
        </member>
        <member name="M:Rebex.IO.FileSet.FileSetElement.GetHashCode">
            <summary>
            Gets a hash code of this instance.
            </summary>
            <returns>A hash code.</returns>
        </member>
        <member name="M:Rebex.IO.FileSet.FileSetElement.#ctor(System.String,Rebex.IO.TraversalMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Rebex.IO.FileSet.FileSetElement"/> class.
            </summary>
            <param name="pattern">A path or mask which defines the pattern.</param>
            <param name="mode">Specifies whether and how to traverse directories if the <paramref name="pattern"/> matches a directory.</param>
        </member>
        <member name="P:Rebex.IO.FileSet.FileSetElement.Pattern">
            <summary>
            Gets a path or mask.
            </summary>
            <value>A path or mask.</value>
        </member>
        <member name="P:Rebex.IO.FileSet.FileSetElement.Mode">
            <summary>
            Gets a directory traversal mode.
            </summary>
            <value>A directory traversal mode.</value>
        </member>
        <member name="T:Rebex.Security.Cryptography.Pkcs.Asn1Encoder">
            <summary>
            Summary description for Asn1Encoder.
            </summary>
        </member>
        <member name="T:Rebex.Security.Certificates.SignatureHashAlgorithm">
            <summary>
            The hash algorithm used to compute the hash for hash signing
            and verification methods.
            </summary>
        </member>
        <member name="F:Rebex.Security.Certificates.SignatureHashAlgorithm.Unsupported">
            <summary>
            Unsupported hash algorithm.
            </summary>
        </member>
        <member name="F:Rebex.Security.Certificates.SignatureHashAlgorithm.MD5">
            <summary>
            MD5.
            </summary>
        </member>
        <member name="F:Rebex.Security.Certificates.SignatureHashAlgorithm.SHA1">
            <summary>
            SHA1.
            </summary>
        </member>
        <member name="F:Rebex.Security.Certificates.SignatureHashAlgorithm.MD5SHA1">
            <summary>
            MD5SHA1.
            </summary>
        </member>
        <member name="F:Rebex.Security.Certificates.SignatureHashAlgorithm.GOST_R3411_94">
            <summary>
            GOST R 34.11-94.
            </summary>
        </member>
        <member name="F:Rebex.Security.Certificates.SignatureHashAlgorithm.SHA256">
            <summary>
            SHA-256.
            </summary>
        </member>
        <member name="F:Rebex.Security.Certificates.SignatureHashAlgorithm.SHA384">
            <summary>
            SHA-384.
            </summary>
        </member>
        <member name="F:Rebex.Security.Certificates.SignatureHashAlgorithm.SHA512">
            <summary>
            SHA-512.
            </summary>
        </member>
        <member name="T:Rebex.Security.Certificates.KeyAlgorithm">
            <summary>
            The key algorithm for the certificate.
            </summary>
        </member>
        <member name="F:Rebex.Security.Certificates.KeyAlgorithm.Unsupported">
            <summary>
            Unsupported key algorithm.
            </summary>
        </member>
        <member name="F:Rebex.Security.Certificates.KeyAlgorithm.RSA">
            <summary>
            RSA.
            </summary>
        </member>
        <member name="F:Rebex.Security.Certificates.KeyAlgorithm.DSA">
            <summary>
            DSA.
            </summary>
        </member>
        <member name="F:Rebex.Security.Certificates.KeyAlgorithm.GOST_R3410_2001">
            <summary>
            GOST R 34.10-2001.
            </summary>
        </member>
        <member name="T:Rebex.Security.Certificates.KeyUses">
            <summary>
            Intended key usage.
            </summary>
        </member>
        <member name="F:Rebex.Security.Certificates.KeyUses.DigitalSignature">
            <summary>Digital signature.</summary>
        </member>
        <member name="F:Rebex.Security.Certificates.KeyUses.NonRepudiation">
            <summary>Non-repudiation.</summary>
        </member>
        <member name="F:Rebex.Security.Certificates.KeyUses.KeyEncipherment">
            <summary>Key encipherment.</summary>
        </member>
        <member name="F:Rebex.Security.Certificates.KeyUses.DataEncipherment">
            <summary>Data encipherment.</summary>
        </member>
        <member name="F:Rebex.Security.Certificates.KeyUses.KeyAgreement">
            <summary>Key agreement.</summary>
        </member>
        <member name="F:Rebex.Security.Certificates.KeyUses.KeyCertSign">
            <summary>Certificate signing.</summary>
        </member>
        <member name="F:Rebex.Security.Certificates.KeyUses.CrlSign">
            <summary>CRL signing.</summary>
        </member>
        <member name="F:Rebex.Security.Certificates.KeyUses.EncipherOnly">
            <summary>Key encipherment only.</summary>
        </member>
        <member name="F:Rebex.Security.Certificates.KeyUses.DecipherOnly">
            <summary>Key decipherment only.</summary>
        </member>
        <member name="T:Rebex.Security.Certificates.KeySetOptions">
            <summary>
            Key set options.
            </summary>
        </member>
        <member name="F:Rebex.Security.Certificates.KeySetOptions.Exportable">
            <summary>Imported keys are marked as exportable.</summary>
        </member>
        <member name="F:Rebex.Security.Certificates.KeySetOptions.UserProtected">
            <summary>The user is to be notified through a dialog box or other method when certain attempts to use this key are made.</summary>
        </member>
        <member name="F:Rebex.Security.Certificates.KeySetOptions.MachineKeySet">
            <summary>Private keys are stored under the local computer and not under the current user.</summary>
        </member>
        <member name="F:Rebex.Security.Certificates.KeySetOptions.UserKeySet">
            <summary>Private keys are stored under the current user and not under the local computer even if the PFX BLOB specifies that they should go into the local computer.</summary>
        </member>
        <member name="F:Rebex.Security.Certificates.KeySetOptions.PersistKeySet">
            <summary>Private keys are persisted on on disk when importing a certificate</summary>
        </member>
        <member name="T:Rebex.Security.Certificates.CertificateFormat">
            <summary>
            Specifies certificate file format.
            </summary>
        </member>
        <member name="F:Rebex.Security.Certificates.CertificateFormat.Der">
            <summary>Binary DER encoded X.509 certificate.</summary>
        </member>
        <member name="F:Rebex.Security.Certificates.CertificateFormat.Base64Der">
            <summary>Base-64 encoded DER X.509 certificate.</summary>
        </member>
        <member name="F:Rebex.Security.Certificates.CertificateFormat.Pfx">
            <summary>P12/PFX certificate with private key (if available).</summary>
            <remarks>Not supported on .NET CF.</remarks>
        </member>
        <member name="T:Rebex.Security.Certificates.Certificate">
            <summary>
            Represents an X509 v3 certificate with either RSA or DSA key.
            </summary>
        </member>
        <member name="M:Rebex.Security.Certificates.Certificate.#ctor(System.Byte[])">
            <summary>
            Loads a certificate from an array.
            </summary>
            <param name="data">An array containing DER encoded certificate data.</param>
        </member>
        <member name="M:Rebex.Security.Certificates.Certificate.LoadDer(System.String)">
            <summary>
            Loads a DER encoded certificate from the specified file.
            </summary>
            <param name="path">Path to a file.</param>
            <returns>A certificate.</returns>
        </member>
        <member name="M:Rebex.Security.Certificates.Certificate.LoadDer(System.IO.Stream)">
            <summary>
            Loads a DER encoded certificate from the specified stream.
            </summary>
            <param name="stream">Stream to load a certificate from.</param>
            <returns>A certificate.</returns>
        </member>
        <member name="M:Rebex.Security.Certificates.Certificate.LoadDerWithKey(System.String,System.String,System.String)">
            <summary>
            Loads a DER encoded certificate and a private key (in PKCS #8, PuTTY or SSLeay format) from the specified files.
            </summary>
            <param name="certificatePath">Path to a certificate file.</param>
            <param name="privateKeyPath">Path to the private key file.</param>
            <param name="privateKeyPassword">Private key password.</param>
            <returns>A certificate.</returns>
        </member>
        <member name="M:Rebex.Security.Certificates.Certificate.LoadDerWithKey(System.IO.Stream,System.IO.Stream,System.String)">
            <summary>
            Loads a DER encoded certificate and a private key (in PKCS #8, PuTTY or SSLeay format) from the specified streams.
            </summary>
            <param name="certificateStream">Stream with the certificate.</param>
            <param name="privateKeyStream">Stream with the private key.</param>
            <param name="privateKeyPassword">Private key password.</param>
            <returns>A certificate.</returns>
        </member>
        <member name="M:Rebex.Security.Certificates.Certificate.Associate(System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Associates the supplied private key with the certificate to perform operations that need a private key.
            </summary>
            <param name="privateKey">An instance of RSA, DSA, RSACryptoServiceProvider or DSACryptoServiceProvider.</param>
        </member>
        <member name="M:Rebex.Security.Certificates.Certificate.Associate(Rebex.Security.Cryptography.Pkcs.PrivateKeyInfo)">
            <summary>
            Associates the supplied private key with the certificate to perform operations that need a private key.
            </summary>
            <param name="privateKey">The private key.</param>
        </member>
        <member name="M:Rebex.Security.Certificates.Certificate.Associate(Rebex.Security.Cryptography.AsymmetricKeyAlgorithm)">
            <summary>
            Associates the supplied private key with the certificate to perform operations that need a private key.
            </summary>
            <param name="privateKey">The private key.</param>
        </member>
        <member name="M:Rebex.Security.Certificates.Certificate.Associate(System.Security.Cryptography.AsymmetricAlgorithm,System.Boolean)">
            <summary>
            Associates the supplied private key with the certificate to perform operations that need a private key.
            </summary>
            <param name="privateKey">An instance of RSA, DSA, RSACryptoServiceProvider or DSACryptoServiceProvider.</param>
            <param name="permanentBind">Specifies whether to permanently bind the certificate to the specified CSP.</param>
        </member>
        <member name="M:Rebex.Security.Certificates.Certificate.Associate(Rebex.Security.Cryptography.AsymmetricKeyAlgorithm,System.Boolean)">
            <summary>
            Associates the supplied private key with the certificate to perform operations that need a private key.
            </summary>
            <param name="privateKey">The private key.</param>
            <param name="permanentBind">Specifies whether to permanently bind the certificate to the specified CSP.</param>
        </member>
        <member name="M:Rebex.Security.Certificates.Certificate.Associate(Rebex.Security.Cryptography.Pkcs.PrivateKeyInfo,System.Boolean)">
            <summary>
            Associates the supplied private key with the certificate to perform operations that need a private key.
            </summary>
            <param name="privateKey">The private key.</param>
            <param name="permanentBind">Specifies whether to permanently bind the certificate to the specified CSP.</param>
        </member>
        <member name="M:Rebex.Security.Certificates.Certificate.LoadPfx(System.String,System.String)">
            <summary>
            Loads a certificate with a private key from a PKCS#12 (PFX) file.
            </summary>
            <param name="path">Path to a file.</param>
            <param name="password">Encryption password.</param>
            <returns>A certificate with private key.</returns>
        </member>
        <member name="M:Rebex.Security.Certificates.Certificate.LoadPfx(System.Byte[],System.String)">
            <summary>
            Loads a certificate with a private key from a PKCS#12 (PFX) array.
            </summary>
            <param name="data">An array containing DER encoded PKCS#12 data.</param>
            <param name="password">Encryption password.</param>
            <returns>A certificate with private key.</returns>
        </member>
        <member name="M:Rebex.Security.Certificates.Certificate.LoadPfx(System.String,System.String,Rebex.Security.Certificates.KeySetOptions)">
            <summary>
            Loads a certificate with a private key from a PKCS#12 (PFX) file.
            </summary>
            <param name="path">Path to a file.</param>
            <param name="password">Encryption password.</param>
            <param name="options">Key set options.</param>
            <returns>A certificate with private key.</returns>
        </member>
        <member name="M:Rebex.Security.Certificates.Certificate.LoadPfx(System.Byte[],System.String,Rebex.Security.Certificates.KeySetOptions)">
            <summary>
            Loads a certificate with a private key from a PKCS#12 (PFX) array.
            </summary>
            <param name="data">An array containing DER encoded PKCS#12 data.</param>
            <param name="password">Encryption password.</param>
            <param name="options">Key set options.</param>
            <returns>A certificate with private key.</returns>
        </member>
        <member name="M:Rebex.Security.Certificates.Certificate.Save(System.String)">
            <summary>
            Saves the certificate to the supplied file in DER format. 
            </summary>
            <param name="fileName">Path to the file to save the certificate to. If the file exists, it is overwritten.</param>
        </member>
        <member name="M:Rebex.Security.Certificates.Certificate.Save(System.IO.Stream)">
            <summary>
            Saves the certificate to the supplied stream in DER format. 
            </summary>
            <param name="stream">Stream to save the certificate to.</param>
        </member>
        <member name="M:Rebex.Security.Certificates.Certificate.Save(System.String,Rebex.Security.Certificates.CertificateFormat)">
            <summary>
            Saves the certificate to the supplied file in specified format. 
            </summary>
            <param name="fileName">Path to the file to save the certificate to. If the file exists, it is overwritten.</param>
            <param name="format">Certificate format.</param>
        </member>
        <member name="M:Rebex.Security.Certificates.Certificate.Save(System.IO.Stream,Rebex.Security.Certificates.CertificateFormat)">
            <summary>
            Saves the certificate to the supplied stream in specified format. 
            </summary>
            <param name="stream">Stream to save the certificate to.</param>
            <param name="format">Certificate format.</param>
        </member>
        <member name="M:Rebex.Security.Certificates.Certificate.Save(System.String,Rebex.Security.Certificates.CertificateFormat,System.String)">
            <summary>
            Saves the certificate to the supplied file in specified format. 
            </summary>
            <param name="fileName">Path to the file to save the certificate to. If the file exists, it is overwritten.</param>
            <param name="format">Certificate format.</param>
            <param name="password">Password (only used by PFX/P12 format).</param>
            <remarks>Not supported on .NET CF.</remarks>
        </member>
        <member name="M:Rebex.Security.Certificates.Certificate.Save(System.IO.Stream,Rebex.Security.Certificates.CertificateFormat,System.String)">
            <summary>
            Saves the certificate to the supplied stream in specified format. 
            </summary>
            <param name="stream">Stream to save the certificate to.</param>
            <param name="format">Certificate format.</param>
            <param name="password">Password (only used by PFX/P12 format).</param>
            <remarks>Not supported on .NET CF.</remarks>
        </member>
        <member name="M:Rebex.Security.Certificates.Certificate.SavePrivateKey(System.String,System.String,Rebex.Security.Cryptography.Pkcs.PrivateKeyFormat,System.Boolean)">
            <summary>
            Saves the certificate's private key to the supplied file. 
            </summary>
            <param name="fileName">Path to the file to save the certificate to. If the file exists, it is overwritten.</param>
            <param name="password">Private key password.</param>
            <param name="format">Private key file format.</param>
            <param name="silent">If set to true, the CSP should not display any user interface (UI) when exporting private key parameters.</param>
        </member>
        <member name="M:Rebex.Security.Certificates.Certificate.SavePrivateKey(System.IO.Stream,System.String,Rebex.Security.Cryptography.Pkcs.PrivateKeyFormat,System.Boolean)">
            <summary>
            Saves the certificate's private key to the supplied stream.
            </summary>
            <param name="stream">Stream to save the private key to.</param>
            <param name="password">Private key password.</param>
            <param name="format">Private key file format.</param>
            <param name="silent">If set to true, the CSP should not display any user interface (UI) when exporting private key parameters.</param>
        </member>
        <member name="M:Rebex.Security.Certificates.Certificate.op_Implicit(System.Security.Cryptography.X509Certificates.X509Certificate)~Rebex.Security.Certificates.Certificate">
            <summary>
            Converts an <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"/> or <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"/> to a <see cref="T:Rebex.Security.Certificates.Certificate"/>.
            </summary>
            <param name="certificate">An instance of <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"/> or <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"/>.</param>
            <returns>A <see cref="T:Rebex.Security.Certificates.Certificate"/>.</returns>
        </member>
        <member name="M:Rebex.Security.Certificates.Certificate.op_Implicit(Rebex.Security.Certificates.Certificate)~System.Security.Cryptography.X509Certificates.X509Certificate2">
            <summary>
            Converts a <see cref="T:Rebex.Security.Certificates.Certificate"/> to <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"/> (or <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"/>).
            </summary>
            <param name="certificate">An instance of <see cref="T:Rebex.Security.Certificates.Certificate"/>.</param>
            <returns>An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"/>.</returns>
        </member>
        <member name="M:Rebex.Security.Certificates.Certificate.#ctor(System.IntPtr)">
            <summary>
            Creates a new instance of <see cref="T:Rebex.Security.Certificates.Certificate"/> based on the specified context.
            </summary>
            <param name="handle">A pointer to the certificate context.</param>
            <remarks>
            <p>
            Only supported on Windows platforms.
            </p>
            </remarks>
        </member>
        <member name="M:Rebex.Security.Certificates.Certificate.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate)">
            <summary>
            Creates a new instance of <see cref="T:Rebex.Security.Certificates.Certificate"/> based on the specified certificate <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"/> or <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"/>.
            </summary>
            <param name="certificate">An instance of <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"/> or <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"/>.</param>
        </member>
        <member name="M:Rebex.Security.Certificates.Certificate.GetCrlDistributionPoints">
            <summary>
            Returns the collection of CRL distribution points.
            </summary>
            <returns>Collection of CRL distribution points, or null if not available.</returns>
        </member>
        <member name="M:Rebex.Security.Certificates.Certificate.GetIssuer">
            <summary>
            Returns the DN of the certification authority that issued the X.509v3 certificate.
            </summary>
            <returns>DN of the certification authority that issued the X.509 certificate.</returns>
        </member>
        <member name="M:Rebex.Security.Certificates.Certificate.GetIssuerName">
            <summary>
            Returns the name of the certification authority that issued the X.509v3 certificate.
            </summary>
            <returns>The name of the certification authority that issued the X.509 certificate.</returns>
        </member>
        <member name="M:Rebex.Security.Certificates.Certificate.GetSubject">
            <summary>
            Returns DN of the principal to which the certificate was issued.
            </summary>
            <returns>DN of the principal to which the certificate was issued.</returns>
        </member>
        <member name="M:Rebex.Security.Certificates.Certificate.GetSubjectName">
            <summary>
            Returns the name of the principal to which the certificate was issued.
            </summary>
            <returns>The name of the principal to which the certificate was issued.</returns>
        </member>
        <member name="M:Rebex.Security.Certificates.Certificate.GetPublicKey">
            <summary>
            Returns the public key for the X.509v3 certificate.
            </summary>
            <returns>The public key for the X.509v3 certificate.</returns>
        </member>
        <member name="M:Rebex.Security.Certificates.Certificate.GetKeyAlgorithmParameters">
            <summary>
            Returns the key algorithm parameters for the X.509v3 certificate.
            </summary>
            <returns>The key algorithm parameters for the X.509v3 certificate.</returns>
        </member>
        <member name="M:Rebex.Security.Certificates.Certificate.GetSubjectKeyIdentifier">
            <summary>
            Returns the certificate's subject key identifier (SKI).
            </summary>
            <returns>Subject key identifier.</returns>
        </member>
        <member name="M:Rebex.Security.Certificates.Certificate.GetAuthorityKeyIdentifier">
            <summary>
            Returns the certificate's issuer key identifier (SKI).
            </summary>
            <returns>Issuer (authority) key identifier.</returns>
        </member>
        <member name="M:Rebex.Security.Certificates.Certificate.GetCommonName">
            <summary>
            Returns the certificate's common name, if available.
            </summary>
            <returns>Common name; or null if not available.</returns>
        </member>
        <member name="M:Rebex.Security.Certificates.Certificate.GetCommonNames">
            <summary>
            Returns the list of certificate's common names.
            </summary>
            <returns>The list of common names.</returns>
        </member>
        <member name="M:Rebex.Security.Certificates.Certificate.GetMailAddresses">
            <summary>
            Returns the list of certificate's e-mail addresses.
            </summary>
            <returns>The list of addresses.</returns>
        </member>
        <member name="M:Rebex.Security.Certificates.Certificate.GetSerialNumber">
            <summary>
            Returns the serial number of the X.509v3 certificate.
            </summary>
            <returns>The serial number of the X.509 certificate as an array of bytes.</returns>
        </member>
        <member name="M:Rebex.Security.Certificates.Certificate.GetExpirationDate">
            <summary>
            Returns the expiration date of this X.509v3 certificate (in local time).
            </summary>
            <returns>The expiration date for this X.509 certificate.</returns>
            <remarks>The expiration date is the date after which the X.509 certificate is no longer considered valid.</remarks>
        </member>
        <member name="M:Rebex.Security.Certificates.Certificate.GetEffectiveDate">
            <summary>
            Returns the effective date of this X.509v3 certificate (in local time).
            </summary>
            <returns>The effective date for this X.509 certificate.</returns>
            <remarks>The effective date is the date after which the X.509 certificate is considered valid.</remarks>
        </member>
        <member name="M:Rebex.Security.Certificates.Certificate.GetCertHash">
            <summary>
            Returns the hash value for the X.509v3 certificate as an array of bytes.
            </summary>
            <returns>The hash value for the X.509 certificate.</returns>
        </member>
        <member name="M:Rebex.Security.Certificates.Certificate.GetRawCertData">
            <summary>
            Returns the raw data for the entire X.509v3 certificate.
            </summary>
            <returns>The raw data for the entire X.509v3 certificate.</returns>
        </member>
        <member name="M:Rebex.Security.Certificates.Certificate.HasPrivateKey">
            <summary>
            Checks whether a private key for this certificate is available.
            </summary>
            <returns>true if available, false if not available.</returns>
        </member>
        <member name="M:Rebex.Security.Certificates.Certificate.IsTimeValid">
            <summary>
            Checks whether a certifiacte is time valid.
            </summary>
            <returns>true if valid, false if not valid.</returns>
        </member>
        <member name="M:Rebex.Security.Certificates.Certificate.GetIntendedUsage">
            <summary>
            Returns the intended key usage value.
            </summary>
            <returns>Intended key usage.</returns>
        </member>
        <member name="M:Rebex.Security.Certificates.Certificate.GetUsage">
            <summary>
            This method is deprecated, use <see cref="M:Rebex.Security.Certificates.Certificate.GetEnhancedUsage"/> instead.
            </summary>
            <returns>An array of intended key usage identifiers.</returns>
        </member>
        <member name="M:Rebex.Security.Certificates.Certificate.GetEnhancedUsage">
            <summary>
            Returns an array of enhanced key usage identifiers.
            </summary>
            <returns>An array of enhanced key usage identifiers, or null if the certificate is valid for all uses.</returns>
        </member>
        <member name="M:Rebex.Security.Certificates.Certificate.GetDSAParameters">
            <summary>
            Returns the DSA parameters of certificate's public key.
            </summary>
            <returns>The DSA parameters of certificate's public key.</returns>
        </member>
        <member name="M:Rebex.Security.Certificates.Certificate.GetRSAParameters">
            <summary>
            Returns the RSA parameters of certificate's public key.
            </summary>
            <returns>The RSA parameters of certificate's public key.</returns>
        </member>
        <member name="M:Rebex.Security.Certificates.Certificate.GetRSAParameters(System.Boolean,System.Boolean)">
            <summary>
            Returns the RSA parameters of certificate's public or private key.
            </summary>
            <param name="exportPrivateKeys">True if private key parameters are to be exported as well.</param>
            <param name="silent">If set to true, the CSP should not display any user interface (UI) when exporting private key parameters.</param>
            <returns>The RSA parameters of certificate's public or private key.</returns>
        </member>
        <member name="M:Rebex.Security.Certificates.Certificate.GetDSAParameters(System.Boolean,System.Boolean)">
            <summary>
            Returns the DSA parameters of certificate's public or private key.
            <param name="exportPrivateKeys">True if private key parameters are to be exported as well.</param>
            <param name="silent">If set to true, the CSP should not display any user interface (UI) when exporting private key parameters.</param>
            </summary>
            <returns>The DSA parameters of certificate's public or private key.</returns>
        </member>
        <member name="M:Rebex.Security.Certificates.Certificate.GetKeySize">
            <summary>
            Returns the size of the key in bits.
            </summary>
            <returns>Size of the key in bits.</returns>
        </member>
        <member name="M:Rebex.Security.Certificates.Certificate.VerifyHash(System.Byte[],Rebex.Security.Certificates.SignatureHashAlgorithm,System.Byte[])">
            <summary>
            Verifies the specified signature data by comparing it to the signature computed for the specified hash value.
            </summary>
            <param name="hash">The hash value of the signed data.</param>
            <param name="alg">A hash algorithm used to create the hash value.</param>
            <param name="signature">The signature for the specified hash value.</param>
            <returns>True if the signature verifies as valid; otherwise, false.</returns>
        </member>
        <member name="M:Rebex.Security.Certificates.Certificate.SignHash(System.Byte[],Rebex.Security.Certificates.SignatureHashAlgorithm,System.Boolean)">
            <summary>
            Computes the signature for the specified hash value by encrypting it with the private key.
            </summary>
            <param name="hash">The hash value of the data to be signed.</param>
            <param name="alg">A hash algorithm used to create the hash value.</param>
            <param name="silent">If set to true, the CSP should not display any user interface (UI).</param>
            <returns>The signature for the specified hash value.</returns>
            <remarks>
            <p>
            The private key for a certificate must be available for this method to succeed.
            </p>
            <p>
            If silent operation is requested and the CSP must display UI to operate, this method will fail.
            </p>
            </remarks>
        </member>
        <member name="M:Rebex.Security.Certificates.Certificate.Encrypt(System.Byte[])">
            <summary>
            Encrypts data.
            </summary>
            <param name="rgb">Data to be encrypted.</param>
            <returns>Encrypted data.</returns>
        </member>
        <member name="M:Rebex.Security.Certificates.Certificate.Decrypt(System.Byte[],System.Boolean)">
            <summary>
            Decrypts data.
            </summary>
            <param name="rgb">Data to be decrypted.</param>
            <param name="silent">If set to true, the CSP should not display any user interface (UI).</param>
            <returns>Decrypted data.</returns>
            <remarks>
            If silent operation is requested and the CSP must display UI to operate, this method will fail.
            </remarks>
        </member>
        <member name="M:Rebex.Security.Certificates.Certificate.Validate">
            <summary>
            Verifies the validity of the certificate.
            </summary>
            <returns>Validation result.</returns>
        </member>
        <member name="M:Rebex.Security.Certificates.Certificate.Validate(Rebex.Security.Certificates.ValidationOptions)">
            <summary>
            Verifies the validity of the certificate, including its compliance with the specified criteria.
            </summary>
            <param name="options">Validation options (not supported by CertificateChainEngine.Native engine on Xamarin.iOS and Xamarin.Android).</param>
            <returns>Validation result.</returns>
        </member>
        <member name="M:Rebex.Security.Certificates.Certificate.Validate(System.String,Rebex.Security.Certificates.ValidationOptions)">
            <summary>
            Verifies the validity of the certificate, including its compliance with the specified criteria.
            </summary>
            <param name="serverName">The name of the server.</param>
            <param name="options">Validation options (not supported by CertificateChainEngine.Native engine on Xamarin.iOS and Xamarin.Android).</param>
            <returns>Validation result.</returns>
        </member>
        <member name="M:Rebex.Security.Certificates.Certificate.Validate(System.String,Rebex.Security.Certificates.ValidationOptions,Rebex.Security.Certificates.CertificateChainEngine)">
            <summary>
            Verifies the validity of the certificate, including its compliance with the specified criteria,
            using the specified chain engine.
            </summary>
            <param name="serverName">The name of the server.</param>
            <param name="options">Validation options (not supported by CertificateChainEngine.Native engine on Xamarin.iOS and Xamarin.Android).</param>
            <param name="engine">Certificate chain engine.</param>
            <returns>Validation result.</returns>
        </member>
        <member name="M:Rebex.Security.Certificates.Certificate.Dispose">
            <summary>
            Disposes the object and releases resources.
            </summary>
            <remarks>
            Calling this method ensures that all resources are freed.
            </remarks>
        </member>
        <member name="M:Rebex.Security.Certificates.Certificate.Finalize">
            <summary>
            Finalizer.
            </summary>
        </member>
        <member name="P:Rebex.Security.Certificates.Certificate.Handle">
            <summary>
            Gets a handle of the certificate.
            </summary>
            <value>A handle of the certificate.</value>
            <remarks>
            <p>
            Only supported on Windows platforms.
            </p>
            </remarks>
        </member>
        <member name="P:Rebex.Security.Certificates.Certificate.Extensions">
            <summary>
            Gets the certificates extensions collection.
            </summary>
            <value>Extensions collection.</value>
        </member>
        <member name="P:Rebex.Security.Certificates.Certificate.KeyAlgorithm">
            <summary>
            Returns the key algorithm for this certificate.
            </summary>
            <value>The key algorithm for this certificate.</value>
        </member>
        <member name="P:Rebex.Security.Certificates.Certificate.Thumbprint">
            <summary>
            Gets the thumbprint of the certificate.
            </summary>
            <value>Certificate's thumbprint.</value>
        </member>
        <member name="P:Rebex.Security.Certificates.Certificate.FriendlyName">
            <summary>
            Gets or sets the friendly name associated with the certificate.
            </summary>
            <value>Friendly name associated with the certificate.</value>
            <remarks>Not available in .NET CF.</remarks>
        </member>
        <member name="T:Rebex.Security.Certificates.CertificateChainEngine">
            <summary>
            A chain engine (name space and cache) to be used to build and validate certificate chains.
            </summary>
        </member>
        <member name="F:Rebex.Security.Certificates.CertificateChainEngine.CurrentUser">
            <summary>
            The chain engine of the current user.
            </summary>
        </member>
        <member name="F:Rebex.Security.Certificates.CertificateChainEngine.LocalMachine">
            <summary>
            The chain engine of the local machine.
            </summary>
        </member>
        <member name="T:Rebex.Security.Certificates.CertificateChain">
            <summary>
            Represents a chain of certificates.
            </summary>
            <remarks>
            A chain starts by the end certificate and each following certificate
            must directly certify the one preceding it.
            The last certificate in the list is a self-signed root certificate, and
            may be optionally omitted under the assumption it must be known in any case.
            </remarks>
        </member>
        <member name="M:Rebex.Security.Certificates.CertificateChain.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the <see cref="T:Rebex.Security.Certificates.CertificateChain"/>
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/>.</returns>
        </member>
        <member name="M:Rebex.Security.Certificates.CertificateChain.GetEnumerator">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerator`1"/> for the <see cref="T:Rebex.Security.Certificates.CertificateChain"/> collection.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> for the collection.</returns>
        </member>
        <member name="M:Rebex.Security.Certificates.CertificateChain.Add(Rebex.Security.Certificates.Certificate)">
            <summary>
            Adds a certificate to the end of the chain.
            </summary>
            <param name="certificate">The certificate to be added to the chain.</param>
            <returns>The position of the certificate in the chain.</returns>
        </member>
        <member name="M:Rebex.Security.Certificates.CertificateChain.#ctor">
            <summary>
            Creates an empty certificate chain.
            </summary>
        </member>
        <member name="M:Rebex.Security.Certificates.CertificateChain.#ctor(Rebex.Security.Certificates.Certificate[])">
            <summary>
            Creates a certificate chain from an array of certificates.
            </summary>
            <param name="certificates">An array of certificates.</param>
        </member>
        <member name="M:Rebex.Security.Certificates.CertificateChain.LoadPfx(System.String,System.String)">
            <summary>
            Loads a certificate with a private key from a PKCS#12 (PFX) file.
            </summary>
            <param name="path">Path to a file.</param>
            <param name="password">Encryption password.</param>
            <returns>A certificate with private key.</returns>
        </member>
        <member name="M:Rebex.Security.Certificates.CertificateChain.LoadPfx(System.Byte[],System.String)">
            <summary>
            Loads a certificate with a private key from a PKCS#12 (PFX) array.
            </summary>
            <param name="data">An array containing DER encoded PKCS#12 data.</param>
            <param name="password">Encryption password.</param>
            <returns>A certificate with private key.</returns>
        </member>
        <member name="M:Rebex.Security.Certificates.CertificateChain.LoadPfx(System.String,System.String,Rebex.Security.Certificates.KeySetOptions)">
            <summary>
            Loads a certificate with a private key from a PKCS#12 (PFX) file.
            </summary>
            <param name="path">Path to a file.</param>
            <param name="password">Encryption password.</param>
            <param name="options">Key set options.</param>
            <returns>A certificate with private key.</returns>
        </member>
        <member name="M:Rebex.Security.Certificates.CertificateChain.LoadPfx(System.Byte[],System.String,Rebex.Security.Certificates.KeySetOptions)">
            <summary>
            Loads a certificate with a private key from a PKCS#12 (PFX) array.
            </summary>
            <param name="data">An array containing DER encoded PKCS#12 data.</param>
            <param name="password">Encryption password.</param>
            <param name="options">Key set options.</param>
            <returns>A certificate with private key.</returns>
        </member>
        <member name="M:Rebex.Security.Certificates.CertificateChain.LoadP7b(System.String)">
            <summary>
            Loads <see cref="T:Rebex.Security.Certificates.CertificateChain"/> from the specified p7b file.
            </summary>
            <param name="path">Path to the file.</param>
            <returns>Instance of <see cref="T:Rebex.Security.Certificates.CertificateChain"/>, never null.</returns>
            <remarks>The p7b file can be saved using <see cref="M:Rebex.Security.Certificates.CertificateChain.Save(System.String)"/> method.</remarks>
        </member>
        <member name="M:Rebex.Security.Certificates.CertificateChain.LoadP7b(System.IO.Stream)">
            <summary>
            Loads a p7b encoded <see cref="T:Rebex.Security.Certificates.CertificateChain"/> from the specified file.
            </summary>
            <param name="stream">Stream to load a <see cref="T:Rebex.Security.Certificates.CertificateChain"/> from.</param>
            <returns>Instance of <see cref="T:Rebex.Security.Certificates.CertificateChain"/>, never null.</returns>
            <remarks>The p7b stream can be saved using <see cref="M:Rebex.Security.Certificates.CertificateChain.Save(System.IO.Stream)"/> method.</remarks>
        </member>
        <member name="M:Rebex.Security.Certificates.CertificateChain.VerifyHash(System.Byte[],Rebex.Security.Certificates.SignatureHashAlgorithm,System.Byte[])">
            <summary>
            Verifies the specified signature data by comparing it to the signature computed for the specified hash value.
            </summary>
            <param name="hash">The hash value of the signed data.</param>
            <param name="alg">A hash algorithm used to create the hash value.</param>
            <param name="signature">The RSA signature for the specified hash value.</param>
            <returns>true if the signature verifies as valid; otherwise, false.</returns>
            <remarks>The hash algorithm parameter is ignored with managed RSA.</remarks>
        </member>
        <member name="M:Rebex.Security.Certificates.CertificateChain.BuildFrom(Rebex.Security.Certificates.Certificate)">
            <summary>
            Builds a certificate chain for a specified certificate.
            </summary>
            <param name="cert">End certificate.</param>
            <returns>The chain for an end certificate.</returns>
            <remarks>
            This function builds a certificate chain context starting from an end
            certificate and going back, if possible, to a trusted root certificate.
            </remarks>
        </member>
        <member name="M:Rebex.Security.Certificates.CertificateChain.BuildFrom(Rebex.Security.Certificates.Certificate,Rebex.Security.Certificates.CertificateChainEngine)">
            <summary>
            Builds a certificate chain for a specified certificate.
            </summary>
            <param name="cert">End certificate.</param>
            <param name="engine">Certificate chain engine.</param>
            <returns>The chain for an end certificate.</returns>
            <remarks>
            This function builds a certificate chain context starting from an end
            certificate and going back, if possible, to a trusted root certificate.
            </remarks>
        </member>
        <member name="M:Rebex.Security.Certificates.CertificateChain.BuildFrom(Rebex.Security.Certificates.Certificate,Rebex.Security.Certificates.CertificateStore)">
            <summary>
            Builds a certificate chain for a specified certificate.
            </summary>
            <param name="cert">End certificate.</param>
            <param name="store">Additional store to search in addition to system stores.</param>
            <returns>The chain for an end certificate.</returns>
            <remarks>
            This function builds a certificate chain context starting from an end
            certificate and going back, if possible, to a trusted root certificate.
            </remarks>
        </member>
        <member name="M:Rebex.Security.Certificates.CertificateChain.BuildFrom(Rebex.Security.Certificates.Certificate,Rebex.Security.Certificates.CertificateStore,Rebex.Security.Certificates.CertificateChainEngine)">
            <summary>
            Builds a certificate chain for a specified certificate.
            </summary>
            <param name="cert">End certificate.</param>
            <param name="engine">Certificate chain engine.</param>
            <param name="store">Additional store to search in addition to system stores.</param>
            <returns>The chain for an end certificate.</returns>
            <remarks>
            This function builds a certificate chain context starting from an end
            certificate and going back, if possible, to a trusted root certificate.
            </remarks>
        </member>
        <member name="M:Rebex.Security.Certificates.CertificateChain.Validate">
            <summary>
            Verifies the validity of the certificate chain.
            </summary>
            <returns>Validation result.</returns>
        </member>
        <member name="M:Rebex.Security.Certificates.CertificateChain.Validate(Rebex.Security.Certificates.ValidationOptions)">
            <summary>
            Verifies the validity of the certificate chain, including its compliance with the specified criteria.
            </summary>
            <param name="options">Validation options (not supported by CertificateChainEngine.Native engine on Xamarin.iOS and Xamarin.Android).</param>
            <returns>Validation result.</returns>
        </member>
        <member name="M:Rebex.Security.Certificates.CertificateChain.Validate(System.String,Rebex.Security.Certificates.ValidationOptions)">
            <summary>
            Verifies the validity of the certificate chain, including its compliance with the specified criteria.
            </summary>
            <param name="serverName">The name of the server.</param>
            <param name="options">Validation options (not supported by CertificateChainEngine.Native engine on Xamarin.iOS and Xamarin.Android).</param>
            <returns>Validation result.</returns>
        </member>
        <member name="M:Rebex.Security.Certificates.CertificateChain.Validate(System.String,Rebex.Security.Certificates.ValidationOptions,Rebex.Security.Certificates.CertificateChainEngine)">
            <summary>
            Verifies the validity of the certificate chain, including its compliance with the specified criteria,
            using the specified chain engine.
            </summary>
            <param name="serverName">The name of the server.</param>
            <param name="options">Validation options (not supported by CertificateChainEngine.Native engine on Xamarin.iOS and Xamarin.Android).</param>
            <param name="engine">Certificate chain engine.</param>
            <returns>Validation result.</returns>
        </member>
        <member name="M:Rebex.Security.Certificates.CertificateChain.Save(System.String)">
            <summary>
            Saves the certificate chain to the specified path as a .P7B (PKCS #7) file.
            </summary>
            <param name="certificatePath">Path to save the certificate chain file to.</param>
        </member>
        <member name="M:Rebex.Security.Certificates.CertificateChain.Save(System.IO.Stream)">
            <summary>
            Saves the certificate chain to the specified stream in .P7B (PKCS #7) format.
            </summary>
            <param name="output">Stream to write the certificate chain to.</param>
        </member>
        <member name="P:Rebex.Security.Certificates.CertificateChain.DefaultEngine">
            <summary>
            Gets the default certificate chain engine.
            </summary>
        </member>
        <member name="P:Rebex.Security.Certificates.CertificateChain.Count">
            <summary>
            Gets the number of certificates in the chain.
            </summary>
            <value>The number of certificates in the chain.</value>
        </member>
        <member name="P:Rebex.Security.Certificates.CertificateChain.Item(System.Int32)">
            <summary>
            Gets or sets the certificate at the specified position.
            </summary>
            <value>The certificate at the specified position</value>
            <remarks>The certificate at the specified position.</remarks>
        </member>
        <member name="P:Rebex.Security.Certificates.CertificateChain.RootCertificate">
            <summary>
            Gets the certificate of the root certification authority, if available.
            </summary>
            <value>Root CA certificate if available; null otherwise.</value>
        </member>
        <member name="P:Rebex.Security.Certificates.CertificateChain.LeafCertificate">
            <summary>
            Gets the first certificate in the chain, if not empty.
            </summary>
            <value>Leaf certificate; null of empty.</value>
        </member>
        <member name="T:Rebex.Security.Certificates.CertificateCollection">
            <summary>
            Represents a collection of X509 v3 certificates.
            </summary>
        </member>
        <member name="T:Rebex.Security.Cryptography.CryptographicCollection">
            <summary>
            A base class for various collections of cryptographic objects.
            </summary>
        </member>
        <member name="M:Rebex.Security.Cryptography.CryptographicCollection.GetEnumerator">
            <summary>
            Gets an <see cref="T:System.Collections.IEnumerator"/> for the <see cref="T:Rebex.Security.Cryptography.CryptographicCollection"/>.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> for the collection.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.CryptographicCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the range of elements from the <see cref="T:Rebex.Security.Cryptography.CryptographicCollection"/> to a compatible one-dimensional
            <see cref="T:System.Array"/>, starting at the specified index of the target array.
            </summary>
            <param name="array">One-dimensional zero-based array that is the destination of the elements copied from <see cref="T:Rebex.Security.Cryptography.CryptographicCollection"/>.</param>
            <param name="index">A zero-based index in the destination array at which copying begins.</param>
        </member>
        <member name="P:Rebex.Security.Cryptography.CryptographicCollection.Count">
            <summary>
            Gets the number of items in the <see cref="T:Rebex.Security.Cryptography.CryptographicCollection"/>.
            </summary>
            <value>The number of items in collection.</value>
        </member>
        <member name="P:Rebex.Security.Cryptography.CryptographicCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:Rebex.Security.Cryptography.CryptographicCollection"/> is synchronized.
            </summary>
        </member>
        <member name="P:Rebex.Security.Cryptography.CryptographicCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:Rebex.Security.Cryptography.CryptographicCollection"/>.
            </summary>
        </member>
        <member name="M:Rebex.Security.Certificates.CertificateCollection.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Rebex.Security.Certificates.CertificateCollection"/>.
            </summary>
        </member>
        <member name="M:Rebex.Security.Certificates.CertificateCollection.Add(Rebex.Security.Certificates.Certificate)">
            <summary>
            Adds a <see cref="T:Rebex.Security.Certificates.Certificate"/> to the collection.
            </summary>
            <param name="certificate">A certificate to add.</param>
        </member>
        <member name="M:Rebex.Security.Certificates.CertificateCollection.Remove(Rebex.Security.Certificates.Certificate)">
            <summary>
            Removes a <see cref="T:Rebex.Security.Certificates.Certificate"/> from the collection.
            </summary>
            <param name="certificate">A certificate to remove.</param>
        </member>
        <member name="M:Rebex.Security.Certificates.CertificateCollection.Clear">
            <summary>
            Removes all certificates from the collection.
            </summary>
        </member>
        <member name="M:Rebex.Security.Certificates.CertificateCollection.CopyTo(Rebex.Security.Certificates.Certificate[],System.Int32)">
            <summary>
            Copies the range of elements from the <see cref="T:Rebex.Security.Certificates.CertificateCollection"/> to a compatible one-dimensional
            array, starting at the specified index of the target array.
            </summary>
            <param name="array">One-dimensional zero-based array that is the destination of the elements copied from <see cref="T:Rebex.Security.Certificates.CertificateCollection"/>.</param>
            <param name="index">A zero-based index in the destination array at which copying begins.</param>
        </member>
        <member name="P:Rebex.Security.Certificates.CertificateCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Rebex.Security.Certificates.Certificate"/> at the specified index.
            </summary>
            <param name="index">The zero-based index of the <see cref="T:Rebex.Security.Certificates.Certificate"/> to get.</param>
            <value>A certificate.</value>
        </member>
        <member name="T:Rebex.Security.Certificates.CertificateException">
            <summary>
            The exception that is thrown when a certificate-related error occurs.
            </summary>
        </member>
        <member name="M:Rebex.Security.Certificates.CertificateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rebex.Security.Certificates.CertificateException"/> class with serialized data.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:Rebex.Security.Certificates.CertificateException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Exception class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Rebex.Security.Certificates.CertificateException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the Exception class
            with a specified error message and a reference to the
            inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:Rebex.Security.Certificates.CertificateExtensionCollection">
            <summary>
            Represents a collection of X509 v3 certificate extensions.
            </summary>
        </member>
        <member name="M:Rebex.Security.Certificates.CertificateExtensionCollection.#ctor(System.Byte[])">
            <summary>
            Creates a certificate extension collection from an ASN.1 block.
            </summary>
            <param name="data">ASN.1 block.</param>
        </member>
        <member name="M:Rebex.Security.Certificates.CertificateExtensionCollection.Add(Rebex.Security.Certificates.CertificateExtension)">
            <summary>
            Adds a <see cref="T:Rebex.Security.Certificates.CertificateExtension"/> to the collection.
            </summary>
            <param name="extension">A certificate extension to add.</param>
        </member>
        <member name="M:Rebex.Security.Certificates.CertificateExtensionCollection.Remove(Rebex.Security.Certificates.CertificateExtension)">
            <summary>
            Removes a <see cref="T:Rebex.Security.Certificates.CertificateExtension"/> from the collection.
            </summary>
            <param name="extension">A certificate extension to remove.</param>
        </member>
        <member name="M:Rebex.Security.Certificates.CertificateExtensionCollection.CopyTo(Rebex.Security.Certificates.CertificateExtension[],System.Int32)">
            <summary>
            Copies the range of elements from the <see cref="T:Rebex.Security.Certificates.CertificateExtensionCollection"/> to a compatible one-dimensional
            array, starting at the specified index of the target array.
            </summary>
            <param name="array">One-dimensional zero-based array that is the destination of the elements copied from <see cref="T:Rebex.Security.Cryptography.Pkcs.SecureMimeCapabilityCollection"/>.</param>
            <param name="index">A zero-based index in the destination array at which copying begins.</param>
        </member>
        <member name="P:Rebex.Security.Certificates.CertificateExtensionCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Rebex.Security.Certificates.CertificateExtension"/> at the specified index.
            </summary>
            <param name="index">The zero-based index of the <see cref="T:Rebex.Security.Certificates.CertificateExtension"/> to get or set.</param>
            <value>A certificate extension.</value>
        </member>
        <member name="P:Rebex.Security.Certificates.CertificateExtensionCollection.Item(System.String)">
            <summary>
            Gets the first <see cref="T:Rebex.Security.Cryptography.Pkcs.SecureMimeCapability"/> with the specified object identifier.
            </summary>
            <param name="oid">The object identifier, either friendly name or dotted string format.</param>
            <value>A certificate extension, or null if not found.</value>
        </member>
        <member name="T:Rebex.Security.Certificates.CertificateExtension">
            <summary>
            Represents an X509 v3 certificate extension.
            </summary>
        </member>
        <member name="M:Rebex.Security.Certificates.CertificateExtension.#ctor(System.String,System.Boolean,System.Byte[])">
            <summary>
            Creates a new instance of <see cref="T:Rebex.Security.Certificates.CertificateExtension"/>.
            </summary>
            <param name="oid">Extension object identifier.</param>
            <param name="critical">Specifies whether the extension is critical.</param>
            <param name="data">Extension data.</param>
        </member>
        <member name="M:Rebex.Security.Certificates.CertificateExtension.EnhancedKeyUsage(System.Boolean,System.String[])">
            <summary>
            Create extended (enhanced) key usage extension (2.5.29.37).
            </summary>
            <param name="critical">Specifies whether this extension is considered critical (not-critical extensions may be ignored by servers that don't support them).</param>
            <param name="usages">Key usage OIDs.</param>
            <returns>An extension object.</returns>
        </member>
        <member name="M:Rebex.Security.Certificates.CertificateExtension.KeyUsage(Rebex.Security.Certificates.KeyUses)">
            <summary>
            Creates a key usage extension (2.5.29.15).
            </summary>
            <param name="usage">Key usage flags.</param>
            <returns>An extension object.</returns>
        </member>
        <member name="P:Rebex.Security.Certificates.CertificateExtension.Oid">
            <summary>
            Gets the object identifier that identifies the extension.
            </summary>
            <value>The object identifier.</value>
        </member>
        <member name="P:Rebex.Security.Certificates.CertificateExtension.Critical">
            <summary>
            Gets a value indicating whether the extension is critical.
            </summary>
            <value>True if critical; false otherwise.</value>
        </member>
        <member name="P:Rebex.Security.Certificates.CertificateExtension.Value">
            <summary>
            Gets the extension value.
            </summary>
            <value>An array of bytes in ASN.1 format.</value>
        </member>
        <member name="T:Rebex.Security.Cryptography.Pkcs.RevocationReason">
            <summary>
            Specifies the reason for inclusion in the certificate revocation list.
            </summary>
        </member>
        <member name="F:Rebex.Security.Cryptography.Pkcs.RevocationReason.Unspecified">
            <summary>Unspecified.</summary>
        </member>
        <member name="F:Rebex.Security.Cryptography.Pkcs.RevocationReason.KeyCompromise">
            <summary>Key was compromised.</summary>
        </member>
        <member name="F:Rebex.Security.Cryptography.Pkcs.RevocationReason.CACompromise">
            <summary>CA was compromised.</summary>
        </member>
        <member name="F:Rebex.Security.Cryptography.Pkcs.RevocationReason.AffiliationChanged">
            <summary>Affiliation changed.</summary>
        </member>
        <member name="F:Rebex.Security.Cryptography.Pkcs.RevocationReason.Superseded">
            <summary>Certificate was superseded.</summary>
        </member>
        <member name="F:Rebex.Security.Cryptography.Pkcs.RevocationReason.CessationOfOperation">
            <summary>Operation was ceased.</summary>
        </member>
        <member name="F:Rebex.Security.Cryptography.Pkcs.RevocationReason.CertificateHold">
            <summary>Certificate hold.</summary>
        </member>
        <member name="F:Rebex.Security.Cryptography.Pkcs.RevocationReason.RemoveFromCrl">
            <summary>Remove from CRL.</summary>
        </member>
        <member name="T:Rebex.Security.Cryptography.Pkcs.CertificateRevocationList">
            <summary>
            The certificate revocation list.
            </summary>
        </member>
        <member name="T:Rebex.Security.Cryptography.Pkcs.PkcsBase">
            <summary>
            Base class for various PKCS objects.
            </summary>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.PkcsBase.Load(System.IO.Stream,Rebex.Security.Cryptography.Pkcs.ICertificateFinder,System.Boolean)">
            <summary>
            Loads a CMS/PKCS #7 signed or enveloped message from a stream.
            Returns an instance of <see cref="T:Rebex.Security.Cryptography.Pkcs.SignedData"/> for signed message, <see cref="T:Rebex.Security.Cryptography.Pkcs.EnvelopedData"/> for enveloped message, or null for
            methods and properties.
            </summary>
            <param name="input">A stream from which to load the message.</param>
            <param name="finder">Gets or sets the <see cref="T:Rebex.Security.Cryptography.Pkcs.ICertificateFinder"/> to be used to find certificates corresponding to a <see cref="T:Rebex.Security.Cryptography.Pkcs.SubjectIdentifier"/>.</param>
            <param name="silent">A value indicating whether Cryptographic Service Provider (CSP) operations are permitted to display any user interface.</param>
            <returns>An instance of <see cref="T:Rebex.Security.Cryptography.Pkcs.SignedData"/>, <see cref="T:Rebex.Security.Cryptography.Pkcs.EnvelopedData"/> or null.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.CertificateRevocationList.#ctor(System.Byte[])">
            <summary>
            Creates a certificate revocation list from an ASN.1 block.
            </summary>
            <param name="crl">ASN.1 block.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.CertificateRevocationList.ToArray">
            <summary>
            Converts a certificate revocation list into a byte array.
            </summary>
            <returns>Byte array.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.CertificateRevocationList.GetHash">
            <summary>
            Returns the certificate revocation list hash.
            </summary>
            <returns>CRL hash.</returns>
            <remarks>
            Use <see cref="P:Rebex.Security.Cryptography.Pkcs.CertificateRevocationList.SignatureHashAlgorithm"/> and the results of <see cref="M:Rebex.Security.Cryptography.Pkcs.CertificateRevocationList.GetHash"/> and <see cref="M:Rebex.Security.Cryptography.Pkcs.CertificateRevocationList.GetSignature"/> methods
            as an input to CA's Certificate's <see cref="M:Rebex.Security.Certificates.Certificate.VerifyHash(System.Byte[],Rebex.Security.Certificates.SignatureHashAlgorithm,System.Byte[])"/> method to validate the CRL signature.
            </remarks>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.CertificateRevocationList.GetSignature">
            <summary>
            Returns the certificate revocation list signature.
            </summary>
            <returns>CRL signature.</returns>
            <remarks>
            Use <see cref="P:Rebex.Security.Cryptography.Pkcs.CertificateRevocationList.SignatureHashAlgorithm"/> and the results of <see cref="M:Rebex.Security.Cryptography.Pkcs.CertificateRevocationList.GetHash"/> and <see cref="M:Rebex.Security.Cryptography.Pkcs.CertificateRevocationList.GetSignature"/> methods
            as an input to CA's Certificate's <see cref="M:Rebex.Security.Certificates.Certificate.VerifyHash(System.Byte[],Rebex.Security.Certificates.SignatureHashAlgorithm,System.Byte[])"/> method to validate the CRL signature.
            </remarks>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.CertificateRevocationList.Issuer">
            <summary>
            Gets the DN of the issuer of this certificate revocation list.
            </summary>
            <value>DN of the issuer of this certificate revocation list.</value>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.CertificateRevocationList.ThisUpdate">
            <summary>
            Gets the datetime of this CRL update.
            </summary>
            <value>Datetime of this CRL update.</value>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.CertificateRevocationList.NextUpdate">
            <summary>
            Gets the datetime of the next CRL update.
            </summary>
            <value>Datetime of the next CRL update.</value>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.CertificateRevocationList.Extensions">
            <summary>
            Gets the collection of CRL's extensions.
            </summary>
            <value>Extensions collection.</value>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.CertificateRevocationList.RevokedCertificates">
            <summary>
            Gets the colection of revoked certificates.
            </summary>
            <value>Revoked certificate collection.</value>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.CertificateRevocationList.KeyAlgorithm">
            <summary>
            Returns the key algorithm used to sign this certificate revocation list.
            </summary>
            <value>The key algorithm.</value>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.CertificateRevocationList.SignatureHashAlgorithm">
            <summary>
            Returns the hash algorithm used to create the signed hash value.
            </summary>
            <value>Hash algorithm.</value>
            <remarks>
            Use <see cref="P:Rebex.Security.Cryptography.Pkcs.CertificateRevocationList.SignatureHashAlgorithm"/> and the results of <see cref="M:Rebex.Security.Cryptography.Pkcs.CertificateRevocationList.GetHash"/> and <see cref="M:Rebex.Security.Cryptography.Pkcs.CertificateRevocationList.GetSignature"/> methods
            as an input to CA's Certificate's <see cref="M:Rebex.Security.Certificates.Certificate.VerifyHash(System.Byte[],Rebex.Security.Certificates.SignatureHashAlgorithm,System.Byte[])"/> method to validate the CRL signature.
            </remarks>
        </member>
        <member name="T:Rebex.Security.Cryptography.Pkcs.RevokedCertificateCollection">
            <summary>
            Collection of information about revoked certificates. A part of <see cref="T:Rebex.Security.Cryptography.Pkcs.CertificateRevocationList"/>.
            </summary>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.RevokedCertificateCollection.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Rebex.Security.Cryptography.Pkcs.RevokedCertificateCollection"/>.
            </summary>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.RevokedCertificateCollection.Add(Rebex.Security.Cryptography.Pkcs.RevokedCertificate)">
            <summary>
            Adds a <see cref="T:Rebex.Security.Cryptography.Pkcs.RevokedCertificate"/> to the collection.
            </summary>
            <param name="certificate">A certificate to add.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.RevokedCertificateCollection.Remove(Rebex.Security.Cryptography.Pkcs.RevokedCertificate)">
            <summary>
            Removes a <see cref="T:Rebex.Security.Cryptography.Pkcs.RevokedCertificate"/> from the collection.
            </summary>
            <param name="certificate">A certificate to remove.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.RevokedCertificateCollection.Clear">
            <summary>
            Removes all certificates from the collection.
            </summary>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.RevokedCertificateCollection.CopyTo(Rebex.Security.Cryptography.Pkcs.RevokedCertificate[],System.Int32)">
            <summary>
            Copies the range of elements from the <see cref="T:Rebex.Security.Cryptography.Pkcs.RevokedCertificateCollection"/> to a compatible one-dimensional
            array, starting at the specified index of the target array.
            </summary>
            <param name="array">One-dimensional zero-based array that is the destination of the elements copied from <see cref="T:Rebex.Security.Cryptography.Pkcs.RevokedCertificateCollection"/>.</param>
            <param name="index">A zero-based index in the destination array at which copying begins.</param>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.RevokedCertificateCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Rebex.Security.Certificates.Certificate"/> at the specified index.
            </summary>
            <param name="index">The zero-based index of the <see cref="T:Rebex.Security.Certificates.Certificate"/> to get.</param>
            <value>A certificate.</value>
        </member>
        <member name="T:Rebex.Security.Cryptography.Pkcs.RevokedCertificate">
            <summary>
            Information about revoked certificate.
            </summary>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.RevokedCertificate.#ctor(System.Byte[],System.DateTime,Rebex.Security.Cryptography.Pkcs.RevocationReason)">
            <summary>
            Creates a new instance of revoked certificate based on the supplied data.
            </summary>
            <param name="serialNumber">Serial number.</param>
            <param name="revocationDate">Revocation date.</param>
            <param name="reason">Revocation reason.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.RevokedCertificate.#ctor(System.Int32,System.DateTime,Rebex.Security.Cryptography.Pkcs.RevocationReason)">
            <summary>
            Creates a new instance of revoked certificate based on the supplied data.
            </summary>
            <param name="serialNumber">Serial number.</param>
            <param name="revocationDate">Revocation date.</param>
            <param name="reason">Revocation reason.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.RevokedCertificate.GetSerialNumber">
            <summary>
            Gets the certificate's serial number.
            </summary>
            <returns>Serial number.</returns>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.RevokedCertificate.RevocationDate">
            <summary>
            Gets the revocation date.
            </summary>
            <value>Revocation date.</value>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.RevokedCertificate.Extensions">
            <summary>
            Gets the collection of revoked certificate info's extensions.
            </summary>
            <value>Extensions collection.</value>
        </member>
        <member name="T:Rebex.Security.Cryptography.Pkcs.CertificateRevocationListCollection">
            <summary>
            Collection of certificate revocation lists.
            </summary>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.CertificateRevocationListCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Rebex.Security.Cryptography.Pkcs.CertificateRevocationList"/> at the specified index.
            </summary>
            <param name="index">The zero-based index of the <see cref="T:Rebex.Security.Cryptography.Pkcs.CertificateRevocationList"/> to get.</param>
            <value>A certificate revocation list.</value>
        </member>
        <member name="T:Rebex.Security.Certificates.CertificateFindOptions">
            <summary>
            Options for <see cref="M:Rebex.Security.Certificates.CertificateStore.FindCertificates(Rebex.Security.Certificates.DistinguishedName[],Rebex.Security.Certificates.CertificateFindOptions)"/> methods.
            </summary>
        </member>
        <member name="F:Rebex.Security.Certificates.CertificateFindOptions.None">
            <summary>
            No filter.
            </summary>
        </member>
        <member name="F:Rebex.Security.Certificates.CertificateFindOptions.HasPrivateKey">
            <summary>
            Only find certificates that have a private key.
            </summary>
        </member>
        <member name="F:Rebex.Security.Certificates.CertificateFindOptions.IsTimeValid">
            <summary>
            Only find certificates that are time valid.
            </summary>
        </member>
        <member name="F:Rebex.Security.Certificates.CertificateFindOptions.ClientAuthentication">
            <summary>
            Only find certificates that can be used for client authentication.
            </summary>
        </member>
        <member name="F:Rebex.Security.Certificates.CertificateFindOptions.ServerAuthentication">
            <summary>
            Only find certificates that can be used for server authentication.
            </summary>
        </member>
        <member name="F:Rebex.Security.Certificates.CertificateFindOptions.IncludeSubordinateAuthorities">
            <summary>
            When searching by certificate issuer, include known subordinate CAs in the search as well.
            </summary>
        </member>
        <member name="T:Rebex.Security.Certificates.CertificateFindType">
            <summary>
            The type of search for <see cref="M:Rebex.Security.Certificates.CertificateStore.FindCertificates(Rebex.Security.Certificates.CertificateFindType,System.Byte[],Rebex.Security.Certificates.CertificateFindOptions)"/> method.
            </summary>
        </member>
        <member name="F:Rebex.Security.Certificates.CertificateFindType.SubjectKeyIdentifier">
            <summary>
            Certificates whose subject key identifier (SKI) matches the specified value.
            </summary>
        </member>
        <member name="T:Rebex.Security.Certificates.CertificateStoreLocation">
            <summary>
            Specifies the location of the certificate store.
            </summary>
        </member>
        <member name="F:Rebex.Security.Certificates.CertificateStoreLocation.None">
            <summary>None.</summary>
        </member>
        <member name="F:Rebex.Security.Certificates.CertificateStoreLocation.CurrentUser">
            <summary>The store located at HKEY_CURRENT_USER\Software\Microsoft\SystemCertificates.</summary>
        </member>
        <member name="F:Rebex.Security.Certificates.CertificateStoreLocation.LocalMachine">
            <summary>The store located at HKEY_LOCAL_MACHINE\Software\Microsoft\SystemCertificates.</summary>
        </member>
        <member name="F:Rebex.Security.Certificates.CertificateStoreLocation.CurrentService">
            <summary>The store located at HKEY_LOCAL_MACHINE\Software\Microsoft\Cryptography\Services\&lt;ServiceName>&gt;\SystemCertificates.</summary>
        </member>
        <member name="F:Rebex.Security.Certificates.CertificateStoreLocation.Services">
            <summary>The store located at HKEY_LOCAL_MACHINE\Software\Microsoft\Cryptography\Services\&lt;ServiceName&gt;\SystemCertificates.</summary>
        </member>
        <member name="F:Rebex.Security.Certificates.CertificateStoreLocation.Users">
            <summary>The store located at HKEY_USERS\&lt;UserName&gt;\Software\Microsoft\SystemCertificates.</summary>
        </member>
        <member name="F:Rebex.Security.Certificates.CertificateStoreLocation.CurrentUserGroupPolicy">
            <summary>The store located at HKEY_CURRENT_USER\Software\Policies\Microsoft\SystemCertificates.</summary>
        </member>
        <member name="F:Rebex.Security.Certificates.CertificateStoreLocation.LocalMachineGroupPolicy">
            <summary>The store located at HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\SystemCertificates.</summary>
        </member>
        <member name="F:Rebex.Security.Certificates.CertificateStoreLocation.LocalMachineEnterprise">
            <summary>The store located at HKEY_LOCAL_MACHINE\Software\Microsoft\EnterpriseCertificates.</summary>
        </member>
        <member name="T:Rebex.Security.Certificates.CertificateStoreName">
            <summary>
            Specifies the name of the certificate store.
            </summary>
        </member>
        <member name="F:Rebex.Security.Certificates.CertificateStoreName.None">
            <summary>None.</summary>
        </member>
        <member name="F:Rebex.Security.Certificates.CertificateStoreName.AddressBook">
            <summary>Other users.</summary>
        </member>
        <member name="F:Rebex.Security.Certificates.CertificateStoreName.AuthRoot">
            <summary>Third-party certificate authorities.</summary>
        </member>
        <member name="F:Rebex.Security.Certificates.CertificateStoreName.CertificateAuthority">
            <summary>Intermediate certificate authorities.</summary>
        </member>
        <member name="F:Rebex.Security.Certificates.CertificateStoreName.Disallowed">
            <summary>Revoked certificates.</summary>
        </member>
        <member name="F:Rebex.Security.Certificates.CertificateStoreName.My">
            <summary>Personal certificates.</summary>
        </member>
        <member name="F:Rebex.Security.Certificates.CertificateStoreName.Root">
            <summary>Trusted root certificate authorities.</summary>
        </member>
        <member name="F:Rebex.Security.Certificates.CertificateStoreName.TrustedPeople">
            <summary>Directly trusted people and resources.</summary>
        </member>
        <member name="F:Rebex.Security.Certificates.CertificateStoreName.TrustedPublisher">
            <summary>Directly trusted publishers.</summary>
        </member>
        <member name="T:Rebex.Security.Certificates.CertificateStore">
            <summary>
            Represents a certificate store.
            </summary>
        </member>
        <member name="M:Rebex.Security.Certificates.CertificateStore.#ctor(System.String,Rebex.Security.Certificates.CertificateStoreLocation)">
            <summary>
            Opens a system certificate store of the specified name a the specified location.
            </summary>
            <param name="storeName">The store name.</param>
            <param name="location">Specifies the location of the certificate store.</param>
            <remarks>
            Some example system stores are:<br/>
            "CA" - Certification authority certificates.<br/>
            "My" - A certificate store that holds certificates with associated private keys.<br/>
            "Root" - Root certificates.<br/>
            "SPC" - Software publisher certificate.<br/>
            "Trust"<br/>
            "Disallowed"<br/>
            </remarks>
        </member>
        <member name="M:Rebex.Security.Certificates.CertificateStore.#ctor(Rebex.Security.Certificates.CertificateStoreName,Rebex.Security.Certificates.CertificateStoreLocation)">
            <summary>
            Opens a system certificate store of the specified name a the specified location.
            </summary>
            <param name="storeName">The store name value.</param>
            <param name="location">Specifies the location of the certificate store.</param>
        </member>
        <member name="M:Rebex.Security.Certificates.CertificateStore.#ctor(System.String)">
            <summary>
            Opens a system certificate store of the specified name.
            </summary>
            <param name="storeName">The store name.</param>
            <remarks>
            Some example system stores are:<br/>
            "CA" - Certification authority certificates.<br/>
            "My" - A certificate store that holds certificates with associated private keys.<br/>
            "Root" - Root certificates.<br/>
            "SPC" - Software publisher certificate.<br/>
            "Trust"<br/>
            "Disallowed"<br/>
            </remarks>
        </member>
        <member name="M:Rebex.Security.Certificates.CertificateStore.#ctor(Rebex.Security.Certificates.CertificateStoreName)">
            <summary>
            Opens a system certificate store of the specified name.
            </summary>
            <param name="storeName">The store name value.</param>
        </member>
        <member name="M:Rebex.Security.Certificates.CertificateStore.#ctor(System.Collections.ICollection)">
            <summary>
            Creates a temporary memory-based certificate store
            and populates it with certificates from the specified collection.
            </summary>
            <param name="certificates">The certificate collection.</param>
        </member>
        <member name="M:Rebex.Security.Certificates.CertificateStore.IsPossible(System.String,Rebex.Security.Certificates.CertificateStoreLocation)">
            <summary>
            Checks possibility of existence a storage on Mono
            </summary>
            <param name="storeName">The store name.</param>
            <param name="location">Specifies the location of the certificate store.</param>
            <returns>True if the store is supported; false otherwise.</returns>
        </member>
        <member name="M:Rebex.Security.Certificates.CertificateStore.Exists(System.String,Rebex.Security.Certificates.CertificateStoreLocation)">
            <summary>
            Determines whether the specified certificate store exists.
            </summary>
            <param name="storeName">The store name.</param>
            <param name="location">Specifies the location of the certificate store.</param>
            <returns>True if the store exists; false otherwise.</returns>
        </member>
        <member name="M:Rebex.Security.Certificates.CertificateStore.Exists(Rebex.Security.Certificates.CertificateStoreName,Rebex.Security.Certificates.CertificateStoreLocation)">
            <summary>
            Determines whether the specified certificate store exists.
            </summary>
            <param name="storeName">The store name value.</param>
            <param name="location">Specifies the location of the certificate store.</param>
            <returns>True if the store exists; false otherwise.</returns>
        </member>
        <member name="M:Rebex.Security.Certificates.CertificateStore.Exists(System.String)">
            <summary>
            Determines whether the specified certificate store exists.
            </summary>
            <param name="storeName">The store name.</param>
            <returns>True if the store exists; false otherwise.</returns>
        </member>
        <member name="M:Rebex.Security.Certificates.CertificateStore.Exists(Rebex.Security.Certificates.CertificateStoreName)">
            <summary>
            Determines whether the specified certificate store exists.
            </summary>
            <param name="storeName">The store name value.</param>
            <returns>True if the store exists; false otherwise.</returns>
        </member>
        <member name="M:Rebex.Security.Certificates.CertificateStore.AddCertificate(Rebex.Security.Certificates.Certificate)">
            <summary>
            Adds a certificate to this certificate store.
            </summary>
            <param name="cert">Certificate to be added.</param>
        </member>
        <member name="M:Rebex.Security.Certificates.CertificateStore.Remove(Rebex.Security.Certificates.Certificate)">
            <summary>
            Removes a certificate from this certificate store.
            </summary>
            <param name="cert">Certificate to be removed.</param>
        </member>
        <member name="M:Rebex.Security.Certificates.CertificateStore.FindCertificates(Rebex.Security.Certificates.CertificateFindType,System.Byte[],Rebex.Security.Certificates.CertificateFindOptions)">
            <summary>
            Returns all certificates matching the specified criteria.
            </summary>
            <param name="findType">Specifies the type of search being made.</param>
            <param name="data">A byte array whose meaning is defined by 'findType'.</param>
            <param name="options">Options.</param>
            <returns>An array of certificates.</returns>
        </member>
        <member name="M:Rebex.Security.Certificates.CertificateStore.FindCertificates(Rebex.Security.Certificates.DistinguishedName,Rebex.Security.Certificates.CertificateFindOptions)">
            <summary>
            Returns all certificates issued by the specified issuer (or its subordinate issuer) and corresponding to the specified options.
            </summary>
            <param name="issuer">Issuer DN.</param>
            <param name="options">Options.</param>
            <returns>An array of certificates.</returns>
        </member>
        <member name="M:Rebex.Security.Certificates.CertificateStore.FindCertificates(Rebex.Security.Certificates.DistinguishedName,System.Byte[],Rebex.Security.Certificates.CertificateFindOptions)">
            <summary>
            Returns all certificates with the specified serial number issued by the specified issuer (or its subordinate issuer)
            and corresponding to the specified options.
            </summary>
            <param name="issuer">Issuer DN.</param>
            <param name="serialNumber">Certificate serial number.</param>
            <param name="options">Options.</param>
            <returns>An array of certificates.</returns>
        </member>
        <member name="M:Rebex.Security.Certificates.CertificateStore.FindCertificates(Rebex.Security.Certificates.DistinguishedName[],Rebex.Security.Certificates.CertificateFindOptions)">
            <summary>
            Returns all certificates issued by one of specified issuers (or their subordinate issuer) and corresponding to the specified options.
            </summary>
            <param name="issuers">An array of issuers' DNs.</param>
            <param name="options">Options.</param>
            <returns>An array of certificates.</returns>
        </member>
        <member name="M:Rebex.Security.Certificates.CertificateStore.FindCertificates(Rebex.Security.Certificates.DistinguishedName[],System.Byte[],Rebex.Security.Certificates.CertificateFindOptions)">
            <summary>
            Returns all certificates issued by one of specified issuers (or their subordinate issuer) and corresponding to the specified options.
            </summary>
            <param name="issuers">An array of issuers' DNs.</param>
            <param name="serialNumber">Certificate serial number.</param>
            <param name="options">Options.</param>
            <returns>An array of certificates.</returns>
        </member>
        <member name="M:Rebex.Security.Certificates.CertificateStore.FindCertificatesInner(Rebex.Security.Certificates.DistinguishedName[],System.Byte[],Rebex.Security.Certificates.CertificateFindOptions)">
            <summary>
            Returns all certificates issued by one of specified issuers and corresponding to the specified options.
            </summary>
            <param name="issuers">An array of issuers' DNs.</param>
            <param name="serialNumber">Certificate serial number.</param>
            <param name="options">Options.</param>
            <returns>An array of certificates.</returns>
        </member>
        <member name="M:Rebex.Security.Certificates.CertificateStore.FindCertificates(Rebex.Security.Certificates.Certificate,Rebex.Security.Certificates.CertificateFindOptions)">
            <summary>
            Returns all certificates matching the specified certificate and options.
            </summary>
            <param name="certificate">Certificate to find.</param>
            <param name="options">Options.</param>
            <returns>An array of certificates.</returns>
        </member>
        <member name="M:Rebex.Security.Certificates.CertificateStore.FindCertificates(Rebex.Security.Certificates.CertificateFindOptions)">
            <summary>
            Returns all certificates corresponding to the specified options.
            </summary>
            <param name="options">Options.</param>
            <returns>An array of certificates.</returns>
        </member>
        <member name="M:Rebex.Security.Certificates.CertificateStore.FindCertificatesForMailAddress(System.String)">
            <summary>
            Returns all certificates corresponding to the specified e-mail address.
            </summary>
            <param name="address">E-mail address.</param>
            <returns>An array of certificates.</returns>
        </member>
        <member name="M:Rebex.Security.Certificates.CertificateStore.FindCertificatesForMailAddress(System.String,Rebex.Security.Certificates.CertificateFindOptions)">
            <summary>
            Returns all certificates corresponding to the specified e-mail address and options.
            </summary>
            <param name="address">E-mail address.</param>
            <param name="options">Options.</param>
            <returns>An array of certificates.</returns>
        </member>
        <member name="M:Rebex.Security.Certificates.CertificateStore.Dispose">
            <summary>
            Disposes the object and releases resources.
            </summary>
            <remarks>
            Calling this method ensures that all resources are freed.
            </remarks>
        </member>
        <member name="M:Rebex.Security.Certificates.CertificateStore.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources and optionally releases the managed resources.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="M:Rebex.Security.Certificates.CertificateStore.Finalize">
            <summary>
            Finalizer called by garbage collector.
            </summary>
        </member>
        <member name="P:Rebex.Security.Certificates.CertificateStore.Handle">
            <summary>
            Gets a handle of the certificate store.
            </summary>
            <value>A handle of the certificate store.</value>
            <remarks>
            <p>
            Only supported on Windows platforms.
            </p>
            </remarks>
        </member>
        <member name="T:Rebex.Security.Cryptography.ArcFour">
            <summary>
            Represents the base class from which all implementations of the ArcFour algorithm must derive.
            </summary>
        </member>
        <member name="M:Rebex.Security.Cryptography.ArcFour.#ctor">
            <summary>
            Initializes a new instance of ArcFour.
            </summary>
            <remarks>
            You cannot create an instance of an abstract class.
            Create an instance of <see cref="T:Rebex.Security.Cryptography.ArcFourManaged"/> class instead.
            </remarks>
        </member>
        <member name="M:Rebex.Security.Cryptography.ArcFour.GenerateIV">
            <summary>
            Generates a random initialization vector (IV) to be used for the algorithm.
            </summary>
            <remarks>ArcFour is a stream cipher, it does not use IV.</remarks>
        </member>
        <member name="M:Rebex.Security.Cryptography.ArcFour.GenerateKey">
            <summary>
            Generates a random key to be used for the algorithm.
            </summary>
            <remarks>Use this method to generate a random key when none is specified.</remarks>
        </member>
        <member name="M:Rebex.Security.Cryptography.ArcFour.Create">
            <summary>
            Creates a cryptographic object to perform the ArcFour algorithm.
            </summary>
            <returns>A cryptographic object to perform the ArcFour algorithm.</returns>
        </member>
        <member name="P:Rebex.Security.Cryptography.ArcFour.BlockSize">
            <summary>
            Gets or sets the block size of the cryptographic operation in bits.
            </summary>
            <value>The block size.</value>
            <remarks>ArcFour is a stream cipher, blocks can be of any size.</remarks>
        </member>
        <member name="P:Rebex.Security.Cryptography.ArcFour.IV">
            <summary>
            Gets or sets the initialization vector (IV) for the symmetric algorithm.
            </summary>
            <value>Initialization vector.</value>
            <remarks>ArcFour is a stream cipher, it does not use IV.</remarks>
        </member>
        <member name="P:Rebex.Security.Cryptography.ArcFour.Mode">
            <summary>
            Gets or sets the mode for operation of the symmetric algorithm.
            </summary>
            <value>The mode for operation.</value>
            <remarks>ArcFour is a stream cipher, the only mode supported is CipherMode.OFB.</remarks>
        </member>
        <member name="P:Rebex.Security.Cryptography.ArcFour.Padding">
            <summary>
            Gets or sets the padding mode used in the symmetric algorithm.
            </summary>
            <value>The padding mode.</value>
            <remarks>ArcFour is a stream cipher, no padding is done.</remarks>
        </member>
        <member name="T:Rebex.Security.Cryptography.ArcFourManaged">
            <summary>
            The managed version of the ArcFour algorithm.
            </summary>
        </member>
        <member name="M:Rebex.Security.Cryptography.ArcFourManaged.#ctor">
            <summary>
            Initializes a new instance of ArcFourManaged class.
            </summary>
        </member>
        <member name="M:Rebex.Security.Cryptography.ArcFourManaged.CreateDecryptor(System.Byte[],System.Byte[])">
            <summary>
            Creates a symmetric ArcFour decryptor object with the specified Key and initialization vector (IV).
            </summary>
            <param name="rgbKey">The secret key to be used for the symmetric algorithm.</param>
            <param name="rgbIV">The IV. Not used by ArcFour.</param>
            <returns>A symmetric ArcFour decryptor object.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.ArcFourManaged.CreateEncryptor(System.Byte[],System.Byte[])">
            <summary>
            Creates a symmetric ArcFour encryptor object with the specified Key and initialization vector (IV).
            </summary>
            <param name="rgbKey">The secret key to be used for the symmetric algorithm.</param>
            <param name="rgbIV">The IV. Not used by ArcFour.</param>
            <returns>A symmetric ArcFour encryptor object.</returns>
        </member>
        <member name="T:Rebex.Security.Cryptography.ArcTwoManaged">
            <summary>
            The managed version of the algorithm defined by RFC 2268.
            </summary>
        </member>
        <member name="M:Rebex.Security.Cryptography.ArcTwoManaged.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Rebex.Security.Cryptography.ArcTwoManaged"/> class.
            </summary>
        </member>
        <member name="M:Rebex.Security.Cryptography.ArcTwoManaged.GenerateIV">
            <summary>
            Generates a random initialization vector (IV) to be used for the algorithm.
            </summary>
            <remarks>Use this method to generate a random initialization vector (IV) when none is specified.</remarks>
        </member>
        <member name="M:Rebex.Security.Cryptography.ArcTwoManaged.GenerateKey">
            <summary>
            Generates a random key to be used for the algorithm.
            </summary>
            <remarks>Use this method to generate a random key when none is specified.</remarks>
        </member>
        <member name="M:Rebex.Security.Cryptography.ArcTwoManaged.CreateEncryptor(System.Byte[],System.Byte[])">
            <summary>
            Creates a RC2 encryptor object with the specified key.
            </summary>
            <param name="rgbKey">The secret key to be used for the symmetric algorithm.</param>
            <param name="rgbIV">The initialization vector for
            <see cref="F:System.Security.Cryptography.CipherMode.CBC"/>.</param>
            <returns>A RC2 encryptor object.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.ArcTwoManaged.CreateDecryptor(System.Byte[],System.Byte[])">
            <summary>
            Creates a RC2 decryptor object with the specified key.
            </summary>
            <param name="rgbKey">The secret key to be used for the symmetric algorithm.</param>
            <param name="rgbIV">The initialization vector for <see cref="F:System.Security.Cryptography.CipherMode.CBC"/>.</param>
            <returns>A RC2 decryptor object.</returns>
        </member>
        <member name="P:Rebex.Security.Cryptography.ArcTwoManaged.Mode">
            <summary>
            Gets or sets the mode for operation of the symmetric algorithm.
            </summary>
            <value>The mode for operation of the symmetric algorithm.</value>
        </member>
        <member name="P:Rebex.Security.Cryptography.ArcTwoManaged.Padding">
            <summary>
            Gets or sets the padding mode used in the symmetric algorithm.
            </summary>
            <value>The padding mode used in the symmetric algorithm.</value>
        </member>
        <member name="T:Rebex.Security.Cryptography.AsymmetricKeyAlgorithmId">
            <summary>
            Specifies asymmetric algorithm.
            </summary>
        </member>
        <member name="F:Rebex.Security.Cryptography.AsymmetricKeyAlgorithmId.RSA">
            <summary>
            RSA.
            </summary>
        </member>
        <member name="F:Rebex.Security.Cryptography.AsymmetricKeyAlgorithmId.DSA">
            <summary>
            DSA.
            </summary>
        </member>
        <member name="F:Rebex.Security.Cryptography.AsymmetricKeyAlgorithmId.DiffieHellman">
            <summary>
            Diffie-Hellman.
            </summary>
        </member>
        <member name="T:Rebex.Security.Cryptography.AsymmetricKeyAlgorithm">
            <summary>
            A platform-independent asymmetric algorithm object.
            </summary>
        </member>
        <member name="M:Rebex.Security.Cryptography.AsymmetricKeyAlgorithm.GetCspParameters">
            <summary>
            Gets CSP parameters if the instance of <see cref="T:Rebex.Security.Cryptography.AsymmetricKeyAlgorithm"/> represents a key stored in a Windows Cryptographic Service Provider.
            </summary>
            <returns>CSP parameters if available; null if not available.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.AsymmetricKeyAlgorithm.#ctor">
            <summary>
            Creates an instance of <see cref="T:Rebex.Security.Cryptography.AsymmetricKeyAlgorithm"/>.
            </summary>
        </member>
        <member name="M:Rebex.Security.Cryptography.AsymmetricKeyAlgorithm.Dispose">
            <summary>
            Frees the resources used by this object.
            </summary>
        </member>
        <member name="M:Rebex.Security.Cryptography.AsymmetricKeyAlgorithm.CreateFrom(System.Security.Cryptography.AsymmetricAlgorithm,System.Boolean)">
            <summary>
            Creates an instance of <see cref="T:Rebex.Security.Cryptography.AsymmetricKeyAlgorithm"/> from the specified asymmetric algorithm object.
            </summary>
            <param name="algorithm">Asymmetric algorithm object.</param>
            <param name="ownsAlgorithm">True if the created object owns the asymmetric algorithm object.</param>
            <returns>An instance of <see cref="T:Rebex.Security.Cryptography.AsymmetricKeyAlgorithm"/>.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.AsymmetricKeyAlgorithm.GetPublicKey">
            <summary>
            Exports a public key to the specified private key info object.
            </summary>
            <returns>Public key info object.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.AsymmetricKeyAlgorithm.GetPrivateKey">
            <summary>
            Exports a private key to the specified private key info object.
            </summary>
            <returns>Private key info object.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.AsymmetricKeyAlgorithm.ImportKey(Rebex.Security.Cryptography.Pkcs.PublicKeyInfo)">
            <summary>
            Imports a key from the specified public key info object.
            </summary>
            <param name="key">Public key info object.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.AsymmetricKeyAlgorithm.ImportKey(Rebex.Security.Cryptography.Pkcs.PrivateKeyInfo)">
            <summary>
            Imports a key from the specified private key info object.
            </summary>
            <param name="key">Private key info object.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.AsymmetricKeyAlgorithm.ImportKey(System.Security.Cryptography.RSAParameters)">
            <summary>
            Imports a key from the specified RSA parameters.
            </summary>
            <param name="key">RSA key parameters.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.AsymmetricKeyAlgorithm.ImportKey(System.Security.Cryptography.DSAParameters)">
            <summary>
            Imports a key from the specified DSA parameters.
            </summary>
            <param name="key">DSA key parameters.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.AsymmetricKeyAlgorithm.ImportKey(Rebex.Security.Cryptography.DiffieHellmanParameters)">
            <summary>
            Imports a key from the specified Diffie-Hellman parameters.
            </summary>
            <param name="key">Diffie-Hellman key parameters.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.AsymmetricKeyAlgorithm.GenerateKey(Rebex.Security.Cryptography.AsymmetricKeyAlgorithmId,System.Int32)">
            <summary>
            Generates a private key for the specified asymmetric algorithm with of the specified key size.
            </summary>
            <param name="keyAlgorithm">Key algorithm.</param>
            <param name="keySize">Key size.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.AsymmetricKeyAlgorithm.SignHash(System.Byte[],Rebex.Security.Certificates.SignatureHashAlgorithm)">
            <summary>
            Computes the signature for the specified hash value by encrypting it with the private key.
            </summary>
            <param name="hash">The hash value of the data to be signed.</param>
            <param name="hashAlgorithm">A hash algorithm used to create the hash value.</param>
            <returns>The signature for the specified hash value.</returns>
            <remarks>
            <p>
            The private key must be available for this method to succeed.
            </p>
            </remarks>
        </member>
        <member name="M:Rebex.Security.Cryptography.AsymmetricKeyAlgorithm.VerifyHash(System.Byte[],Rebex.Security.Certificates.SignatureHashAlgorithm,System.Byte[])">
            <summary>
            Verifies the specified signature data by comparing it to the signature computed for the specified hash value.
            </summary>
            <param name="hash">The hash value of the signed data.</param>
            <param name="hashAlgorithm">A hash algorithm used to create the hash value.</param>
            <param name="signature">The signature for the specified hash value.</param>
            <returns>True if the signature verifies as valid; otherwise, false.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.AsymmetricKeyAlgorithm.Encrypt(System.Byte[])">
            <summary>
            Encrypts data.
            </summary>
            <param name="rgb">Data to be encrypted.</param>
            <returns>Encrypted data.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.AsymmetricKeyAlgorithm.Decrypt(System.Byte[])">
            <summary>
            Decrypts data.
            </summary>
            <param name="rgb">Data to be decrypted.</param>
            <returns>Decrypted data.</returns>
            <remarks>
            If silent operation is requested and the CSP must display UI to operate, this method will fail.
            </remarks>
        </member>
        <member name="P:Rebex.Security.Cryptography.AsymmetricKeyAlgorithm.KeySize">
            <summary>
            Gets the current key size.
            </summary>
        </member>
        <member name="P:Rebex.Security.Cryptography.AsymmetricKeyAlgorithm.Algorithm">
            <summary>
            Gets the current key algorithm.
            </summary>
        </member>
        <member name="P:Rebex.Security.Cryptography.AsymmetricKeyAlgorithm.PublicOnly">
            <summary>
            Gets a value indicating whether this instance only contains the public key.
            </summary>
        </member>
        <member name="M:Rebex.Security.Cryptography.BigInt.ExtendedGCD(Rebex.Security.Cryptography.BigInt,Rebex.Security.Cryptography.BigInt,Rebex.Security.Cryptography.BigInt@,Rebex.Security.Cryptography.BigInt@)">
            <summary>
            The extended Euclidean algorithm is an extension to the Euclidean algorithm
            for finding the greatest common divisor (GCD) of integers a and b:
            it also finds the integers x and y in Bezout's identity.
            </summary>
        </member>
        <member name="M:Rebex.Security.Cryptography.BigInt.MultiplyAdd(System.UInt32[],System.UInt64,System.UInt32[])">
            <summary>
            r += a * b
            </summary>
        </member>
        <member name="M:Rebex.Security.Cryptography.BigInt.MultiplyMonty(System.UInt32[],System.UInt32[],System.UInt32[],System.UInt32[],System.UInt64)">
            <summary>
            Montgomery multiplication:
              a = x * y * R^(-1) mod m
            (Handbook of Applied Cryptography, Algorithm 14.36)
            </summary>
        </member>
        <member name="M:Rebex.Security.Cryptography.BigInt.IsProbablePrime(System.Int32)">
            <summary>
            Primality test. 
            </summary>
            <param name="n">Number of iterations.</param>
            <returns>true if the number is probably prime; false if not prime.</returns>
            <remarks>
            <p>Uses Algorithm from FIPS PUB 186.</p>
            <p>It will produce a false prime with probability no greater than 1/4^n</p>
            </remarks>
        </member>
        <member name="M:Rebex.Security.Cryptography.BlockTransform.Dispose">
            <summary>
            Empty method - this class doesn't encapsulate unmanaged
            resources.
            </summary>
        </member>
        <member name="T:Rebex.Security.Cryptography.Blowfish">
            <summary>
            Represents the base class from which all implementations of Bruce Schneier's Blowfish algorithm must derive.
            </summary>
        </member>
        <member name="M:Rebex.Security.Cryptography.Blowfish.#ctor">
            <summary>
            Initializes a new instance of Blowfish.
            </summary>
            <remarks>
            You cannot create an instance of an abstract class.
            Create an instance of <see cref="T:Rebex.Security.Cryptography.BlowfishManaged"/> class instead.
            </remarks>
        </member>
        <member name="M:Rebex.Security.Cryptography.Blowfish.Create">
            <summary>
            Creates a cryptographic object to perform the Schneier's Blowfish algorithm.
            </summary>
            <returns>A cryptographic object to perform the Schneier's Blowfish algorithm.</returns>
        </member>
        <member name="T:Rebex.Security.Cryptography.BlowfishManaged">
            <summary>
            The managed version of the Blowfish algorithm.
            </summary>
        </member>
        <member name="M:Rebex.Security.Cryptography.BlowfishManaged.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Rebex.Security.Cryptography.BlowfishManaged"/> class.
            </summary>
        </member>
        <member name="M:Rebex.Security.Cryptography.BlowfishManaged.GenerateIV">
            <summary>
            Generates a random initialization vector (IV) to be used for the algorithm.
            </summary>
            <remarks>Use this method to generate a random initialization vector (IV) when none is specified.</remarks>
        </member>
        <member name="M:Rebex.Security.Cryptography.BlowfishManaged.GenerateKey">
            <summary>
            Generates a random key to be used for the algorithm.
            </summary>
            <remarks>Use this method to generate a random key when none is specified.</remarks>
        </member>
        <member name="M:Rebex.Security.Cryptography.BlowfishManaged.CreateEncryptor(System.Byte[],System.Byte[])">
            <summary>
            Creates a Blowfish encryptor object with the specified key.
            </summary>
            <param name="rgbKey">The secret key to be used for the symmetric algorithm.</param>
            <param name="rgbIV">The initialization vector for
            <see cref="F:System.Security.Cryptography.CipherMode.CBC"/>.</param>
            <returns>A Blowfish encryptor object.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.BlowfishManaged.CreateDecryptor(System.Byte[],System.Byte[])">
            <summary>
            Creates a Blowfish decryptor object with the specified key.
            </summary>
            <param name="rgbKey">The secret key to be used for the symmetric algorithm.</param>
            <param name="rgbIV">The initialization vector for
            <see cref="F:System.Security.Cryptography.CipherMode.CBC"/>.</param>
            <returns>A Blowfish decryptor object.</returns>
        </member>
        <member name="P:Rebex.Security.Cryptography.BlowfishManaged.Mode">
            <summary>
            Gets or sets the mode for operation of the symmetric algorithm.
            </summary>
            <value>The mode for operation of the symmetric algorithm.</value>
        </member>
        <member name="P:Rebex.Security.Cryptography.BlowfishManaged.Padding">
            <summary>
            Gets or sets the padding mode used in the symmetric algorithm.
            </summary>
            <value>The padding mode used in the symmetric algorithm.</value>
        </member>
        <member name="T:Rebex.Security.Cryptography.BlowfishTransform">
            <summary>
            Implements Bruce Schneier's Blowfish block cipher.
            </summary>
        </member>
        <member name="T:Rebex.Security.Cryptography.CryptoHelper">
            <summary>
            Provides various cryptography-related helper methods.
            </summary>
        </member>
        <member name="M:Rebex.Security.Cryptography.CryptoHelper.CreateAsymmetricAlgorithm(System.String)">
            <summary>
            Creates a new instance of the specified asymmetric algorithm. Fails if not available.
            </summary>
            <param name="name">The simple name of the algorithm of which to create an instance.</param>
            <returns>A new instance of the specified algorithm.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.CryptoHelper.CreateHashAlgorithm(System.String)">
            <summary>
            Creates a new instance of the specified hash algorithm. Fails if not available.
            </summary>
            <param name="name">The simple name of the algorithm of which to create an instance.</param>
            <returns>A new instance of the specified algorithm.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.CryptoHelper.CreateHashAlgorithm(System.String,System.Boolean)">
            <summary>
            Creates a new instance of the specified hash algorithm. Fails if not available.
            </summary>
            <param name="name">The simple name of the algorithm of which to create an instance.</param>
            <param name="failIfNotAvailable">Specifies whether to fail if the algorithm is not available.</param>
            <returns>A new instance of the specified algorithm.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.CryptoHelper.CreateSymmetricAlgorithm(System.String,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            Creates a new instance of the specified symmetric algorithm using the specified modes. Fails if not available.
            </summary>
            <param name="name">The simple name of the algorithm of which to create an instance.</param>
            <param name="cipherMode">Block cipher mode.</param>
            <param name="paddingMode">Padding mode.</param>
            <returns>A new instance of the specified algorithm..</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.CryptoHelper.CreateSymmetricAlgorithm(System.String,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode,System.Boolean)">
            <summary>
            Creates a new instance of the specified symmetric algorithm using the specified modes. Fails if not available.
            </summary>
            <param name="name">The simple name of the algorithm of which to create an instance.</param>
            <param name="cipherMode">Block cipher mode.</param>
            <param name="paddingMode">Padding mode.</param>
            <param name="failIfNotAvailable">Specifies whether to fail if the algorithm is not available.</param>
            <returns>A new instance of the specified algorithm..</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.CryptoHelper.CreateAlgorithm(System.String,System.Boolean)">
            <summary>
            Creates a new instance of the specified cryptographic object.
            </summary>
            <param name="name">The simple name of the cryptographic object of which to create an instance.</param>
            <param name="failIfNotAvailable">Specifies whether to fail if the algorithm is not available.</param>
            <returns>A new instance of the specified cryptographic object; or null if not available.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.CryptoHelper.CreateAlgorithm(System.String)">
            <summary>
            Creates a new instance of the specified cryptographic object.
            </summary>
            <param name="name">The simple name of the cryptographic object of which to create an instance.</param>
            <returns>A new instance of the specified cryptographic object; or null if not available.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.CryptoHelper.GenerateDiffieHellmanKeys(System.Byte[],System.Byte[],System.Byte[]@,System.Byte[]@)">
            <summary>
            This method is not intended to be used directly. Use <see cref="T:Rebex.Security.Cryptography.DiffieHellmanManaged"/> instead.
            </summary>
            <param name="G">Generator.</param>
            <param name="P">Prime.</param>
            <param name="privateKey">Private key.</param>
            <param name="publicKey">Public key.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.CryptoHelper.GetDiffieHellmanSharedSecretKey(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            This method is not intended to be used directly. Use <see cref="T:Rebex.Security.Cryptography.DiffieHellmanManaged"/> instead.
            </summary>
            <param name="P">Prime.</param>
            <param name="privateKey">Private key.</param>
            <param name="otherPublicKey">Other public key.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.CryptoHelper.CreateRandomNumberGenerator">
            <summary>
            Creates an instance of default random number generator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.CryptoHelper.GetRandomBytes(System.Int32)">
            <summary>
            Returns a random array of the specified length.
            </summary>
            <param name="count">Array length.</param>
            <returns>Random array.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.CryptoHelper.DecodeSignature(System.Byte[],Rebex.Security.Certificates.KeyAlgorithm)">
            <summary>
            Decodes a signature from a PKCS #7 form.
            </summary>
            <param name="encodedSignature">Signature.</param>
            <param name="keyAlgorithm">Key algorithm.</param>
            <returns>Decoded signature.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.CryptoHelper.EncodeSignature(System.Byte[],Rebex.Security.Certificates.KeyAlgorithm)">
            <summary>
            Encodes a signature to a PKCS #7 form.
            </summary>
            <param name="signature">Signature.</param>
            <param name="keyAlgorithm">Key algorithm.</param>
            <returns>Encoded signature.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.CryptoHelper.VerifyHash(System.Security.Cryptography.RSA,System.Byte[],System.String,System.Byte[])">
            <summary>
            Verifies the specified signature data by comparing it to the signature computed for the specified hash value.
            </summary>
            <param name="rsa">RSA algorithm.</param>
            <param name="hash">The hash value of the signed data.</param>
            <param name="alg">A hash algorithm used to create the hash value.</param>
            <param name="signature">The signature for the specified hash value.</param>
            <returns>True if the signature verifies as valid; otherwise, false.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.CryptoHelper.SignHash(System.Security.Cryptography.RSA,System.Byte[],System.String,System.Boolean)">
            <summary>
            Computes the signature for the specified hash value by encrypting it with the private key.
            </summary>
            <param name="rsa">RSA algorithm.</param>
            <param name="hash">The hash value of the data to be signed.</param>
            <param name="alg">A hash algorithm used to create the hash value.</param>
            <param name="silent">If set to true, the CSP should not display any user interface (UI).</param>
            <returns>The signature for the specified hash value.</returns>
            <remarks>
            <p>
            The private key for a certificate must be available for this method to succeed.
            </p>
            <p>
            If silent operation is requested and the CSP must display UI to operate, this method will fail.
            </p>
            </remarks>
        </member>
        <member name="P:Rebex.Security.Cryptography.CryptoHelper.ForceManagedAes">
            <summary>
            Forces RijndaelManaged to be used even when AesCryptoServiceProvider is available.
            </summary>
            <value>True if RijndaelManaged is to be used instead of AesCryptoServiceProvider; false otherwise.</value>
        </member>
        <member name="P:Rebex.Security.Cryptography.CryptoHelper.UseFipsAlgorithmsOnly">
            <summary>
            Enables or disables an option that specifies whether only FIPS 140-2 compliant cryptographic algorithm providers are to be used.
            </summary>
            <value>True if only FIPS 140-2 compliant algorithms are to be used; false to allow all supported algorithms.</value>
            <remarks>
            In .NET 2.0 and higher, this option reflects the Windows OS settings unless explicitly set to a different value.
            </remarks>
        </member>
        <member name="T:Rebex.Security.Cryptography.DiffieHellman">
            <summary>
            Implements Diffie-Hellman key agreement protocol (also called exponential key agreement).
            </summary>
            <remarks>
            This algorithm was developed by Diffie and Hellman in 1976. It allows two users
            to exchange a secret key over an insecure medium without any prior secrets.
            </remarks>
        </member>
        <member name="M:Rebex.Security.Cryptography.DiffieHellman.#ctor">
            <summary>
            Initializes a new instance of DiffieHellman.
            </summary>
            <remarks>
            You cannot create an instance of an abstract class.
            Create an instance of <see cref="T:Rebex.Security.Cryptography.DiffieHellmanManaged"/> class instead.
            </remarks>
        </member>
        <member name="M:Rebex.Security.Cryptography.DiffieHellman.GetPublicKey">
            <summary>
            Returns the public key.
            </summary>
            <returns>The public key.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.DiffieHellman.GetSharedSecretKey(System.Byte[])">
            <summary>
            Calculates the shared secret key from the other side's public key.
            </summary>
            <param name="otherPublicKey">Other side's public key.</param>
            <returns>The shared secret key.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.DiffieHellman.ImportParameters(Rebex.Security.Cryptography.DiffieHellmanParameters)">
            <summary>
            Imports the specified <see cref="T:Rebex.Security.Cryptography.DiffieHellmanParameters"/>.
            </summary>
            <param name="param">The Diffie-Hellman parameters.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.DiffieHellman.ExportParameters(System.Boolean)">
            <summary>
            Exports the <see cref="T:Rebex.Security.Cryptography.DiffieHellmanParameters"/>.
            </summary>
            <param name="includePrivateParameters">true to include private parameter; otherwise, false.</param>
            <returns>The Diffie-Hellman parameters.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.DiffieHellman.GetOakleyGenerator">
            <summary>
            Returns Oakley generator value.
            </summary>
            <returns>Oakley generator.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.DiffieHellman.GetOakleyGroup2">
            <summary>
            Returns Oakley group 2.
            </summary>
            <returns>Oakley group 2.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.DiffieHellman.GetOakleyGroup14">
            <summary>
            Returns Oakley group 14.
            </summary>
            <returns>Oakley group 14.</returns>
        </member>
        <member name="T:Rebex.Security.Cryptography.DiffieHellmanCryptoServiceProvider">
            <summary>
            Wrapper around Diffie-Hellman CSP.
            </summary>
        </member>
        <member name="M:Rebex.Security.Cryptography.DiffieHellmanCryptoServiceProvider.#ctor">
            <summary>
            Creates an instance of <see cref="T:Rebex.Security.Cryptography.DiffieHellmanCryptoServiceProvider"/> using the default key size of 1024.
            </summary>
        </member>
        <member name="M:Rebex.Security.Cryptography.DiffieHellmanCryptoServiceProvider.#ctor(System.Int32)">
            <summary>
            Creates an instance of <see cref="T:Rebex.Security.Cryptography.DiffieHellmanCryptoServiceProvider"/> using the specified key size.
            </summary>
            <param name="keySize">Key size.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.DiffieHellmanCryptoServiceProvider.GetPublicKey">
            <summary>
            Returns the public key.
            </summary>
            <returns>The public key.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.DiffieHellmanCryptoServiceProvider.ImportParameters(Rebex.Security.Cryptography.DiffieHellmanParameters)">
            <summary>
            Imports the specified <see cref="T:Rebex.Security.Cryptography.DiffieHellmanParameters"/>.
            </summary>
            <param name="parameters">The Diffie-Hellman parameters.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.DiffieHellmanCryptoServiceProvider.ExportParameters(System.Boolean)">
            <summary>
            Exports the <see cref="T:Rebex.Security.Cryptography.DiffieHellmanParameters"/>.
            </summary>
            <param name="includePrivateParameters">true to include private parameter; otherwise, false.</param>
            <returns>The Diffie-Hellman parameters.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.DiffieHellmanCryptoServiceProvider.ToXmlString(System.Boolean)">
            <summary>
            Creates and returns an XML string representation of the current object.
            </summary>
            <param name="includePrivateParameters">true to include private parameters; otherwise, false.</param>
            <returns>An XML string encoding of the current object.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.DiffieHellmanCryptoServiceProvider.FromXmlString(System.String)">
            <summary>
            When overridden in a derived class, reconstructs a DiffieHellmanManaged object from an XML string.
            </summary>
            <param name="xmlString">The XML string to use to reconstruct the DiffieHellmanManaged object. </param>
        </member>
        <member name="M:Rebex.Security.Cryptography.DiffieHellmanCryptoServiceProvider.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="P:Rebex.Security.Cryptography.DiffieHellmanCryptoServiceProvider.SignatureAlgorithm">
            <summary>
            Gets the name of the signature algorithm available with this implementation of DiffieHellman.
            </summary>
            <value>The name of the signature algorithm.</value>
            <remarks>DiffieHellman does not support signatures. This property will throw an exception.</remarks>
        </member>
        <member name="P:Rebex.Security.Cryptography.DiffieHellmanCryptoServiceProvider.KeyExchangeAlgorithm">
            <summary>
            Gets the name of the key exchange algorithm available with this implementation of DiffieHellman.
            </summary>
            <value>The name of the key exchange algorithm.</value>
        </member>
        <member name="T:Rebex.Security.Cryptography.DiffieHellmanManaged">
            <summary>
            Managed implementation of Diffie-Hellman algorithm.
            </summary>
        </member>
        <member name="M:Rebex.Security.Cryptography.DiffieHellmanManaged.#ctor">
            <summary>
            Initializes a new instance of the DiffieHellmanManaged class.
            </summary>
        </member>
        <member name="M:Rebex.Security.Cryptography.DiffieHellmanManaged.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the DiffieHellmanManaged class
            with a specified key size.
            </summary>
            <param name="keySize">The size of the key to use in bits.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.DiffieHellmanManaged.ToXmlString(System.Boolean)">
            <summary>
            Creates and returns an XML string representation of the current object.
            </summary>
            <param name="includePrivateParameters">true to include private parameters; otherwise, false.</param>
            <returns>An XML string encoding of the current object.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.DiffieHellmanManaged.FromXmlString(System.String)">
            <summary>
            When overridden in a derived class, reconstructs a DiffieHellmanManaged object from an XML string.
            </summary>
            <param name="xmlString">The XML string to use to reconstruct the DiffieHellmanManaged object. </param>
        </member>
        <member name="M:Rebex.Security.Cryptography.DiffieHellmanManaged.GetPublicKey">
            <summary>
            Returns the public key.
            </summary>
            <returns>The public key.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.DiffieHellmanManaged.ImportParameters(Rebex.Security.Cryptography.DiffieHellmanParameters)">
            <summary>
            Imports the specified <see cref="T:Rebex.Security.Cryptography.DiffieHellmanParameters"/>.
            </summary>
            <param name="parameters">The Diffie-Hellman parameters.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.DiffieHellmanManaged.ExportParameters(System.Boolean)">
            <summary>
            Exports the <see cref="T:Rebex.Security.Cryptography.DiffieHellmanParameters"/>.
            </summary>
            <param name="includePrivateParameters">true to include private parameter; otherwise, false.</param>
            <returns>The Diffie-Hellman parameters.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.DiffieHellmanManaged.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="P:Rebex.Security.Cryptography.DiffieHellmanManaged.SignatureAlgorithm">
            <summary>
            Gets the name of the signature algorithm available with this implementation of DiffieHellman.
            </summary>
            <value>The name of the signature algorithm.</value>
            <remarks>DiffieHellman does not support signatures. This property will throw an exception.</remarks>
        </member>
        <member name="P:Rebex.Security.Cryptography.DiffieHellmanManaged.KeyExchangeAlgorithm">
            <summary>
            Gets the name of the key exchange algorithm available with this implementation of DiffieHellman.
            </summary>
            <value>The name of the key exchange algorithm.</value>
        </member>
        <member name="T:Rebex.Security.Cryptography.DiffieHellmanParameters">
            <summary>
            Contains the parameters for Diffie-Hellman algorithm.
            </summary>
        </member>
        <member name="F:Rebex.Security.Cryptography.DiffieHellmanParameters.P">
            <summary>
            The prime modulus used for the <see cref="T:Rebex.Security.Cryptography.DiffieHellman"/> operation.
            </summary>
        </member>
        <member name="F:Rebex.Security.Cryptography.DiffieHellmanParameters.G">
            <summary>
            The generator used for the <see cref="T:Rebex.Security.Cryptography.DiffieHellman"/> operation.
            </summary>
        </member>
        <member name="F:Rebex.Security.Cryptography.DiffieHellmanParameters.X">
            <summary>
            The private key for the <see cref="T:Rebex.Security.Cryptography.DiffieHellman"/> operation.
            </summary>
        </member>
        <member name="F:Rebex.Security.Cryptography.DiffieHellmanParameters.Y">
            <summary>
            The public key for the <see cref="T:Rebex.Security.Cryptography.DiffieHellman"/> operation.
            </summary>
        </member>
        <member name="T:Rebex.Security.Cryptography.DSAManaged">
            <summary>
            Managed implementation of DSA signature algorithm.
            </summary>
            <remarks>
            <p>
            The purpose of this class is to make it possible to verify
            signatures without the need to use CryptoAPI, which is not available
            in some scenarios.
            </p>
            <p>
            Even though it is possible to generate DSA keys and sign data using
            this class, but this process has not been optimized for speed and is
            very slow.
            </p>
            </remarks>
        </member>
        <member name="M:Rebex.Security.Cryptography.DSAManaged.#ctor">
            <summary>
            Initializes a new instance of the DSAManaged class with the key size of 1024.
            </summary>
        </member>
        <member name="M:Rebex.Security.Cryptography.DSAManaged.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the DSAManaged class with the specified key size.
            </summary>
            <param name="keySize">The size of the key to use in bits.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.DSAManaged.#ctor(System.Int32,System.Byte[])">
            <summary>
            Initializes a new instance of the DSAManaged class with the specified key size and seed.
            </summary>
            <param name="keySize">The size of the key to use in bits.</param>
            <param name="seed">The initial seed to use for key generation.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.DSAManaged.ToXmlString(System.Boolean)">
            <summary>
            Creates and returns an XML string representation of the current object.
            </summary>
            <param name="includePrivateParameters">true to include private parameters; otherwise, false.</param>
            <returns>An XML string encoding of the current object.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.DSAManaged.FromXmlString(System.String)">
            <summary>
            When overridden in a derived class, reconstructs a DSAManaged object from an XML string.
            </summary>
            <param name="xmlString">The XML string to use to reconstruct the DSAManaged object. </param>
        </member>
        <member name="M:Rebex.Security.Cryptography.DSAManaged.EncodeSignatureToDer(System.Byte[])">
            <summary>
            Encodes the signature in raw format (40 bytes) using the DER encoding of DssSigValue.
            </summary>
            <param name="signature">Raw signature.</param>
            <returns>DER encoded signature</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.DSAManaged.DecodeSignatureFromDer(System.Byte[])">
            <summary>
            Decodes the DER encoding of DssSigValue to raw format (40 bytes).
            </summary>
            <param name="encodedSignature">DER encoded signature.</param>
            <returns>Raw signature</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.DSAManaged.ExportParameters(System.Boolean)">
            <summary>
            Exports the <see cref="T:System.Security.Cryptography.DSAParameters"/>.
            </summary>
            <param name="includePrivateParameters">true to include private parameters; otherwise, false.</param>
            <returns>The DSA parameters.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.DSAManaged.ImportParameters(System.Security.Cryptography.DSAParameters)">
            <summary>
            Imports the specified <see cref="T:System.Security.Cryptography.DSAParameters"/>.
            </summary>
            <param name="parameters">The DSA parameters.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.DSAManaged.CreateSignature(System.Byte[])">
            <summary>
            Creates the DSA signature for the specified data.
            </summary>
            <param name="rgbHash">The SHA1 hash of data to be signed.</param>
            <returns>The DSA signature for the specified hash value.</returns>
            <remarks>
            DSA signature is a pair of numbers r and s.
            This method always returns an array of 40 bytes.
            Bytes 0..19 contain the value of r, bytes 20..39 contain the value of s.
            </remarks>
        </member>
        <member name="M:Rebex.Security.Cryptography.DSAManaged.VerifySignature(System.Byte[],System.Byte[])">
            <summary>
            Verifies the DSA signature for the specified data.
            </summary>
            <param name="rgbHash">The SHA1 hash of signed data to be verified.</param>
            <param name="rgbSignature">The signature to be verified for rgbData.</param>
            <returns>true if the signature verifies as valid; otherwise, false.</returns>
            <remarks>
            DSA signature is a pair of numbers r and s.
            The rgbSignature parameter must be 40 bytes long.
            Bytes 0..19 must contain the value of r, bytes 20..39 must contain the value of s.
            </remarks>
        </member>
        <member name="M:Rebex.Security.Cryptography.DSAManaged.SignHash(System.Byte[])">
            <summary>
            Computes the signature for the specified hash value by signing
            it with the private key.
            </summary>
            <param name="rgbHash">The SHA1 hash of data to be signed.</param>
            <returns>The DSA signature for the specified hash value.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.DSAManaged.VerifyHash(System.Byte[],System.Byte[])">
            <summary>
            Verifies the specified signature data by comparing it to the signature computed for the specified hash value.
            </summary>
            <param name="rgbHash">The hash value of the signed data.</param>
            <param name="rgbSignature">The signature data to be verified.</param>
            <returns>true if the signature verifies as valid; otherwise, false.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.DSAManaged.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithm)">
            <summary>
            Computes the hash value of the specified byte array using the specified hash algorithm, and signs the resulting hash value.
            </summary>
            <param name="buffer">The input data for which to compute the hash.</param>
            <param name="halg">The hash algorithm to use to create the hash value.</param>
            <returns>The DSA signature for the specified data.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.DSAManaged.VerifyData(System.Byte[],System.Security.Cryptography.HashAlgorithm,System.Byte[])">
            <summary>
            Verifies the specified signature data by comparing it to the signature computed for the specified data.
            </summary>
            <param name="buffer">The signed data.</param>
            <param name="halg">The hash algorithm used to create the hash value of the data.</param>
            <param name="signature">The signature data to be verified. </param>
            <returns>true if the signature verifies as valid; otherwise, false.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.DSAManaged.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="P:Rebex.Security.Cryptography.DSAManaged.SignatureAlgorithm">
            <summary>
            Gets the name of the signature algorithm available with this implementation of DSA.
            </summary>
            <value>The name of the signature algorithm.</value>
        </member>
        <member name="P:Rebex.Security.Cryptography.DSAManaged.KeyExchangeAlgorithm">
            <summary>
            Gets the name of the key exchange algorithm available with this implementation of DSA.
            </summary>
            <value>The name of the key exchange algorithm.</value>
        </member>
        <member name="T:Rebex.Security.Cryptography.HashingAlgorithmId">
            <summary>
            Specifies hash algorithm.
            </summary>
        </member>
        <member name="F:Rebex.Security.Cryptography.HashingAlgorithmId.SHA1">
            <summary>
            SHA-1.
            </summary>
        </member>
        <member name="F:Rebex.Security.Cryptography.HashingAlgorithmId.SHA256">
            <summary>
            SHA-256.
            </summary>
        </member>
        <member name="F:Rebex.Security.Cryptography.HashingAlgorithmId.SHA384">
            <summary>
            SHA-384.
            </summary>
        </member>
        <member name="F:Rebex.Security.Cryptography.HashingAlgorithmId.SHA512">
            <summary>
            SHA-512.
            </summary>
        </member>
        <member name="F:Rebex.Security.Cryptography.HashingAlgorithmId.MD4">
            <summary>
            MD4.
            </summary>
        </member>
        <member name="F:Rebex.Security.Cryptography.HashingAlgorithmId.MD5">
            <summary>
            MD5.
            </summary>
        </member>
        <member name="T:Rebex.Security.Cryptography.HashingAlgorithmKeyMode">
            <summary>
            Specifies hash algorithm key mode.
            </summary>
        </member>
        <member name="F:Rebex.Security.Cryptography.HashingAlgorithmKeyMode.None">
            <summary>
            No keyed hash.
            </summary>
        </member>
        <member name="F:Rebex.Security.Cryptography.HashingAlgorithmKeyMode.HMAC">
            <summary>
            HMAC.
            </summary>
        </member>
        <member name="T:Rebex.Security.Cryptography.IHashTransform">
            <summary>
            Represents a hash transform.
            </summary>
        </member>
        <member name="M:Rebex.Security.Cryptography.IHashTransform.Process(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Processes a block of data.
            </summary>
            <param name="buffer">Buffer.</param>
            <param name="offset">Offset.</param>
            <param name="count">Length.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.IHashTransform.GetHash">
            <summary>
            Gets hash value.
            </summary>
            <returns>Hash value.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.IHashTransform.Reset">
            <summary>
            Resets the transform.
            </summary>
        </member>
        <member name="P:Rebex.Security.Cryptography.IHashTransform.HashSize">
            <summary>
            Hash size.
            </summary>
        </member>
        <member name="T:Rebex.Security.Cryptography.HashingAlgorithm">
            <summary>
            Represents a hash algorithm.
            </summary>
        </member>
        <member name="M:Rebex.Security.Cryptography.HashingAlgorithm.GetKey">
            <summary>
            Gets the current key.
            </summary>
            <returns>Key.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.HashingAlgorithm.SetKey(System.Byte[])">
            <summary>
            Sets the current key to the specified value.
            </summary>
            <param name="key">Key..</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.HashingAlgorithm.#ctor(Rebex.Security.Cryptography.HashingAlgorithmId)">
            <summary>
            Creates an instance of <see cref="T:Rebex.Security.Cryptography.HashingAlgorithmId"/> for the specified algorithm.
            </summary>
            <param name="algorithm">Algorithm.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.HashingAlgorithm.IsSupported(Rebex.Security.Cryptography.HashingAlgorithmId)">
            <summary>
            Gets a value indicating whether the specified algorithm is supported.
            </summary>
            <param name="algorithm">Algorithm.</param>
            <returns>True if supported; false if not supported.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.HashingAlgorithm.CreateTransform">
            <summary>
            Creates a hash transform object for this algorithm based on the currently set parameters.
            </summary>
            <returns>Hash transform object.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.HashingAlgorithm.ComputeHash(System.Byte[])">
            <summary>
            Computes the hash value for the specified data.
            </summary>
            <param name="input">Input data.</param>
            <returns>Hash value.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.HashingAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Computes the hash value for the specified data.
            </summary>
            <param name="input">Input data.</param>
            <param name="offset">Input offset.</param>
            <param name="count">Input length.</param>
            <returns>Hash value.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.HashingAlgorithm.ComputeHash(Rebex.Security.Cryptography.HashingAlgorithmId,System.Byte[])">
            <summary>
            Computes the hash value for the specified data using the specified algorithm.
            </summary>
            <param name="algorithm">Hash algorithm.</param>
            <param name="input">Input data.</param>
            <returns>Hash value.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.HashingAlgorithm.ComputeHash(Rebex.Security.Cryptography.HashingAlgorithmId,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Computes the hash value for the specified data using the specified algorithm.
            </summary>
            <param name="algorithm">Hash algorithm.</param>
            <param name="input">Input data.</param>
            <param name="offset">Input offset.</param>
            <param name="count">Input length.</param>
            <returns>Hash value.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.HashingAlgorithm.Dispose">
            <summary>
            Disposes the object.
            </summary>
        </member>
        <member name="P:Rebex.Security.Cryptography.HashingAlgorithm.Algorithm">
            <summary>
            Gets algorithm ID.
            </summary>
        </member>
        <member name="P:Rebex.Security.Cryptography.HashingAlgorithm.HashSize">
            <summary>
            Gets the size of the computed hash code (in bits).
            </summary>
        </member>
        <member name="P:Rebex.Security.Cryptography.HashingAlgorithm.KeyMode">
            <summary>
            Gets or sets the algorithm's key mode.
            </summary>
        </member>
        <member name="T:Rebex.Security.Cryptography.HMAC">
            <summary>
            Computes a Hash-based Message Authentication Code (HMAC)
            for the input data using the specified hash function.
            </summary>
            <remarks>
            HMAC is defined by RFC 2104 and look like this:
            alg(K XOR opad + alg(K XOR ipad + text))<br/>
            where alg is the base hash algorithm,<br/>
            K is an n byte key,<br/>
            ipad is the byte 0x36 repeated 64 times (or 128 times),<br/>
            opad is the byte 0x5c repeated 64 times (or 128 times),<br/>
            and text is the data being protected.<br/>
            </remarks>
        </member>
        <member name="M:Rebex.Security.Cryptography.HMAC.#ctor(System.Type,System.Byte[])">
            <summary>
            Initializes a new instance of the HMAC class with the specified hash algorithm and key data.
            </summary>
            <param name="alg">A type of hash algorithm to use. Must be a subclass of HashAlgorithm.</param>
            <param name="rgbKey">The secret key for HMAC encryption.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.HMAC.#ctor(System.String,System.Byte[])">
            <summary>
            Initializes a new instance of the HMAC class with the specified hash algorithm and key data.
            </summary>
            <param name="alg">A type of hash algorithm to use.</param>
            <param name="rgbKey">The secret key for HMAC encryption.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.HMAC.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the HMAC class with the specified hash algorithm and a randomly generated key.
            </summary>
            <param name="alg">A type of hash algorithm to use. Must be a subclass of HashAlgorithm.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.HMAC.#ctor(System.String)">
            <summary>
            Initializes a new instance of the HMAC class with the specified hash algorithm and a randomly generated key.
            </summary>
            <param name="alg">A type of hash algorithm to use. Must be a subclass of HashAlgorithm.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.HMAC.Initialize">
            <summary>
            Initializes an instance of HMAC.
            </summary>
        </member>
        <member name="M:Rebex.Security.Cryptography.HMAC.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Routes data written to the object into the hash algorithm for computing the HMAC.
            </summary>
            <param name="array">The input data.</param>
            <param name="ibStart">The offset into the byte array from which to begin using data.</param>
            <param name="cbSize">The number of bytes in the array to use as data.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.HMAC.HashFinal">
            <summary>
            Returns the computed Hash-based Message Authentication Code (HMAC) after all data has been written to the object.
            </summary>
            <returns>The computed HMAC.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.HMAC.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the HMAC and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
        </member>
        <member name="P:Rebex.Security.Cryptography.HMAC.Key">
            <summary>
            Gets or sets the key to be used in the hash algorithm.
            </summary>
            <value>The key to be used in the hash algorithm.</value>
        </member>
        <member name="T:Rebex.Security.Cryptography.MD5SHA1">
            <summary>
            Computes the combined MD5/SHA1 hash for the input data.
            </summary>
            <remarks>
            The resulting hash value is 36 bytes long.
            Bytes 0..15 contain the MD5 hash and bytes 16..35 contain the SHA1 hash.
            </remarks>
        </member>
        <member name="M:Rebex.Security.Cryptography.MD5SHA1.#ctor">
            <summary>
            Initializes a new instance of the MD5SHA1 class.
            </summary>
        </member>
        <member name="M:Rebex.Security.Cryptography.MD5SHA1.Create">
            <summary>
            Creates an instance of the MD5SHA1 hash algorithm.
            </summary>
            <returns>A new instance of the MD5SHA1 hash algorithm.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.MD5SHA1.Initialize">
            <summary>
            Initializes an instance of MD5SHA1.
            </summary>
        </member>
        <member name="M:Rebex.Security.Cryptography.MD5SHA1.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Routes data written to the object into MD5 and SHA1 hash algorithms for computing the hash.
            </summary>
            <param name="array">The array of data bytes.</param>
            <param name="ibStart">The offset into the byte array from which to begin using data.</param>
            <param name="cbSize">The number of bytes in the array to use as data.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.MD5SHA1.HashFinal">
            <summary>
            Returns the computed MD5SHA1 hash as an array of bytes after all data has been written to the object.
            </summary>
            <returns>The computed hash value.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.MD5SHA1.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the MD5SHA1 and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="P:Rebex.Security.Cryptography.MD5SHA1.MD5">
            <summary>
            Returns the underlying instance of the MD5 object that is used to compute the MD5 part of the combined hash.
            </summary>
        </member>
        <member name="P:Rebex.Security.Cryptography.MD5SHA1.SHA1">
            <summary>
            Returns the underlying instance of the SHA1 object that is used to compute the SHA1 part of the combined hash.
            </summary>
        </member>
        <member name="T:Rebex.Security.Cryptography.MD5Managed">
            <summary>
            Managed implementation of MD5 algorithm.
            </summary>
        </member>
        <member name="M:Rebex.Security.Cryptography.MD5Managed.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:Rebex.Security.Cryptography.MD5Managed.Initialize">
            <summary>
            Initializes an instance of MD5.
            </summary>
        </member>
        <member name="M:Rebex.Security.Cryptography.MD5Managed.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Updates the MD5 hash code.
            </summary>
            <param name="buffer">The array of data bytes.</param>
            <param name="offset">The zero based offset into the byte array from which to begin using data.</param>
            <param name="count">The number of bytes in the array to use as data.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.MD5Managed.HashFinal">
            <summary>
            Returns the computed MD5 hash as an array of bytes.
            </summary>
            <returns>The computed MD5 hash value.</returns>
        </member>
        <member name="T:Rebex.Security.Cryptography.MD4Managed">
            <summary>
            Managed implementation of MD4 algorithm.
            </summary>
        </member>
        <member name="M:Rebex.Security.Cryptography.MD4Managed.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:Rebex.Security.Cryptography.MD4Managed.Initialize">
            <summary>
            Initializes an instance of MD4.
            </summary>
        </member>
        <member name="M:Rebex.Security.Cryptography.MD4Managed.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Updates the MD4 hash code.
            </summary>
            <param name="buffer">The array of data bytes.</param>
            <param name="offset">The zero based offset into the byte array from which to begin using data.</param>
            <param name="count">The number of bytes in the array to use as data.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.MD4Managed.HashFinal">
            <summary>
            Returns the computed MD4 hash as an array of bytes.
            </summary>
            <returns>The computed MD4 hash value.</returns>
        </member>
        <member name="T:Rebex.Security.Cryptography.ObjectIdentifier">
            <summary>
            Represents a cryptographic object identifier.
            </summary>
        </member>
        <member name="M:Rebex.Security.Cryptography.ObjectIdentifier.#ctor(Rebex.Security.Cryptography.ObjectIdentifier)">
            <summary>
            Initializes a new instance of the <see cref="T:Rebex.Security.Cryptography.ObjectIdentifier"/> class using the specified object. 
            </summary>
            <param name="oid">The object identifier information to use to create the new object identifier.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.ObjectIdentifier.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rebex.Security.Cryptography.ObjectIdentifier"/> class using the specified OID dotted number string.
            </summary>
            <param name="oid">An object identifier in dotted number format.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.ObjectIdentifier.op_Implicit(System.String)~Rebex.Security.Cryptography.ObjectIdentifier">
            <summary>
            Converts a <see cref="T:System.String"/> OID to an <see cref="T:Rebex.Security.Cryptography.ObjectIdentifier"/>.
            </summary>
            <param name="oid">An object identifier in dotted number format.</param>
            <returns>An <see cref="T:Rebex.Security.Cryptography.ObjectIdentifier"/>.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.ObjectIdentifier.Parse(System.Byte[])">
            <summary>
            Parses an OID from an ASN.1 encoded byte array.
            </summary>
            <param name="buffer">Byte array.</param>
            <returns>OID.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.ObjectIdentifier.ToArray">
            <summary>
            Gets an ASN.1 encoded byte array representaion of this OID.
            </summary>
            <returns>Byte array.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.ObjectIdentifier.ToArray(System.Boolean)">
            <summary>
            Gets an ASN.1 encoded byte array representaion of this OID.
            </summary>
            <param name="useDer">True if DER-formatting is to be used.</param>
            <returns>Byte array.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.ObjectIdentifier.ToString">
            <summary>
            Returns a string in dotted number format that represents the current <see cref="T:Rebex.Security.Cryptography.ObjectIdentifier"/>.
            </summary>
            <returns>A string representation of the current Oid.</returns>
        </member>
        <member name="P:Rebex.Security.Cryptography.ObjectIdentifier.Value">
            <summary>
            Gets the dotted number representation of the object identifier.
            </summary>
        </member>
        <member name="T:Rebex.Security.Cryptography.PBKDF1">
            <summary>
            Implements password-based key derivation functionality PBKDF1 specified by RFC 2898,
            with extension of OpenSSL PBKD to allow longer keys to be generated.
            </summary>
        </member>
        <member name="M:Rebex.Security.Cryptography.PBKDF1.Reset">
            <summary>Resets the state of the operation.</summary>
        </member>
        <member name="M:Rebex.Security.Cryptography.PBKDF1.GetBytes(System.Int32)">
            <summary>Returns a pseudo-random key from a password, salt and iteration count.</summary>
            <returns>A byte array filled with pseudo-random key bytes.</returns>
            <param name="cb">The number of pseudo-random key bytes to generate. </param>
        </member>
        <member name="P:Rebex.Security.Cryptography.PBKDF1.IterationCount">
            <summary>Gets or sets the number of iterations for the operation.</summary>
            <returns>The number of iterations for the operation.</returns>
        </member>
        <member name="P:Rebex.Security.Cryptography.PBKDF1.Salt">
            <summary>Gets or sets the key salt value for the operation.</summary>
            <returns>The key salt value for the operation.</returns>
        </member>
        <member name="T:Rebex.Security.Cryptography.Pkcs12KeyGenerator">
            <summary>
            PKCS #12 key derivation algorithm.
            </summary>
        </member>
        <member name="F:Rebex.Security.Cryptography.Pkcs12KeyGenerator.KeyMaterial">
            <summary>
            ID value for key material.
            </summary>
        </member>
        <member name="F:Rebex.Security.Cryptography.Pkcs12KeyGenerator.IVMaterial">
            <summary>
            ID value for IV material.
            </summary>
        </member>
        <member name="F:Rebex.Security.Cryptography.Pkcs12KeyGenerator.MacMaterial">
            <summary>
            ID value for MAC material.
            </summary>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs12KeyGenerator.#ctor(System.Type,System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of PKCS #12 key derivation algorithm.
            </summary>
            <param name="alg">Hash algorithm.</param>
            <param name="password">Password.</param>
            <param name="salt">Salt value.</param>
            <param name="iterations">Number of iterations.</param>
            <param name="id">ID value.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs12KeyGenerator.Reset">
            <summary>Resets the state of the operation.</summary>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs12KeyGenerator.GetBytes(System.Int32)">
            <summary>Returns a pseudo-random key from a password, salt and iteration count.</summary>
            <returns>A byte array filled with pseudo-random key bytes.</returns>
            <param name="cb">The number of pseudo-random key bytes to generate. </param>
        </member>
        <member name="T:Rebex.Security.Cryptography.RSAManaged">
            <summary>
            Managed implementation of RSA algorithm.
            </summary>
            <p>
            The purpose of this class is to make it possible to verify
            signatures and encrypt data without the need to use CryptoAPI, which
            is not available in some scenarios.
            </p>
            <p>
            Even though it is possible to generate RSA keys and sign data using
            this class, it is not recommended because the generated keys are not
            being checked to ensure they are strong primes.
            </p>
        </member>
        <member name="M:Rebex.Security.Cryptography.RSAManaged.#ctor">
            <summary>
            Initializes a new instance of the RSAManaged class with the key size of 1024.
            </summary>
        </member>
        <member name="M:Rebex.Security.Cryptography.RSAManaged.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the RSAManaged class with the specified key size.
            </summary>
            <param name="keySize">The size of the key to use in bits.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.RSAManaged.ExportParameters(System.Boolean)">
            <summary>
            Exports the <see cref="T:System.Security.Cryptography.RSAParameters"/>.
            </summary>
            <param name="includePrivateParameters">true to include private parameters; otherwise, false.</param>
            <returns>The RSA parameters.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.RSAManaged.ImportParameters(System.Security.Cryptography.RSAParameters)">
            <summary>
            Imports the specified <see cref="T:System.Security.Cryptography.RSAParameters"/>.
            </summary>
            <param name="parameters">The RSA parameters.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.RSAManaged.DecryptValue(System.Byte[])">
            <summary>
            Decrypts data with the RSA algorithm.
            </summary>
            <param name="rgb">The data to be decrypted.</param>
            <returns>The decrypted data.</returns>
            <remarks>No processing of raw data is performed.</remarks>
        </member>
        <member name="M:Rebex.Security.Cryptography.RSAManaged.EncryptValue(System.Byte[])">
            <summary>
            Encrypts data with the RSA algorithm.
            </summary>
            <param name="rgb">The data to be encrypted.</param>
            <returns>The encrypted data.</returns>
            <remarks>No processing of raw data is performed.</remarks>
        </member>
        <member name="M:Rebex.Security.Cryptography.RSAManaged.Decrypt(System.Byte[])">
            <summary>
            Decrypts data with the RSA algorithm.
            </summary>
            <param name="rgb">The data to be decrypted.</param>
            <returns>The decrypted data.</returns>
            <remarks>Uses PKCS#1 v1.5 padding.</remarks>
        </member>
        <member name="M:Rebex.Security.Cryptography.RSAManaged.Encrypt(System.Byte[])">
            <summary>
            Encrypts data with the RSA algorithm.
            </summary>
            <param name="rgb">The data to be encrypted.</param>
            <returns>The encrypted data.</returns>
            <remarks>Uses PKCS#1 v1.5 padding.</remarks>
        </member>
        <member name="M:Rebex.Security.Cryptography.RSAManaged.VerifyHash(System.Byte[],System.Byte[])">
            <summary>
            Verifies the specified signature data by comparing it to the signature computed for the specified hash value.
            </summary>
            <param name="rgbHash">The hash value of the signed data.</param>
            <param name="rgbSignature">The signature data to be verified.</param>
            <returns>true if the signature verifies as valid; otherwise, false.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.RSAManaged.VerifyHash(System.Security.Cryptography.RSA,System.Byte[],System.String,System.Byte[])">
            <summary>
            Verifies the specified signature data by comparing it to the signature computed for the specified hash value.
            </summary>
            <param name="rsa">RSA algorithm.</param>
            <param name="rgbHash">The hash value of the signed data.</param>
            <param name="algorithm">A hash algorithm used to create the hash value.</param>
            <param name="rgbSignature">The signature data to be verified.</param>
            <returns>true if the signature verifies as valid; otherwise, false.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.RSAManaged.VerifyHash(System.Byte[],System.String,System.Byte[])">
            <summary>
            Verifies the specified signature data by comparing it to the signature computed for the specified hash value.
            </summary>
            <param name="rgbHash">The hash value of the signed data.</param>
            <param name="algorithm">A hash algorithm used to create the hash value.</param>
            <param name="rgbSignature">The signature data to be verified.</param>
            <returns>true if the signature verifies as valid; otherwise, false.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.RSAManaged.SignHash(System.Byte[])">
            <summary>
            Computes the signature for the specified hash value by signing
            it with the private key.
            </summary>
            <param name="rgbHash">The hash of data to be signed.</param>
            <returns>The RSA signature for the specified hash value.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.RSAManaged.SignHash(System.Security.Cryptography.RSA,System.Byte[],System.String)">
            <summary>
            Computes the signature for the specified hash value by signing
            it with the private key.
            </summary>
            <param name="rsa">RSA algorithm.</param>
            <param name="rgbHash">The hash of data to be signed.</param>
            <param name="algorithm">A hash algorithm used to create the hash value.</param>
            <returns>The RSA signature for the specified hash value.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.RSAManaged.SignHash(System.Byte[],System.String)">
            <summary>
            Computes the signature for the specified hash value by signing
            it with the private key.
            </summary>
            <param name="rgbHash">The hash of data to be signed.</param>
            <param name="algorithm">A hash algorithm used to create the hash value.</param>
            <returns>The RSA signature for the specified hash value.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.RSAManaged.VerifyData(System.Byte[],System.Security.Cryptography.HashAlgorithm,System.Byte[])">
            <summary>
            Verifies the specified signature data by comparing it to the signature computed for the specified data.
            </summary>
            <param name="buffer">The data that was signed.</param>
            <param name="halg">The hash algorithm used to create the hash value of the data.</param>
            <param name="signature">The signature data to be verified.</param>
            <returns>true if the signature verifies as valid; otherwise, false.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.RSAManaged.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithm)">
            <summary>
            Computes the hash value of the specified byte array using the specified hash algorithm, and signs the resulting hash value.
            </summary>
            <param name="buffer">The input data for which to compute the hash.</param>
            <param name="halg">The hash algorithm to use to create the hash value.</param>
            <returns>The RSA signature for the specified data.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.RSAManaged.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="P:Rebex.Security.Cryptography.RSAManaged.SignatureAlgorithm">
            <summary>
            Gets the name of the signature algorithm available with this implementation of RSA.
            </summary>
            <value>The name of the signature algorithm.</value>
        </member>
        <member name="P:Rebex.Security.Cryptography.RSAManaged.KeyExchangeAlgorithm">
            <summary>
            Gets the name of the key exchange algorithm available with this implementation of RSA.
            </summary>
            <value>The name of the key exchange algorithm.</value>
        </member>
        <member name="T:Rebex.Security.Cryptography.SymmetricKeyAlgorithmId">
            <summary>
            Specifies symmetric algorithm.
            </summary>
        </member>
        <member name="F:Rebex.Security.Cryptography.SymmetricKeyAlgorithmId.AES">
            <summary>
            AES.
            </summary>
        </member>
        <member name="F:Rebex.Security.Cryptography.SymmetricKeyAlgorithmId.TripleDES">
            <summary>
            3DES.
            </summary>
        </member>
        <member name="F:Rebex.Security.Cryptography.SymmetricKeyAlgorithmId.Twofish">
            <summary>
            Twofish.
            </summary>
        </member>
        <member name="F:Rebex.Security.Cryptography.SymmetricKeyAlgorithmId.DES">
            <summary>
            DES.
            </summary>
        </member>
        <member name="F:Rebex.Security.Cryptography.SymmetricKeyAlgorithmId.ArcTwo">
            <summary>
            RC2.
            </summary>
        </member>
        <member name="F:Rebex.Security.Cryptography.SymmetricKeyAlgorithmId.ArcFour">
            <summary>
            An algorithm compatible with RC4.
            </summary>
        </member>
        <member name="F:Rebex.Security.Cryptography.SymmetricKeyAlgorithmId.Blowfish">
            <summary>
            Blowfish.
            </summary>
        </member>
        <member name="T:Rebex.Security.Cryptography.SymmetricKeyAlgorithm">
            <summary>
            Represents a symmetric cipher algorithm.
            </summary>
        </member>
        <member name="M:Rebex.Security.Cryptography.SymmetricKeyAlgorithm.GetIV">
            <summary>
            Gets the current initialization vector.
            </summary>
            <returns>Initialization vector.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.SymmetricKeyAlgorithm.GetKey">
            <summary>
            Gets the current key.
            </summary>
            <returns>Key.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.SymmetricKeyAlgorithm.DeriveKey(System.Security.Cryptography.DeriveBytes)">
            <summary>
            Derives a key (of <see cref="P:Rebex.Security.Cryptography.SymmetricKeyAlgorithm.KeySize"/> length) using the specified generator.
            </summary>
            <param name="generator">Generator algorithm.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.SymmetricKeyAlgorithm.DeriveIV(System.Security.Cryptography.DeriveBytes)">
            <summary>
            Derives an initialization vector (of <see cref="P:Rebex.Security.Cryptography.SymmetricKeyAlgorithm.BlockSize"/> length) using the specified generator.
            </summary>
            <param name="generator">Generator algorithm.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.SymmetricKeyAlgorithm.GenerateKey">
            <summary>
            Generates a random key (of <see cref="P:Rebex.Security.Cryptography.SymmetricKeyAlgorithm.KeySize"/> length).
            </summary>
        </member>
        <member name="M:Rebex.Security.Cryptography.SymmetricKeyAlgorithm.GenerateIV">
            <summary>
            Generates a initialization vector (of <see cref="P:Rebex.Security.Cryptography.SymmetricKeyAlgorithm.BlockSize"/> length).
            </summary>
        </member>
        <member name="M:Rebex.Security.Cryptography.SymmetricKeyAlgorithm.SetKey(System.Byte[])">
            <summary>
            Sets the current key to the specified value and changes the <see cref="P:Rebex.Security.Cryptography.SymmetricKeyAlgorithm.KeySize"/> accordingly.
            </summary>
            <param name="key">Key. Cannot be null.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.SymmetricKeyAlgorithm.SetIV(System.Byte[])">
            <summary>
            Sets the current initialization vector to the specified value.
            </summary>
            <param name="iv">Initialization vector.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.SymmetricKeyAlgorithm.CreateEncryptor">
            <summary>
            Creates an encryptor object for this algorithm based on the currently set parameters.
            </summary>
            <returns>Encryptor object.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.SymmetricKeyAlgorithm.CreateDecryptor">
            <summary>
            Creates a decryptor object for this algorithm based on the currently set parameters.
            </summary>
            <returns>Decryptor object.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.SymmetricKeyAlgorithm.Dispose">
            <summary>
            Disposes the object.
            </summary>
        </member>
        <member name="M:Rebex.Security.Cryptography.SymmetricKeyAlgorithm.#ctor(Rebex.Security.Cryptography.SymmetricKeyAlgorithmId)">
            <summary>
            Creates an instance of <see cref="T:Rebex.Security.Cryptography.SymmetricKeyAlgorithmId"/> for the specified algorithm.
            </summary>
            <param name="algorithm">Algorithm.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.SymmetricKeyAlgorithm.IsSupported(Rebex.Security.Cryptography.SymmetricKeyAlgorithmId)">
            <summary>
            Gets a value indicating whether the specified algorithm is supported.
            </summary>
            <param name="algorithm">Algorithm.</param>
            <returns>True if supported; false if not supported.</returns>
        </member>
        <member name="P:Rebex.Security.Cryptography.SymmetricKeyAlgorithm.Algorithm">
            <summary>
            Gets algorithm ID.
            </summary>
        </member>
        <member name="P:Rebex.Security.Cryptography.SymmetricKeyAlgorithm.BlockSize">
            <summary>
            Gets or sets the desired block size.
            </summary>
        </member>
        <member name="P:Rebex.Security.Cryptography.SymmetricKeyAlgorithm.KeySize">
            <summary>
            Gets or sets the desired key size.
            </summary>
        </member>
        <member name="P:Rebex.Security.Cryptography.SymmetricKeyAlgorithm.EffectiveKeySize">
            <summary>
            Gets or sets the desired effective key size.
            </summary>
        </member>
        <member name="P:Rebex.Security.Cryptography.SymmetricKeyAlgorithm.Padding">
            <summary>
            Gets or sets the desired block cipher padding mode.
            </summary>
        </member>
        <member name="P:Rebex.Security.Cryptography.SymmetricKeyAlgorithm.Mode">
            <summary>
            Gets or sets the desired block cipher mode.
            </summary>
        </member>
        <member name="T:Rebex.Security.Cryptography.Twofish">
            <summary>
            Represents the base class from which all implementations of Bruce Schneier's Twofish algorithm must derive.
            </summary>
        </member>
        <member name="M:Rebex.Security.Cryptography.Twofish.#ctor">
            <summary>
            Initializes a new instance of Twofish.
            </summary>
            <remarks>
            You cannot create an instance of an abstract class.
            Create an instance of <see cref="T:Rebex.Security.Cryptography.TwofishManaged"/> class instead.
            </remarks>
        </member>
        <member name="M:Rebex.Security.Cryptography.Twofish.Create">
            <summary>
            Creates a cryptographic object to perform the Schneier's Twofish algorithm.
            </summary>
            <returns>A cryptographic object to perform the Schneier's Twofish algorithm.</returns>
        </member>
        <member name="T:Rebex.Security.Cryptography.TwofishManaged">
            <summary>
            The managed version of the Twofish algorithm.
            </summary>
        </member>
        <member name="M:Rebex.Security.Cryptography.TwofishManaged.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Rebex.Security.Cryptography.TwofishManaged"/> class.
            </summary>
        </member>
        <member name="M:Rebex.Security.Cryptography.TwofishManaged.GenerateIV">
            <summary>
            Generates a random initialization vector (IV) to be used for the algorithm.
            </summary>
            <remarks>Use this method to generate a random initialization vector (IV) when none is specified.</remarks>
        </member>
        <member name="M:Rebex.Security.Cryptography.TwofishManaged.GenerateKey">
            <summary>
            Generates a random key to be used for the algorithm.
            </summary>
            <remarks>Use this method to generate a random key when none is specified.</remarks>
        </member>
        <member name="M:Rebex.Security.Cryptography.TwofishManaged.CreateEncryptor(System.Byte[],System.Byte[])">
            <summary>
            Creates a Twofish encryptor object with the specified key.
            </summary>
            <param name="rgbKey">The secret key to be used for the symmetric algorithm.</param>
            <param name="rgbIV">The initialization vector for
            <see cref="F:System.Security.Cryptography.CipherMode.CBC"/>.</param>
            <returns>A Twofish encryptor object.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.TwofishManaged.CreateDecryptor(System.Byte[],System.Byte[])">
            <summary>
            Creates a Twofish decryptor object with the specified key.
            </summary>
            <param name="rgbKey">The secret key to be used for the symmetric algorithm.</param>
            <param name="rgbIV">The initialization vector for
            <see cref="F:System.Security.Cryptography.CipherMode.CBC"/>.</param>
            <returns>A Twofish decryptor object.</returns>
        </member>
        <member name="P:Rebex.Security.Cryptography.TwofishManaged.Mode">
            <summary>
            Gets or sets the mode for operation of the symmetric algorithm.
            </summary>
            <value>The mode for operation of the symmetric algorithm.</value>
        </member>
        <member name="P:Rebex.Security.Cryptography.TwofishManaged.Padding">
            <summary>
            Gets or sets the padding mode used in the symmetric algorithm.
            </summary>
            <value>The padding mode used in the symmetric algorithm.</value>
        </member>
        <member name="T:Rebex.Security.Certificates.DistinguishedName">
            <summary>
            Represents a distinguished name.
            </summary>
        </member>
        <member name="M:Rebex.Security.Certificates.DistinguishedName.#ctor(System.Byte[])">
            <summary>
            Creates an instance of distingushed name from an ASN.1 block.
            </summary>
            <param name="dn">ASN.1 block.</param>
        </member>
        <member name="M:Rebex.Security.Certificates.DistinguishedName.#ctor(System.String)">
            <summary>
            Creates an instance of distingushed name from a DN string.
            </summary>
            <param name="dn">DN string.</param>
        </member>
        <member name="M:Rebex.Security.Certificates.DistinguishedName.GetCommonName">
            <summary>
            Returns the DN's common name, if available.
            </summary>
            <returns>Common name; or null if not available.</returns>
        </member>
        <member name="M:Rebex.Security.Certificates.DistinguishedName.GetMailAddresses">
            <summary>
            Returns the list of DN's e-mail addresses.
            </summary>
            <returns>The list of addresses.</returns>
        </member>
        <member name="M:Rebex.Security.Certificates.DistinguishedName.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">Object to compare with the current object.</param>
            <returns>True if equal; false if not equal.</returns>
        </member>
        <member name="M:Rebex.Security.Certificates.DistinguishedName.GetHashCode">
            <summary>
            Servers as a hash function for a particular type. Suitable for use in hashing algorithms and hash tables.
            </summary>
            <returns>Hash code.</returns>
        </member>
        <member name="M:Rebex.Security.Certificates.DistinguishedName.ToArray">
            <summary>
            Converts a distinguished name into a byte array.
            </summary>
            <returns>Byte array.</returns>
        </member>
        <member name="M:Rebex.Security.Certificates.DistinguishedName.ToString">
            <summary>
            Returns a string representation of the object.
            </summary>
            <returns>A DN string.</returns>
        </member>
        <member name="M:Rebex.Security.Certificates.DistinguishedName.FromString(System.String)">
            <summary>
            Converts string DN to its BER-encoded representation.
            </summary>
            <param name="dn">String DN.</param>
            <returns>BER-encoded DN.</returns>
        </member>
        <member name="M:Rebex.Security.Certificates.DistinguishedName.ToString(System.Byte[])">
            <summary>
            Converts BER-encoded representation of DB to its string representation.
            </summary>
            <param name="dn">BER-encoded DN.</param>
            <returns>String DN.</returns>
        </member>
        <member name="T:Rebex.Security.Certificates.CrlDistributionPointCollection">
            <summary>
            Represents a collection of CRL distribution points.
            </summary>
        </member>
        <member name="M:Rebex.Security.Certificates.CrlDistributionPointCollection.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Rebex.Security.Certificates.CrlDistributionPointCollection"/>.
            </summary>
        </member>
        <member name="M:Rebex.Security.Certificates.CrlDistributionPointCollection.Add(Rebex.Security.Certificates.CrlDistributionPoint)">
            <summary>
            Adds a <see cref="T:Rebex.Security.Certificates.CrlDistributionPoint"/> to the collection.
            </summary>
            <param name="distributionPoint">A distribution point to add.</param>
        </member>
        <member name="M:Rebex.Security.Certificates.CrlDistributionPointCollection.Remove(Rebex.Security.Certificates.CrlDistributionPoint)">
            <summary>
            Removes a <see cref="T:Rebex.Security.Certificates.CrlDistributionPoint"/> from the collection.
            </summary>
            <param name="distributionPoint">A distribution point to remove.</param>
        </member>
        <member name="M:Rebex.Security.Certificates.CrlDistributionPointCollection.Clear">
            <summary>
            Removes all certificates from the collection.
            </summary>
        </member>
        <member name="M:Rebex.Security.Certificates.CrlDistributionPointCollection.CopyTo(Rebex.Security.Certificates.CrlDistributionPoint[],System.Int32)">
            <summary>
            Copies the range of elements from the <see cref="T:Rebex.Security.Certificates.CrlDistributionPointCollection"/> to a compatible one-dimensional
            array, starting at the specified index of the target array.
            </summary>
            <param name="array">One-dimensional zero-based array that is the destination of the elements copied from <see cref="T:Rebex.Security.Certificates.CrlDistributionPointCollection"/>.</param>
            <param name="index">A zero-based index in the destination array at which copying begins.</param>
        </member>
        <member name="P:Rebex.Security.Certificates.CrlDistributionPointCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Rebex.Security.Certificates.CrlDistributionPoint"/> at the specified index.
            </summary>
            <param name="index">The zero-based index of the <see cref="T:Rebex.Security.Certificates.CrlDistributionPoint"/> to get.</param>
            <value>A distribution point.</value>
        </member>
        <member name="T:Rebex.Security.Certificates.CrlDistributionPoint">
            <summary>
            A CRL distribution point.
            </summary>
        </member>
        <member name="M:Rebex.Security.Certificates.CrlDistributionPoint.#ctor(System.String)">
            <summary>
            Create a new instance of a CRL distribution point that represents the specified URL.
            </summary>
            <param name="url">CRL URL.</param>
        </member>
        <member name="P:Rebex.Security.Certificates.CrlDistributionPoint.Url">
            <summary>
            Gets distribution point URL, if available.
            </summary>
            <value>Distribution point URL, or null if not available.</value>
        </member>
        <member name="T:Rebex.Security.Cryptography.Pkcs.AlgorithmIdentifier">
            <summary>
            The AlgorithmIdentifier class defines an algorithm used for a cryptographic operation.
            </summary>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.AlgorithmIdentifier.#ctor(Rebex.Security.Cryptography.ObjectIdentifier)">
            <summary>
            Creates an instance of the <see cref="T:Rebex.Security.Cryptography.Pkcs.AlgorithmIdentifier"/> class
            with the specified algorithm identifier.
            </summary>
            <param name="oid">An object identifier for the algorithm.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.AlgorithmIdentifier.#ctor(Rebex.Security.Cryptography.ObjectIdentifier,System.Byte[])">
            <summary>
            Creates an instance of the <see cref="T:Rebex.Security.Cryptography.Pkcs.AlgorithmIdentifier"/> class with
            the specified algorithm identifier and parameters.
            </summary>
            <param name="oid">An object identifier for the algorithm.</param>
            <param name="parameters">ASN.1 DER encoded parameters.</param>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.AlgorithmIdentifier.Oid">
            <summary>
            Gets the object identifier for the algorithm.
            </summary>
            <value>On <see cref="P:Rebex.Security.Cryptography.Pkcs.AlgorithmIdentifier.Oid"/> that represents the algorithm.</value>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.AlgorithmIdentifier.Parameters">
            <summary>
            Gets the algorithm parameters.
            </summary>
            <value>The alogirithm parameters.</value>
        </member>
        <member name="T:Rebex.Security.Cryptography.Pkcs.CryptographicAttributeValueCollection">
            <summary>
            A collection of values associated with a <see cref="T:Rebex.Security.Cryptography.Pkcs.CryptographicAttributeNode"/>.
            </summary>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.CryptographicAttributeValueCollection.CopyTo(System.Byte[][],System.Int32)">
            <summary>
            Copies the range of elements from the <see cref="T:Rebex.Security.Cryptography.Pkcs.CryptographicAttributeValueCollection"/> to a compatible one-dimensional
            array, starting at the specified index of the target array.
            </summary>
            <param name="array">One-dimensional zero-based array that is the destination of the elements copied from <see cref="T:Rebex.Security.Cryptography.Pkcs.CryptographicAttributeValueCollection"/>.</param>
            <param name="index">A zero-based index in the destination array at which copying begins.</param>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.CryptographicAttributeValueCollection.Item(System.Int32)">
            <summary>
            Gets the value at the specified index.
            </summary>
            <value>An array of bytes in ASN.1 format.</value>
        </member>
        <member name="T:Rebex.Security.Cryptography.Pkcs.CryptographicAttributeNode">
            <summary>
            A cryptographic attribute that contains a type and a collection of associated values.
            </summary>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.CryptographicAttributeNode.#ctor(Rebex.Security.Cryptography.ObjectIdentifier,System.Collections.ICollection)">
            <summary>
            Initializes an instance of a <see cref="T:Rebex.Security.Cryptography.Pkcs.CryptographicAttributeNode"/>.
            </summary>
            <param name="oid">The object identifier that identifies the attribute type.</param>
            <param name="values">Parameters in ASN.1 format, in a form of one or more byte arrays.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.CryptographicAttributeNode.#ctor(Rebex.Security.Cryptography.ObjectIdentifier,System.Byte[][])">
            <summary>
            Initializes an instance of a <see cref="T:Rebex.Security.Cryptography.Pkcs.CryptographicAttributeNode"/>.
            </summary>
            <param name="oid">The object identifier that identifies the attribute type.</param>
            <param name="values">Parameters in ASN.1 format.</param>
            <remarks>Not supported in .NET 1.0, use <see cref="M:Rebex.Security.Cryptography.Pkcs.CryptographicAttributeNode.#ctor(Rebex.Security.Cryptography.ObjectIdentifier,System.Collections.ICollection)"/> instead.</remarks>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.CryptographicAttributeNode.Oid">
            <summary>
            Gets the object identifier that identifies the attribute type.
            </summary>
            <value>The object identifier.</value>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.CryptographicAttributeNode.Values">
            <summary>
            Gets the collection of values associated with the attribute. 
            </summary>
            <value>A <see cref="T:Rebex.Security.Cryptography.Pkcs.CryptographicAttributeValueCollection"/>.</value>
        </member>
        <member name="T:Rebex.Security.Cryptography.Pkcs.CryptographicAttributeCollection">
            <summary>
            A collection of <see cref="T:Rebex.Security.Cryptography.Pkcs.CryptographicAttributeNode"/> objects.
            </summary>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.CryptographicAttributeCollection.Add(Rebex.Security.Cryptography.Pkcs.CryptographicAttributeNode)">
            <summary>
            Adds a <see cref="T:Rebex.Security.Cryptography.Pkcs.CryptographicAttributeNode"/> to the collection.
            </summary>
            <param name="attribute">A cryptographic attribute to add.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.CryptographicAttributeCollection.Remove(Rebex.Security.Cryptography.Pkcs.CryptographicAttributeNode)">
            <summary>
            Removes a <see cref="T:Rebex.Security.Cryptography.Pkcs.CryptographicAttributeNode"/> from the collection.
            </summary>
            <param name="attribute">A cryptographic attribute to remove.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.CryptographicAttributeCollection.CopyTo(Rebex.Security.Cryptography.Pkcs.CryptographicAttributeNode[],System.Int32)">
            <summary>
            Copies the range of elements from the <see cref="T:Rebex.Security.Cryptography.Pkcs.CryptographicAttributeCollection"/> to a compatible one-dimensional
            array, starting at the specified index of the target array.
            </summary>
            <param name="array">One-dimensional zero-based array that is the destination of the elements copied from <see cref="T:Rebex.Security.Cryptography.Pkcs.CryptographicAttributeCollection"/>.</param>
            <param name="index">A zero-based index in the destination array at which copying begins.</param>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.CryptographicAttributeCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Rebex.Security.Cryptography.Pkcs.CryptographicAttributeNode"/> at the specified index.
            </summary>
            <param name="index">The zero-based index of the <see cref="T:Rebex.Security.Cryptography.Pkcs.CryptographicAttributeNode"/> to get or set.</param>
            <value>A cryptographic attribute.</value>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.CryptographicAttributeCollection.Item(System.String)">
            <summary>
            Gets the first <see cref="T:Rebex.Security.Cryptography.Pkcs.CryptographicAttributeNode"/> with the specified object identifier.
            </summary>
            <param name="oid">The object identifier, either friendly name or dotted string format.</param>
            <value>A cryptographic attribute if found, or null if not found.</value>
        </member>
        <member name="T:Rebex.Security.Cryptography.Pkcs.ExtendedUsageOids">
            <summary>
            Contains string representations of common extended usage OIDs.
            </summary>
        </member>
        <member name="F:Rebex.Security.Cryptography.Pkcs.ExtendedUsageOids.AnyPurpose">
            <summary>Any purpose.</summary>
        </member>
        <member name="F:Rebex.Security.Cryptography.Pkcs.ExtendedUsageOids.ServerAuthentication">
            <summary>TLS Web server authentication.</summary>
        </member>
        <member name="F:Rebex.Security.Cryptography.Pkcs.ExtendedUsageOids.ClientAuthentication">
            <summary>TLS Web client authentication.</summary>
        </member>
        <member name="F:Rebex.Security.Cryptography.Pkcs.ExtendedUsageOids.CodeSigning">
            <summary>Code signing.</summary>
        </member>
        <member name="F:Rebex.Security.Cryptography.Pkcs.ExtendedUsageOids.EmailProtection">
            <summary>E-mail protection.</summary>
        </member>
        <member name="F:Rebex.Security.Cryptography.Pkcs.ExtendedUsageOids.TimeStamping">
            <summary>Timestamping.</summary>
        </member>
        <member name="F:Rebex.Security.Cryptography.Pkcs.ExtendedUsageOids.OcspSigning">
            <summary>OCSPstamping.</summary>
        </member>
        <member name="T:Rebex.Security.Cryptography.Pkcs.ObjectIdentifierCollection">
            <summary>
            A collection of <see cref="T:Rebex.Security.Cryptography.Pkcs.ObjectIdentifierCollection"/> objects.
            </summary>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.ObjectIdentifierCollection.Add(Rebex.Security.Cryptography.ObjectIdentifier)">
            <summary>
            Adds a <see cref="T:Rebex.Security.Cryptography.Pkcs.ObjectIdentifierCollection"/> to the collection.
            </summary>
            <param name="oid">An object identifier to add.</param>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.ObjectIdentifierCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Rebex.Security.Cryptography.Pkcs.ObjectIdentifierCollection"/> at the specified index.
            </summary>
            <param name="index">The zero-based index of the <see cref="T:Rebex.Security.Cryptography.Pkcs.ObjectIdentifierCollection"/> to get or set.</param>
            <value>An object identifier.</value>
        </member>
        <member name="T:Rebex.Security.Cryptography.Pkcs.CertificateIssuer">
            <summary>
            A utility class that features a certificate issuer functionality. This can be used as a base of simple custom certification authority.
            </summary>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.CertificateIssuer.Issue(Rebex.Security.Certificates.Certificate,Rebex.Security.Certificates.SignatureHashAlgorithm,Rebex.Security.Cryptography.Pkcs.PublicKeyInfo,Rebex.Security.Cryptography.Pkcs.CertificateInfo)">
            <summary>
            Issues a certificate signed by the specified certification authority using the specified signature hash algorithm.
            </summary>
            <param name="certificationAuthority">Certification authority certificate to issue and sign the certificate.</param>
            <param name="signatureHashAlgorithm">Signature hash algorithm.</param>
            <param name="publicKey">Certificate public key.</param>
            <param name="certificateInfo">Certificate info.</param>
            <returns>A new certificate.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.CertificateIssuer.Issue(Rebex.Security.Certificates.KeyAlgorithm,System.Int32,Rebex.Security.Certificates.SignatureHashAlgorithm,Rebex.Security.Cryptography.Pkcs.CertificateInfo,Rebex.Security.Cryptography.Pkcs.PrivateKeyInfo@)">
            <summary>
            Issues a self-signed certificate, signed using the specified algorithm. Also passes back the private key info.
            </summary>
            <param name="keyAlgorithm">Signature algorithm.</param>
            <param name="keySize">Key size.</param>
            <param name="signatureHashAlgorithm">Signature hash algorithm.</param>
            <param name="certificateInfo">Certificate info.</param>
            <param name="privateKey">This will contain the <see cref="T:Rebex.Security.Cryptography.Pkcs.PrivateKeyInfo"/> on return.</param>
            <returns>A new certificate.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.CertificateIssuer.IssueRevocationList(Rebex.Security.Certificates.Certificate,Rebex.Security.Certificates.SignatureHashAlgorithm,Rebex.Security.Cryptography.Pkcs.RevocationListInfo,System.Collections.IEnumerable)">
            <summary>
            Issues a certificate signed by the specified certification authority using the specified signature hash algorithm.
            </summary>
            <param name="certificationAuthority">Certification authority certificate to issue and sign the certificate.</param>
            <param name="signatureHashAlgorithm">Signature hash algorithm.</param>
            <param name="revocationListInfo">Certificate revocation list info.</param>
            <param name="revokedCertificates">A collection of <see cref="T:Rebex.Security.Cryptography.Pkcs.RevokedCertificate"/> objects.</param>
            <returns>A new certificate.</returns>
        </member>
        <member name="T:Rebex.Security.Cryptography.Pkcs.CertificateInfo">
            <summary>
            Contains information describing the certificate for the <see cref="T:Rebex.Security.Cryptography.Pkcs.CertificateIssuer"/>.<see cref="M:Rebex.Security.Cryptography.Pkcs.CertificateIssuer.Issue(Rebex.Security.Certificates.Certificate,Rebex.Security.Certificates.SignatureHashAlgorithm,Rebex.Security.Cryptography.Pkcs.PublicKeyInfo,Rebex.Security.Cryptography.Pkcs.CertificateInfo)">Issue</see> method.
            </summary>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.CertificateInfo.#ctor">
            <summary>
            Creates an instance of <see cref="T:Rebex.Security.Cryptography.Pkcs.CertificateInfo"/> class.
            </summary>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.CertificateInfo.GetSerialNumber">
            <summary>
            Gets the certificate serial number.
            </summary>
            <returns>Serial number.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.CertificateInfo.SetSerialNumber(System.Byte[])">
            <summary>
            Sets the certificate serial number.
            </summary>
            <param name="serialNumber">Serial number.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.CertificateInfo.SetSerialNumber(System.Int32)">
            <summary>
            Sets the certificate serial number.
            </summary>
            <param name="serialNumber">Serial number.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.CertificateInfo.GetExtendedUsage">
            <summary>
            Gets the extended certificate usage.
            </summary>
            <value>Extended certificate usage.</value>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.CertificateInfo.SetExtendedUsage(System.String[])">
            <summary>
            Sets the extended certificate usage.
            </summary>
            <param name="extendedUsage">Extended certificate usage.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.CertificateInfo.SetAlternativeHostnames(System.String[])">
            <summary>
            Sets alternative hostnames.
            </summary>
            <param name="hostnames">Alternative hostnames.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.CertificateInfo.GetAlternativeHostnames">
            <summary>
            Sets alternative hostnames.
            </summary>
            <returns>Alternative hostnames.</returns>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.CertificateInfo.Subject">
            <summary>
            Gets or sets the certificate subject.
            </summary>
            <value>Certificate subject.</value>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.CertificateInfo.Usage">
            <summary>
            Gets or sets the basic certificate usage.
            </summary>
            <value>Basic certificate usage.</value>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.CertificateInfo.EffectiveDate">
            <summary>
            Gets or sets the certificate effective date.
            </summary>
            <value>Certificate effective date.</value>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.CertificateInfo.ExpirationDate">
            <summary>
            Gets or sets the certificate expiration date.
            </summary>
            <value>Certificate expiration date.</value>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.CertificateInfo.Extensions">
            <summary>
            Gets the certificate extensions collection.
            </summary>
            <value>Certificate extensions collection.</value>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.CertificateInfo.CrlDistributionPoints">
            <summary>
            Gets the CRL distribution points collection.
            </summary>
            <value>CRL distribution points collection.</value>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.CertificateInfo.MailAddress">
            <summary>
            Gets or sets the certificate owner's e-mail address.
            </summary>
            <value>E-mail address.</value>
        </member>
        <member name="T:Rebex.Security.Cryptography.Pkcs.RevocationListInfo">
            <summary>
            Contains information describing the certificate for the <see cref="T:Rebex.Security.Cryptography.Pkcs.CertificateIssuer"/>.<see cref="M:Rebex.Security.Cryptography.Pkcs.CertificateIssuer.IssueRevocationList(Rebex.Security.Certificates.Certificate,Rebex.Security.Certificates.SignatureHashAlgorithm,Rebex.Security.Cryptography.Pkcs.RevocationListInfo,System.Collections.IEnumerable)">IssueRevocationList</see> method.
            </summary>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.RevocationListInfo.#ctor">
            <summary>
            Creates an instance of <see cref="T:Rebex.Security.Cryptography.Pkcs.RevocationListInfo"/> class.
            </summary>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.RevocationListInfo.ThisUpdate">
            <summary>
            Gets or sets the datetime of this CRL update.
            </summary>
            <value>Datetime of this CRL update.</value>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.RevocationListInfo.NextUpdate">
            <summary>
            Gets or sets the datetime of the next CRL update.
            </summary>
            <value>Datetime of the next CRL update.</value>
        </member>
        <member name="T:Rebex.Security.Cryptography.Pkcs.SignedPublicKeyAndChallenge">
            <summary>
            A SPKAC certificate request. This is used by Mozilla, Opera and other browsers except Internet Explorer.
            For Internet Explorer, use <see cref="T:Rebex.Security.Cryptography.Pkcs.CertificationRequest"/>.
            </summary>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.SignedPublicKeyAndChallenge.#ctor(System.Byte[])">
            <summary>
            Creates a SPKAC request from an ASN.1 block.
            </summary>
            <param name="request">ASN.1 block.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.SignedPublicKeyAndChallenge.Validate(System.String)">
            <summary>
            Validates the SPKAC request's signature.
            </summary>
            <param name="challenge">Challenge string.</param>
            <returns>True if valid; false if not valid.</returns>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.SignedPublicKeyAndChallenge.PublicKey">
            <summary>
            Gets the SPKAC request's public key info. This includes the key itself.
            </summary>
            <value>Public key info.</value>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.SignedPublicKeyAndChallenge.PublicKeyInfo">
            <summary>
            Gets the SPKAC request's public key info. This includes the key itself.
            </summary>
            <value>Public key info.</value>
        </member>
        <member name="T:Rebex.Security.Cryptography.Pkcs.CertificationRequestInfo">
            <summary>
            Certification request info. Encapsulates request info for <see cref="T:Rebex.Security.Cryptography.Pkcs.CertificationRequest"/> object.
            </summary>
        </member>
        <member name="T:Rebex.Security.Cryptography.Pkcs.CertificationRequest">
            <summary>
            PKCS #10 certification request. This is the standard certificate format.
            It is used (for example) by Internet Explorer's XEnroll control, but non-IE browsers generally use <see cref="T:Rebex.Security.Cryptography.Pkcs.SignedPublicKeyAndChallenge"/> instead.
            </summary>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.CertificationRequest.#ctor(Rebex.Security.Certificates.DistinguishedName,Rebex.Security.Cryptography.Pkcs.PublicKeyInfo)">
            <summary>
            Creates a new PKCS #10 request for the specified subject and public key.
            </summary>
            <param name="subject">Request subject.</param>
            <param name="publicKey">Request public key.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.CertificationRequest.#ctor(System.Byte[])">
            <summary>
            Parses a PKCS #10 request from an ASN.1 block.
            </summary>
            <param name="request">ASN.1 block.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.CertificationRequest.Validate">
            <summary>
            Validates the PKCS #10 request's signature.
            </summary>
            <returns>True if valid; false if not valid.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.CertificationRequest.Validate(Rebex.Security.Certificates.DistinguishedName)">
            <summary>
            Validates the PKCS #10 request's signature.
            </summary>
            <param name="subject">Subject - in practice, this is used in place of a challenge string.</param>
            <returns>True if valid; false if not valid.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.CertificationRequest.Sign(Rebex.Security.Cryptography.Pkcs.PrivateKeyInfo,Rebex.Security.Certificates.SignatureHashAlgorithm)">
            <summary>
            Signs the certification request using a private key corresponding to the request's public key.
            </summary>
            <param name="privateKey">An instance of <see cref="T:Rebex.Security.Cryptography.Pkcs.PrivateKeyInfo"/>.</param>
            <param name="signatureHashAlgorithm">Hash algorithm to use for the signature.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.CertificationRequest.Sign(Rebex.Security.Cryptography.AsymmetricKeyAlgorithm,Rebex.Security.Certificates.SignatureHashAlgorithm)">
            <summary>
            Signs the certification request using a private key corresponding to the request's public key.
            </summary>
            <param name="algorithm">An instance of <see cref="T:Rebex.Security.Cryptography.AsymmetricKeyAlgorithm"/> representing the private key.</param>
            <param name="signatureHashAlgorithm">Hash algorithm to use for the signature.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.CertificationRequest.Sign(System.Security.Cryptography.AsymmetricAlgorithm,Rebex.Security.Certificates.SignatureHashAlgorithm)">
            <summary>
            Signs the certification request using a private key corresponding to the request's public key.
            </summary>
            <param name="algorithm">An instance of asymmetric algorithm such as RSACryptoServiceProvider, DSACryptoServiceProvider, RSAManaged or DSAManaged.</param>
            <param name="signatureHashAlgorithm">Hash algorithm to use for the signature.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.CertificationRequest.GetAlternativeHostnames">
            <summary>
            Gets list of alternative hostnames.
            </summary>
            <returns>List of alternative hostnames.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.CertificationRequest.Encode">
            <summary>
            Gets ASN.1 encoded form of this <see cref="T:Rebex.Security.Cryptography.Pkcs.CertificationRequest"/> object.
            </summary>
            <returns>Array of bytes.</returns>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.CertificationRequest.PublicKey">
            <summary>
            Gets the PKCS #10 request's public key info. This includes the key itself.
            </summary>
            <value>Public key info.</value>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.CertificationRequest.PublicKeyInfo">
            <summary>
            Gets the PKCS #10 request's public key info. This includes the key itself.
            </summary>
            <value>Public key info.</value>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.CertificationRequest.Subject">
            <summary>
            Gets the PKCS #10 request's subject.
            </summary>
            <value>Request subject.</value>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.CertificationRequest.Attributes">
            <summary>
            Gets the PKCS #10 request's attributes.
            </summary>
            <value>Request attributes.</value>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.CertificationRequest.CertificateExtensions">
            <summary>
            Gets the PKCS #10 request's certificate extension collection (represented by 1.2.840.113549.1.9.14 attribute in <see cref="P:Rebex.Security.Cryptography.Pkcs.CertificationRequest.Attributes"/> collection).
            </summary>
        </member>
        <member name="T:Rebex.Security.Cryptography.Pkcs.ContentInfo">
            <summary>
            The <see cref="T:Rebex.Security.Cryptography.Pkcs.ContentInfo"/> class represents the CMS/PKCS #7 ContentInfo data structure.
            It encapsulates the content of <see cref="T:Rebex.Security.Cryptography.Pkcs.SignedData"/> or <see cref="T:Rebex.Security.Cryptography.Pkcs.EnvelopedData"/> messages.
            </summary>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.ContentInfo.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of <see cref="T:Rebex.Security.Cryptography.Pkcs.ContentInfo"/> using the specified array of bytes
            as content and an object identifier "data" as content type. 
            </summary>
            <param name="content">The message content.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.ContentInfo.#ctor(Rebex.Security.Cryptography.ObjectIdentifier,System.Byte[])">
            <summary>
            Initializes a new instance of <see cref="T:Rebex.Security.Cryptography.Pkcs.ContentInfo"/> using the specified array of bytes
            as content and the specified object identifier as content type. 
            </summary>
            <param name="contentType">The message content type.</param>
            <param name="content">The message content.</param>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.ContentInfo.ContentType">
            <summary>
            Gets the object identifier of the CMS/PKCS #7 message content type.
            </summary>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.ContentInfo.Content">
            <summary>
            Gets the content of the CMS/PKCS #7 message.
            </summary>
            <value>An array of bytes that represent the content data.</value>
        </member>
        <member name="T:Rebex.Security.Cryptography.Pkcs.EnvelopedData">
            <summary>
            Represents a CMS/PKCS #7 encrypted data.
            </summary>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.EnvelopedData.AcquirePrivateKey">
            <summary>
            Tries acquiring a private key unless it is already available.
            </summary>
            <value>True if the key has been acquired, false otherwise.</value>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.EnvelopedData.GetSymmetricKey">
            <summary>
            Gets the symmetric key used to encrypt the message,
            or null if it is cannot be retrieved.
            </summary>
            <returns>The symmetric key used to encrypt the message, or null.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.EnvelopedData.GetSymmetricAlgorithm">
            <summary>
            Gets the symmetric algorithm used to encrypt or decrypt the content,
            or null if it cannot be retrieved.
            </summary>
            <returns>The <see cref="T:System.Security.Cryptography.SymmetricAlgorithm"/>.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.EnvelopedData.Encrypt">
            <summary>
            Encrypts the contents of the CMS/PKCS #7 message.
            </summary>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.EnvelopedData.Decrypt">
            <summary>
            Decrypts the contents of the CMS/PKCS #7 message.
            </summary>
            <remarks>For a successful decryption, a symmetric key must be available.</remarks>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.EnvelopedData.CreateReceiver">
            <summary>
            Creates a receiving stream for this CMS/PKCS #7 message.
            </summary>
            <returns>A write-only receiving stream.</returns>
            <remarks>
            Receiving stream accepts raw CMS/PKCS #7 signed message data.
            Before all the data has been written and the stream has been closed,
            no methods or properties of <see cref="T:Rebex.Security.Cryptography.Pkcs.SignedData"/> should be accessed.
            </remarks>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.EnvelopedData.Decode(System.Byte[])">
            <summary>
            Decodes an encoded CMS/PKCS #7 encrypted message from raw data.
            Upon successful decoding, information can be retrieved using <see cref="T:Rebex.Security.Cryptography.Pkcs.EnvelopedData"/>
            methods and properties.
            </summary>
            <param name="encodedMessage">Arrays of bytes representing a CMS/PKCS #7 message.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.EnvelopedData.Encode">
            <summary>
            Encodes the <see cref="T:Rebex.Security.Cryptography.Pkcs.EnvelopedData"/> object into CMS/PKCS #7 message data.
            </summary>
            <returns>Array of bytes representing a CMS/PKCS #7 message.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.EnvelopedData.IsEnvelopedData(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Determines whether the specified content info ASN.1 sequence is an enveloped data sequence.
            </summary>
            <param name="data">Sequence data.</param>
            <param name="offset">Offset.</param>
            <param name="count">Count.</param>
            <returns>True if yes; false if not.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.EnvelopedData.Load(System.IO.Stream)">
            <summary>
            Loads a CMS/PKCS #7 encrypted message from a stream.
            Upon successful decoding, information can be retrieved using <see cref="T:Rebex.Security.Cryptography.Pkcs.EnvelopedData"/>
            methods and properties.
            </summary>
            <param name="input">A stream from which to load the message.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.EnvelopedData.Save(System.IO.Stream)">
            <summary>
            Saves <see cref="T:Rebex.Security.Cryptography.Pkcs.EnvelopedData"/> into a stream.
            </summary>
            <param name="output">A stream to which to save the message.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.EnvelopedData.Clone">
            <summary>
            Creates a copy of this object.
            </summary>
            <returns>A new object.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.EnvelopedData.#ctor">
            <summary>
            Creates an instance of <see cref="T:Rebex.Security.Cryptography.Pkcs.EnvelopedData"/> class.
            It must be initialized using <see cref="M:Rebex.Security.Cryptography.Pkcs.EnvelopedData.Load(System.IO.Stream)"/> or <see cref="M:Rebex.Security.Cryptography.Pkcs.EnvelopedData.Decode(System.Byte[])"/> methods before
            any other methods and properties can be accessed.
            </summary>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.EnvelopedData.#ctor(Rebex.Security.Cryptography.Pkcs.ContentInfo)">
            <summary>
            Creates an instance of <see cref="T:Rebex.Security.Cryptography.Pkcs.SignedData"/> class using the specified content
            information as the inner content.
            </summary>
            <param name="contentInfo">The inner content of the encrypted message.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.EnvelopedData.#ctor(Rebex.Security.Cryptography.Pkcs.ContentInfo,Rebex.Security.Cryptography.ObjectIdentifier)">
            <summary>
            Creates an instance of <see cref="T:Rebex.Security.Cryptography.Pkcs.EnvelopedData"/> class using the specified content
            information and encryption algorithm.
            </summary>
            <param name="contentInfo">The inner content of the encrypted message.</param>
            <param name="encryptionAlgorithm">Encryption algorithm identifier (see remarks).</param>
            <remarks>
            Currently, 3DES ("1.2.840.113549.3.7"),
            AES ("2.16.840.1.101.3.4.1.2" for 128-bit, "2.16.840.1.101.3.4.1.22" for 192-bit and "2.16.840.1.101.3.4.1.42" for 256-bit),
            DES ("1.3.14.3.2.7") and RC2 ("1.2.840.113549.3.2") algorithms are supported.
            </remarks>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.EnvelopedData.#ctor(Rebex.Security.Cryptography.Pkcs.ContentInfo,Rebex.Security.Cryptography.ObjectIdentifier,System.Int32)">
            <summary>
            Creates an instance of <see cref="T:Rebex.Security.Cryptography.Pkcs.EnvelopedData"/> class using the specified content
            information and encryption algorithm.
            </summary>
            <param name="contentInfo">The inner content of the encrypted message.</param>
            <param name="encryptionAlgorithm">Encryption algorithm identifier (see remarks).</param>
            <param name="keyLength">The effective key length in bits (only used by RC2 algorithm).</param>
            <remarks>
            Currently, 3DES ("1.2.840.113549.3.7"),
            AES ("2.16.840.1.101.3.4.1.2" for 128-bit, "2.16.840.1.101.3.4.1.22" for 192-bit and "2.16.840.1.101.3.4.1.42" for 256-bit),
            DES ("1.3.14.3.2.7") and RC2 ("1.2.840.113549.3.2") algorithms are supported.
            </remarks>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.EnvelopedData.CertificateFinder">
            <summary>
            Gets or sets the <see cref="T:Rebex.Security.Cryptography.Pkcs.ICertificateFinder"/> to be used to find certificates
            corresponding to a <see cref="T:Rebex.Security.Cryptography.Pkcs.SubjectIdentifier"/>.
            </summary>
            <value>The certificate finder.</value>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.EnvelopedData.Silent">
            <summary>
            Gets or sets a value indicating whether Cryptographic Service Provider (CSP) operations
            are permitted to display any user interface.
            </summary>
            <value>A value indicating whether CSP can display UI.</value>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.EnvelopedData.IsEncrypted">
            <summary>
            Gets a value indicating whether the content is encrypted.
            </summary>
            <value>A value indicating whether the content is encrypted.</value>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.EnvelopedData.UnprotectedAttributes">
            <summary>
            Gets the collection of unprotected (unencrypted) attributes associated with this CMS/PKCS #7 message.
            </summary>
            <value>Unprotected attribute collection.</value>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.EnvelopedData.Certificates">
            <summary>
            Gets the collection of certificates that are embedded in the message.
            </summary>
            <value>Collection of certificates</value>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.EnvelopedData.CertificateRevocationLists">
            <summary>
            Gets the collection of certificate revocation lists (CRLs) that are embedded in the message.
            </summary>
            <value>Collection of CRLs</value>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.EnvelopedData.RecipientInfos">
            <summary>
            Gets the collection of recipients associated with this CMS/PKCS #7 message.
            </summary>
            <value>A collection of recipients.</value>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.EnvelopedData.ContentInfo">
            <summary>
            Gets the inner content information for this CMS/PKCS #7 message.
            It contains the content type identifier and content data.
            </summary>
            <value>The inner content.</value>
            <remarks>
            This method returns the encrypted content for parsed messages
            and unencrypted content for newly created messages. To encrypt or decrypt
            the content, use <see cref="M:Rebex.Security.Cryptography.Pkcs.EnvelopedData.Encrypt"/> and <see cref="M:Rebex.Security.Cryptography.Pkcs.EnvelopedData.Decrypt"/> methods.
            </remarks>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.EnvelopedData.ContentEncryptionAlgorithm">
            <summary>
            Gets the identifier of the algorithm used to encrypt the content.
            </summary>
            <value>An <see cref="T:Rebex.Security.Cryptography.Pkcs.AlgorithmIdentifier"/> object.</value>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.EnvelopedData.HasPrivateKey">
            <summary>
            Returns a value indicating whether the private key to decrypt the symmetric key
            and encrypted content is available.
            </summary>
            <value>True if the private key is available, false if it isn't.</value>
        </member>
        <member name="T:Rebex.Security.Cryptography.Pkcs.ICertificateFinder">
            <summary>
            Defines the interface that certificate finder classes must implement.
            </summary>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.ICertificateFinder.Find(Rebex.Security.Cryptography.Pkcs.SubjectIdentifier,Rebex.Security.Certificates.CertificateStore)">
            <summary>
            Finds a certificate corresponding to the specified subject identifier.
            </summary>
            <param name="subjectIdentifier">Identifier of the subject certificate.</param>
            <param name="additionalStore">A certificate store containing the certificates that were included with the message.</param>
            <returns>Certificate chain if found, or null (Nothing in Visual Basic).</returns>
        </member>
        <member name="T:Rebex.Security.Cryptography.Pkcs.CertificateFinder">
            <summary>
            Provides a set of common certificate finders.
            </summary>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.CertificateFinder.CreateFinder(Rebex.Security.Certificates.CertificateChain[])">
            <summary>
            Certificate finder.
            </summary>
            <param name="certificates">CertificateChain array.</param>
            <returns>A new instance of ICertificateFinder.</returns>
        </member>
        <member name="F:Rebex.Security.Cryptography.Pkcs.CertificateFinder.Default">
            <summary>
            Default certificate finder.
            </summary>
            <remarks>
            Searches for certificates in the current user's "My",
            "Trusted people" and "Other people" stores.
            </remarks>
        </member>
        <member name="T:Rebex.Security.Cryptography.Pkcs.PrivateKeyFormat">
            <summary>
            Specifies private key file format.
            </summary>
        </member>
        <member name="F:Rebex.Security.Cryptography.Pkcs.PrivateKeyFormat.Base64Pkcs8">
            <summary>Base64-encoded PKCS #8 format.</summary>
        </member>
        <member name="F:Rebex.Security.Cryptography.Pkcs.PrivateKeyFormat.Putty">
            <summary>PuTTY PPKv2 format.</summary>
        </member>
        <member name="F:Rebex.Security.Cryptography.Pkcs.PrivateKeyFormat.OpenSsh">
            <summary>OpenSSH/OpenSSL SSLeay format.</summary>
        </member>
        <member name="F:Rebex.Security.Cryptography.Pkcs.PrivateKeyFormat.RawPkcs8">
            <summary>Raw PKCS #8 format.</summary>
        </member>
        <member name="T:Rebex.Security.Cryptography.Pkcs.PrivateKeyInfo">
            <summary>
            Represents an RSA or DSA private key.
            </summary>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.PrivateKeyInfo.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Rebex.Security.Cryptography.Pkcs.PrivateKeyInfo"/>. Use the <see cref="M:Rebex.Security.Cryptography.Pkcs.PrivateKeyInfo.Load(System.IO.Stream,System.String)"/> method to load a private key or <see cref="M:Rebex.Security.Cryptography.Pkcs.PrivateKeyInfo.Generate(Rebex.Security.Certificates.KeyAlgorithm,System.Int32)"/> to generate a private key.
            </summary>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.PrivateKeyInfo.#ctor(System.Security.Cryptography.RSAParameters)">
            <summary>
            Creates a new instance of <see cref="T:Rebex.Security.Cryptography.Pkcs.PrivateKeyInfo"/> based on the specified RSA parameters.
            </summary>
            <param name="parameters">RSA parameters including private keys.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.PrivateKeyInfo.#ctor(System.Security.Cryptography.DSAParameters)">
            <summary>
            Creates a new instance of <see cref="T:Rebex.Security.Cryptography.Pkcs.PrivateKeyInfo"/> based on the specified DSA parameters.
            </summary>
            <param name="parameters">DSA parameters including private keys.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.PrivateKeyInfo.Generate(Rebex.Security.Certificates.KeyAlgorithm,System.Int32)">
            <summary>
            Generates a private key using the specified algorithm and key size.
            </summary>
            <param name="algorithm">Key algorithm. RSA or DSA.</param>
            <param name="keySize">Key size.</param>
            <returns>An instance of <see cref="T:Rebex.Security.Cryptography.Pkcs.PrivateKeyInfo"/>.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.PrivateKeyInfo.GetPrivateKey">
            <summary>
            Gets the raw form of the private key.
            </summary>
            <returns>Array of bytes.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.PrivateKeyInfo.GetPublicKey">
            <summary>
            Gets a public key corresponding to the private key.
            </summary>
            <returns>An instance of <see cref="T:Rebex.Security.Cryptography.Pkcs.PublicKeyInfo"/>.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.PrivateKeyInfo.GetDSAParameters">
            <summary>
            Gets the DSA parameters for a DSA key. May only be used for DSA private keys.
            </summary>
            <returns>DSA paramaters.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.PrivateKeyInfo.GetRSAParameters">
            <summary>
            Gets the RSA parameters for a RSA key. May only be used for RSA private keys.
            </summary>
            <returns>RSA paramaters.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.PrivateKeyInfo.Encode">
            <summary>
            Gets ASN.1 encoded form of this <see cref="T:Rebex.Security.Cryptography.Pkcs.PrivateKeyInfo"/> object.
            </summary>
            <returns>Array of bytes.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.PrivateKeyInfo.Save(System.IO.Stream,System.String,Rebex.Security.Cryptography.Pkcs.PrivateKeyFormat)">
            <summary>
            Saves the private key into the supplied stream in the specified format.
            </summary>
            <param name="output">A stream to which to save the private key.</param>
            <param name="password">Password to encrypted the private key, or null if no encryption desired.</param>
            <param name="format">Private key file format.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.PrivateKeyInfo.Save(System.String,System.String,Rebex.Security.Cryptography.Pkcs.PrivateKeyFormat)">
            <summary>
            Saves the private key into the supplied stream in the specified format.
            </summary>
            <param name="fileName">A file to which to save the public key.</param>
            <param name="password">Password to encrypted the private key, or null if no encryption desired.</param>
            <param name="format">Private key file format.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.PrivateKeyInfo.Save(System.IO.Stream,System.String,Rebex.Security.Cryptography.ObjectIdentifier)">
            <summary>
            Saves the private key into the supplied stream in Base64-encoded PKCS #8 format.
            </summary>
            <param name="output">A stream to which to save the private key.</param>
            <param name="password">Password to encrypted the private key, or null if no encryption desired.</param>
            <param name="encryptionAlgorithm">Encryption algorithm identifier. Ignored if password is null.</param>
            <remarks>
            Currently, 3DES ("1.2.840.113549.3.7"), DES ("1.3.14.3.2.7") and RC2 ("1.2.840.113549.3.2") algorithms are supported.
            </remarks>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.PrivateKeyInfo.GetPuttyPrivateKey">
            <summary>
            Gets the private key in PuTTY format.
            </summary>
            <returns>Array of bytes.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.PrivateKeyInfo.GetPuttyPublicKey">
            <summary>
            Gets the public key in SSH format.
            </summary>
            <returns>Array of bytes.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.PrivateKeyInfo.Load(System.IO.Stream,System.String)">
            <summary>
            Loads a PKCS #8, PuTTY or SSLeay (OpenSSL/OpenSSH) format private key from a stream.
            Upon successful decoding, information can be retrieved using <see cref="T:Rebex.Security.Cryptography.Pkcs.PrivateKeyInfo"/>
            methods and properties.
            </summary>
            <param name="input">A stream from which to load the private key.</param>
            <param name="password">Password used to encrypted the private key, or null if no password needed.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.PrivateKeyInfo.Load(System.String,System.String)">
            <summary>
            Loads a PKCS #8, PuTTY or SSLeay (OpenSSL/OpenSSH) format private key from a stream.
            Upon successful decoding, information can be retrieved using <see cref="T:Rebex.Security.Cryptography.Pkcs.PrivateKeyInfo"/>
            methods and properties.
            </summary>
            <param name="fileName">A file from which to load the private key.</param>
            <param name="password">Password used to encrypted the private key, or null if no password needed.</param>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.PrivateKeyInfo.KeyAlgorithm">
            <summary>
            Gets the key algorithm identifier.
            </summary>
            <value>Key algorithm identifier.</value>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.PrivateKeyInfo.Comment">
            <summary>
            Gets or ets the key comment. The comment is used while saving in some formats.
            </summary>
            <value>Key comment.</value>
        </member>
        <member name="T:Rebex.Security.Cryptography.Pkcs.SubjectPublicKeyInfo">
            <summary>
            Represents an RSA or DSA public key.
            </summary>
        </member>
        <member name="T:Rebex.Security.Cryptography.Pkcs.PublicKeyInfo">
            <summary>
            Represents an RSA or DSA public key.
            </summary>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.PublicKeyInfo.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Rebex.Security.Cryptography.Pkcs.PublicKeyInfo"/>. Use the <see cref="M:Rebex.Security.Cryptography.Pkcs.PublicKeyInfo.Load(System.IO.Stream)"/> method to load a public key.
            </summary>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.PublicKeyInfo.#ctor(System.Security.Cryptography.RSAParameters)">
            <summary>
            Creates a new instance of <see cref="T:Rebex.Security.Cryptography.Pkcs.PublicKeyInfo"/> based on the specified RSA parameters.
            </summary>
            <param name="parameters">RSA parameters.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.PublicKeyInfo.#ctor(System.Security.Cryptography.DSAParameters)">
            <summary>
            Creates a new instance of <see cref="T:Rebex.Security.Cryptography.Pkcs.PublicKeyInfo"/> based on the specified DSA parameters.
            </summary>
            <param name="parameters">DSA parameters.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.PublicKeyInfo.GetPublicKey">
            <summary>
            Gets the raw form of the public key.
            </summary>
            <returns>Array of bytes.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.PublicKeyInfo.Encode">
            <summary>
            Gets ASN.1 encoded form of this <see cref="T:Rebex.Security.Cryptography.Pkcs.PublicKeyInfo"/> object.
            </summary>
            <returns>Array of bytes.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.PublicKeyInfo.GetDSAParameters">
            <summary>
            Gets the DSA parameters for a DSA public key. May only be used for DSA public keys.
            </summary>
            <returns>DSA paramaters.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.PublicKeyInfo.GetRSAParameters">
            <summary>
            Gets the RSA parameters for a RSA public key. May only be used for RSA public keys.
            </summary>
            <returns>RSA paramaters.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.PublicKeyInfo.GetKeySize">
            <summary>
            Returns the size of the key in bits.
            </summary>
            <returns>Size of the key in bits.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.PublicKeyInfo.GetKeyAlgorithm">
            <summary>
            Returns the key algorithm.
            </summary>
            <returns>Key algorithm.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.PublicKeyInfo.Save(System.IO.Stream)">
            <summary>
            Saves the public key into the supplied stream in Base64-encoded PKCS #8 format.
            </summary>
            <param name="output">A stream to which to save the public key.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.PublicKeyInfo.Save(System.String)">
            <summary>
            Saves the public key into the supplied stream in Base64-encoded PKCS #8 format.
            </summary>
            <param name="fileName">A file to which to save the public key.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.PublicKeyInfo.Load(System.IO.Stream)">
            <summary>
            Loads a PKCS #8 public key from a stream.
            Upon successful decoding, information can be retrieved using <see cref="T:Rebex.Security.Cryptography.Pkcs.PublicKeyInfo"/>
            methods and properties.
            </summary>
            <param name="input">A stream from which to load the public key.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.PublicKeyInfo.Load(System.String)">
            <summary>
            Loads a PKCS #8 public key from a file.
            Upon successful decoding, information can be retrieved using <see cref="T:Rebex.Security.Cryptography.Pkcs.PublicKeyInfo"/>
            methods and properties.
            </summary>
            <param name="fileName">A file from which to load the public key.</param>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.PublicKeyInfo.KeyAlgorithm">
            <summary>
            Gets the key algorithm identifier.
            </summary>
            <value>Key algorithm identifier.</value>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.SubjectPublicKeyInfo.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Rebex.Security.Cryptography.Pkcs.SubjectPublicKeyInfo"/>. Use the <see cref="M:Rebex.Security.Cryptography.Pkcs.PublicKeyInfo.Load(System.IO.Stream)"/> method to load a public key.
            </summary>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.SubjectPublicKeyInfo.#ctor(System.Security.Cryptography.RSAParameters)">
            <summary>
            Creates a new instance of <see cref="T:Rebex.Security.Cryptography.Pkcs.SubjectPublicKeyInfo"/> based on the specified RSA parameters.
            </summary>
            <param name="parameters">RSA parameters.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.SubjectPublicKeyInfo.#ctor(System.Security.Cryptography.DSAParameters)">
            <summary>
            Creates a new instance of <see cref="T:Rebex.Security.Cryptography.Pkcs.SubjectPublicKeyInfo"/> based on the specified DSA parameters.
            </summary>
            <param name="parameters">DSA parameters.</param>
        </member>
        <member name="T:Rebex.Security.Cryptography.Pkcs.RecipientInfo">
            <summary>
            Represents a CMS/PKCS #7 encrypted message recipient.
            This class is inherited by <see cref="T:Rebex.Security.Cryptography.Pkcs.KeyAgreeRecipientInfo"/> and <see cref="T:Rebex.Security.Cryptography.Pkcs.KeyTransRecipientInfo"/> classes. 
            </summary>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.RecipientInfo.RecipientIdentifier">
            <summary>
            Gets the identifier of the recipient.
            </summary>
            <value>Identifier of the recipient.</value>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.RecipientInfo.KeyEncryptionAlgorithm">
            <summary>
            Gets the identifier of the algorithm used to encrypt the symmetric key.
            </summary>
            <value>An <see cref="T:Rebex.Security.Cryptography.Pkcs.AlgorithmIdentifier"/> object.</value>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.RecipientInfo.EncryptedKey">
            <summary>
            Gets the encrypted key for the recipient.
            </summary>
            <value>Encrypted key.</value>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.RecipientInfo.Certificate">
            <summary>
            Gets the certificate associated with the recipient, or null if not available.
            </summary>
            <remarks>The recipient's certificate, or null.</remarks>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.RecipientInfo.CertificateChain">
            <summary>
            Gets the certificate chain associated with the recipient, or null if not available.
            </summary>
            <remarks>The recipient's certificate chain, or null.</remarks>
        </member>
        <member name="T:Rebex.Security.Cryptography.Pkcs.KeyTransRecipientInfo">
            <summary>
            Defines key transport recipient information, typically using the RSA algorithm to
            encrypt the shared symmetric key to transport.
            </summary>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.KeyTransRecipientInfo.#ctor(Rebex.Security.Certificates.Certificate)">
            <summary>
            Creates a new instance of <see cref="T:Rebex.Security.Cryptography.Pkcs.KeyTransRecipientInfo"/> that defines the
            key transport recipient information for the owner of the specified RSA certificate.
            </summary>
            <param name="recipientCertificate">The recipient's certificate.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.KeyTransRecipientInfo.#ctor(Rebex.Security.Certificates.Certificate,Rebex.Security.Cryptography.Pkcs.SubjectIdentifierType)">
            <summary>
            Creates a new instance of <see cref="T:Rebex.Security.Cryptography.Pkcs.KeyTransRecipientInfo"/> that defines the
            key transport recipient information for the owner of the specified RSA certificate
            and subject identifier type.
            </summary>
            <param name="recipientCertificate">The recipient's certificate.</param>
            <param name="recipientIdentifierType">Subject identifier type - only IssuerAndSerialNumber and SubjectKeyIdentifier values are accepted.</param>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.KeyTransRecipientInfo.RecipientIdentifier">
            <summary>
            Gets the identifier of the recipient.
            </summary>
            <value>Identifier of the recipient.</value>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.KeyTransRecipientInfo.KeyEncryptionAlgorithm">
            <summary>
            Gets the identifier of the algorithm used to encrypt the symmetric key.
            </summary>
            <value>An <see cref="T:Rebex.Security.Cryptography.Pkcs.AlgorithmIdentifier"/> object.</value>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.KeyTransRecipientInfo.EncryptedKey">
            <summary>
            Gets the encrypted key for the recipient.
            </summary>
            <value>Encrypted key.</value>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.KeyTransRecipientInfo.Certificate">
            <summary>
            Gets the certificate associated with the recipient, or null if not available.
            </summary>
            <remarks>The recipient's certificate, or null.</remarks>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.KeyTransRecipientInfo.CertificateChain">
            <summary>
            Gets the certificate chain associated with the recipient, or null if not available.
            </summary>
            <remarks>The recipient's certificate chain, or null.</remarks>
        </member>
        <member name="T:Rebex.Security.Cryptography.Pkcs.KeyAgreeRecipientInfo">
            <summary>
            Defines key agreement algorithm recipient information. The key itself is not transported - the two
            parties that will be using a symmetric key both take part in its generation. Please note that
            this method is not yet fully supported by Rebex Security library.
            </summary>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.KeyAgreeRecipientInfo.OriginatorIdentifier">
            <summary>
            Gets the identifier of the key originator.
            </summary>
            <value>Identifier of the key originator.</value>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.KeyAgreeRecipientInfo.RecipientIdentifier">
            <summary>
            Gets the identifier of the recipient.
            </summary>
            <value>Identifier of the recipient.</value>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.KeyAgreeRecipientInfo.KeyEncryptionAlgorithm">
            <summary>
            Gets the identifier of the algorithm used to encrypt the symmetric key.
            </summary>
            <value>An <see cref="T:Rebex.Security.Cryptography.Pkcs.AlgorithmIdentifier"/> object.</value>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.KeyAgreeRecipientInfo.EncryptedKey">
            <summary>
            Gets the encrypted key for the recipient.
            </summary>
            <value>Encrypted key.</value>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.KeyAgreeRecipientInfo.Certificate">
            <summary>
            Gets the certificate associated with the recipient, or null if not available.
            </summary>
            <remarks>The recipient's certificate, or null.</remarks>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.KeyAgreeRecipientInfo.CertificateChain">
            <summary>
            Gets the certificate chain associated with the recipient, or null if not available.
            </summary>
            <remarks>The recipient's certificate chain, or null.</remarks>
        </member>
        <member name="T:Rebex.Security.Cryptography.Pkcs.RecipientInfoCollection">
            <summary>
            A collection of <see cref="T:Rebex.Security.Cryptography.Pkcs.RecipientInfo"/> objects.
            </summary>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.RecipientInfoCollection.#ctor">
            <summary>
            Creates an empty and read-only instance of <see cref="T:Rebex.Security.Cryptography.Pkcs.RecipientInfoCollection"/>.
            </summary>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.RecipientInfoCollection.Add(Rebex.Security.Cryptography.Pkcs.RecipientInfo)">
            <summary>
            Adds a <see cref="T:Rebex.Security.Cryptography.Pkcs.RecipientInfo"/> to the collection.
            </summary>
            <param name="recipientInfo">A recipient info to add.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.RecipientInfoCollection.Remove(Rebex.Security.Cryptography.Pkcs.RecipientInfo)">
            <summary>
            Removes a <see cref="T:Rebex.Security.Cryptography.Pkcs.RecipientInfo"/> from the collection.
            </summary>
            <param name="recipientInfo">A recipient info to remove.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.RecipientInfoCollection.RemoveAt(System.Int32)">
            <summary>
            Removes a recipient info at the specified index from the list.
            </summary>
            <param name="index">A zero-based index of a recipient info to remove..</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.RecipientInfoCollection.CopyTo(Rebex.Security.Cryptography.Pkcs.RecipientInfo[],System.Int32)">
            <summary>
            Copies the range of elements from the <see cref="T:Rebex.Security.Cryptography.Pkcs.RecipientInfoCollection"/> to a compatible one-dimensional
            array, starting at the specified index of the target array.
            </summary>
            <param name="array">One-dimensional zero-based array that is the destination of the elements copied from <see cref="T:Rebex.Security.Cryptography.Pkcs.RecipientInfoCollection"/>.</param>
            <param name="index">A zero-based index in the destination array at which copying begins.</param>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.RecipientInfoCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Rebex.Security.Cryptography.Pkcs.RecipientInfo"/> at the specified index.
            </summary>
            <param name="index">The zero-based index of the <see cref="T:Rebex.Security.Cryptography.Pkcs.RecipientInfo"/> to get.</param>
            <value>A recipient info.</value>
        </member>
        <member name="T:Rebex.Security.Cryptography.Pkcs.SignedData">
            <summary>
            Represents a CMS/PKCS #7 signed data.
            </summary>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.SignedData.Sign">
            <summary>
            Creates a signatures for all signers that do not have one yet.
            </summary>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.SignedData.Sign(Rebex.Security.Cryptography.Pkcs.SignatureOptions)">
            <summary>
            Creates a signatures for all signers that do not have one yet.
            </summary>
            <param name="options">Signature options.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.SignedData.Validate">
            <summary>
            Validates all digital signatures on this CMS/PKCS #7 signed message
            and validates all the signers' certificates.
            </summary>
            <returns>Validation result.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.SignedData.Validate(System.Boolean,Rebex.Security.Certificates.ValidationOptions)">
            <summary>
            Validates all digital signatures on this CMS/PKCS #7 signed message.
            Optionally, signers' certificates are validated, and the specified validation
            options are taken into account.
            </summary>
            <param name="verifySignatureOnly">Specifies whether to only verify the signatures, skipping the certificate validation.</param>
            <param name="options">Signature and certificate validation options.</param>
            <returns>Validation result.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.SignedData.Validate(System.Boolean,Rebex.Security.Certificates.ValidationOptions,Rebex.Security.Certificates.CertificateChainEngine)">
            <summary>
            Validates all digital signatures on this CMS/PKCS #7 signed message.
            Optionally, signers' certificates are validated, and the specified validation
            options are taken into account.
            </summary>
            <param name="verifySignatureOnly">Specifies whether to only verify the signatures, skipping the certificate validation.</param>
            <param name="options">Signature and certificate validation options.</param>
            <param name="engine">Certificate chain engine.</param>
            <returns>Validation result.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.SignedData.CreateReceiver">
            <summary>
            Creates a receiving stream for this CMS/PKCS #7 message.
            </summary>
            <returns>A write-only receiving stream.</returns>
            <remarks>
            Receiving stream accepts raw CMS/PKCS #7 signed message data.
            Before all the data has been written and the stream has been closed,
            no methods or properties of <see cref="T:Rebex.Security.Cryptography.Pkcs.SignedData"/> should be accessed.
            </remarks>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.SignedData.Decode(System.Byte[])">
            <summary>
            Decodes an encoded CMS/PKCS #7 signed message from raw data.
            Upon successful decoding, information can be retrieved using <see cref="T:Rebex.Security.Cryptography.Pkcs.SignedData"/>
            methods and properties.
            </summary>
            <param name="encodedMessage">Array of bytes representing a CMS/PKCS #7 message.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.SignedData.Encode">
            <summary>
            Encodes the <see cref="T:Rebex.Security.Cryptography.Pkcs.SignedData"/> object into CMS/PKCS #7 message data.
            </summary>
            <returns>Array of bytes representing a CMS/PKCS #7 message.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.SignedData.IsSignedData(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Determines whether the specified content info ASN.1 sequence is a signed data sequence.
            </summary>
            <param name="data">Sequence data.</param>
            <param name="offset">Offset.</param>
            <param name="count">Count.</param>
            <returns>True if yes; false if not.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.SignedData.Load(System.IO.Stream)">
            <summary>
            Loads a CMS/PKCS #7 signed message from a stream.
            Upon successful decoding, information can be retrieved using <see cref="T:Rebex.Security.Cryptography.Pkcs.SignedData"/>
            methods and properties.
            </summary>
            <param name="input">A stream from which to load the message.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.SignedData.Save(System.IO.Stream)">
            <summary>
            Saves <see cref="T:Rebex.Security.Cryptography.Pkcs.SignedData"/> into a stream.
            </summary>
            <param name="output">A stream to which to save the message.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.SignedData.Clone">
            <summary>
            Creates a copy of this object.
            </summary>
            <returns>A new object.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.SignedData.#ctor">
            <summary>
            Creates an instance of <see cref="T:Rebex.Security.Cryptography.Pkcs.SignedData"/> class.
            </summary>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.SignedData.#ctor(Rebex.Security.Cryptography.Pkcs.ContentInfo)">
            <summary>
            Creates an instance of <see cref="T:Rebex.Security.Cryptography.Pkcs.SignedData"/> class using the specified content
            information as the inner content.
            </summary>
            <param name="contentInfo">The inner content of the signed message.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.SignedData.#ctor(Rebex.Security.Cryptography.Pkcs.ContentInfo,System.Boolean)">
            <summary>
            Creates an instance of <see cref="T:Rebex.Security.Cryptography.Pkcs.SignedData"/> class using the specified content
            information as the inner content.
            </summary>
            <param name="contentInfo">The inner content of the signed message.</param>
            <param name="detached">
            Specifies whether the signature is detached.
            If detached, the actual content is not included within the signed message.
            </param>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.SignedData.IncludeOption">
            <summary>
            Specifies what parts of the certificate chain should be included in the signed data.
            </summary>
            <value>Certificate include option.</value>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.SignedData.CertificateFinder">
            <summary>
            Gets or sets the <see cref="T:Rebex.Security.Cryptography.Pkcs.ICertificateFinder"/> to be used to find certificates
            corresponding to a <see cref="T:Rebex.Security.Cryptography.Pkcs.SubjectIdentifier"/>.
            </summary>
            <value>The certificate finder.</value>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.SignedData.Silent">
            <summary>
            Gets or sets a value indicating whether CSP operations are permitted to display any user interface.
            </summary>
            <value>A value indicating whether CSP can display UI.</value>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.SignedData.Certificates">
            <summary>
            Gets the collection of certificates that are embedded in the message.
            </summary>
            <value>Collection of certificates</value>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.SignedData.CertificateRevocationLists">
            <summary>
            Gets the collection of certificate revocation lists (CRLs) that are embedded in the message.
            </summary>
            <value>Collection of CRLs</value>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.SignedData.SignerInfos">
            <summary>
            Gets the collection of signers associated with this CMS/PKCS #7 message.
            </summary>
            <value>A collection of signers.</value>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.SignedData.ContentInfo">
            <summary>
            Gets or sets the inner content information for this CMS/PKCS #7 message.
            It contains the content type identifier and content data.
            </summary>
            <value>The inner content.</value>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.SignedData.Detached">
            <summary>
            Gets or sets a value indicating whether the actual content is detached from the message.
            </summary>
            <value>True if the content is detached; False if the content is embedded within the message.</value>
        </member>
        <member name="T:Rebex.Security.Cryptography.Pkcs.CertificateIncludeOption">
            <summary>
            Specifies what parts of the certificate chain should be included in the message.
            </summary>
        </member>
        <member name="F:Rebex.Security.Cryptography.Pkcs.CertificateIncludeOption.LeaveExisting">
            <summary>Leave the existing certificate in the collection.</summary>
        </member>
        <member name="F:Rebex.Security.Cryptography.Pkcs.CertificateIncludeOption.None">
            <summary>The certificate chain is not included.</summary>
        </member>
        <member name="F:Rebex.Security.Cryptography.Pkcs.CertificateIncludeOption.ExcludeRoot">
            <summary>The certificate chain is included, except for the root certificate.</summary>
        </member>
        <member name="F:Rebex.Security.Cryptography.Pkcs.CertificateIncludeOption.EndCertificateOnly">
            <summary>Only the end certificate is included.</summary>
        </member>
        <member name="F:Rebex.Security.Cryptography.Pkcs.CertificateIncludeOption.WholeChain">
            <summary>The certificate chain, including the root certificate, is included.</summary>
        </member>
        <member name="T:Rebex.Security.Cryptography.Pkcs.SignerInfo">
            <summary>
            Represents a CMS/PKCS #7 message signer.
            </summary>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.SignerInfo.ToDigestAlgorithm">
            <summary>
            Gets a value that identifies the digest algorithm.
            </summary>
            <returns>Digest algorithm.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.SignerInfo.Validate">
            <summary>
            Validates the signer's digital signature and validates the certificate.
            </summary>
            <returns>Validation result.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.SignerInfo.Validate(System.Boolean,Rebex.Security.Certificates.ValidationOptions)">
            <summary>
            Validates the signer's digital signatures.
            Optionally, signers' certificates are validated, and the specified validation
            options are taken into account.
            </summary>
            <param name="verifySignatureOnly">Specifies whether to only verify the signatures, skipping the certificate validation.</param>
            <param name="options">Signature and certificate validation options.</param>
            <returns>Validation result.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.SignerInfo.Validate(System.Boolean,Rebex.Security.Certificates.ValidationOptions,Rebex.Security.Certificates.CertificateChainEngine)">
            <summary>
            Validates the signer's digital signatures.
            Optionally, signers' certificates are validated, and the specified validation
            options are taken into account.
            </summary>
            <param name="verifySignatureOnly">Specifies whether to only verify the signatures, skipping the certificate validation.</param>
            <param name="options">Signature and certificate validation options.</param>
            <param name="engine">Certificate chain engine.</param>
            <returns>Validation result.</returns>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.SignerInfo.Sign">
            <summary>
            Creates a signatures for the signer.
            </summary>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.SignerInfo.Sign(Rebex.Security.Cryptography.Pkcs.SignatureOptions)">
            <summary>
            Creates a signatures for the signer.
            </summary>
            <param name="options">Signature options.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.SignerInfo.#ctor(Rebex.Security.Certificates.Certificate)">
            <summary>
            Creates a new instance of <see cref="T:Rebex.Security.Cryptography.Pkcs.SignerInfo"/> that defines
            a signer corresponding to the specified certificate. An associated private
            key for the certificate must be available.
            </summary>
            <param name="signerCertificate">The signer's certificate.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.SignerInfo.#ctor(Rebex.Security.Certificates.Certificate,Rebex.Security.Cryptography.Pkcs.SubjectIdentifierType)">
            <summary>
            Creates a new instance of <see cref="T:Rebex.Security.Cryptography.Pkcs.SignerInfo"/> that defines
            a signer corresponding to the specified certificate using the
            specified subject identifier type. An associated private
            key for the certificate must be available. 
            </summary>
            <param name="signerCertificate">The signer's certificate.</param>
            <param name="signerIdentifierType">Subject identifier type - only IssuerAndSerialNumber and SubjectKeyIdentifier values are accepted.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.SignerInfo.#ctor(Rebex.Security.Certificates.Certificate,Rebex.Security.Cryptography.Pkcs.SubjectIdentifierType,Rebex.Security.Certificates.SignatureHashAlgorithm)">
            <summary>
            Creates a new instance of <see cref="T:Rebex.Security.Cryptography.Pkcs.SignerInfo"/> that defines
            a signer corresponding to the specified certificate using the
            specified subject identifier type. An associated private
            key for the certificate must be available. 
            </summary>
            <param name="signerCertificate">The signer's certificate.</param>
            <param name="signerIdentifierType">Subject identifier type - only IssuerAndSerialNumber and SubjectKeyIdentifier values are accepted.</param>
            <param name="digestAlgorithm">Digest algorithm.</param>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.SignerInfo.SignerIdentifier">
            <summary>
            Gets the identifier of the signer.
            </summary>
            <value>Identifier of the signer.</value>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.SignerInfo.DigestAlgorithm">
            <summary>
            Gets the identifier of the digest algorithm.
            </summary>
            <value>An <see cref="T:Rebex.Security.Cryptography.ObjectIdentifier"/> object.</value>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.SignerInfo.SignatureAlgorithm">
            <summary>
            Gets the identifier of the signature algorithm.
            </summary>
            <value>An <see cref="T:Rebex.Security.Cryptography.Pkcs.AlgorithmIdentifier"/> object.</value>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.SignerInfo.Signature">
            <summary>
            Gets the signature, or null if it is not available yet.
            </summary>
            <value>The signature.</value>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.SignerInfo.SignedAttributes">
            <summary>
            Gets the collection of signed attributes associated with this CMS/PKCS #7 message.
            </summary>
            <value>Signed attribute collection.</value>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.SignerInfo.UnsignedAttributes">
            <summary>
            Gets the collection of unsigned attributes associated with this CMS/PKCS #7 message.
            </summary>
            <value>Unsigned attribute collection.</value>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.SignerInfo.Certificate">
            <summary>
            Gets the certificate associated with the signer, or null if not available.
            </summary>
            <remarks>The signer's certificate, or null.</remarks>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.SignerInfo.CertificateChain">
            <summary>
            Gets the certificate chain associated with the signer, or null if not available.
            </summary>
            <remarks>The signer's certificate chain, or null.</remarks>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.SignerInfo.SigningTime">
            <summary>
            Gets the signing time, or 1970-01-01 if not available.
            </summary>
            <value>Singing time.</value>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.SignerInfo.EncryptionKeyPreference">
            <summary>
            Gets the preferred subject identifier for key encryption.
            </summary>
            <value>The preferred subject identifier.</value>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.SignerInfo.Capabilities">
            <summary>
            Gets the collection of S/MIME capabilities the signer supports.
            </summary>
            <value>Collection of supported S/MIME capabilities.</value>
        </member>
        <member name="T:Rebex.Security.Cryptography.Pkcs.SignerInfoCollection">
            <summary>
            A collection of <see cref="T:Rebex.Security.Cryptography.Pkcs.SignerInfo"/> objects.
            </summary>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.SignerInfoCollection.#ctor">
            <summary>
            Creates an empty and read-only instance of <see cref="T:Rebex.Security.Cryptography.Pkcs.SignerInfoCollection"/>.
            </summary>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.SignerInfoCollection.Add(Rebex.Security.Cryptography.Pkcs.SignerInfo)">
            <summary>
            Adds a <see cref="T:Rebex.Security.Cryptography.Pkcs.SignerInfo"/> to the collection.
            </summary>
            <param name="signerInfo">A signer info to add.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.SignerInfoCollection.Remove(Rebex.Security.Cryptography.Pkcs.SignerInfo)">
            <summary>
            Removes a <see cref="T:Rebex.Security.Cryptography.Pkcs.SignerInfo"/> from the collection.
            </summary>
            <param name="signerInfo">A signer info to remove.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.SignerInfoCollection.RemoveAt(System.Int32)">
            <summary>
            Removes a signer info at the specified index from the list.
            </summary>
            <param name="index">A zero-based index of a signer info to remove..</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.SignerInfoCollection.CopyTo(Rebex.Security.Cryptography.Pkcs.SignerInfo[],System.Int32)">
            <summary>
            Copies the range of elements from the <see cref="T:Rebex.Security.Cryptography.Pkcs.SignerInfoCollection"/> to a compatible one-dimensional
            array, starting at the specified index of the target array.
            </summary>
            <param name="array">One-dimensional zero-based array that is the destination of the elements copied from <see cref="T:Rebex.Security.Cryptography.Pkcs.SignerInfoCollection"/>.</param>
            <param name="index">A zero-based index in the destination array at which copying begins.</param>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.SignerInfoCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Rebex.Security.Cryptography.Pkcs.SignerInfo"/> at the specified index.
            </summary>
            <param name="index">The zero-based index of the <see cref="T:Rebex.Security.Cryptography.Pkcs.SignerInfo"/> to get.</param>
            <value>A signer info.</value>
        </member>
        <member name="T:Rebex.Security.Cryptography.Pkcs.SignatureOptions">
            <summary>
            Signature options.
            </summary>
        </member>
        <member name="F:Rebex.Security.Cryptography.Pkcs.SignatureOptions.DisableSignedAttributes">
            <summary>Don't include any signed attributes in the signature. Not recommended.</summary>
        </member>
        <member name="F:Rebex.Security.Cryptography.Pkcs.SignatureOptions.DisableMicrosoftExtensions">
            <summary>Don't include key Microsoft extensions in the signature attributes.</summary>
        </member>
        <member name="F:Rebex.Security.Cryptography.Pkcs.SignatureOptions.DisableSMimeCapabilities">
            <summary>Don't include S/MIME capabilities extensions in the signature attributes.</summary>
        </member>
        <member name="F:Rebex.Security.Cryptography.Pkcs.SignatureOptions.SkipCertificateUsageCheck">
            <summary>Skip certificate usage check.</summary>
        </member>
        <member name="T:Rebex.Security.Cryptography.Pkcs.SignatureValidationStatus">
            <summary>
            Signature validation status.
            </summary>
        </member>
        <member name="F:Rebex.Security.Cryptography.Pkcs.SignatureValidationStatus.CertificateNotValid">
            <summary>Certificate is not valid.</summary>
        </member>
        <member name="F:Rebex.Security.Cryptography.Pkcs.SignatureValidationStatus.CertificateNotAvailable">
            <summary>Certificate is not available.</summary>
        </member>
        <member name="F:Rebex.Security.Cryptography.Pkcs.SignatureValidationStatus.UnsupportedDigestAlgorithm">
            <summary>A digest algorithm is not supported.</summary>
        </member>
        <member name="F:Rebex.Security.Cryptography.Pkcs.SignatureValidationStatus.UnsupportedSignatureAlgorithm">
            <summary>A signature algorithm is not supported.</summary>
        </member>
        <member name="F:Rebex.Security.Cryptography.Pkcs.SignatureValidationStatus.InvalidSignature">
            <summary>A signature is invalid.</summary>
        </member>
        <member name="F:Rebex.Security.Cryptography.Pkcs.SignatureValidationStatus.InvalidKeyUsage">
            <summary>Invalid key usage. The certificate usage doesn't include message signing.</summary>
        </member>
        <member name="F:Rebex.Security.Cryptography.Pkcs.SignatureValidationStatus.ContentTypeMismatch">
            <summary>Content type mismatch.</summary>
        </member>
        <member name="T:Rebex.Security.Cryptography.Pkcs.SignatureValidationResult">
            <summary>
            Represents the result of signature validation.
            </summary>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.SignatureValidationResult.Status">
            <summary>
            Gets the status mask.
            </summary>
            <value>Status mask.</value>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.SignatureValidationResult.CertificateValidationStatus">
            <summary>
            Gets the certificate validation status mask.
            </summary>
            <value>Certificate validation status mask.</value>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.SignatureValidationResult.Valid">
            <summary>
            Gets the certificate chain validity status.
            </summary>
            <value>True if valid, false if not valid.</value>
        </member>
        <member name="T:Rebex.Security.Cryptography.Pkcs.SecureMimeCapability">
            <summary>
            Represents an S/MIME capability.
            </summary>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.SecureMimeCapability.#ctor(Rebex.Security.Cryptography.ObjectIdentifier)">
            <summary>
            Initializes an instance of a <see cref="T:Rebex.Security.Cryptography.Pkcs.SecureMimeCapability"/> with no parameters.
            </summary>
            <param name="oid">The object identifier that identifies the S//MIME capability.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.SecureMimeCapability.#ctor(Rebex.Security.Cryptography.ObjectIdentifier,System.Byte[])">
            <summary>
            Initializes an instance of a <see cref="T:Rebex.Security.Cryptography.Pkcs.SecureMimeCapability"/>.
            </summary>
            <param name="oid">The object identifier that identifies the S//MIME capability.</param>
            <param name="parameters">Capability parameters in ASN.1 format.</param>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.SecureMimeCapability.Oid">
            <summary>
            Gets the object identifier that identifies the S/MIME capability.
            </summary>
            <value>The object identifier.</value>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.SecureMimeCapability.Parameters">
            <summary>
            Gets the S/MIME capability parameters.
            </summary>
            <value>An array of bytes in ASN.1 format.</value>
        </member>
        <member name="T:Rebex.Security.Cryptography.Pkcs.SecureMimeCapabilityCollection">
            <summary>
            A collection of <see cref="T:Rebex.Security.Cryptography.Pkcs.SecureMimeCapability"/> objects.
            </summary>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.SecureMimeCapabilityCollection.Add(Rebex.Security.Cryptography.Pkcs.SecureMimeCapability)">
            <summary>
            Adds a <see cref="T:Rebex.Security.Cryptography.Pkcs.SecureMimeCapability"/> to the collection.
            </summary>
            <param name="capability">An S/MIME capability to add.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.SecureMimeCapabilityCollection.Remove(Rebex.Security.Cryptography.Pkcs.SecureMimeCapability)">
            <summary>
            Removes a <see cref="T:Rebex.Security.Cryptography.Pkcs.SecureMimeCapability"/> from the collection.
            </summary>
            <param name="capability">An S/MIME capability to remove.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.SecureMimeCapabilityCollection.CopyTo(Rebex.Security.Cryptography.Pkcs.SecureMimeCapability[],System.Int32)">
            <summary>
            Copies the range of elements from the <see cref="T:Rebex.Security.Cryptography.Pkcs.SecureMimeCapabilityCollection"/> to a compatible one-dimensional
            array, starting at the specified index of the target array.
            </summary>
            <param name="array">One-dimensional zero-based array that is the destination of the elements copied from <see cref="T:Rebex.Security.Cryptography.Pkcs.SecureMimeCapabilityCollection"/>.</param>
            <param name="index">A zero-based index in the destination array at which copying begins.</param>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.SecureMimeCapabilityCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Rebex.Security.Cryptography.Pkcs.SecureMimeCapability"/> at the specified index.
            </summary>
            <param name="index">The zero-based index of the <see cref="T:Rebex.Security.Cryptography.Pkcs.SecureMimeCapability"/> to get or set.</param>
            <value>An S/MIME capability.</value>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.SecureMimeCapabilityCollection.Item(System.String)">
            <summary>
            Gets the first <see cref="T:Rebex.Security.Cryptography.Pkcs.SecureMimeCapability"/> with the specified object identifier.
            </summary>
            <param name="oid">The object identifier, either friendly name or dotted string format.</param>
            <value>An S/MIME capability if found, or null if not found.</value>
        </member>
        <member name="T:Rebex.Security.Cryptography.Pkcs.SubjectIdentifierType">
            <summary>
            Defines the type of subject identifier that identifies a subject and a certificate.
            </summary>
        </member>
        <member name="F:Rebex.Security.Cryptography.Pkcs.SubjectIdentifierType.Unknown">
            <summary>
            The type of subject identifier is unknown.
            </summary>
        </member>
        <member name="F:Rebex.Security.Cryptography.Pkcs.SubjectIdentifierType.IssuerAndSerialNumber">
            <summary>
            The subject is identified by the certificate issuer and serial number.
            </summary>
        </member>
        <member name="F:Rebex.Security.Cryptography.Pkcs.SubjectIdentifierType.SubjectKeyIdentifier">
            <summary>
            The subject is identified by the hash of the subject's public key. The hash algorithm used is determined by the signature algorithm suite in the subject's certificate.
            </summary>
        </member>
        <member name="F:Rebex.Security.Cryptography.Pkcs.SubjectIdentifierType.PublicKey">
            <summary>
            The subject is identified by the subject's public key.
            </summary>
        </member>
        <member name="T:Rebex.Security.Cryptography.Pkcs.SubjectIdentifier">
            <summary>
            The <see cref="T:Rebex.Security.Cryptography.Pkcs.SubjectIdentifier"/> class identifies a subject, either by certificate issuer
            and serial number, by the subject key identifier or by a public key.
            </summary>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.SubjectIdentifier.#ctor(Rebex.Security.Certificates.Certificate)">
            <summary>
            Initializes an instance of <see cref="T:Rebex.Security.Cryptography.Pkcs.SubjectIdentifier"/> that identifies the subject
            of the specified certificate by its issuer and serial number.
            </summary>
            <param name="certificate">The certificate of the subject to identify.</param>
        </member>
        <member name="M:Rebex.Security.Cryptography.Pkcs.SubjectIdentifier.#ctor(Rebex.Security.Certificates.Certificate,Rebex.Security.Cryptography.Pkcs.SubjectIdentifierType)">
            <summary>
            Initializes an instance of <see cref="T:Rebex.Security.Cryptography.Pkcs.SubjectIdentifier"/> that identifies the subject
            of the specified certificate by the specified identifier type.
            </summary>
            <param name="certificate">The certificate of the subject to identify.</param>
            <param name="subjectIdentifierType">The type of the subject identifier.</param>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.SubjectIdentifier.Type">
            <summary>
            Gets the type of the subject identifier.
            </summary>
            <value>The type of the subject identifier.</value>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.SubjectIdentifier.Issuer">
            <summary>
            Gets the <see cref="T:Rebex.Security.Certificates.DistinguishedName"/> of the certificate issuer if
            this subject identifier is identified by the issuer name and serial number.
            Otherwise, this property will return null.
            </summary>
            <value>Certificate issuer.</value>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.SubjectIdentifier.SerialNumber">
            <summary>
            Gets the serial number of the certificate if
            this subject identifier is identified by the issuer name and serial number.
            Otherwise, this property will return null.
            </summary>
            <value>Certificate serial number.</value>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.SubjectIdentifier.SubjectKeyIdentifier">
            <summary>
            Gets the subject key identifier of the certificate if
            this subject identifier is identified by the subject key identifier.
            Otherwise, this property will return null.
            </summary>
            <value>Certificate subject key identifier.</value>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.SubjectIdentifier.PublicKeyAlgorithm">
            <summary>
            Gets the public algorithm of the certificate if
            this subject identifier is identified by the public key.
            Otherwise, this property will return null.
            </summary>
            <value>Certificate public key algorithm.</value>
        </member>
        <member name="P:Rebex.Security.Cryptography.Pkcs.SubjectIdentifier.PublicKey">
            <summary>
            Gets the public of the certificate if
            this subject identifier is identified by the public key.
            Otherwise, this property will return null.
            </summary>
            <value>Certificate public key.</value>
        </member>
        <member name="T:Rebex.Security.Certificates.ValidationOptions">
            <summary>
            Certificate validation method options. (Not supported by <see cref="T:Rebex.Security.Certificates.CertificateChainEngine">CertificateChainEngine.Native</see> engine on Xamarin.iOS and Xamarin.Android).
            </summary>
        </member>
        <member name="F:Rebex.Security.Certificates.ValidationOptions.None">
            <summary>
            No options specified.
            </summary>
        </member>
        <member name="F:Rebex.Security.Certificates.ValidationOptions.IgnoreTimeNotValid">
            <summary>
            Ignore an invalid time.
            </summary>
        </member>
        <member name="F:Rebex.Security.Certificates.ValidationOptions.IgnoreCtlTimeNotValid">
            <summary>
            Ignore an invalid certificate trust list time.
            </summary>
        </member>
        <member name="F:Rebex.Security.Certificates.ValidationOptions.IgnoreTimeNotNested">
            <summary>
            Ignore an invalid time nesting.
            </summary>
        </member>
        <member name="F:Rebex.Security.Certificates.ValidationOptions.IgnoreAllTimeNotValid">
            <summary>
            Ignore all invalid time checks.
            </summary>
        </member>
        <member name="F:Rebex.Security.Certificates.ValidationOptions.IgnoreInvalidBasicConstraints">
            <summary>
            Ignore invalid basic constraints.
            </summary>
        </member>
        <member name="F:Rebex.Security.Certificates.ValidationOptions.AllowUnknownCa">
            <summary>
            Allow unknown certification authority.
            </summary>
        </member>
        <member name="F:Rebex.Security.Certificates.ValidationOptions.IgnoreWrongUsage">
            <summary>
            Ignore wrong usage of the certificate.
            </summary>
        </member>
        <member name="F:Rebex.Security.Certificates.ValidationOptions.IgnoreInvalidPolicy">
            <summary>
            Ignore invalid policy.
            </summary>
        </member>
        <member name="F:Rebex.Security.Certificates.ValidationOptions.IgnoreEndRevUnknown">
            <summary>
            Ignore an unknown revocation status of the end certificate.
            </summary>
            <remarks>Not supported in builds for .NET CF.</remarks>
        </member>
        <member name="F:Rebex.Security.Certificates.ValidationOptions.IgnoreCtlSignerRevUnknown">
            <summary>
            Ignore an unknown revocation status of the certificate trust list signer.
            </summary>
            <remarks>Not supported in builds for .NET CF.</remarks>
        </member>
        <member name="F:Rebex.Security.Certificates.ValidationOptions.IgnoreCaRevUnknown">
            <summary>
            Ignore an unknown revocation status of the CA certificate.
            </summary>
            <remarks>Not supported in builds for .NET CF.</remarks>
        </member>
        <member name="F:Rebex.Security.Certificates.ValidationOptions.IgnoreRootRevUnknown">
            <summary>
            Ignore an unknown revocation status of a root certificate.
            </summary>
            <remarks>Not supported in builds for .NET CF.</remarks>
        </member>
        <member name="F:Rebex.Security.Certificates.ValidationOptions.IgnoreAllRevUnknown">
            <summary>
            Ignore all unknown revocation statuses.
            </summary>
        </member>
        <member name="F:Rebex.Security.Certificates.ValidationOptions.AllowTestRoot">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="F:Rebex.Security.Certificates.ValidationOptions.TrustTestRoot">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="F:Rebex.Security.Certificates.ValidationOptions.UseCacheOnly">
            <summary>
            Only use local cache, do not access the network.
            </summary>
            <remarks>Not supported in builds for .NET CF.</remarks>
        </member>
        <member name="F:Rebex.Security.Certificates.ValidationOptions.IgnoreCnNotMatch">
            <summary>
            Ignore invalid common name.
            </summary>
        </member>
        <member name="F:Rebex.Security.Certificates.ValidationOptions.SkipRevocationCheck">
            <summary>
            Skip certificate revocation check.
            </summary>
            <remarks>Not supported in builds for .NET CF.</remarks>
        </member>
        <member name="T:Rebex.Security.Certificates.ValidationStatus">
            <summary>
            Certificate validation status.
            </summary>
        </member>
        <member name="F:Rebex.Security.Certificates.ValidationStatus.TimeNotValid">
            <summary>
            This certificate or one of the certificates in the certificate chain is not time valid.
            </summary>
        </member>
        <member name="F:Rebex.Security.Certificates.ValidationStatus.TimeNotNested">
            <summary>
            Certificates in the chain are not properly time nested.
            </summary>
        </member>
        <member name="F:Rebex.Security.Certificates.ValidationStatus.Revoked">
            <summary>
            Trust for this certificate or one of the certificates in the certificate chain has been revoked.
            </summary>
        </member>
        <member name="F:Rebex.Security.Certificates.ValidationStatus.SignatureNotValid">
            <summary>
            The certificate or one of the certificates in the certificate chain does not have a valid signature.
            </summary>
        </member>
        <member name="F:Rebex.Security.Certificates.ValidationStatus.WrongUsage">
            <summary>
            The certificate or certificate chain is not valid for its proposed usage.
            </summary>
        </member>
        <member name="F:Rebex.Security.Certificates.ValidationStatus.RootNotTrusted">
            <summary>
            The certificate or certificate chain is based on an untrusted root.
            </summary>
        </member>
        <member name="F:Rebex.Security.Certificates.ValidationStatus.UnknownRev">
            <summary>
            The revocation status of the certificate or one of the certificates in the certificate chain is unknown.
            </summary>
        </member>
        <member name="F:Rebex.Security.Certificates.ValidationStatus.CyclicChain">
            <summary>
            One of the certificates in the chain was issued by a certification authority that the original certificate had certified.
            </summary>
        </member>
        <member name="F:Rebex.Security.Certificates.ValidationStatus.InvalidExtension">
            <summary>
            One of the certificates has an invalid extension.
            </summary>
        </member>
        <member name="F:Rebex.Security.Certificates.ValidationStatus.InvalidPolicyConstraints">
            <summary>
            The certificate or one of the certificates in the certificate chain has
            a policy constraints extension, and one of the issued certificates has
            a disallowed policy mapping extension or does not have a required issuance
            policies extension.
            </summary>
        </member>
        <member name="F:Rebex.Security.Certificates.ValidationStatus.InvalidBasicConstraints">
            <summary>
            The certificate or one of the certificates in the certificate chain has
            a basic constraints extension and either the certificate cannot be used
            to issue other certificates or the chain path length has been exceeded.
            </summary>
        </member>
        <member name="F:Rebex.Security.Certificates.ValidationStatus.InvalidNameConstraints">
            <summary>
            The certificate or one of the certificates in the certificate chain has
            an invalid name constraints extension.
            </summary>
        </member>
        <member name="F:Rebex.Security.Certificates.ValidationStatus.UnsupportedNameConstraint">
            <summary>
            The certificate or one of the certificates in the certificate chain has a name constraints extension containing unsupported fields.
            </summary>
        </member>
        <member name="F:Rebex.Security.Certificates.ValidationStatus.NotDefinedNameConstraint">
            <summary>
            The certificate or one of the certificates in the certificate chain has a name constraints extension and a name constraint is missing for one of the name choices in the end certificate.
            </summary>
        </member>
        <member name="F:Rebex.Security.Certificates.ValidationStatus.NotPermittedNameConstraint">
            <summary>
            The certificate or one of the certificates in the certificate chain has a name constraints extension and there is not a permitted name constraint for one of the name choices in the end certificate.
            </summary>
        </member>
        <member name="F:Rebex.Security.Certificates.ValidationStatus.ExcludedNameConstraint">
            <summary>
            The certificate or one of the certificates in the certificate chain has a name constraints extension and one of the name choices in the end certificate is explicitly excluded.
            </summary>
        </member>
        <member name="F:Rebex.Security.Certificates.ValidationStatus.IncompleteChain">
            <summary>
            The certificate chain is not compete.
            </summary>
        </member>
        <member name="F:Rebex.Security.Certificates.ValidationStatus.CtlTimeNotValid">
            <summary>
            A CTL used to create this chain was not time valid.
            </summary>
        </member>
        <member name="F:Rebex.Security.Certificates.ValidationStatus.CtlSignatureNotValid">
            <summary>
            A CTL used to create this chain did not have a valid signature.
            </summary>
        </member>
        <member name="F:Rebex.Security.Certificates.ValidationStatus.CtlWrongUsage">
            <summary>
            A CTL used to create this chain is not valid for this usage.
            </summary>
        </member>
        <member name="F:Rebex.Security.Certificates.ValidationStatus.OfflineRev">
            <summary>
            The revocation status of the certificate or one of the certificates in the certificate chain is either off-line or stale.
            </summary>
        </member>
        <member name="F:Rebex.Security.Certificates.ValidationStatus.NoIssuanceChainPolicy">
            <summary>
            The end certificate does not have any resultant issuance policies, and one of the issuing CA certificates has a policy constraints extension requiring it.
            </summary>
        </member>
        <member name="F:Rebex.Security.Certificates.ValidationStatus.UnknownError">
            <summary>
            Unknown error.
            </summary>
        </member>
        <member name="F:Rebex.Security.Certificates.ValidationStatus.PathTooLong">
            <summary>
            A path length constraint in the certification chain has been violated.
            </summary>
            <remarks>Not supported in builds for .NET CF.</remarks>
        </member>
        <member name="F:Rebex.Security.Certificates.ValidationStatus.UnknownCriticalExtension">
            <summary>
            A certificate contains an unknown extension that is marked critical.
            </summary>
            <remarks>Not supported in builds for .NET CF.</remarks>
        </member>
        <member name="F:Rebex.Security.Certificates.ValidationStatus.InvalidChain">
            <summary>
            A parent of a given certificate in fact did not issue that child certificate.
            </summary>
            <remarks>Not supported in builds for .NET CF.</remarks>
        </member>
        <member name="F:Rebex.Security.Certificates.ValidationStatus.UnknownCa">
            <summary>
            A certificate chain could not be built to a trusted root authority.
            </summary>
            <remarks>Not supported in builds for .NET CF.</remarks>
        </member>
        <member name="F:Rebex.Security.Certificates.ValidationStatus.CnNotMatch">
            <summary>
            The certificate's CN name does not match the passed value.
            </summary>
        </member>
        <member name="F:Rebex.Security.Certificates.ValidationStatus.CaNotTrusted">
            <summary>
            A certification chain processed correctly, but one of the CA certificates
            is not trusted by the policy provider.
            </summary>
            <remarks>Not supported in builds for .NET CF.</remarks>
        </member>
        <member name="F:Rebex.Security.Certificates.ValidationStatus.ExplicitDistrust">
            <summary>
            The certificate was explicitly marked as untrusted by the user.
            </summary>
            <remarks>Not supported in builds for .NET CF.</remarks>
        </member>
        <member name="F:Rebex.Security.Certificates.ValidationStatus.Malformed">
            <summary>
            A certificate is missing or has an empty value for an important field,
            such as a subject or issuer name.
            </summary>
            <remarks>Not supported in builds for .NET CF.</remarks>
        </member>
        <member name="F:Rebex.Security.Certificates.ValidationStatus.MoreErrors">
            <summary>
            There might be more errors apart from those reported.
            </summary>
        </member>
        <member name="F:Rebex.Security.Certificates.ValidationStatus.WeakAlgorithm">
            <summary>
            Certificate uses algorithm which is not considered secure on this platform.
            </summary>
        </member>
        <member name="F:Rebex.Security.Certificates.ValidationStatus.NotTrusted">
            <summary>
            Certificate is not trusted.
            </summary>
        </member>
        <member name="T:Rebex.Security.Certificates.ValidationResult">
            <summary>
            Represents the result of certificate chaing validation.
            </summary>
        </member>
        <member name="P:Rebex.Security.Certificates.ValidationResult.Status">
            <summary>
            Gets the status mask.
            </summary>
            <value>Status mask.</value>
        </member>
        <member name="P:Rebex.Security.Certificates.ValidationResult.Valid">
            <summary>
            Gets the certificate chain validity status.
            </summary>
            <value>True if valid, false if not valid.</value>
        </member>
        <member name="P:Rebex.Security.Certificates.ValidationResult.ErrorCode">
            <summary>
            Gets the native error code returned by the validation function (only supported on .NET CF and Xamarin.iOS).
            </summary>
            <value>The error code returned by the validation function.</value>
        </member>
        <member name="T:Rebex.UnmanagedBlock">
            <summary>
            Represents a block of unmanaged memory.
            </summary>
        </member>
        <member name="M:Rebex.UnmanagedBlock.#ctor(System.Int32)">
            <summary>
            Allocates a block of unmanaged memory with the specified length.
            </summary>
            <param name="length">The length of unmanaged memory block.</param>
        </member>
        <member name="M:Rebex.UnmanagedBlock.ToIntPtr">
            <summary>
            Returns a pointer to the current unmanaged memory block.
            </summary>
            <returns>A pointer to unamanged memory block.</returns>
        </member>
        <member name="M:Rebex.UnmanagedBlock.WriteByte(System.Int32,System.Byte)">
            <summary>
            Writes an 8-bit unsigned integer to the specified offset of the memory block.
            </summary>
            <param name="ofs">Offset in the memory block.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Rebex.UnmanagedBlock.ReadByte(System.Int32)">
            <summary>
            Reads an 8-bit unsigned integer from the specified offset of the memory block.
            </summary>
            <param name="ofs">Offset in the memory block.</param>
        </member>
        <member name="M:Rebex.UnmanagedBlock.WriteInt64(System.IntPtr,System.Int32,System.Int64)">
            <summary>
            Writes a 64-bit signed integer value to unmanaged memory.
            </summary>
            <param name="ptr">The address in unmanaged memory to which to write.</param>
            <param name="ofs">An additional byte offset, added to the ptr parameter before writing.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Rebex.UnmanagedBlock.ReadInt64(System.IntPtr,System.Int32)">
            <summary>
            Reads a 64-bit signed integer value from unmanaged memory.
            </summary>
            <param name="ptr">The address in unmanaged memory from which to read.</param>
            <param name="ofs">An additional byte offset, added to the ptr parameter before reading.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Rebex.UnmanagedBlock.WriteInt64(System.Int32,System.Int64)">
            <summary>
            Writes a 64-bit signed integer to the specified offset of the memory block.
            </summary>
            <param name="ofs">Offset in the memory block.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Rebex.UnmanagedBlock.ReadInt64(System.Int32)">
            <summary>
            Reads a 64-bit signed integer from the specified offset of the memory block.
            </summary>
            <param name="ofs">Offset in the memory block.</param>
        </member>
        <member name="M:Rebex.UnmanagedBlock.WriteInt32(System.Int32,System.Int32)">
            <summary>
            Writes a 32-bit signed integer to the specified offset of the memory block.
            </summary>
            <param name="ofs">Offset in the memory block.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Rebex.UnmanagedBlock.ReadInt32(System.Int32)">
            <summary>
            Reads a 32-bit signed integer from the specified offset of the memory block.
            </summary>
            <param name="ofs">Offset in the memory block.</param>
        </member>
        <member name="M:Rebex.UnmanagedBlock.WriteInt16(System.Int32,System.Int16)">
            <summary>
            Writes a 16-bit unsigned integer to the specified offset of the memory block.
            </summary>
            <param name="ofs">Offset in the memory block.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Rebex.UnmanagedBlock.ReadInt16(System.Int32)">
            <summary>
            Reads a 16-bit unsigned integer from the specified offset of the memory block.
            </summary>
            <param name="ofs">Offset in the memory block.</param>
        </member>
        <member name="M:Rebex.UnmanagedBlock.WriteIntPtr(System.Int32,System.IntPtr)">
            <summary>
            Writes a pointer to the specified offset of the memory block.
            </summary>
            <param name="ofs">Offset in the memory block.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Rebex.UnmanagedBlock.ReadIntPtr(System.Int32)">
            <summary>
            Reads a pointer from the specified offset of the memory block.
            </summary>
            <param name="ofs">Offset in the memory block.</param>
        </member>
        <member name="M:Rebex.UnmanagedBlock.PtrToStringAnsi(System.IntPtr)">
            <summary>
            Reads a string from an unmanaged pointer.
            </summary>
            <param name="ptr">The address in unmanaged memory from which to read.</param>
            <returns>The string.</returns>
        </member>
        <member name="M:Rebex.UnmanagedBlock.PtrToStringAnsi(System.IntPtr,System.Int32)">
            <summary>
            Reads a string of the specified length from an unmanaged pointer.
            </summary>
            <param name="ptr">The address in unmanaged memory from which to read.</param>
            <param name="length">The length of the string.</param>
            <returns>The string.</returns>
        </member>
        <member name="M:Rebex.UnmanagedBlock.FromArray(System.Byte[])">
            <summary>
            Allocates a block of an unmanaged memory for the data contained in the specified byte array.
            </summary>
            <param name="buffer">A byte array.</param>
            <returns>An <see cref="T:Rebex.UnmanagedBlock"/>.</returns>
        </member>
        <member name="M:Rebex.UnmanagedBlock.FromStringUni(System.String)">
            <summary>
            Allocates a block of an unmanaged memory for the specified string (in Unicode).
            </summary>
            <param name="value">A string.</param>
            <returns>An <see cref="T:Rebex.UnmanagedBlock"/>.</returns>
        </member>
        <member name="M:Rebex.UnmanagedBlock.ToArray">
            <summary>
            Allocates a byte array for the data contained in the unmanaged memory block.
            </summary>
            <returns>A byte array.</returns>
        </member>
        <member name="M:Rebex.UnmanagedBlock.Dispose">
            <summary>
            Disposes the object and releases resources.
            </summary>
            <remarks>
            Calling this method ensures that all resources are freed.
            </remarks>
        </member>
        <member name="M:Rebex.UnmanagedBlock.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources and optionally releases the managed resources.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="M:Rebex.UnmanagedBlock.Finalize">
            <summary>
            Finalizer called by garbage collector.
            </summary>
        </member>
        <member name="P:Rebex.UnmanagedBlock.Length">
            <summary>
            Gets the block length, if available.
            </summary>
        </member>
        <member name="T:Rebex.Security.Authentication.CredentialUse">
            <summary>
            SSPI credential use.
            </summary>
            <remarks>
            Only supported on Windows platforms.
            </remarks>
        </member>
        <member name="F:Rebex.Security.Authentication.CredentialUse.Inbound">
            <summary>
            Inbound.
            </summary>
        </member>
        <member name="F:Rebex.Security.Authentication.CredentialUse.Outbound">
            <summary>
            Outbound.
            </summary>
        </member>
        <member name="T:Rebex.Security.Authentication.SspiRequirements">
            <summary>
            SSPI requirements flag.
            </summary>
            <remarks>
            Only supported on Windows platforms.
            </remarks>
        </member>
        <member name="F:Rebex.Security.Authentication.SspiRequirements.Delegation">
            <summary>The server can use the context to authenticate to other servers as the client. Must be used with MutualAuthentication flag.</summary>
        </member>
        <member name="F:Rebex.Security.Authentication.SspiRequirements.MutualAuthentication">
            <summary>Mutual authentication.</summary>
        </member>
        <member name="F:Rebex.Security.Authentication.SspiRequirements.Confidentiality">
            <summary>Confidentiality.</summary>
        </member>
        <member name="F:Rebex.Security.Authentication.SspiRequirements.Connection">
            <summary>Connection.</summary>
        </member>
        <member name="F:Rebex.Security.Authentication.SspiRequirements.Integrity">
            <summary>Integrity.</summary>
        </member>
        <member name="T:Rebex.Security.Authentication.SspiDataRepresentation">
            <summary>
            SSPI data representation.
            </summary>
            <remarks>
            Only supported on Windows platforms.
            </remarks>
        </member>
        <member name="F:Rebex.Security.Authentication.SspiDataRepresentation.Native">
            <summary>Native.</summary>
        </member>
        <member name="F:Rebex.Security.Authentication.SspiDataRepresentation.Network">
            <summary>Network.</summary>
        </member>
        <member name="T:Rebex.Security.Authentication.SspiException">
            <summary>
            Represents an SSPI error.
            </summary>
            <remarks>
            Only supported on Windows platforms.
            </remarks>
        </member>
        <member name="T:Rebex.Security.Authentication.SspiAuthentication">
            <summary>
            Wrapper class for SSPI authentication.
            </summary>
            <remarks>
            Only supported on Windows platforms.
            </remarks>
        </member>
        <member name="M:Rebex.Security.Authentication.SspiAuthentication.#ctor(System.String,Rebex.Security.Authentication.SspiDataRepresentation,System.String,Rebex.Security.Authentication.SspiRequirements,System.String,System.String,System.String)">
            <summary>
            Creates a new SSPI session.
            </summary>
            <param name="package">Authentication package.</param>
            <param name="dataRepresentation">Data representation.</param>
            <param name="targetName">Target name.</param>
            <param name="requirements">Requirements.</param>
            <param name="userName">User name.</param>
            <param name="password">Password.</param>
            <param name="userDomain">User domain</param>
            <remarks>
            Only supported on Windows platforms.
            </remarks>
        </member>
        <member name="M:Rebex.Security.Authentication.SspiAuthentication.#ctor(System.String,Rebex.Security.Authentication.CredentialUse,Rebex.Security.Authentication.SspiDataRepresentation,System.String,Rebex.Security.Authentication.SspiRequirements,System.String,System.String,System.String)">
            <summary>
            Creates a new SSPI session.
            </summary>
            <param name="package">Authentication package.</param>
            <param name="use">Credential use.</param>
            <param name="dataRepresentation">Data representation.</param>
            <param name="targetName">Target name.</param>
            <param name="requirements">Requirements.</param>
            <param name="userName">User name.</param>
            <param name="password">Password.</param>
            <param name="userDomain">User domain</param>
            <remarks>
            Only supported on Windows platforms.
            </remarks>
        </member>
        <member name="M:Rebex.Security.Authentication.SspiAuthentication.Dispose">
            <summary>
            Disposes the SSPI session.
            </summary>
        </member>
        <member name="M:Rebex.Security.Authentication.SspiAuthentication.GetNextMessage(System.Byte[],System.Boolean@)">
            <summary>
            Get next SSPI message.
            </summary>
            <param name="challenge">Challenge.</param>
            <param name="complete">Receives a value indicating whether the SSPI has finished.</param>
            <returns>Next SSPI message.</returns>
            <remarks>
            Only supported on Windows platforms.
            </remarks>
        </member>
        <member name="M:Rebex.Security.Authentication.SspiAuthentication.VerifySignature(System.Byte[],System.Byte[])">
            <summary>
            Verifies an SSPI signature.
            </summary>
            <param name="message">Message.</param>
            <param name="signature">Signature.</param>
            <returns>True if valid, false otherwise.</returns>
            <remarks>
            Only supported on Windows platforms.
            </remarks>
        </member>
        <member name="M:Rebex.Security.Authentication.SspiAuthentication.MakeSignature(System.Byte[])">
            <summary>
            Creates an SSPI signature.
            </summary>
            <param name="challenge">Challenge.</param>
            <returns>Signature.</returns>
            <remarks>
            Only supported on Windows platforms.
            </remarks>
        </member>
        <member name="M:Rebex.Security.Authentication.SspiAuthentication.Unwrap(System.Byte[],System.Int32@)">
            <summary>
            Unwraps (decrypts) the SSPI message.
            </summary>
            <param name="challenge">Challenge.</param>
            <param name="qop">QOP</param>
            <returns>Unwrapped (decrypted) message.</returns>
            <remarks>
            Only supported on Windows platforms.
            </remarks>
        </member>
        <member name="M:Rebex.Security.Authentication.SspiAuthentication.Wrap(System.Byte[],System.Int32,System.Boolean@)">
            <summary>
            Wraps (encryptes) SSPI message.
            </summary>
            <param name="response">Response.</param>
            <param name="qop">QOP.</param>
            <param name="complete">Receives a value indicating whether the SSPI has finished.</param>
            <returns>Wrapped (encrypted) message.</returns>
            <remarks>
            Only supported on Windows platforms.
            </remarks>
        </member>
        <member name="T:Rebex.TraceLogWriter">
            <summary>
            Trace-based log writer that writes log messages to all trace listeners.
            </summary>
            <remarks>
            For general informatiuon about NET trace, see for instance
            <see href="http://www.15seconds.com/issue/020910.htm"/>
            </remarks>
        </member>
        <member name="M:Rebex.TraceLogWriter.#ctor">
            <summary>
            Creates a new instance of trace log writer based on the default &quot;Info&quot; log level.
            </summary>
        </member>
        <member name="M:Rebex.TraceLogWriter.#ctor(Rebex.LogLevel)">
            <summary>
            Creates a new instance of trace log writer based on the specified log level.
            </summary>
            <param name="level">Log level.</param>
        </member>
        <member name="M:Rebex.TraceLogWriter.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rebex.TraceLogWriter.WriteMessage(System.String)">
            <summary>
            Appends the specified message text to the trace listeners log. This method is only called by <see cref="M:Rebex.LogWriterBase.Write(Rebex.LogLevel,System.Type,System.Int32,System.String,System.String)"/> method
            and is only used by text-based loggers.
            </summary>
            <param name="message">Full message info.</param>
        </member>
        <member name="P:Rebex.TraceLogWriter.IsClosed">
            <summary>
            Get a value indicating whether the log writer is closed.
            </summary>
            <value>True when log writer is closed. False if log writer is opened and ready for writing.</value>
        </member>
        <member name="T:Rebex.IO.TraversalMode">
            <summary>
            Specifies how a search pattern is treated (how to traverse a hierarchy of directories).
            </summary>
        </member>
        <member name="F:Rebex.IO.TraversalMode.Recursive">
            <summary>
            Performs SHALLOW search for files and directories; do RECURSIVE transfer of matching directories.<br/>
            Shallow search means that items are searched only in the first level of given directory.<br/>
            If the pattern matches a file, the file is processed.<br/>
            If the pattern matches a directory, all files and subdirectories are processed.
            </summary>
        </member>
        <member name="F:Rebex.IO.TraversalMode.NonRecursive">
            <summary>
            Performs SHALLOW search for files and directories; do NON-RECURSIVE transfer of matching directories.<br/>
            Shallow search means that items are searched only in the first level of given directory.<br/>
            If the pattern matches a file, the file is processed.<br/>
            If the pattern matches a directory, only the directory itself is processed (without any content = empty directory will be created).
            </summary>
        </member>
        <member name="F:Rebex.IO.TraversalMode.MatchFilesShallow">
            <summary>
            Performs SHALLOW search for files only. This is the same as <see cref="F:Rebex.IO.TraversalMode.NonRecursive"/> mode, but only files are processed.<br/>
            Shallow search means that files are searched only in the first level of given directory.
            </summary>
        </member>
        <member name="F:Rebex.IO.TraversalMode.MatchFilesDeep">
            <summary>
            Performs DEEP search for files only. This is like DOS xcopy deep file search.<br/>
            Deep search means that files are searched in the given directory and also in all its subdirectories.
            </summary>
        </member>
        <member name="T:Rebex.IO.ActionOnExistingFiles">
            <summary>
            Specifies the default action to perform when a target file already exists.
            However, the default action can still be changed using the ProblemDetected event.
            </summary>
        </member>
        <member name="F:Rebex.IO.ActionOnExistingFiles.ThrowException">
            <summary>
            Existing files are to cause the whole multi-file transfer to be canceled and an exception to be raised.
            </summary>
        </member>
        <member name="F:Rebex.IO.ActionOnExistingFiles.SkipAll">
            <summary>
            Existing files are to be always skipped.
            </summary>
        </member>
        <member name="F:Rebex.IO.ActionOnExistingFiles.OverwriteAll">
            <summary>
            Existing files are to be always overwritten.
            </summary>
        </member>
        <member name="F:Rebex.IO.ActionOnExistingFiles.OverwriteOlder">
            <summary>
            Existing files are to be overwritten if they are older than source files.
            This is strongly discouraged because modification dates are often misreported by FTP and SFTP servers, making this mode highly unreliable.
            We strongly recommend to use a different mode or develop a custom solution using the ProblemDetected event.
            </summary>
        </member>
        <member name="F:Rebex.IO.ActionOnExistingFiles.OverwriteDifferentSize">
            <summary>
            Existing files with different sizes are to be overwritten. 
            </summary>
        </member>
        <member name="F:Rebex.IO.ActionOnExistingFiles.ResumeIfPossible">
            <summary>
            Existing files are to be resumed if they are smaller than source files.
            </summary>
        </member>
        <member name="F:Rebex.IO.ActionOnExistingFiles.Rename">
            <summary>
            Existing files are to be renamed according the pattern "filename[number].extension".
            You can still change the generated name using the ProblemDetected event and the <see cref="M:Rebex.IO.ProblemDetectedEventArgs.Rename(System.String)"/> method.
            </summary>
        </member>
        <member name="F:Rebex.IO.ActionOnExistingFiles.OverwriteDifferentChecksum">
            <summary>
            Existing files with different checksum are to be overwritten.<br/>
            Works on FTP and ZIP only. ZIP uses CRC-32 always; FTP uses checksums provided by the server (some FTP servers support no checksums).
            </summary>
        </member>
        <member name="T:Rebex.IO.LinkProcessingMode">
            <summary>
            Specifies behavior on links and reparse points in multi-file operations.
            </summary>
        </member>
        <member name="F:Rebex.IO.LinkProcessingMode.FollowLinks">
            <summary>
            Detected links are to be resolved and processed - however, this can still be changed by ProblemDetected handler.
            </summary>
        </member>
        <member name="F:Rebex.IO.LinkProcessingMode.SkipLinks">
            <summary>
            Detected links are to be skipped - however, this can still be changed by ProblemDetected handler.
            </summary>
        </member>
        <member name="F:Rebex.IO.LinkProcessingMode.ThrowExceptionOnLinks">
            <summary>
            Detected links cause an exception to be thrown - however, this can still be changed by ProblemDetected handler.
            </summary>
        </member>
        <member name="T:Rebex.IO.TransferMethod">
            <summary>
            Specifies the method of the transfer.
            </summary>
        </member>
        <member name="F:Rebex.IO.TransferMethod.Copy">
            <summary>
            Items are copied.
            </summary>
        </member>
        <member name="F:Rebex.IO.TransferMethod.Move">
            <summary>
            Items are moved to the target destination (items are deleted in the source location).
            </summary>
        </member>
        <member name="T:Rebex.IO.MoveMode">
            <summary>
            Specifies the behaviour of the <see cref="F:Rebex.IO.TransferMethod.Move"/>.
            </summary>
        </member>
        <member name="F:Rebex.IO.MoveMode.All">
            <summary>
            All items (files and directories) are moved to the target destination deleting them in the source location.
            </summary>
        </member>
        <member name="F:Rebex.IO.MoveMode.FilesOnly">
            <summary>
            Only files are moved to the target destination. Directories remain (not deleted) in the source location.
            </summary>
        </member>
        <member name="T:Rebex.IO.ItemDateTimes">
            <summary>
            Specifies which date/time to restore.
            </summary>
        </member>
        <member name="F:Rebex.IO.ItemDateTimes.None">
            <summary>
            Restore no date/time.
            </summary>
        </member>
        <member name="F:Rebex.IO.ItemDateTimes.CreationTime">
            <summary>
            Restore CreationTime.
            </summary>
        </member>
        <member name="F:Rebex.IO.ItemDateTimes.LastWriteTime">
            <summary>
            Restore LastWriteTime.
            </summary>
        </member>
        <member name="F:Rebex.IO.ItemDateTimes.LastAccessTime">
            <summary>
            Restore LastAccessTime.
            </summary>
        </member>
        <member name="F:Rebex.IO.ItemDateTimes.All">
            <summary>
            Restore all date and times.
            </summary>
        </member>
    </members>
</doc>
