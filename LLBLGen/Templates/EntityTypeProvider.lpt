<[ System.IO ]>
<[ System.Text ]>
<[ SD.LLBLGen.Pro.LptParser ]>
<[ SD.LLBLGen.Pro.ApplicationCore ]>
<[ SD.LLBLGen.Pro.ApplicationCore.Entities ]>
using System;
using ShipWorks.Data.Model.HelperClasses;
using ShipWorks.Data.Model.EntityClasses;
using ShipWorks.Data.Model.FactoryClasses;
using ShipWorks.Data.Model.RelationClasses;
using ShipWorks.Data.Model;
using SD.LLBLGen.Pro.ORMSupportClasses;

namespace <%=Project.RootNameSpace%>.Custom
{	
	/// <summary>
	/// Utility functions for creating entities and retrieving EntityType information.
	/// </summary>
	public static class EntityTypeProvider
	{ 
        /// <summary>
        /// Gets the EntityType based on the the given entity type name.
        /// </summary>
		public static EntityType GetEntityType(string entityTypeName)
		{
			switch (entityTypeName)
			{
				<% foreach (EntityDefinition entity in Project.Entities) 	
				{%>case "<%=entity.Name%>Entity": return EntityType.<%=entity.Name%>Entity;
				<%}
			%>}
			
			throw new ArgumentException(string.Format("Entity type name '{0}' is not valid.", entityTypeName));
		}

        /// <summary>
        /// Gets the entity type name based on the the given EntityType.
        /// </summary>
		public static string GetEntityTypeName(EntityType entityType)
		{
			IEntity2 entity = GeneralEntityFactory.Create(entityType);
			return entity.LLBLGenProEntityName;
		}
		
		/// <summary>
        /// Gets the System.Type based on the the given entity type name.
        /// </summary>
		public static Type GetSystemType(string entityTypeName)
		{
			return GetSystemType(GetEntityType(entityTypeName));
		}
		
        /// <summary>
        /// Gets the System.Type based on the the given EntityType.
        /// </summary>
		public static Type GetSystemType(EntityType entityType)
		{
			IEntity2 entity = GeneralEntityFactory.Create(entityType);
			return entity.GetType();
		}
		
        /// <summary>
        /// Creates an entity instance based on the given name.
        /// </summary>
		public static IEntity2 CreateEntity(string entityTypeName)
		{
			return GeneralEntityFactory.Create(GetEntityType(entityTypeName));
		}
		
        /// <summary>
        /// Get the IRelationFactory that provides inheritance relationship information for the specified EntityType.
        /// </summary>
		public static IRelationFactory GetInheritanceRelationFactory(EntityType entityType)
		{
			switch (entityType)
			{
				<% foreach (EntityDefinition entity in Project.Entities) 	
				{
					if (entity.HierarchyType == InheritanceHierarchyType.TargetPerEntity)
					{
				%>case EntityType.<%=entity.Name%>Entity: return new <%=entity.Name%>Relations();
				<%}}
			%>}
			
			throw new ArgumentException(string.Format("Entity type '{0}' is not valid or is not a part of a TargetPerEntity hierarchy.", entityType));
		}
	}
}

<~
	public Project Project
	{
		get
		{
			return _executingGenerator.ProjectDefinition;
		}
	}
    
~> 