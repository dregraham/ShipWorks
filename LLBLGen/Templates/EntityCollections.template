using ShipWorks.Data.Model.HelperClasses;
using ShipWorks.Data.Model.EntityClasses;
using ShipWorks.Data.Model.FactoryClasses;
using SD.LLBLGen.Pro.ORMSupportClasses;

namespace <[RootNamespace]>.Custom
{	<[Foreach Entity]>
	/// <summary>
	/// Strongly typed collection of <[CurrentEntityName]>Entity
	/// </summary>
	public class <[CurrentEntityName]>Collection : EntityCollection<<[CurrentEntityName]>Entity>
	{
        /// <summary>
        /// Gets the count of all <[CurrentEntityName]>Entity rows
        /// </summary>
        public static int GetCount(DataAccessAdapterBase adapter)
        {
            return GetCount(adapter, null);
        }

        /// <summary>
        /// Gets the count of all <[CurrentEntityName]>Entity rows filtered by the given predicate
        /// </summary>
        public static int GetCount(DataAccessAdapterBase adapter, IPredicate filter)
        {
            RelationPredicateBucket bucket = null;
            
            if (filter != null)
            {
                bucket = new RelationPredicateBucket(filter);
            }

            return adapter.GetDbCount(new <[CurrentEntityName]>EntityFactory().CreateFields(), bucket);
        }
		
        /// <summary>
        /// Fetch a new collection object that matches the specified filter.
        /// </summary>
        public static <[CurrentEntityName]>Collection Fetch(DataAccessAdapterBase adapter, IPredicate filter)
        {
			return Fetch(adapter, filter, null);
        }
        
		/// <summary>
        /// Fetch a new collection object that matches the specified filter and uses the given prefetch.
        /// </summary>
        public static <[CurrentEntityName]>Collection Fetch(DataAccessAdapterBase adapter, IPredicate filter, IPrefetchPath2 prefetchPath)
        {
            <[CurrentEntityName]>Collection collection = new <[CurrentEntityName]>Collection();

            RelationPredicateBucket bucket = null;

            if (filter != null)
            {
                bucket = new RelationPredicateBucket(filter);
            }

            adapter.FetchEntityCollection(collection, bucket, prefetchPath);

            return collection;
        }
	}
	
	<[NextForeach]>
}