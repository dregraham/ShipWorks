<[ System.IO ]>
<[ System.Text ]>
<[ SD.LLBLGen.Pro.LptParser ]>
<[ SD.LLBLGen.Pro.ApplicationCore ]>
<[ SD.LLBLGen.Pro.ApplicationCore.Entities ]>
using ShipWorks.Data.Model.HelperClasses;
using ShipWorks.Data.Model.EntityClasses;
using ShipWorks.Data.Model.FactoryClasses;
using SD.LLBLGen.Pro.ORMSupportClasses;

namespace <%=Project.RootNameSpace%>.Custom
{	<% foreach (EntityDefinition entity in Project.Entities) 	{%>
	/// <summary>
	/// Strongly typed collection of <%=entity.Name%>Entity
	/// </summary>
	public class <%=entity.Name%>Collection : EntityCollection<<%=entity.Name%>Entity>
	{
        /// <summary>
        /// Gets the count of all <%=entity.Name%>Entity rows
        /// </summary>
        public static int GetCount(DataAccessAdapterBase adapter)
        {
            return GetCount(adapter, null);
        }

        /// <summary>
        /// Gets the count of all <%=entity.Name%>Entity rows filtered by the given predicate
        /// </summary>
        public static int GetCount(DataAccessAdapterBase adapter, IPredicate filter)
        {
            RelationPredicateBucket bucket = null;
            
            if (filter != null)
            {
                bucket = new RelationPredicateBucket(filter);
            }

            return adapter.GetDbCount(new <%=entity.Name%>EntityFactory().CreateFields(), bucket);
        }
		
        /// <summary>
        /// Fetch a new collection object that matches the specified filter.
        /// </summary>
        public static <%=entity.Name%>Collection Fetch(DataAccessAdapterBase adapter, IPredicate filter)
        {
			return Fetch(adapter, filter, null);
        }
        
		/// <summary>
        /// Fetch a new collection object that matches the specified filter and uses the given prefetch.
        /// </summary>
        public static <%=entity.Name%>Collection Fetch(DataAccessAdapterBase adapter, IPredicate filter, IPrefetchPath2 prefetchPath)
        {
            <%=entity.Name%>Collection collection = new <%=entity.Name%>Collection();

            RelationPredicateBucket bucket = null;

            if (filter != null)
            {
                bucket = new RelationPredicateBucket(filter);
            }

            adapter.FetchEntityCollection(collection, bucket, prefetchPath);

            return collection;
        }
	}
	
	<%}%>
}

<~
	public Project Project
	{
		get
		{
			return _executingGenerator.ProjectDefinition;
		}
	}
    
~>