<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>FEATURE_NAME</name>
          <description>A quick name to identify the list of jobs for this particular feature.</description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <customWorkspace>c:\jenkins-builds\delete-branch-workflow</customWorkspace>
  <builders>
    <hudson.plugins.powershell.PowerShell plugin="powershell@1.2">
      <command>echo &quot;Deleting jobs for $env:FEATURE_NAME&quot;

$listJobsUrl = &quot;http://intdev1201:8080/view/&quot; + $env:FEATURE_NAME + &quot;/api/xml?xpath=//job/name&amp;wrapper=jobs&quot;
echo $listJobsUrl

# Make a request to obtain all of the jobs for the feature&apos;s view
[net.httpWebRequest] $request = [net.webRequest]::create($listJobsUrl)
[net.httpWebResponse] $response = $request.getResponse()

# Read the response into an XML variable
$responseStream = $response.GetResponseStream()
$streamReader = new-object IO.StreamReader($responseStream)
[xml] $jobXml = $streamReader.ReadToEnd()

# Read the job names from the XML ane make a request to Jenkins delete each job
$jobNames = Select-Xml &quot;//jobs/name&quot; $jobXml
$jobNames | ForEach-Object {
    echo &quot;Deleting job $_&quot;

    $deleteJobUrl = &quot;http://intdev1201:8080/view/&quot; + $env:FEATURE_NAME + &quot;/job/$_/doDelete&quot;
    echo $deleteJobUrl

    [net.httpWebRequest] $jobRequest = [net.webRequest]::create($deleteJobUrl)
    $jobRequest.Method = &quot;POST&quot;

    $jobRequest.getResponse()
}

# URL to delete the feature&apos;s view in Jenkins
$deleteViewUrl = &quot;http://intdev1201:8080/view/&quot; + $env:FEATURE_NAME + &quot;/doDelete&quot;

# Make the request to delete the feature view
$request = [net.webRequest]::create($deleteViewUrl)
$request.Method = &quot;POST&quot;
$request.getResponse()

# Delete the source code directory from disk for the common prefixes (feature, defect, spike)

# Try deleting for the feature- prefix
$jobSourceDirectory = &quot;\\intdev1201\C$\jenkins-builds\feature-&quot; + $env:FEATURE_NAME
echo &quot;Trying to delete from $jobSourceDirectory&quot;
if (Test-Path -Path $jobSourceDirectory)
{
    echo &quot;Deleting source directory for $env:FEATURE_NAME...&quot;
    rm -Force -Recurse $jobSourceDirectory
    echo &quot;Source directory for $env:FEATURE_NAME has been deleted&quot;
}

# Try deleting for the defect- prefix
$jobSourceDirectory = &quot;\\intdev1201\C$\jenkins-builds\defect-&quot; + $env:FEATURE_NAME
echo &quot;Trying to delete from $jobSourceDirectory&quot;
if (Test-Path -Path $jobSourceDirectory)
{
    echo &quot;Deleting source directory for $env:FEATURE_NAME...&quot;
    rm -Force -Recurse $jobSourceDirectory
    echo &quot;Source directory for $env:FEATURE_NAME has been deleted&quot;
}

# Try deleting for the spike- prefix
$jobSourceDirectory = &quot;\\intdev1201\C$\jenkins-builds\spike-&quot; + $env:FEATURE_NAME
echo &quot;Trying to delete from $jobSourceDirectory&quot;
if (Test-Path -Path $jobSourceDirectory)
{
    echo &quot;Deleting source directory for $env:FEATURE_NAME...&quot;
    rm -Force -Recurse $jobSourceDirectory
    echo &quot;Source directory for $env:FEATURE_NAME has been deleted&quot;
}


# Try deleting without any prefix
$jobSourceDirectory = &quot;\\intdev1201\C$\jenkins-builds\&quot; + $env:FEATURE_NAME
echo &quot;Trying to delete from $jobSourceDirectory&quot;
if (Test-Path -Path $jobSourceDirectory)
{
    echo &quot;Deleting source directory for $env:FEATURE_NAME...&quot;
    rm -Force -Recurse $jobSourceDirectory
    echo &quot;Source directory for $env:FEATURE_NAME has been deleted&quot;
}</command>
    </hudson.plugins.powershell.PowerShell>
    <hudson.plugins.powershell.PowerShell plugin="powershell@1.2">
      <command># Delete any database that the integration tests might have created for this branch

$databasePrefix = $env:FEATURE_NAME.Split(&apos;-&apos;) | Select-Object -Last 1

[Reflection.Assembly]::LoadWithPartialName(&quot;Microsoft.SqlServer.Smo&quot;)
$databaseServer = New-Object &apos;Microsoft.SqlServer.Management.SMO.Server&apos; &quot;(localdb)\v11.0&quot;
$databasesToDrop = $databaseServer.Databases | Where-Object {$_.name -like &quot;SW_&quot; + $databasePrefix + &quot;*&quot; }
foreach ($database in $databasesToDrop) { $database.Drop() }
</command>
    </hudson.plugins.powershell.PowerShell>
  </builders>
  <publishers/>
  <buildWrappers/>
</project>