<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="loadingImage.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        R0lGODlhHwAfANUgAMzqzJLTkvH58d3x3fP689Ds0Nfu1+X05dTt1Nbu1uv269vw2+j16On26fr8+s/r
        z+337dPt0/L58uLz4rfit6Pao+Hy4aLZoqfbp8jpyKrdqprWmvz9/LPgs/v9+5jVmP///wAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH/C05FVFNDQVBFMi4wAwEAAAAh/wtYTVAgRGF0YVhNUDw/
        eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1l
        dGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuNS1jMDIx
        IDc5LjE1NDkxMSwgMjAxMy8xMC8yOS0xMTo0NzoxNiAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRm
        PSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlw
        dGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9t
        bS8iIHhtbG5zOnN0UmVmPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VS
        ZWYjIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtcE1NOk9yaWdpbmFs
        RG9jdW1lbnRJRD0ieG1wLmRpZDo1YWZlMjhhZS1jZWU5LTQ4NjQtYmEwZC1iZTQ0Yzk0MTk1YWQiIHht
        cE1NOkRvY3VtZW50SUQ9InhtcC5kaWQ6NUZDQUY5NzQ5NjRFMTFFMzlEM0NENTk1MjE5MUEzOEYiIHht
        cE1NOkluc3RhbmNlSUQ9InhtcC5paWQ6NUZDQUY5NzM5NjRFMTFFMzlEM0NENTk1MjE5MUEzOEYiIHht
        cDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENDIChNYWNpbnRvc2gpIj4gPHhtcE1NOkRlcml2
        ZWRGcm9tIHN0UmVmOmluc3RhbmNlSUQ9InhtcC5paWQ6NzNiZTM4MmQtNGJmMy00NGFhLWI3ODktZTA3
        MTExMDk1Y2ZkIiBzdFJlZjpkb2N1bWVudElEPSJ4bXAuZGlkOjVhZmUyOGFlLWNlZTktNDg2NC1iYTBk
        LWJlNDRjOTQxOTVhZCIvPiA8L3JkZjpEZXNjcmlwdGlvbj4gPC9yZGY6UkRGPiA8L3g6eG1wbWV0YT4g
        PD94cGFja2V0IGVuZD0iciI/PgH//v38+/r5+Pf29fTz8vHw7+7t7Ovq6ejn5uXk4+Lh4N/e3dzb2tnY
        19bV1NPS0dDPzs3My8rJyMfGxcTDwsHAv769vLu6ubi3trW0s7KxsK+urayrqqmop6alpKOioaCfnp2c
        m5qZmJeWlZSTkpGQj46NjIuKiYiHhoWEg4KBgH9+fXx7enl4d3Z1dHNycXBvbm1sa2ppaGdmZWRjYmFg
        X15dXFtaWVhXVlVUU1JRUE9OTUxLSklIR0ZFRENCQUA/Pj08Ozo5ODc2NTQzMjEwLy4tLCsqKSgnJiUk
        IyIhIB8eHRwbGhkYFxYVFBMSERAPDg0MCwoJCAcGBQQDAgEAACH5BAkKACAALAAAAAAfAB8AAAb/QJBw
        SCQwBokCaIOhAA7EqHQIWQCuV1Bgu+0YPFOpYIAta7lcyiQ8VCDKZjS6gmCDHvC4nPsJKx4geVhnewF3
        ClECbwCBWAYHAg4gBBYZGmiNCAJEZIMAEQ1hHAUXhmUDVHkgm3ZreRBCVmUREnZDEhFwC5N5obZDDXlG
        cAa/UQZwR3BQxkMHcEhwrM2rcElwktQgDnBK2s0F2N/cZQUJ0t8C1p1YzNTPpwzE38hlDAS91MFwBCCy
        WLSM4dIlBIKqaWE2vRrCjtEnX1Ma5Gp0BdUQRVnKPIq0TcCBehkBaIryh6IqQVkeIJqCB6VJOIDYuHGJ
        EsFKNmMEvayI0E4VDzgvF8D6ZgSJEnMD7tkJAgAh+QQJCgAgACwAAAAAHwAfAAAG/0CQcEgkMAaJAqiQ
        GDAIxKh0CFkArlcQ9rqATKeCwRarHQMGgu9QgTBn3QCEQg16wAFl9+Or2N/zZiAfCFECbXhbBgcCDiAO
        AgcGWyABARUTRGJkABENag0ReJWVFB5CEIFpdGmjowZCVlsREnRDExetAR0gBGaetUMFuQEHDGOvwEMc
        GrlnYwfJRBm5FAljqtEgFrkYBWON2by5G+HZ3lvg2Q5jTNflAmNNz+UHY07H5ZJbT77ZDWZQYmGZlUxC
        qC0LTqWqlcaMFyGa3nT6FArQACKG3mBRxMgRJH0aEWAT0gfQGJOTHsyZYgcOSix71LBxCUcOw4iT3KCJ
        VuXkmAwu5XgdSbKkyRM6QQAAIfkECQoAIAAsAAAAAB8AHwAABv9AkHBIJDAGiQKokBgwCMSodAhZAK5X
        EPa6gEyngsEWqx0DBoLvUIEwZ90AhEINesABZffjq9jf82Z1c0QCbXhbBgcCDiAOAgcGW2UIaUNiZAAR
        DWoNEYdYA1SBlWppZl4gVlsREnRDEp5bCyAEZpuuQw1mRmMGuFGRW0djB79EB2NIY6TGAmNJY4zGQg5j
        StPTBdHYtAHe3hsJy9wW394Yl1jF2BnmARQMvdgcGu4AtWO3vwXuAcWqWFj9mnDBXQchEEa5StPPl5B0
        hzRx8gTCHAUPQwq9wZJoUaNHwbJ4qzAhSh9AY1BK+oDgix04KrHsUcMGJhw5CyFiMoPGWJUOlGO6cKN1
        JMmSJk/oBAEAIfkECQoAIAAsAAAAAB8AHwAABv9AkHBIJDAGiQKokBgwCMSodAhZAK5XEPa6gEyngsEW
        qx0DBoLvUIEwZ90AhEINesABZffjq9jf82Z1c0QCbXhbBgcCDiAOAgcGW2UIaUNiZAARDWoNEYdYA1SB
        lWppZl4gVlsREnRDEp5bCyAEZpuuQw1mRmMGuFGRW0djB79EB2NIY6TGAmNJY4zGQg5jStPTBdHYjdYJ
        y9zOW03E3MhbTr3cwVhPttO6Y1CqWKy/sGOzIBCjrhOAV1CBuPRG0xcOBS4EABRqSKE3WBItomUhg4YA
        GBdeoRSlD0BJGUNiFPTFDhwQIkN+oMPmZEqMFRC4CuMGZUoK/35VGWMzYwcPAx64GUGiZAMGCgCKqQkC
        ACH5BAkKACAALAAAAAAfAB8AAAb/QJBwSCQwBokCqJAYMAjEqHQIWQCuVxD2uoBMp4LBFqsdAwaC71CB
        MGfdAIRCDXrAAWX346vY3/NmdXNEAm14WwYHAg4gDgIHBltlCGlDYmQAEQ1qDRGHWANUgZVqaWZeIFZb
        ERJ0QxKeWwsgBGabrkMNZkZjBrhRkVtHYwe/RAdjSGOkxgJjSWOMxkIOY0rT0wXR2I3WCcvczltNxNzI
        W0693MFYT7bTumNQqlisv7BjsyAQgROupmNQgbiUJcCFAhy+dPp0JdSQQgUDSNSQwQIUR5AkXaEUpQ8I
        iSBDAhoj6MuHkChHbtmjBkEFlCBVbhykZgIFmAFkovnlwUCHD5T5BE5DRgHDhiVNntAJAgAh+QQJCgAg
        ACwAAAAAHwAfAAAG/0CQcEgkMAaJAqiQGDAIxKh0CFkArlcQ9rqATKeCwRarHQMGgu9QgTBn3QCEQg16
        wAFl9+Or2N/zZnVzRAJteFsGBwIOIA4CBwZbZQhpQ2JkABENag0Rh1gDVIGVamlmXiBWWxESdEMSnlsL
        IARmm65DDWZGYwa4UZFbR2MHv0QHY0hjpMYCY0ljjMZCDmNK09MbAdvbUNjVWwUY3NsW2CDOWwkU5AEZ
        58hbYu0aHNjBWAwH7QHXv7pjoHRod2HCL1hjZoEwwA+dK1NjUHlgx02LJk6eAIUaMqHCNkCJFjV6hO8T
        pSgIPgAas1LSg0FS7MBpiWWPGjYz4ch5eImlGxE0xqr4lIUKmxEkSpg48fYlCAAh+QQJCgAgACwAAAAA
        HwAfAAAG/0CQcEgkMAaJAqiQGDAIxKh0CFkArlcQ9rqATKeCwRarHQMGgu9QgTBn3QCEQg16wAFl9+OL
        +OTNf2N1c0QTFQEBfwYHAg4gDgIHBltlCGlCHhSIiFoRDWoNEXhbA0MGm5sgl2ppZl4gHagBFxN0QxKi
        WwsgB7IBSrZDDWYEALIaHMFEk1sMmqgZykQHYwMYshbSQwJjCRuyUNqPY8DiygVjjuIO5Aljq9LcW01j
        B+bUpAxjBubMWE9mPkkbNgaKlS0RJCjDNWYXCAiA4IEJBOAVCDFkAHgCJepPqW1tRmFZ1OhRJH8iLUVR
        sOcORTIPCEmxA+fllT1q2NSEI8dWGBM3L9FIqyKooUVtRpAoYeIk3JcgACH5BAkKACAALAAAAAAfAB8A
        AAb/QJBwSDwAKJgNqJAYMAjEqFToMXQCWCwIwOUuINPphJItb7vdgSA8RFTKZjQaoWCDPvC4vPsIK/p5
        WWd7ACAPdUQCCFwgZRoZFlAOAgcGaGcIa0MDlwEXBRxhDRGFaANDEHsgE3Yga3tgIAtyERKtQhKkaAsg
        BHsNt0MNewQMcgbBRJZoDJxoB8lDRqYJcprRAnIJBXIO0UIOcgXf0dxo3t/haEzW5NloTXLQ39NpxmjI
        38tdT7/Rw3KgzEJTK1guObxApJLjqtUrObFAOGMEIAIwUaQGATg1RBHFLgYOCPA2qdIlLpmi/NHIkBCj
        Q2EeuCzlsg8bBYsIsexCx+HEFZN71CSDMLALyy/kejXbtqTJEztBAAA7
</value>
  </data>
</root>