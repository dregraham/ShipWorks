using System;
using System.Xml;
using ShipWorks.Data.Model.EntityClasses;
using ShipWorks.Data.Model.EntityInterfaces;
using ShipWorks.Stores.Platforms.ProStores.OnlineUpdating;

namespace ShipWorks.Stores.Platforms.ProStores
{
    /// <summary>
    /// WebClient for connecting to ProStores
    /// </summary>
    public interface IProStoresWebClient
    {
        /// <summary>
        /// If not already using tokens, or not already known, checks to see if it's possible to use tokens to login to the store.
        /// </summary>
        void CheckTokenLoginMethodAvailability(ProStoresStoreEntity store);

        /// <summary>
        /// Get an auth ticket and use it to create the correct API Logon URL
        /// </summary>
        string CreateApiLogonUrl(IProStoresStoreEntity store, out string ticket);

        /// <summary>
        /// Get the next page of orders with LastModified dates greater than the specified date
        /// </summary>
        XmlDocument GetNextOrderPage(IProStoresStoreEntity store, DateTime? lastModified, bool proVersion);

        /// <summary>
        /// Get the number of online orders for the store after the given date
        /// </summary>
        int GetOrderCount(IProStoresStoreEntity store, DateTime? lastModified);

        /// <summary>
        /// Get the store's API URL info from the given entry point
        /// </summary>
        XmlDocument GetStoreApiInfo(string apiEntryPoint);

        /// <summary>
        /// Gets the token that the user generated by authorizing at the ApiLogonUrl for the given ticket
        /// </summary>
        XmlDocument GetTokenFromTicket(IProStoresStoreEntity store, string ticket);

        /// <summary>
        /// Test the connection to the XTE system for the given store
        /// </summary>
        void TestXteConnection(IProStoresStoreEntity store);

        /// <summary>
        /// Upload the shipment details of the given shipment for the specified ProStores store
        /// </summary>
        void UploadShipmentDetails(IProStoresStoreEntity store, ShipmentEntity shipment, OrderUploadDetails orderDetails);
    }
}