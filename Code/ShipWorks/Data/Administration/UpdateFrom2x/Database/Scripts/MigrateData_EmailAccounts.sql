
-- ShipWorks V2 to V3 Database Migration Script, generated by CodeSmith
-- For table v2m_EmailAccounts

-- operational variables
DECLARE 
    @workCounter int,
    @newEmailAccountKey bigint

-- source table variables
DECLARE
    -- @MasterDatabase will be generated at runtime
    -- @IsArchive will be generated at runtime    
    @sAccountID int, 
    @sStoreID int, 
    @sEmailAddress nvarchar(50), 
    @sFromName nvarchar(50), 
    @sPopServer nvarchar(250), 
    @sPopPort int, 
    @sSmtpServer nvarchar(250), 
    @sSmtpPort int, 
    @sAuthenticateType int, 
    @sUsername nvarchar(50), 
    @sPassword nvarchar(50), 
    @sRememberPassword bit,
	@sSmtpSecurity int

-- target table variables
DECLARE
    @tEmailAccountID bigint, 
    @tRowVersion timestamp, 
    @tAccountName nvarchar(50), 
    @tDisplayName nvarchar(50), 
    @tEmailAddress nvarchar(50), 
    @tIncomingServer nvarchar(100), 
    @tIncomingPort int, 
    @tIncomingSecurityType int, 
    @tIncomingUsername nvarchar(50), 
    @tIncomingPassword nvarchar(50), 
    @tOutgoingServer nvarchar(100), 
    @tOutgoingPort int, 
    @tOutgoingSecurityType int, 
    @tOutgoingCredentialSource int, 
    @tOutgoingUsername nvarchar(50), 
    @tOutgoingPassword nvarchar(50), 
    @tAutoSend bit, 
    @tAutoSendMinutes int, 
    @tAutoSendLastTime datetime, 
    @tLimitMessagesPerConnection bit, 
    @tLimitMessagesPerConnectionQuantity int, 
    @tLimitMessagesPerHour bit, 
    @tLimitMessagesPerHourQuantity int, 
    @tLimitMessageInterval bit, 
    @tLimitMessageIntervalSeconds int, 
    @tInternalOwnerID bigint 

-- Track Progress
SET @workCounter = 0

-- the cursor for cycling through the source table
DECLARE workCursor CURSOR FORWARD_ONLY FOR
SELECT TOP 1000
        [AccountID],
        [StoreID],
        [EmailAddress],
        [FromName],
        [PopServer],
        [PopPort],
        [SmtpServer],
        [SmtpPort],
        [AuthenticateType],
        [Username],
        [Password],
        [RememberPassword],
		[SmtpSecurity]
    FROM v2m_EmailAccounts

-- open the source table cursor
OPEN workCursor

-- populate source table variables from the source cursor
FETCH NEXT FROM workCursor
INTO
        @sAccountID,
        @sStoreID,
        @sEmailAddress,
        @sFromName,
        @sPopServer,
        @sPopPort,
        @sSmtpServer,
        @sSmtpPort,
        @sAuthenticateType,
        @sUsername,
        @sPassword,
        @sRememberPassword,
		@sSmtpSecurity
WHILE @@FETCH_STATUS = 0
BEGIN
    SET @workCounter = @workCounter + 1
    
    SET @tAccountName = @sEmailAddress
    SET @tDisplayName = @sFromName
    SET @tEmailAddress = @sEmailAddress
    SET @tIncomingServer = @sPopServer
    SET @tIncomingPort = @sPopPort
    SET @tIncomingSecurityType = CASE
										WHEN @sPopPort = 110 THEN 0 --unsecure
										WHEN @sPopPort = 993 THEN 2 -- secure
										ELSE 0
								 END
    SET @tIncomingUsername = @sUsername
    SET @tIncomingPassword = @sPassword
    SET @tOutgoingServer = @sSmtpServer
    SET @tOutgoingPort = @sSmtpPort
    SET @tOutgoingSecurityType =	CASE 
										WHEN @sSmtpsecurity = 0 THEN 0  -- None -> Unsecured
										WHEN @sSmtpSecurity = 1 THEN 2	-- Explcit/TLS -> Explicit/Secure
										WHEN @sSmtpSecurity = 2 THEN 1	-- Implicit/SSL -> Implicit
									END 
    SET @tOutgoingCredentialSource =	CASE
											WHEN @sAuthenticateType = 0 THEN 0 -- None -> OutgoingCredentialSource.None
											WHEN @sAuthenticateType = 1 THEN 2 -- smtp -> OutgoingCredentialSource.Specify
											WHEN @sAuthenticateType = 2 THEN 3 -- popbeforesmtp -> OutgoingCredentialSource.PopBeforeSmtp
											ELSE 0
										END
    SET @tOutgoingUsername = @sUserName
    SET @tOutgoingPassword = @sPassword
    SET @tAutoSend = 1
    SET @tAutoSendMinutes = 15
    SET @tAutoSendLastTime = GETUTCDATE()
    SET @tLimitMessagesPerConnection = 1
    SET @tLimitMessagesPerConnectionQuantity = 50
    SET @tLimitMessagesPerHour = 1
    SET @tLimitMessagesPerHourQuantity = 100
    SET @tLimitMessageInterval = 0
    SET @tLimitMessageIntervalSeconds = 5
    SET @tInternalOwnerID = null

    
    INSERT INTO dbo.EmailAccount  (
        [AccountName],
        [DisplayName],
        [EmailAddress],
        [IncomingServer],
        [IncomingPort],
        [IncomingSecurityType],
        [IncomingUsername],
        [IncomingPassword],
        [OutgoingServer],
        [OutgoingPort],
        [OutgoingSecurityType],
        [OutgoingCredentialSource],
        [OutgoingUsername],
        [OutgoingPassword],
        [AutoSend],
        [AutoSendMinutes],
        [AutoSendLastTime],
        [LimitMessagesPerConnection],
        [LimitMessagesPerConnectionQuantity],
        [LimitMessagesPerHour],
        [LimitMessagesPerHourQuantity],
        [LimitMessageInterval],
        [LimitMessageIntervalSeconds],
        [InternalOwnerID]
    )
    VALUES
    (      
        @tAccountName,
        @tDisplayName,
        @tEmailAddress,
        @tIncomingServer,
        @tIncomingPort,
        @tIncomingSecurityType,
        @tIncomingUsername,
        @tIncomingPassword,
        @tOutgoingServer,
        @tOutgoingPort,
        @tOutgoingSecurityType,
        @tOutgoingCredentialSource,
        @tOutgoingUsername,
        @tOutgoingPassword,
        @tAutoSend,
        @tAutoSendMinutes,
        @tAutoSendLastTime,
        @tLimitMessagesPerConnection,
        @tLimitMessagesPerConnectionQuantity,
        @tLimitMessagesPerHour,
        @tLimitMessagesPerHourQuantity,
        @tLimitMessageInterval,
        @tLimitMessageIntervalSeconds,
        @tInternalOwnerID
    )             
    
    -- get the new key
    SET @newEmailAccountKey = @@IDENTITY    
     
    -- record the key translation
	EXEC dbo.v2m_RecordKey @sAccountID, 16 /*email account*/, @newEmailAccountKey
	
    -- update Store's loose reference to the email account
    UPDATE dbo.Store SET DefaultEmailAccountID = @newEmailAccountKey WHERE DefaultEmailAccountID = @sAccountID
    
    -- delete the old email account
    DELETE FROM dbo.v2m_EmailAccounts WHERE AccountID = @sAccountID    
    
-- fetch next row from source table
FETCH NEXT FROM workCursor
INTO
        @sAccountID,
        @sStoreID,
        @sEmailAddress,
        @sFromName,
        @sPopServer,
        @sPopPort,
        @sSmtpServer,
        @sSmtpPort,
        @sAuthenticateType,
        @sUsername,
        @sPassword,
        @sRememberPassword,
		@sSmtpSecurity
END
CLOSE workCursor
DEALLOCATE workCursor

-- data migration "protocol" demands we return the number of rows/work completed
SELECT @workCounter as WorkCompleted
