<%-- 
Name: Data Migration Execution
Author: Eric Johnson
Description: Creates the skeleton script for selecting from one table into a cursor, looping over it, and inserting into another table.
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="Text" Src="" Inherits="" Debug="False" CompilerVersion="v3.5" Description="Template description here." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Register Name="Common" Template="Common.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="TableFieldGenerator" Template="TableFieldGenerator.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Context" Description="Select a table." %>
<%@ Property Name="SourceVariablePrefix" Type="System.String" Default="s" Optional="False" Category="" Description="" OnChanged="" Editor="" EditorBase="" Serializer="" %>
<%@ Property Name="TargetTable" Type="SchemaExplorer.TableSchema" Optional="True" Category="Database" Description="Select the table to be inserted into." OnChanged="" Editor="" EditorBase="" Serializer="" %>
<%@ Property Name="TargetVariablePrefix" Type="System.String" Default="t" Optional="False" Category="" Description="" OnChanged="" Editor="" EditorBase="" Serializer="" %>
<%@ Property Name="BatchSize" Type="System.Int32" Default="500" Optional="False" Category="" Description="" OnChanged="" Editor="" EditorBase="" Serializer="" %>

-- ShipWorks V2 to V3 Database Migration Script, generated by CodeSmith
-- For table <%= SourceTable.Name %>

-- operational variables
DECLARE 
    @workCounter int

-- source table variables
DECLARE
    -- @MasterDatabase will be generated at runtime
    -- @IsArchive will be generated at runtime    
<%  // output the Source Table's variables
    TableFieldGenerator vars = this.Create<TableFieldGenerator>();
    vars.SourceTable = SourceTable;    
    vars.VariablePrefix = SourceVariablePrefix;
    vars.OutputMode = (int)Common.FieldOutputMode.VariableDeclaration;
    vars.Render(this.Response);
%>    
<%
    if (TargetTable != null)
    {
        // another declare block for the target table's variables
        Response.WriteLine();
        Response.WriteLine("-- target table variables");
        Response.WriteLine("DECLARE");
        
        // need to generate the variables for the target table
        vars = this.Create<TableFieldGenerator>();
        vars.SourceTable = TargetTable;
        vars.VariablePrefix = TargetVariablePrefix;
        vars.OutputMode = (int)Common.FieldOutputMode.VariableDeclaration;
        vars.Render(this.Response);
    }
%>

-- Track Progress
SET @workCounter = 0

-- the cursor for cycling through the source table
DECLARE workCursor CURSOR FORWARD_ONLY FOR
SELECT TOP <%= BatchSize %>
<%  // output the Source Table's variables
    vars = this.Create<TableFieldGenerator>();
    vars.SourceTable = SourceTable;
    vars.VariablePrefix = SourceVariablePrefix;
    vars.OutputMode = (int)Common.FieldOutputMode.SelectList;
    vars.Render(this.Response);
%>
    FROM <%= SourceTable.Name%>

-- open the source table cursor
OPEN workCursor

-- populate source table variables from the source cursor
FETCH NEXT FROM workCursor
INTO
<%
    // output the Source Table's variables
    vars = this.Create<TableFieldGenerator>();
    vars.SourceTable = SourceTable;
    vars.VariablePrefix = SourceVariablePrefix;
    vars.OutputMode = (int)Common.FieldOutputMode.Variables;
    vars.Render(this.Response);
%>
WHILE @@FETCH_STATUS = 0
BEGIN
    SET @workCounter = @workCounter + 1

    -- 
    -- Custom stuff here
    -- 
 <%
    if (TargetTable != null)
    {
        // generate a dummy INSERT statement
        vars = this.Create<TableFieldGenerator>();
        vars.SourceTable = TargetTable;
        vars.VariablePrefix = TargetVariablePrefix;
        vars.OutputMode = (int)Common.FieldOutputMode.VariableSet;
        vars.Render(this.Response);
    }    
%>

    /*  Template INSERT statement for the target table
<%
    if (TargetTable != null)
    {
        // generate a dummy INSERT statement
        vars = this.Create<TableFieldGenerator>();
        vars.SourceTable = TargetTable;
        vars.VariablePrefix = TargetVariablePrefix;
        vars.OutputMode = (int)Common.FieldOutputMode.InsertStatement;
        vars.Render(this.Response);      
    }    
%>
    */

-- fetch next row from source table
FETCH NEXT FROM workCursor
INTO
<% // output the Source Table's variables
    vars = this.Create<TableFieldGenerator>();
    vars.SourceTable = SourceTable;
    vars.VariablePrefix = SourceVariablePrefix;
    vars.OutputMode = (int)Common.FieldOutputMode.Variables;
    vars.Render(this.Response);
%>
END
CLOSE workCursor
DEALLOCATE workCursor

-- data migration "protocol" demands we return the number of rows/work completed
SELECT @workCounter as WorkCompleted