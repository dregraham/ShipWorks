--SET XACT_ABORT ON
--BEGIN TRANSACTION
-- ShipWorks V2 to V3 Database Migration Script, generated by CodeSmith
-- For table v2m_Shipments

-- operational variables
DECLARE 
    @workCounter int,
    @newShipmentKey bigint,
	@newCustomerKey bigint,
	@newStoreKey bigint,
	@newOrderKey bigint,
	@nextManualOrderNumber bigint,
	@noteDate datetime,
	@shipmentLabel varchar(100),	
	@orderLabel varchar(100),
	@orderValue money,
	@sFirstName nvarchar(30),
	@sLastName nvarchar(30),
	@sMiddleName nvarchar(30)


-- source table variables
DECLARE
    -- @MasterDatabase will be generated at runtime
    -- @IsArchive will be generated at runtime    
    @sShipmentID int, 
    @sRowVersion timestamp, 
    @sStoreID int, 
    @sOrderID int, 
    @sCustomerID int, 
    @sShipmentType int, 
    @sProcessed bit, 
    @sProcessedDate datetime, 
    @sShippedDate datetime, 
    @sVoided bit, 
    @sVoidedDate datetime, 
    @sServiceUsed nvarchar(50), 
    @sTrackingNumber nvarchar(50), 
    @sNotes nvarchar(max), 
    @sCommoditiesCreated bit, 
    @sTotalCharges money, 
    @sTotalWeight float, 
    @sToFirstName nvarchar(30), 
    @sToLastName nvarchar(30), 
    @sToCompany nvarchar(30), 
    @sToAddress1 nvarchar(60), 
    @sToAddress2 nvarchar(60), 
    @sToAddress3 nvarchar(60), 
    @sToCity nvarchar(50), 
    @sToStateProvinceCode nvarchar(25), 
    @sToPostalCode nvarchar(10), 
    @sToCountryCode nvarchar(5), 
    @sToPhone nvarchar(25), 
    @sToFax nvarchar(25), 
    @sToEmail nvarchar(50), 
    @sInsured bit, 
    @sInsuredCost money 

-- target table variables
DECLARE
    @tShipmentID bigint, 
    @tRowVersion timestamp, 
    @tOrderID bigint, 
    @tShipmentType int, 
    @tContentWeight float, 
    @tTotalWeight float, 
    @tProcessed bit, 
    @tProcessedDate datetime, 
    @tShipDate datetime, 
    @tShipmentCost money, 
    @tVoided bit, 
    @tVoidedDate datetime, 
    @tTrackingNumber nvarchar(50), 
    @tCustomsGenerated bit, 
    @tCustomsValue money, 
    @tThermalType int, 
    @tShipFirstName nvarchar(30), 
    @tShipMiddleName nvarchar(30), 
    @tShipLastName nvarchar(30), 
    @tShipCompany nvarchar(60), 
    @tShipStreet1 nvarchar(60), 
    @tShipStreet2 nvarchar(60), 
    @tShipStreet3 nvarchar(60), 
    @tShipCity nvarchar(50), 
    @tShipStateProvCode nvarchar(50), 
    @tShipPostalCode nvarchar(20), 
    @tShipCountryCode nvarchar(50), 
    @tShipPhone nvarchar(25), 
    @tShipEmail nvarchar(50), 
    @tResidentialDetermination int, 
    @tResidentialResult bit, 
    @tOriginOriginID bigint, 
    @tOriginFirstName nvarchar(30), 
    @tOriginMiddleName nvarchar(30), 
    @tOriginLastName nvarchar(30), 
    @tOriginCompany nvarchar(60), 
    @tOriginStreet1 nvarchar(60), 
    @tOriginStreet2 nvarchar(60), 
    @tOriginStreet3 nvarchar(60), 
    @tOriginCity nvarchar(50), 
    @tOriginStateProvCode nvarchar(50), 
    @tOriginPostalCode nvarchar(20), 
    @tOriginCountryCode nvarchar(50), 
    @tOriginPhone nvarchar(25), 
    @tOriginFax nvarchar(35), 
    @tOriginEmail nvarchar(50), 
    @tOriginWebsite nvarchar(50) 

-- Track Progress
SET @workCounter = 0

-- the cursor for cycling through the source table
DECLARE workCursor CURSOR FORWARD_ONLY FOR
SELECT TOP 1000
    [ShipmentID],
    [RowVersion],
    [StoreID],
    [OrderID],
    [CustomerID],
    [ShipmentType],
    [Processed],
    [ProcessedDate],
    [ShippedDate],
    [Voided],
    [VoidedDate],
    [ServiceUsed],
    [TrackingNumber],
    [Notes],
    [CommoditiesCreated],
    [TotalCharges],
    [TotalWeight],
    [ToFirstName],
    [ToLastName],
    [ToCompany],
    [ToAddress1],
    [ToAddress2],
    [ToAddress3],
    [ToCity],
    [ToStateProvinceCode],
    [ToPostalCode],
    [ToCountryCode],
    [ToPhone],
    [ToFax],
    [ToEmail],
    [Insured],
    [InsuredCost]
    FROM v2m_Shipments

-- open the source table cursor
OPEN workCursor

-- populate source table variables from the source cursor
FETCH NEXT FROM workCursor
INTO
    @sShipmentID,
    @sRowVersion,
    @sStoreID,
    @sOrderID,
    @sCustomerID,
    @sShipmentType,
    @sProcessed,
    @sProcessedDate,
    @sShippedDate,
    @sVoided,
    @sVoidedDate,
    @sServiceUsed,
    @sTrackingNumber,
    @sNotes,
    @sCommoditiesCreated,
    @sTotalCharges,
    @sTotalWeight,
    @sToFirstName,
    @sToLastName,
    @sToCompany,
    @sToAddress1,
    @sToAddress2,
    @sToAddress3,
    @sToCity,
    @sToStateProvinceCode,
    @sToPostalCode,
    @sToCountryCode,
    @sToPhone,
    @sToFax,
    @sToEmail,
    @sInsured,
    @sInsuredCost
WHILE @@FETCH_STATUS = 0
BEGIN
    SET @workCounter = @workCounter + 1

	-- temp variables
	SET @sFirstName = ''
	SET @sMiddleName = ''
	SET @sLastName = ''

	-- first, do not bother if this shipment isn't shipped
	IF @sProcessed = 0 
	BEGIN
		INSERT INTO dbo.v2m_SkippedShipments
			(ShipmentID, Reason)
		VALUES
			(@sShipmentID, 'Unprocessed Shipment')

		GOTO SKIP_SHIPMENT
	END

	SET @newOrderKey = NULL
	IF (@sCustomerID > -1) 
	BEGIN
		-- translate the customer id
		SET @newCustomerKey = dbo.v2m_TranslateKey(@sCustomerID, 2 /* customer */);

		IF @newCustomerKey IS NOT NULL
		BEGIN

			DECLARE
			    @sCustCustomerID bigint, 
				@sCustRowVersion timestamp, 
				@sCustBillFirstName nvarchar(30), 
				@sCustBillMiddleName nvarchar(30), 
				@sCustBillLastName nvarchar(30), 
				@sCustBillCompany nvarchar(60), 
				@sCustBillStreet1 nvarchar(60), 
				@sCustBillStreet2 nvarchar(60), 
				@sCustBillStreet3 nvarchar(60), 
				@sCustBillCity nvarchar(50), 
				@sCustBillStateProvCode nvarchar(50), 
				@sCustBillPostalCode nvarchar(20), 
				@sCustBillCountryCode nvarchar(50), 
				@sCustBillPhone nvarchar(25), 
				@sCustBillFax nvarchar(35), 
				@sCustBillEmail nvarchar(50), 
				@sCustBillWebsite nvarchar(50), 
				@sCustShipFirstName nvarchar(30), 
				@sCustShipMiddleName nvarchar(30), 
				@sCustShipLastName nvarchar(30), 
				@sCustShipCompany nvarchar(60), 
				@sCustShipStreet1 nvarchar(60), 
				@sCustShipStreet2 nvarchar(60), 
				@sCustShipStreet3 nvarchar(60), 
				@sCustShipCity nvarchar(50), 
				@sCustShipStateProvCode nvarchar(50), 
				@sCustShipPostalCode nvarchar(20), 
				@sCustShipCountryCode nvarchar(50), 
				@sCustShipPhone nvarchar(25), 
				@sCustShipFax nvarchar(35), 
				@sCustShipEmail nvarchar(50), 
				@sCustShipWebsite nvarchar(50), 
				@sCustRollupOrderCount int, 
				@sCustRollupOrderTotal money, 
				@sCustRollupNoteCount int 


			-- pull the customer record
			SELECT 
				@sCustCustomerID = [CustomerID],       
				@sCustRowVersion = [RowVersion],       
				@sCustBillFirstName = [BillFirstName],       
				@sCustBillMiddleName = [BillMiddleName],       
				@sCustBillLastName = [BillLastName],       
				@sCustBillCompany = [BillCompany],       
				@sCustBillStreet1 = [BillStreet1],       
				@sCustBillStreet2 = [BillStreet2],       
				@sCustBillStreet3 = [BillStreet3],       
				@sCustBillCity = [BillCity],       
				@sCustBillStateProvCode = [BillStateProvCode],       
				@sCustBillPostalCode = [BillPostalCode],       
				@sCustBillCountryCode = [BillCountryCode],       
				@sCustBillPhone = [BillPhone],       
				@sCustBillFax = [BillFax],       
				@sCustBillEmail = [BillEmail],       
				@sCustBillWebsite = [BillWebsite],       
				@sCustShipFirstName = [ShipFirstName],       
				@sCustShipMiddleName = [ShipMiddleName],       
				@sCustShipLastName = [ShipLastName],       
				@sCustShipCompany = [ShipCompany],       
				@sCustShipStreet1 = [ShipStreet1],       
				@sCustShipStreet2 = [ShipStreet2],       
				@sCustShipStreet3 = [ShipStreet3],       
				@sCustShipCity = [ShipCity],       
				@sCustShipStateProvCode = [ShipStateProvCode],       
				@sCustShipPostalCode = [ShipPostalCode],       
				@sCustShipCountryCode = [ShipCountryCode],       
				@sCustShipPhone = [ShipPhone],       
				@sCustShipFax = [ShipFax],       
				@sCustShipEmail = [ShipEmail],       
				@sCustShipWebsite = [ShipWebsite],       
				@sCustRollupOrderCount = [RollupOrderCount],       
				@sCustRollupOrderTotal = [RollupOrderTotal],       
				@sCustRollupNoteCount = [RollupNoteCount]       
			FROM {MASTERDATABASE}.dbo.[Customer]
			WHERE [CustomerID] = @newCustomerKey 

			-- get the translated store key
			SET @newStoreKey = dbo.v2m_TranslateKeyGlobal(@sStoreID, 8 /* store */)

			-- get the next order number to use
			SELECT @nextManualOrderNumber = COALESCE((MAX(OrderNumber) + 1), 1) FROM 
				{MASTERDATABASE}.dbo.[Order] 
			WHERE 
				StoreID = @newStoreKey
				AND OrderNumberComplete LIKE 'CustomerShipment%' 
				AND IsManual = 1
			
			-- create an order with this customer information
			INSERT INTO {MASTERDATABASE}.dbo.[Order](
				[StoreID],
				[CustomerID],
				[OrderNumber],
				[OrderNumberComplete],
				[OrderDate],
				[OrderTotal],
				[LocalStatus],
				[IsManual],
				[OnlineLastModified],
				[OnlineCustomerID],
				[OnlineStatus],
				[OnlineStatusCode],
				[RequestedShipping],
				[BillFirstName],
				[BillMiddleName],
				[BillLastName],
				[BillCompany],
				[BillStreet1],
				[BillStreet2],
				[BillStreet3],
				[BillCity],
				[BillStateProvCode],
				[BillPostalCode],
				[BillCountryCode],
				[BillPhone],
				[BillFax],
				[BillEmail],
				[BillWebsite],
				[ShipFirstName],
				[ShipMiddleName],
				[ShipLastName],
				[ShipCompany],
				[ShipStreet1],
				[ShipStreet2],
				[ShipStreet3],
				[ShipCity],
				[ShipStateProvCode],
				[ShipPostalCode],
				[ShipCountryCode],
				[ShipPhone],
				[ShipFax],
				[ShipEmail],
				[ShipWebsite],
				[RollupItemCount],
				[RollupItemName],
				[RollupItemCode],
				[RollupItemSKU],
				[RollupItemLocation],
				[RollupItemQuantity],
				[RollupItemTotalWeight],
				[RollupNoteCount]
			)
			VALUES
			(
				@newStoreKey,
				@newCustomerKey,
				@nextManualOrderNumber,
				'CustomerShipment-' + CAST(@nextManualOrderNumber as varchar(30)),
				CASE	-- Order Date
					WHEN @sProcessed = 1 THEN @sShippedDate
					ELSE GETUTCDATE()
				END,
				0,	-- order total
				CASE	-- Local Status
					WHEN @sProcessed = 1 THEN 'Shipped'
					ELSE ''
				END,
				1,	-- is manual
				CASE	-- Online Last Modified
					WHEN @sProcessed = 1 THEN @sShippedDate
					ELSE GETUTCDATE()
				END,
				NULL,
				'',	  -- online status
				NULL, -- online status code
				'',
				@sCustBillFirstName,
				@sCustBillMiddleName,
				@sCustBillLastName,
				@sCustBillCompany,
				@sCustBillStreet1,
				@sCustBillStreet2,
				@sCustBillStreet3,
				@sCustBillCity,
				@sCustBillStateProvCode,
				@sCustBillPostalCode,
				@sCustBillCountryCode,
				@sCustBillPhone,
				@sCustBillFax,
				@sCustBillEmail,
				@sCustBillWebsite,
				@sCustShipFirstName,
				@sCustShipMiddleName,
				@sCustShipLastName,
				@sCustShipCompany,
				@sCustShipStreet1,
				@sCustShipStreet2,
				@sCustShipStreet3,
				@sCustShipCity,
				@sCustShipStateProvCode,
				@sCustShipPostalCode,
				@sCustShipCountryCode,
				@sCustShipPhone,
				@sCustShipFax,
				@sCustShipEmail,
				@sCustShipWebsite,
				0, -- RollupItemCount
				'', -- RollupItemName
				'', -- RollupItemCode
				'', -- RollupItemSKU
				'', -- RollupItemLocation,
				0,	-- rollup item quantity
				0,	-- rollup item total weight
				1	-- rollup item note count
			)             

			SET @newOrderKey = @@IDENTITY

			-- need to label it
			SET @orderLabel = 'CustomerShipment-' + CAST(@nextManualOrderNumber as varchar(30))
			exec dbo.v2m_RecordObjectLabel @newOrderKey, 6, @newCustomerKey, @orderLabel

			-- attach a note indicating what this order is for
			DECLARE @noteText varchar(max)
			SET @noteDate = GETUTCDATE()
			SET @noteText = 'This order was created by the ShipWorks upgrade process.  These shipments were related to a Customer in ShipWorks 2, while in ShipWorks 3 all shipments must be related to an Order.'

			exec dbo.v2m_CreateNote @newOrderKey, @noteDate, @noteText , 0 /* NoteSource.ShipWorksUser */, 0 /* NoteVisibliity.Internal */	
		END
	END

	-- if we didn't create a brand new order for a customer shipment, translate the old shipment's OrderID
	IF @newOrderKey IS NULL 
	BEGIN
		SET @newOrderKey = dbo.v2m_TranslateKey(@sOrderID, 0 /* order */)
	END

    SET @tOrderID = @newOrderKey
    SET @tShipmentType = @sShipmentType

	-- V2 has a shipment type for EndiciaLabelServer to deal with
	IF (@tShipmentType = 8)
	BEGIN
		-- it's just Endicia now
		SET @tShipmentType = 2
	END

    SET @tContentWeight = @sTotalWeight
    SET @tTotalWeight =  @sTotalWeight
    SET @tProcessed = @sProcessed
    SET @tProcessedDate = @sProcessedDate
    SET @tShipDate = @sShippedDate
    SET @tShipmentCost = @sTotalCharges
    SET @tVoided = @sVoided
    SET @tVoidedDate = @sVoidedDate
    SET @tTrackingNumber = @sTrackingNumber
    SET @tCustomsGenerated = @sCommoditiesCreated
    SET @tCustomsValue = 0
    SET @tThermalType = 0
    SET @tShipFirstName = @sToFirstName
    SET @tShipMiddleName = ''
    SET @tShipLastName = @sToLastName
    SET @tShipCompany = @sToCompany
    SET @tShipStreet1 = @sToAddress1
    SET @tShipStreet2 = @sToAddress2
    SET @tShipStreet3 = @sToAddress3
    SET @tShipCity = @sToCity
    SET @tShipStateProvCode = @sToStateProvinceCode
    SET @tShipPostalCode = @sToPostalCode
    SET @tShipCountryCode = @sToCountryCode
    SET @tShipPhone = @sToPhone
    SET @tShipEmail = @sToEmail
    SET @tResidentialDetermination = 0	-- CommercialIfCompany, the v2 way
	SET @tResidentialResult = 
	CASE 
		WHEN LEN(@tShipCompany) > 0 THEN 0 -- commercial
		ELSE 1	-- residential
	END
    SET @tOriginOriginID = 1			-- Origin = EnteredManually
    SET @tOriginFirstName = ''
    SET @tOriginMiddleName = ''
    SET @tOriginLastName = ''
    SET @tOriginCompany = ''
    SET @tOriginStreet1 = '' 
    SET @tOriginStreet2 = ''
    SET @tOriginStreet3 = ''
    SET @tOriginCity = ''
    SET @tOriginStateProvCode = ''
    SET @tOriginPostalCode = ''
    SET @tOriginCountryCode = ''
    SET @tOriginPhone = ''
    SET @tOriginFax = ''
    SET @tOriginEmail = ''
    SET @tOriginWebsite = ''
       
	-- tOrderID is null if the v2 database had an orphaned customer shipment.  
    IF (@tOrderID IS NULL)
	BEGIN
		INSERT INTO dbo.v2m_SkippedShipments
			(ShipmentID, Reason)
		VALUES
			(@sShipmentID, 'Orphaned customer shipment')

		GOTO SKIP_SHIPMENT
	END

	INSERT INTO {MASTERDATABASE}.dbo.Shipment  (
		[OrderID],
		[ShipmentType],
		[ContentWeight],
		[TotalWeight],
		[Processed],
		[ProcessedDate],
		[ShipDate],
		[ShipmentCost],
		[Voided],
		[VoidedDate],
		[TrackingNumber],
		[CustomsGenerated],
		[CustomsValue],
		[ThermalType],
		[ShipFirstName],
		[ShipMiddleName],
		[ShipLastName],
		[ShipCompany],
		[ShipStreet1],
		[ShipStreet2],
		[ShipStreet3],
		[ShipCity],
		[ShipStateProvCode],
		[ShipPostalCode],
		[ShipCountryCode],
		[ShipPhone],
		[ShipEmail],
		[ResidentialDetermination],
		[ResidentialResult],
		[OriginOriginID],
		[OriginFirstName],
		[OriginMiddleName],
		[OriginLastName],
		[OriginCompany],
		[OriginStreet1],
		[OriginStreet2],
		[OriginStreet3],
		[OriginCity],
		[OriginStateProvCode],
		[OriginPostalCode],
		[OriginCountryCode],
		[OriginPhone],
		[OriginFax],
		[OriginEmail],
		[OriginWebsite]
	)
	VALUES
	(
		@tOrderID,
		@tShipmentType,
		@tContentWeight,
		@tTotalWeight,
		@tProcessed,
		@tProcessedDate,
		@tShipDate,
		@tShipmentCost,
		@tVoided,
		@tVoidedDate,
		@tTrackingNumber,
		@tCustomsGenerated,
		@tCustomsValue,
		@tThermalType,
		@tShipFirstName,
		@tShipMiddleName,
		@tShipLastName,
		@tShipCompany,
		@tShipStreet1,
		@tShipStreet2,
		@tShipStreet3,
		@tShipCity,
		@tShipStateProvCode,
		@tShipPostalCode,
		@tShipCountryCode,
		@tShipPhone,
		@tShipEmail,
		@tResidentialDetermination,
		@tResidentialResult,
		@tOriginOriginID,
		@tOriginFirstName,
		@tOriginMiddleName,
		@tOriginLastName,
		@tOriginCompany,
		@tOriginStreet1,
		@tOriginStreet2,
		@tOriginStreet3,
		@tOriginCity,
		@tOriginStateProvCode,
		@tOriginPostalCode,
		@tOriginCountryCode,
		@tOriginPhone,
		@tOriginFax,
		@tOriginEmail,
		@tOriginWebsite
	)             
		
	SET @newShipmentKey = @@IDENTITY
		
	-- record the key
	EXEC dbo.v2m_RecordKey @sShipmentID, 1 /* shipment */, @newShipmentKey

	-- record an object label		
	SET @shipmentLabel = convert(varchar, @tShipDate, 100)
	EXEC dbo.v2m_RecordObjectLabel @newShipmentKey, 31, @tOrderID, @shipmentLabel
		
	-- Create a note if necessary
	IF (LEN(@sNotes) > 0)
	BEGIN

		SET @noteDate = GETUTCDATE()
		exec dbo.v2m_CreateNote @newShipmentKey, @noteDate, @sNotes, 0 /* NoteSource.ShipWorksUser */, 0 /* NoteVisibliity.Internal */	
	END
		
	--------------------------------------------------------------------------------------------------------------------------------
	-- UPS (online tools and worldship) Shipment
	--------------------------------------------------------------------------------------------------------------------------------
	IF (@sShipmentType = 0 OR @sShipmentType = 1)
	BEGIN
		-- accumulation
		DECLARE
			@upsCodTotal money,
			@upsCodEnabled bit,
			@upsInsuranceType int
				
		SET @upsCodTotal = 0
		SET @upsCodEnabled = 0
		SET @upsInsuranceType = 0 -- InsuranceType.None
			
		-- UPS
		DECLARE
			@tWorldShipStatus int,
			@upsDescriptionOfGoods nvarchar(100), 
			@upsDocumentsOnly bit, 
			@upsCustomsValue money, 
			@upsReferenceNumber nvarchar(50), 
			@upsServiceCode nvarchar(10), 
			@upsLabelTypeCode nvarchar(10), 
			@upsArrivalDate datetime, 
			@upsNotificationEmailFromName nvarchar(50), 
			@upsNotificationEmailSubjectCode nvarchar(50), 
			@upsNotificationEmailFailedAddress nvarchar(50), 
			@upsNotificationEmailMemo nvarchar(120), 
			@upsNotificationEmailRecipients nvarchar(1500), 
			@upsShipToResidential bit, 
			@upsShipToShipperNumber nvarchar(10), 
			@upsShipFromCompanyOrName nvarchar(30), 
			@upsShipFromAttention nvarchar(30), 
			@upsShipFromAddress1 nvarchar(60), 
			@upsShipFromAddress2 nvarchar(60), 
			@upsShipFromAddress3 nvarchar(60), 
			@upsShipFromCity nvarchar(50), 
			@upsShipFromStateProvinceCode nvarchar(5), 
			@upsShipFromPostalCode nvarchar(10), 
			@upsShipFromCountryCode nvarchar(5), 
			@upsShipFromContactEmail nvarchar(25), 
			@upsShipFromContactPhone nvarchar(25), 
			@upsShipFromContactFax nvarchar(25), 
			@upsShipFromShipperNumber nvarchar(10), 
			@upsSaturdayDelivery bit, 
			@upsShipFromShipperID int, 
			@upsNegotiatedRate bit, 
			@upsPublishedCharges money

		-- Online Tools Shipment
		IF @sShipmentType = 0
		BEGIN

			SELECT 
				@upsDescriptionOfGoods = [DescriptionOfGoods],       
				@upsDocumentsOnly = [DocumentsOnly],       
				@upsCustomsValue = [CustomsValue],       
				@upsReferenceNumber = [ReferenceNumber],       
				@upsServiceCode = [ServiceCode],       
				@upsLabelTypeCode = [LabelTypeCode],       
				@upsArrivalDate = [ArrivalDate],       
				@upsNotificationEmailFromName = [NotificationEmailFromName],       
				@upsNotificationEmailSubjectCode = [NotificationEmailSubjectCode],       
				@upsNotificationEmailFailedAddress = [NotificationEmailFailedAddress],       
				@upsNotificationEmailMemo = [NotificationEmailMemo],       
				@upsNotificationEmailRecipients = [NotificationEmailRecipients],       
				@upsShipToResidential = [ShipToResidential],       
				@upsShipToShipperNumber = [ShipToShipperNumber],       
				@upsShipFromCompanyOrName = [ShipFromCompanyOrName],       
				@upsShipFromAttention = [ShipFromAttention],       
				@upsShipFromAddress1 = [ShipFromAddress1],       
				@upsShipFromAddress2 = [ShipFromAddress2],       
				@upsShipFromAddress3 = [ShipFromAddress3],       
				@upsShipFromCity = [ShipFromCity],       
				@upsShipFromStateProvinceCode = [ShipFromStateProvinceCode],       
				@upsShipFromPostalCode = [ShipFromPostalCode],       
				@upsShipFromCountryCode = [ShipFromCountryCode],       
				@upsShipFromContactEmail = [ShipFromContactEmail],       
				@upsShipFromContactPhone = [ShipFromContactPhone],       
				@upsShipFromContactFax = [ShipFromContactFax],       
				@upsShipFromShipperNumber = [ShipFromShipperNumber],       
				@upsSaturdayDelivery = [SaturdayDelivery],       
				@upsShipFromShipperID = [ShipFromShipperID],       
				@upsNegotiatedRate = [NegotiatedRate],       
				@upsPublishedCharges = [PublishedCharges]       
			FROM dbo.[v2m_UpsShipments]
			WHERE [ShipmentID] = @sShipmentID

			SET @upsShipFromShipperID = dbo.v2m_TranslateKeyGlobal(@upsShipFromShipperID, 13 /* ups shipper*/)
			if (@upsShipFromShipperID IS NULL)
			BEGIN
				SET @upsShipFromShipperID = 0 
			END
		    
			-- check for Interapptive Insurance at the shipment level
			IF (@sInsured = 1) 
			BEGIN
				SET @upsInsuranceType = 1
			END
		    
			EXEC dbo.v2m_ParseName @upsShipFromCompanyOrName, @sFirstName OUT, @sMiddleName OUT, @sLastName OUT

			-- set the base Shipment origin values
			SET @tOriginFirstName = @sFirstName
			SET @tOriginMiddleName = @sMiddleName
			SET @tOriginLastName = @sLastName
			SET @tOriginCompany = @upsShipFromCompanyOrName
			SET @tOriginStreet1 = @upsShipFromAddress1
			SET @tOriginStreet2 = @upsShipFromAddress2
			SET @tOriginStreet3 = @upsShipFromAddress3
			SET @tOriginCity = @upsShipFromCity
			SET @tOriginStateProvCode = @upsShipFromStateProvinceCode
			SET @tOriginPostalCode = @upsShipFromPostalCode
			SET @tOriginCountryCode = @upsShipFromCountryCode
			SET @tOriginPhone = @upsShipFromContactPhone
			SET @tOriginFax = @upsShipFromContactFax
			SET @tOriginEmail = @upsShipFromContactEmail
			SET @tCustomsValue = @upsCustomsValue
			SET @tResidentialResult = @upsShipToResidential
		    
			IF @upsLabelTypeCode = 'GIF'
				SET @tThermalType = NULL
			ELSE
				SET @tThermalType = 0 -- EPL
		    
			-- go throuch each ups package, moving it over
			DECLARE
				@upsPkgUpsPackageID int, 
				@upsPkgRowVersion timestamp, 
				@upsPkgShipmentID int, 
				@upsPkgPackagingTypeCode nvarchar(10), 
				@upsPkgLength int, 
				@upsPkgWidth int, 
				@upsPkgHeight int, 
				@upsPkgWeight float, 
				@upsPkgAdditionalHandling bit, 
				@upsPkgDeliveryConfirmation bit, 
				@upsPkgDeliveryConfirmationType nvarchar(15), 
				@upsPkgInsurance bit, 
				@upsPkgInsuredValue money, 
				@upsPkgCOD bit, 
				@upsPkgCODFundsCode nvarchar(10), 
				@upsPkgCODAmount money, 
				@upsPkgTrackingNumber nvarchar(50), 
				@upsPkgLabelImageFull nvarchar(350), 
				@upsPkgLabelImageLabel nvarchar(350), 
				@upsPkgLabelImageEpl nvarchar(350), 
				@upsPkgLabelWarsawPath nvarchar(350), 
				@upsPkgLabelHtmlPath nvarchar(350) 
			    
			SET @upsCodTotal = 0
			SET @upsCodEnabled = 0

			-- the cursor for cycling through the source table
			DECLARE packageCursor CURSOR FORWARD_ONLY FOR
			SELECT 
					[UpsPackageID],
					[RowVersion],
					[ShipmentID],
					[PackagingTypeCode],
					[Length],
					[Width],
					[Height],
					[Weight],
					[AdditionalHandling],
					[DeliveryConfirmation],
					[DeliveryConfirmationType],
					[Insurance],
					[InsuredValue],
					[COD],
					[CODFundsCode],
					[CODAmount],
					[TrackingNumber],
					[LabelImageFull],
					[LabelImageLabel],
					[LabelImageEpl],
					[LabelWarsawPath],
					[LabelHtmlPath]
				FROM v2m_UpsPackages
				WHERE [ShipmentID] = @sShipmentID

			-- open the source table cursor
			OPEN packageCursor

			-- populate source table variables from the source cursor
			FETCH NEXT FROM packageCursor
			INTO
					@upsPkgUpsPackageID,
					@upsPkgRowVersion,
					@upsPkgShipmentID,
					@upsPkgPackagingTypeCode,
					@upsPkgLength,
					@upsPkgWidth,
					@upsPkgHeight,
					@upsPkgWeight,
					@upsPkgAdditionalHandling,
					@upsPkgDeliveryConfirmation,
					@upsPkgDeliveryConfirmationType,
					@upsPkgInsurance,
					@upsPkgInsuredValue,
					@upsPkgCOD,
					@upsPkgCODFundsCode,
					@upsPkgCODAmount,
					@upsPkgTrackingNumber,
					@upsPkgLabelImageFull,
					@upsPkgLabelImageLabel,
					@upsPkgLabelImageEpl,
					@upsPkgLabelWarsawPath,
					@upsPkgLabelHtmlPath
			WHILE @@FETCH_STATUS = 0
			BEGIN
				
				-- sum up COD
				IF (@upsPkgCOD = 1)
				BEGIN
					SET @upsCodEnabled = 1
					SET @upsCodTotal = @upsCodTotal + @upsPkgCOD
				END
				
				-- if at least one package has insurance, and the v2 shipment isn't Insured by SW
				IF (@upsPkgInsurance = 1 AND @upsInsuranceType <> 1) 
				BEGIN
					-- UPS insurance
					SET @upsInsuranceType = 2
				END
			
				print 'Inserting a UPS Package..'
				INSERT INTO {MASTERDATABASE}.dbo.UpsPackage  (
					[ShipmentID],
					[PackagingType],
					[Weight],
					[DimsProfileID],
					[DimsLength],
					[DimsWidth],
					[DimsHeight],
					[DimsWeight],
					[DimsAddWeight],
					[InsuranceValue],
					[TrackingNumber]
				)
				VALUES
				(
					@newShipmentKey,
					dbo.v2m_TranslateUpsPackageTypeCode(@upsPkgPackagingTypeCode),
					@upsPkgWeight,
					0,	-- profile ID
					@upsPkgLength,
					@upsPkgWidth,
					@upsPkgHeight,
					0,	-- Dims Weight
					0,	-- added weight
					@upsPkgInsuredValue,
					@upsPkgTrackingNumber
				)             
			    
				-- NOT deleting the packages here since in C# we are going to
				-- need to do further processing on them
				EXEC dbo.v2m_RecordKey @upsPkgUpsPackageID, 14, @@IDENTITY
			    
				FETCH NEXT FROM packageCursor
				INTO
					@upsPkgUpsPackageID,
					@upsPkgRowVersion,
					@upsPkgShipmentID,
					@upsPkgPackagingTypeCode,
					@upsPkgLength,
					@upsPkgWidth,
					@upsPkgHeight,
					@upsPkgWeight,
					@upsPkgAdditionalHandling,
					@upsPkgDeliveryConfirmation,
					@upsPkgDeliveryConfirmationType,
					@upsPkgInsurance,
					@upsPkgInsuredValue,
					@upsPkgCOD,
					@upsPkgCODFundsCode,
					@upsPkgCODAmount,
					@upsPkgTrackingNumber,
					@upsPkgLabelImageFull,
					@upsPkgLabelImageLabel,
					@upsPkgLabelImageEpl,
					@upsPkgLabelWarsawPath,
					@upsPkgLabelHtmlPath
			END
			CLOSE packageCursor
			DEALLOCATE packageCursor

			INSERT INTO {MASTERDATABASE}.dbo.v2m_UpsShipmentNotify (
				ShipmentID,
				NotificationEmailRecipients
			)
			VALUES
			(
				@newShipmentKey,
			    @upsNotificationEmailRecipients
			)

			SET @tWorldShipStatus = 0 -- WorldShipStatusType.None
		END
		ELSE
		BEGIN
			-- WorldShip
			SET @tWorldShipStatus = 2 -- WorldShipStatusType.Completed

			-- just setup a bunchof default values to be inserted into the UPS table next
			SET @upsShipFromShipperID = 0
			SET @upsServiceCode = 0
			SET @upsSaturdayDelivery = 0
			SET @upsCodEnabled = 0
			SET @upsCodTotal = 0
			SET @upsPkgCODFundsCode = 0
			SET @upsPkgDeliveryConfirmation = 0
			SET @upsPkgDeliveryConfirmationType = 0
			SET @upsReferenceNumber = ''
			SET @upsInsuranceType = 0
			SET @upsNotificationEmailFromName = ''
			SET @upsNotificationEmailSubjectCode = 0
			SET @upsNotificationEmailMemo = ''
			SET @upsDocumentsOnly = 0
			SET @upsDescriptionOfGoods = ''
			SET @upsPublishedCharges = 0
			SET @upsNegotiatedRate = 0			
		END
		
		-- UPS Shipment
		print 'Inserting a UPS Shipment...'
		INSERT INTO {MASTERDATABASE}.dbo.UpsShipment  (
			[ShipmentID],
			[UpsAccountID],
			[Service],
			[SaturdayDelivery],
			[CodEnabled],
			[CodAmount],
			[CodPaymentType],
			[DeliveryConfirmation],
			[ReferenceNumber],
			[InsuranceType],
			[PayorType],
			[PayorAccount],
			[PayorPostalCode],
			[PayorCountryCode],
			[EmailNotifySender],
			[EmailNotifyRecipient],
			[EmailNotifyOther],
			[EmailNotifyOtherAddress],
			[EmailNotifyFrom],
			[EmailNotifySubject],
			[EmailNotifyMessage],
			[CustomsDocumentsOnly],
			[CustomsDescription],
			[CommercialInvoice],
			[CommercialInvoiceTermsOfSale],
			[CommercialInvoicePurpose],
			[CommercialInvoiceComments],
			[CommercialInvoiceFreight],
			[CommercialInvoiceInsurance],
			[CommercialInvoiceOther],
			[WorldShipStatus],
			[PublishedCharges],
			[NegotiatedRate]
		)
		VALUES
		(
			@newShipmentKey,
			@upsShipFromShipperID,
			dbo.v2m_TranslateUpsServiceCode(@upsServiceCode),
			@upsSaturdayDelivery,
			@upsCodEnabled,	-- COD enabled
			@upsCodTotal,	-- COD amount
			CASE			-- COD Payment type
				WHEN @upsPkgCODFundsCode = '8' THEN 1 -- Check or Money Order
				ELSE 0								  -- all tender
			END,
			CASE -- Delivery Confirmation, using the last package for values
				WHEN @upsPkgDeliveryConfirmation = 0 THEN 0			-- None
				WHEN @upsPkgDeliveryConfirmationType = '0' THEN 1	-- No Signature
				WHEN @upsPkgDeliveryConfirmationType = '1' THEN 2	-- Required
				WHEN @upsPkgDeliveryConfirmationType = '2' THEN 3	-- Adult
				ELSE 0
			END,
			@upsReferenceNumber,
			@upsInsuranceType,	-- Insurance Type
			0,	-- Int V2, was always the Sender
			'',	-- PayorAccount
			'', -- PayorPostalCode
			'', -- PayorCountryCode
			0,	-- EmailNotifySender, populated in c#
			0,  -- EmailNotifyRecipient, populated in c#
			0,	-- EmailNotifyOther, populated in c#
			'',	-- EmailNotifyOtherAddress, populated in c#
			@upsNotificationEmailFromName,
			@upsNotificationEmailSubjectCode,
			@upsNotificationEmailMemo,
			@upsDocumentsOnly,
			@upsDescriptionOfGoods,
			0,	-- CommercialInvoice
			0,	-- CommercialInvoiceTermsOfSale
			0,	-- CommercialInvoicePurpose
			'',	-- CommercialInvoiceComments
			0,	-- CommercialInvoiceFreight
			0,	-- CommercialInvoiceInsurance
			0,	-- CommercialInvoiceOther
			@tWorldShipStatus, -- WorldShipStatus.None
			@upsPublishedCharges,
			@upsNegotiatedRate
		)

		-- In v2 we didn't have package records for WorldShip, but v3 requires them
		print 'Inserting a UPS Package..'
		INSERT INTO {MASTERDATABASE}.dbo.UpsPackage  (
			[ShipmentID],
			[PackagingType],
			[Weight],
			[DimsProfileID],
			[DimsLength],
			[DimsWidth],
			[DimsHeight],
			[DimsWeight],
			[DimsAddWeight],
			[InsuranceValue],
			[TrackingNumber]
		)
		VALUES
		(
			@newShipmentKey,
			0,
			0,
			0,	-- profile ID
			0,
			0,
			0,
			0,	-- Dims Weight
			0,	-- added weight
			0,
			''
		)             

		-- DELETE the old Ups shipment
		DELETE FROM dbo.v2m_UpsShipments WHERE ShipmentID = @sShipmentID
	END
		
	--------------------------------------------------------------------------------------------------------------------------------
	-- USPS
	--------------------------------------------------------------------------------------------------------------------------------
	IF (@sShipmentType = 2 OR @sShipmentType = 3 OR @sShipmentType = 4 OR @sShipmentType = 8 OR @sShipmentType = 9)
	BEGIN
		DECLARE
			@uspsShipmentID int, 
			@uspsRowVersion timestamp, 
			@uspsPackagingType int, 
			@uspsServiceType int, 
			@uspsConfirmationType int, 
			@uspsAddressService bit, 
			@uspsSendEmail bit, 
			@uspsLabelImageFull nvarchar(350), 
			@uspsLabelImageLabel nvarchar(350), 
			@uspsLabelImageBarcode nvarchar(350), 
			@uspsStealth bit, 
			@uspsSpecifyLayout bit, 
			@uspsLayout nvarchar(350), 
			@uspsDeclaredValue money, 
			@uspsInsuranceType int, 
			@uspsOversize bit, 
			@uspsNonMachinable bit, 
			@uspsWidth float, 
			@uspsLength float, 
			@uspsDepth float, 
			@uspsReferenceID varchar(200), 
			@uspsRubberStamp1 varchar(200), 
			@uspsRubberStamp2 varchar(200), 
			@uspsRubberStamp3 varchar(200), 
			@uspsRubberStamp4 varchar(200), 
			@uspsCustomsForm int, 
			@uspsCustomsDescription nvarchar(200), 
			@uspsCustomsContentType int, 
			@uspsTrackingIsCustomsNumber bit, 
			@uspsLayoutPrinterOverride bit, 
			@uspsLayoutPrinterName varchar(350), 
			@uspsLayoutPaperSource smallint, 
			@uspsLayoutPaperSize smallint, 
			@uspsLayoutOffsetTop float, 
			@uspsLayoutOffsetLeft float, 
			@uspsLayoutOrientation smallint, 
			@uspsLayoutFacing smallint, 
			@uspsLayoutFeed smallint, 
			@uspsLayoutJustify smallint, 
			@uspsLayoutRotate bit, 
			@uspsLayoutCustomWidth float, 
			@uspsLayoutCustomHeight float, 
			@uspsSendReturnAddress bit, 
			@uspsShipFromCompany nvarchar(30), 
			@uspsShipFromContactName nvarchar(30), 
			@uspsShipFromAddress1 nvarchar(60), 
			@uspsShipFromAddress2 nvarchar(60), 
			@uspsShipFromAddress3 nvarchar(60), 
			@uspsShipFromCity nvarchar(50), 
			@uspsShipFromStateProvinceCode nvarchar(5), 
			@uspsShipFromPostalCode nvarchar(10), 
			@uspsShipFromEndiciaShipperID int, 
			@uspsLayoutUseConcatBarcode bit, 
			@uspsLayoutBarcodeX float, 
			@uspsLayoutBarcodeY float,
			@uspsEndiciaTransactionID int,
			@uspsScanFormID int,
			@uspsRefundFormID int

		SELECT 
		    @uspsShipmentID = [ShipmentID],       
		    @uspsRowVersion = [RowVersion],       
		    @uspsPackagingType = [PackagingType],       
		    @uspsServiceType = [ServiceType],       
		    @uspsConfirmationType = [ConfirmationType],       
		    @uspsAddressService = [AddressService],       
		    @uspsSendEmail = [SendEmail],       
		    @uspsLabelImageFull = [LabelImageFull],       
		    @uspsLabelImageLabel = [LabelImageLabel],       
		    @uspsLabelImageBarcode = [LabelImageBarcode],       
		    @uspsStealth = [Stealth],       
		    @uspsSpecifyLayout = [SpecifyLayout],       
		    @uspsLayout = [Layout],       
		    @uspsDeclaredValue = [DeclaredValue],       
		    @uspsInsuranceType = [InsuranceType],       
		    @uspsOversize = [Oversize],       
		    @uspsNonMachinable = [NonMachinable],       
		    @uspsWidth = [Width],       
		    @uspsLength = [Length],       
		    @uspsDepth = [Depth],       
		    @uspsReferenceID = [ReferenceID],       
		    @uspsRubberStamp1 = [RubberStamp1],       
		    @uspsRubberStamp2 = [RubberStamp2],       
		    @uspsRubberStamp3 = [RubberStamp3],       
		    @uspsRubberStamp4 = [RubberStamp4],       
		    @uspsCustomsForm = [CustomsForm],       
		    @uspsCustomsDescription = [CustomsDescription],       
		    @uspsCustomsContentType = [CustomsContentType],       
		    @uspsTrackingIsCustomsNumber = [TrackingIsCustomsNumber],       
		    @uspsLayoutPrinterOverride = [LayoutPrinterOverride],       
		    @uspsLayoutPrinterName = [LayoutPrinterName],       
		    @uspsLayoutPaperSource = [LayoutPaperSource],       
		    @uspsLayoutPaperSize = [LayoutPaperSize],       
		    @uspsLayoutOffsetTop = [LayoutOffsetTop],       
		    @uspsLayoutOffsetLeft = [LayoutOffsetLeft],       
		    @uspsLayoutOrientation = [LayoutOrientation],       
		    @uspsLayoutFacing = [LayoutFacing],       
		    @uspsLayoutFeed = [LayoutFeed],       
		    @uspsLayoutJustify = [LayoutJustify],       
		    @uspsLayoutRotate = [LayoutRotate],       
		    @uspsLayoutCustomWidth = [LayoutCustomWidth],       
		    @uspsLayoutCustomHeight = [LayoutCustomHeight],       
		    @uspsSendReturnAddress = [SendReturnAddress],       
		    @uspsShipFromCompany = [ShipFromCompany],       
		    @uspsShipFromContactName = [ShipFromContactName],       
		    @uspsShipFromAddress1 = [ShipFromAddress1],       
		    @uspsShipFromAddress2 = [ShipFromAddress2],       
		    @uspsShipFromAddress3 = [ShipFromAddress3],       
		    @uspsShipFromCity = [ShipFromCity],       
		    @uspsShipFromStateProvinceCode = [ShipFromStateProvinceCode],       
		    @uspsShipFromPostalCode = [ShipFromPostalCode],       
		    @uspsShipFromEndiciaShipperID = [ShipFromEndiciaShipperID],       
		    @uspsLayoutUseConcatBarcode = [LayoutUseConcatBarcode],       
		    @uspsLayoutBarcodeX = [LayoutBarcodeX],       
		    @uspsLayoutBarcodeY = [LayoutBarcodeY],
			@uspsEndiciaTransactionID = [EndiciaTransactionID],
			@uspsScanFormID = [ScanFormID],
			@uspsRefundFormID = [RefundFormID]
		FROM dbo.[v2m_UspsShipments]
		WHERE [ShipmentID] = @sShipmentID
		    
		-- check for Interapptive Insurance at the shipment level
		IF (@uspsInsuranceType = 4)
		BEGIN
			-- interapptive insurance
			SET @uspsInsuranceType = 1
		END
		ELSE
		BEGIN
			-- none
			SET @uspsInsuranceType = 0
		END

		EXEC dbo.v2m_ParseName @uspsShipFromContactName, @sFirstName OUT, @sMiddleName OUT, @sLastName OUT

		-- set the base Shipment origin values
		SET @tOriginFirstName = @sFirstName
		SET @tOriginMiddleName = @sMiddleName
		SET @tOriginLastName = @sLastName
		SET @tOriginCompany = @uspsShipFromCompany
		SET @tOriginStreet1 = @uspsShipFromAddress1
		SET @tOriginStreet2 = @uspsShipFromAddress2
		SET @tOriginStreet3 = @uspsShipFromAddress3
		SET @tOriginCity = @uspsShipFromCity
		SET @tOriginStateProvCode = @uspsShipFromStateProvinceCode
		SET @tOriginPostalCode = @uspsShipFromPostalCode
		SET @tOriginCountryCode = 'US'
		SET @tOriginPhone = ''
		SET @tOriginFax = ''
		SET @tOriginEmail = ''
		SET @tCustomsValue = @uspsDeclaredValue

		-- V3 Database limits customs description to 50 characters
		IF LEN(@uspsCustomsDescription) > 50
		BEGIN
			SET @uspsCustomsDescription = SUBSTRING(@uspsCustomsDescription, 0, 50)
		END

		-- Postal	
		INSERT INTO {MASTERDATABASE}.dbo.PostalShipment  (
			    [ShipmentID],
			    [Service],
			    [Confirmation],
			    [PackagingType],
			    [DimsProfileID],
			    [DimsLength],
			    [DimsWidth],
			    [DimsHeight],
			    [DimsWeight],
			    [DimsAddWeight],
			    [NonRectangular],
			    [NonMachinable],
			    [CustomsContentType],
			    [CustomsContentDescription],
			    [InsuranceType],
			    [InsuranceValue]
			)
			VALUES
			(
			    @newShipmentKey,
			    @uspsServiceType,
			    @uspsConfirmationType,
				CASE 
					WHEN @sShipmentType = 8 THEN @uspsPackagingType		-- V2 Label Server used the same packaging codes as V3
					ELSE dbo.v2m_TranslateUspsPackageTypeCode(@uspsPackagingType)
				END,
			    0, -- DIMS Profile
			    @uspsLength,
			    @uspsWidth,
			    @uspsDepth,
			    0,	-- Weight
			    0,	-- Add Extra weight
			    0,	-- NonRectangular
			    @uspsNonMachinable,
			    @uspsCustomsContentType,
			    @uspsCustomsDescription,
			    @uspsInsuranceType,
			    @uspsDeclaredValue
			)             
			    
		-- Endicia  (DAZzle or LabelServer or Express1)
		IF (@sShipmentType = 2 OR @sShipmentType = 8 OR @sShipmentType = 9)
		BEGIN
			INSERT INTO {MASTERDATABASE}.dbo.EndiciaShipment  (
			    [ShipmentID],
			    [EndiciaAccountID],
			    [StealthPostage],
			    [NoPostage],
			    [ReferenceID],
			    [RubberStamp1],
			    [RubberStamp2],
			    [RubberStamp3],
			    [TransactionID],
			    [RefundFormID],
			    [ScanFormID]
			)
			VALUES
			(
			    @newShipmentKey,
				COALESCE(dbo.v2m_TranslateKeyGlobal(@uspsShipFromEndiciaShipperID, 12 /* endicia */), 0), -- EndiciaAccountID
			    @uspsStealth,
			    0, -- No Postage
			    @uspsReferenceID,
			    @uspsRubberStamp1,
			    @uspsRubberStamp2,
			    @uspsRubberStamp3,
			    @uspsEndiciaTransactionID,	
			    @uspsRefundFormID,	
			    @uspsScanFormID	
			)             
		END
			
		-- Stamps
		IF (@sShipmentType = 3)
		BEGIN
			INSERT INTO {MASTERDATABASE}.dbo.StampsShipment  (
			    [ShipmentID],
			    [StampsAccountID],
			    [HidePostage],
			    [IntegratorTransactionID],
			    [StampsTransactionID]
			)
			VALUES
			(
			    @newShipmentKey,
			    0, -- USpsStampsAccountID - there are no stamps.com accounts here
			    0,
			    '00000000-0000-0000-0000-000000000000',
			    '00000000-0000-0000-0000-000000000000'
			)             
		END
			
		-- Download
		--IF (@sShipmentType = 4)
		--BEGIN
			
		--END

	END
		
	--------------------------------------------------------------------------------------------------------------------------------
	-- Custom/Other Shipment
	--------------------------------------------------------------------------------------------------------------------------------
	IF (@sShipmentType = 5)
	BEGIN
		SET @orderValue = 0

		IF @sInsured > 0 
		BEGIN

			SELECT @orderValue = COALESCE(SUM(i.Quantity * (i.UnitPrice + a.attribSum)), 0) 
			FROM {MASTERDATABASE}.dbo.OrderItem i,
				(SELECT a.orderitemid, SUM(UnitPrice) attribSum FROM {MASTERDATABASE}.dbo.OrderItemAttribute a
				WHERE a.OrderItemID in (SELECT orderitemid FROM {MASTERDATABASE}.dbo.OrderItem WHERE OrderID = @newOrderKey)
				group by a.OrderItemID)  a
			WHERE
				i.OrderItemID = a.OrderItemID
				AND i.OrderID = @newOrderKey
		END

			
		-- custom shipments go into OtherShipment table
		INSERT INTO {MASTERDATABASE}.dbo.OtherShipment  (
		    [ShipmentID],
		    [Carrier],
		    [Service],
		    [InsuranceType],
		    [InsuranceValue]
		)
		VALUES
		(
		    @newShipmentKey,
		    'OTHER',
		    @sServiceUsed,
		    @sInsured,
			@orderValue -- InsuranceValue 
		)             
	END
		
	--------------------------------------------------------------------------------------------------------------------------------
	-- FedEx Shipment
	--------------------------------------------------------------------------------------------------------------------------------
	IF (@sShipmentType = 6)
	BEGIN
		-- FedEx		
		print 'FedEx'
			
		DECLARE
			@fedInsuranceType int,
			@fedSkidCountSum int
				
		SET @fedInsuranceType = 0 --InsuranceType.None
		SET @fedSkidCountSum = 0

		-- source table variables
		DECLARE
			@fedShipmentID int, 
			@fedRowVersion timestamp, 
			@fedReferenceNumber nvarchar(50), 
			@fedServiceType smallint, 
			@fedPackagingType smallint, 
			@fedGroundClosedID int, 
			@fedArrivalDate datetime, 
			@fedLabelType smallint, 
			@fedFormID varchar(4), 
			@fedPayorType smallint, 
			@fedPayorAccountNumber nvarchar(12), 
			@fedDutiesPayorType smallint, 
			@fedDutiesPayorAccountNumber nvarchar(12), 
			@fedFreightInsidePickup bit, 
			@fedFreightInsideDelivery bit, 
			@fedFreightBookingNumber varchar(12), 
			@fedSaturdayPickup bit, 
			@fedSaturdayDelivery bit, 
			@fedSignatureOption int, 
			@fedNonStandardContainer bit, 
			@fedHomeDeliveryType int, 
			@fedHomeDeliveryInstructions varchar(74), 
			@fedHomeDeliveryDate datetime, 
			@fedHomeDeliveryPhone varchar(16), 
			@fedShipAlertRecipientAddress nvarchar(35), 
			@fedShipAlertRecipientShip bit, 
			@fedShipAlertRecipientDelivery bit, 
			@fedShipAlertSenderShip bit, 
			@fedShipAlertSenderDelivery bit, 
			@fedShipAlertOther1Address nvarchar(120), 
			@fedShipAlertOther1Ship bit, 
			@fedShipAlertOther1Delivery bit, 
			@fedShipAlertExpressMessage nvarchar(75), 
			@fedShipAlertGroundEnable bit, 
			@fedShipAlertGroundAddress nvarchar(35), 
			@fedShipAlertGroundMessage nvarchar(75), 
			@fedCodEnable bit, 
			@fedCodAmount money, 
			@fedCodType int, 
			@fedCodAddFreight bit, 
			@fedCodReturnContactName nvarchar(35), 
			@fedCodReturnCompany nvarchar(35), 
			@fedCodReturnAddress1 nvarchar(35), 
			@fedCodReturnAddress2 nvarchar(35), 
			@fedCodReturnCity nvarchar(35), 
			@fedCodReturnStateProvinceCode nvarchar(2), 
			@fedCodReturnPostalCode nvarchar(16), 
			@fedCodReturnPhone nvarchar(16), 
			@fedCodReturnLabelPath nvarchar(350), 
			@fedBrokerEnable bit, 
			@fedBrokerAccount nvarchar(12), 
			@fedBrokerContactName nvarchar(35), 
			@fedBrokerCompany nvarchar(35), 
			@fedBrokerAddress1 nvarchar(35), 
			@fedBrokerAddress2 nvarchar(35), 
			@fedBrokerCity nvarchar(35), 
			@fedBrokerStateProvinceCode nvarchar(2), 
			@fedBrokerPostalCode nvarchar(16), 
			@fedBrokerPhone nvarchar(16), 
			@fedCustomsDocuments bit, 
			@fedCustomsDocumentsDescription varchar(50), 
			@fedCustomsRecipientTIN varchar(15), 
			@fedCustomsTermsOfSale int, 
			@fedCustomsRelatedParties bit, 
			@fedCustomsNafta bit, 
			@fedCustomsTotalValue money, 
			@fedCustomsCanadaPackageType int, 
			@fedCommercialInvoiceEnabled bit, 
			@fedCommercialInvoiceComments nvarchar(200), 
			@fedCommercialInvoiceFreight money, 
			@fedCommercialInvoiceInsurance money, 
			@fedCommercialInvoiceAdditional money, 
			@fedCommercialInvoicePurpose int, 
			@fedSedRequired bit, 
			@fedSedID varchar(15), 
			@fedSedIDType int, 
			@fedSedUseExemption bit, 
			@fedSedExemption varchar(32), 
			@fedAdmissibilityPackaging int, 
			@fedImporterDifferent bit, 
			@fedImporterAccount nvarchar(12), 
			@fedImporterTIN nvarchar(15), 
			@fedImporterContactName nvarchar(35), 
			@fedImporterCompany nvarchar(35), 
			@fedImporterAddress1 nvarchar(35), 
			@fedImporterAddress2 nvarchar(35), 
			@fedImporterCity nvarchar(35), 
			@fedImporterStateProvinceCode nvarchar(2), 
			@fedImporterPostalCode nvarchar(16), 
			@fedImporterCountryCode nvarchar(16), 
			@fedImporterPhone nvarchar(16), 
			@fedShipToResidential bit, 
			@fedShipFromShipperID int, 
			@fedShipFromContactName nvarchar(30), 
			@fedShipFromCompany nvarchar(30), 
			@fedShipFromAddress1 nvarchar(60), 
			@fedShipFromAddress2 nvarchar(60), 
			@fedShipFromCity nvarchar(50), 
			@fedShipFromStateProvinceCode nvarchar(5), 
			@fedShipFromPostalCode nvarchar(10), 
			@fedShipFromCountryCode nvarchar(5), 
			@fedShipFromContactEmail nvarchar(35), 
			@fedShipFromContactPhone nvarchar(25), 
			@fedShipFromContactFax nvarchar(25) 

		SELECT 
			@fedShipmentID = [ShipmentID],       
			@fedRowVersion = [RowVersion],       
			@fedReferenceNumber = [ReferenceNumber],       
			@fedServiceType = [ServiceType],       
			@fedPackagingType = [PackagingType],       
			@fedGroundClosedID = [GroundClosedID],       
			@fedArrivalDate = [ArrivalDate],       
			@fedLabelType = [LabelType],       
			@fedFormID = [FormID],       
			@fedPayorType = [PayorType],       
			@fedPayorAccountNumber = [PayorAccountNumber],       
			@fedDutiesPayorType = [DutiesPayorType],       
			@fedDutiesPayorAccountNumber = [DutiesPayorAccountNumber],       
			@fedFreightInsidePickup = [FreightInsidePickup],       
			@fedFreightInsideDelivery = [FreightInsideDelivery],       
			@fedFreightBookingNumber = [FreightBookingNumber],       
			@fedSaturdayPickup = [SaturdayPickup],       
			@fedSaturdayDelivery = [SaturdayDelivery],       
			@fedSignatureOption = [SignatureOption],       
			@fedNonStandardContainer = [NonStandardContainer],       
			@fedHomeDeliveryType = [HomeDeliveryType],       
			@fedHomeDeliveryInstructions = [HomeDeliveryInstructions],       
			@fedHomeDeliveryDate = [HomeDeliveryDate],       
			@fedHomeDeliveryPhone = [HomeDeliveryPhone],       
			@fedShipAlertRecipientAddress = [ShipAlertRecipientAddress],       
			@fedShipAlertRecipientShip = [ShipAlertRecipientShip],       
			@fedShipAlertRecipientDelivery = [ShipAlertRecipientDelivery],       
			@fedShipAlertSenderShip = [ShipAlertSenderShip],       
			@fedShipAlertSenderDelivery = [ShipAlertSenderDelivery],       
			@fedShipAlertOther1Address = [ShipAlertOther1Address],       
			@fedShipAlertOther1Ship = [ShipAlertOther1Ship],       
			@fedShipAlertOther1Delivery = [ShipAlertOther1Delivery],       
			@fedShipAlertExpressMessage = [ShipAlertExpressMessage],       
			@fedShipAlertGroundEnable = [ShipAlertGroundEnable],       
			@fedShipAlertGroundAddress = [ShipAlertGroundAddress],       
			@fedShipAlertGroundMessage = [ShipAlertGroundMessage],       
			@fedCodEnable = [CodEnable],       
			@fedCodAmount = [CodAmount],       
			@fedCodType = [CodType],       
			@fedCodAddFreight = [CodAddFreight],       
			@fedCodReturnContactName = [CodReturnContactName],       
			@fedCodReturnCompany = [CodReturnCompany],       
			@fedCodReturnAddress1 = [CodReturnAddress1],       
			@fedCodReturnAddress2 = [CodReturnAddress2],       
			@fedCodReturnCity = [CodReturnCity],       
			@fedCodReturnStateProvinceCode = [CodReturnStateProvinceCode],       
			@fedCodReturnPostalCode = [CodReturnPostalCode],       
			@fedCodReturnPhone = [CodReturnPhone],       
			@fedCodReturnLabelPath = [CodReturnLabelPath],       
			@fedBrokerEnable = [BrokerEnable],       
			@fedBrokerAccount = [BrokerAccount],       
			@fedBrokerContactName = [BrokerContactName],       
			@fedBrokerCompany = [BrokerCompany],       
			@fedBrokerAddress1 = [BrokerAddress1],       
			@fedBrokerAddress2 = [BrokerAddress2],       
			@fedBrokerCity = [BrokerCity],       
			@fedBrokerStateProvinceCode = [BrokerStateProvinceCode],       
			@fedBrokerPostalCode = [BrokerPostalCode],       
			@fedBrokerPhone = [BrokerPhone],       
			@fedCustomsDocuments = [CustomsDocuments],       
			@fedCustomsDocumentsDescription = [CustomsDocumentsDescription],       
			@fedCustomsRecipientTIN = [CustomsRecipientTIN],       
			@fedCustomsTermsOfSale = [CustomsTermsOfSale],       
			@fedCustomsRelatedParties = [CustomsRelatedParties],       
			@fedCustomsNafta = [CustomsNafta],       
			@fedCustomsTotalValue = [CustomsTotalValue],       
			@fedCustomsCanadaPackageType = [CustomsCanadaPackageType],       
			@fedCommercialInvoiceEnabled = [CommercialInvoiceEnabled],       
			@fedCommercialInvoiceComments = [CommercialInvoiceComments],       
			@fedCommercialInvoiceFreight = [CommercialInvoiceFreight],       
			@fedCommercialInvoiceInsurance = [CommercialInvoiceInsurance],       
			@fedCommercialInvoiceAdditional = [CommercialInvoiceAdditional],       
			@fedCommercialInvoicePurpose = [CommercialInvoicePurpose],       
			@fedSedRequired = [SedRequired],       
			@fedSedID = [SedID],       
			@fedSedIDType = [SedIDType],       
			@fedSedUseExemption = [SedUseExemption],       
			@fedSedExemption = [SedExemption],       
			@fedAdmissibilityPackaging = [AdmissibilityPackaging],       
			@fedImporterDifferent = [ImporterDifferent],       
			@fedImporterAccount = [ImporterAccount],       
			@fedImporterTIN = [ImporterTIN],       
			@fedImporterContactName = [ImporterContactName],       
			@fedImporterCompany = [ImporterCompany],       
			@fedImporterAddress1 = [ImporterAddress1],       
			@fedImporterAddress2 = [ImporterAddress2],       
			@fedImporterCity = [ImporterCity],       
			@fedImporterStateProvinceCode = [ImporterStateProvinceCode],       
			@fedImporterPostalCode = [ImporterPostalCode],       
			@fedImporterCountryCode = [ImporterCountryCode],       
			@fedImporterPhone = [ImporterPhone],       
			@fedShipToResidential = [ShipToResidential],       
			@fedShipFromShipperID = [ShipFromShipperID],       
			@fedShipFromContactName = [ShipFromContactName],       
			@fedShipFromCompany = [ShipFromCompany],       
			@fedShipFromAddress1 = [ShipFromAddress1],       
			@fedShipFromAddress2 = [ShipFromAddress2],       
			@fedShipFromCity = [ShipFromCity],       
			@fedShipFromStateProvinceCode = [ShipFromStateProvinceCode],       
			@fedShipFromPostalCode = [ShipFromPostalCode],       
			@fedShipFromCountryCode = [ShipFromCountryCode],       
			@fedShipFromContactEmail = [ShipFromContactEmail],       
			@fedShipFromContactPhone = [ShipFromContactPhone],       
			@fedShipFromContactFax = [ShipFromContactFax]       
		FROM dbo.[v2m_FedexShipments]
		WHERE [ShipmentID] = @sShipmentID
			
		SET @fedShipFromShipperID = dbo.v2m_TranslateKeyGlobal(@fedShipFromShipperID, 18 /* fedex shipper*/)
		if (@fedShipFromShipperID IS NULL)
		BEGIN
			SET @fedShipFromShipperID = 0 
		END

		IF (@sInsured = 1)
		BEGIN
			SET @fedInsuranceType = 1
		END
			
		EXEC dbo.v2m_ParseName @fedShipFromContactName, @sFirstName OUT, @sMiddleName OUT, @sLastName OUT

		-- set the base Shipment origin values
		SET @tOriginFirstName = @sFirstName
		SET @tOriginMiddleName = @sMiddleName
		SET @tOriginLastName = @sLastName
		SET @tOriginCompany = @fedShipFromCompany
		SET @tOriginStreet1 = @fedShipFromAddress1
		SET @tOriginStreet2 = @fedShipFromAddress2
		SET @tOriginStreet3 = ''
		SET @tOriginCity = @fedShipFromCity
		SET @tOriginStateProvCode = @fedShipFromStateProvinceCode
		SET @tOriginPostalCode = @fedShipFromPostalCode
		SET @tOriginCountryCode = @fedShipFromCountryCode
		SET @tOriginPhone = @fedShipFromContactPhone
		SET @tOriginFax = @fedShipFromContactFax
		SET @tOriginEmail = @fedShipFromContactEmail
		SET @tCustomsValue = @fedCustomsTotalValue
		SET @tResidentialResult = @fedShipToResidential
			
		-- FedEx Package import loop
		DECLARE
			@fedPkgFedexPackageID int, 
			@fedPkgRowVersion timestamp, 
			@fedPkgShipmentID int, 
			@fedPkgLength int, 
			@fedPkgWidth int, 
			@fedPkgHeight int, 
			@fedPkgWeight float, 
			@fedPkgSkidPieces smallint, 
			@fedPkgDeclaredValue money, 
			@fedPkgTrackingNumber nvarchar(20), 
			@fedPkgLabelImagePath nvarchar(350) 

		-- the cursor for cycling through the source table
		DECLARE fedexCursor CURSOR FORWARD_ONLY FOR
		SELECT 
			    [FedexPackageID],
			    [RowVersion],
			    [ShipmentID],
			    [Length],
			    [Width],
			    [Height],
			    [Weight],
			    [SkidPieces],
			    [DeclaredValue],
			    [TrackingNumber],
			    [LabelImagePath]
			FROM v2m_FedexPackages
			WHERE ShipmentID = @sShipmentID
			    
		-- open the source table cursor
		OPEN fedexCursor

		-- populate source table variables from the source cursor
		FETCH NEXT FROM fedexCursor
		INTO
				@fedPkgFedexPackageID,
				@fedPkgRowVersion,
			    @fedPkgShipmentID,
			    @fedPkgLength,
			    @fedPkgWidth,
			    @fedPkgHeight,
			    @fedPkgWeight,
			    @fedPkgSkidPieces,
			    @fedPkgDeclaredValue,
			    @fedPkgTrackingNumber,
			    @fedPkgLabelImagePath
		WHILE @@FETCH_STATUS = 0
		BEGIN
			
			SET @fedSkidCountSum = @fedSkidCountSum + @fedPkgSkidPieces

			INSERT INTO {MASTERDATABASE}.dbo.FedExPackage  (
			    [ShipmentID],
			    [Weight],
			    [DimsProfileID],
			    [DimsLength],
			    [DimsWidth],
			    [DimsHeight],
			    [DimsWeight],
			    [DimsAddWeight],
			    [SkidPieces],
			    [DeclaredValue],
			    [InsuranceValue],
			    [TrackingNumber]
			)
			VALUES
			(
			    @newShipmentKey,
			    @fedPkgWeight,
			    0,	-- ProfileID
			    @fedPkgLength,
			    @fedPkgWidth,
			    @fedPkgHeight,
			    0, -- Dims weight
			    0,	-- Add Dims weight
			    @fedPkgSkidPieces,
			    @fedPkgDeclaredValue,
			    @fedPkgDeclaredValue,	-- insurance value
			    @fedPkgTrackingNumber
			)             
			    
			-- need to do further processing on them
			EXEC dbo.v2m_RecordKey @fedPkgFedexPackageID, 15 /*fedex package*/, @@IDENTITY

			-- fetch next row from source table
			FETCH NEXT FROM fedexCursor
			INTO
				    @fedPkgFedexPackageID,
				    @fedPkgRowVersion,
				    @fedPkgShipmentID,
				    @fedPkgLength,
				    @fedPkgWidth,
				    @fedPkgHeight,
				    @fedPkgWeight,
				    @fedPkgSkidPieces,
				    @fedPkgDeclaredValue,
				    @fedPkgTrackingNumber,
				    @fedPkgLabelImagePath
		END
			
		-- close and get rid of the cursor
		CLOSE fedexCursor
		DEALLOCATE fedexCursor

		-- fix up the Canada package type
		IF @fedCustomsCanadaPackageType > 6
		BEGIN
			SET @fedCustomsCanadaPackageType = 
			-- note, we're saying a v2 Cage is a v3 Carton
			CASE
				WHEN @fedCustomsCanadaPackageType = 7 THEN 6 -- carton -> carton
				WHEN @fedCustomsCanadaPackageType = 8 THEN 7 -- case -> case
				WHEN @fedCustomsCanadaPackageType = 9 THEN 9 -- chest -> crate
				WHEN @fedCustomsCanadaPackageType = 10 THEN 9 -- chest -> crate
				WHEN @fedCustomsCanadaPackageType = 11 THEN 9 -- crate -> crate
				WHEN @fedCustomsCanadaPackageType = 12 THEN 10 -- cylinder -> cylinder
				WHEN @fedCustomsCanadaPackageType = 13 THEN 11 -- drum -> drum
				WHEN @fedCustomsCanadaPackageType = 14 THEN 12 -- envelope -> envelope
				WHEN @fedCustomsCanadaPackageType = 15 THEN 8 -- package -> container
				WHEN @fedCustomsCanadaPackageType = 16 THEN 15 -- pail -> pail
				WHEN @fedCustomsCanadaPackageType = 17 THEN 16 -- pallet -> pallet
				WHEN @fedCustomsCanadaPackageType = 18 THEN 3 -- parcel -> box
				WHEN @fedCustomsCanadaPackageType = 19 THEN 17 -- pieces -> pieces
				WHEN @fedCustomsCanadaPackageType = 20 THEN 18 -- reel -> reel
				WHEN @fedCustomsCanadaPackageType = 21 THEN 19 -- roll -> roll
				WHEN @fedCustomsCanadaPackageType = 22 THEN 0 -- sack -> bag
				WHEN @fedCustomsCanadaPackageType = 23 THEN 14 -- shrinkwrapped -> other
				WHEN @fedCustomsCanadaPackageType = 24 THEN 20 -- skid -> skid
				WHEN @fedCustomsCanadaPackageType = 25 THEN 21 -- tank -> tank
				WHEN @fedCustomsCanadaPackageType = 26 THEN 6 -- totebin -> carton
				WHEN @fedCustomsCanadaPackageType = 27 THEN 22 -- tube -> tube
				WHEN @fedCustomsCanadaPackageType = 28 THEN 14 -- unit -> other
				ELSE 14 -- other
			END
		END
			
		INSERT INTO {MASTERDATABASE}.dbo.FedExShipment  (
			[ShipmentID],
			[FedExAccountID],
			[MasterFormID],
			[Service],
			[Signature],
			[PackagingType],
			[NonStandardContainer],
			[ReferenceCustomer],
			[ReferenceInvoice],
			[ReferencePO],
			[PayorTransportType],
			[PayorTransportAccount],
			[PayorDutiesType],
			[PayorDutiesAccount],
			[SaturdayDelivery],
			[HomeDeliveryType],
			[HomeDeliveryInstructions],
			[HomeDeliveryDate],
			[HomeDeliveryPhone],
			[FreightInsidePickup],
			[FreightInsideDelivery],
			[FreightBookingNumber],
			[FreightLoadAndCount],
			[EmailNotifySender],
			[EmailNotifyRecipient],
			[EmailNotifyOther],
			[EmailNotifyOtherAddress],
			[EmailNotifyMessage],
			[CodEnabled],
			[CodAmount],
			[CodPaymentType],
			[CodAddFreight],
			[CodOriginID],
			[CodFirstName],
			[CodLastName],
			[CodCompany],
			[CodStreet1],
			[CodStreet2],
			[CodStreet3],
			[CodCity],
			[CodStateProvCode],
			[CodPostalCode],
			[CodPhone],
			[CodTrackingNumber],
			[CodTrackingFormID],
			[BrokerEnabled],
			[BrokerAccount],
			[BrokerFirstName],
			[BrokerLastName],
			[BrokerCompany],
			[BrokerStreet1],
			[BrokerStreet2],
			[BrokerStreet3],
			[BrokerCity],
			[BrokerStateProvCode],
			[BrokerPostalCode],
			[BrokerCountryCode],
			[BrokerPhone],
			[CustomsAdmissibilityPackaging],
			[CustomsRecipientTIN],
			[CustomsDocumentsOnly],
			[CustomsDocumentsDescription],
			[CommercialInvoice],
			[CommercialInvoiceTermsOfSale],
			[CommercialInvoicePurpose],
			[CommercialInvoiceComments],
			[CommercialInvoiceFreight],
			[CommercialInvoiceInsurance],
			[CommercialInvoiceOther],
			[ImporterOfRecord],
			[ImporterAccount],
			[ImporterTIN],
			[ImporterFirstName],
			[ImporterLastName],
			[ImporterCompany],
			[ImporterStreet1],
			[ImporterStreet2],
			[ImporterStreet3],
			[ImporterCity],
			[ImporterStateProvCode],
			[ImporterPostalCode],
			[ImporterCountryCode],
			[ImporterPhone],
			[InsuranceType],
			[SmartPostIndicia],
			[SmartPostEndorsement],
			[SmartPostConfirmation],
			[SmartPostCustomerManifest],
			[SmartPostHubID]
		)
		VALUES
		(
			@newShipmentKey,
			@fedShipFromShipperID, -- Fedex Account ID
			@fedFormID,
			@fedServicetype,
			@fedSignatureOption,
			@fedPackagingType,
			@fedNonStandardContainer,
			@fedReferenceNumber, -- ReferenceCustomer
			'',					 -- ReferenceInvoice
			'',					 -- ReferencePO
			@fedPayorType,
			@fedPayorAccountNumber,
			@fedDutiesPayorType,
			@fedDutiesPayorAccountNumber,
			@fedSaturdayDelivery,
			@fedHomeDeliveryType,
			@fedHomeDeliveryInstructions,
			@fedHomeDeliveryDate,
			@fedHomeDeliveryPhone,
			@fedFreightInsidePickup,
			@fedFreightInsideDelivery,
			@fedFreightBookingNumber,
			@fedSkidCountSum,	-- Fright Load and Count.  Sum of package Skid Count
			(@fedShipAlertSenderShip * 1) + (@fedShipAlertSenderDelivery * 4),
			(@fedShipAlertRecipientShip * 1) + (@fedShipAlertRecipientDelivery * 4),
			(@fedShipAlertOther1Ship * 1) + (@fedShipAlertOther1Delivery * 4),
			@fedShipAlertOther1Address,
			CASE 
				WHEN @fedShipAlertGroundEnable = 1 THEN @fedShipAlertGroundMessage
				ELSE @fedShipAlertExpressMessage
			END,
			@fedCodEnable,
			@fedCodAmount,
			@fedCodType,
			@fedCodAddFreight,
			0,	-- COD Origin ID, nonexistent in 2
			@fedCodReturnContactName,
			'',	-- COD Last Name
			@fedCodReturnCompany,
			@fedCodReturnAddress1,
			@fedCodReturnAddress2,
			'', -- COD return address 3
			@fedCodReturnCity,
			@fedCodReturnStateProvinceCode,
			@fedCodReturnPostalCode,
			@fedCodReturnPhone,
			'',	-- COD Tracking
			0,  -- COD form id
			@fedBrokerEnable,
			@fedBrokerAccount,
			@fedBrokerContactName,
			'', -- Broker last name
			@fedBrokerCompany,
			@fedBrokerAddress1,
			@fedBrokerAddress2,
			'', -- Broker Street 3
			@fedBrokerCity,
			@fedBrokerStateProvinceCode,
			@fedBrokerPostalCode,
			'US', -- Broker Country Code
			@fedBrokerPhone,
			@fedCustomsCanadaPackageType,
			@fedCustomsRecipientTIN,
			@fedCustomsDocuments,
			@fedCustomsDocumentsDescription,
			@fedCommercialInvoiceEnabled,
			@fedCustomsTermsOfSale,
			@fedCommercialInvoicePurpose,
			@fedCommercialInvoiceComments,
			@fedCommercialInvoiceFreight,
			@fedCommercialInvoiceInsurance,
			@fedCommercialInvoiceAdditional,
			@fedImporterDifferent,
			@fedImporterAccount,
			@fedImporterTIN,
			@fedImporterContactName,
			'',	-- importer last name
			@fedImporterCompany,
			@fedImporterAddress1,
			@fedImporterAddress2,
			'',
			@fedImporterCity,
			@fedImporterStateProvinceCode,
			@fedImporterPostalCode,
			@fedImporterCountryCode,
			@fedImporterPhone,
			@fedInsuranceType,
			0, -- SmartPostIndicia.ParcelSelect
			0, -- SmartPostEndorsement.None
			0, -- SmartPostConfirmation
			'', -- SmartPostConsumerManifest
			0 -- SmartPostHubID
		)             
		 
		-- DELETE the old Ups shipment
		DELETE FROM dbo.v2m_FedExShipments WHERE ShipmentID = @sShipmentID
	END
		
	--------------------------------------------------------------------------------------------------------------------------------
	-- DHL Shipment - may attach a note with some more of the v2 shipping details since DHL doesn't exist in v3
	--------------------------------------------------------------------------------------------------------------------------------
	IF (@sShipmentType = 7)
	BEGIN
		DECLARE
			@dhlShipmentID int, 
			@dhlRowVersion timestamp, 
			@dhlServiceType smallint, 
			@dhlHoldForPickup bit, 
			@dhlHazardousMaterial bit, 
			@dhlLeaveAtDoor bit, 
			@dhlReturnService bit, 
			@dhlCodType smallint, 
			@dhlCodAmount money, 
			@dhlProtectionType smallint, 
			@dhlDhlEmailRecipient bit, 
			@dhlDhlEmailOtherEnable bit, 
			@dhlDhlEmailOtherAddress nvarchar(35), 
			@dhlDhlEmailMessage nvarchar(255), 
			@dhlShipToResidential bit, 
			@dhlShipFromShipperID int, 
			@dhlShipFromContactName nvarchar(30), 
			@dhlShipFromContactCompany nvarchar(30), 
			@dhlShipFromAddress1 nvarchar(60), 
			@dhlShipFromAddress2 nvarchar(60), 
			@dhlShipFromCity nvarchar(50), 
			@dhlShipFromStateProvinceCode nvarchar(5), 
			@dhlShipFromPostalCode nvarchar(10), 
			@dhlShipFromCountryCode nvarchar(5), 
			@dhlShipFromContactEmail nvarchar(35), 
			@dhlShipFromContactPhone nvarchar(25), 
			@dhlShipFromContactFax nvarchar(25), 
			@dhlPackageType smallint, 
			@dhlLength int, 
			@dhlWidth int, 
			@dhlHeight int, 
			@dhlLabelImagePortrait nvarchar(350), 
			@dhlReferenceText nvarchar(25), 
			@dhlDescription nvarchar(50), 
			@dhlEmployerIDNumber nvarchar(9), 
			@dhlBillingCode smallint, 
			@dhlBillingAccountNumber nvarchar(11), 
			@dhlDutyPaymentCode smallint, 
			@dhlDutyPaymentAccountNumber nvarchar(11), 
			@dhlOverrideZ1 bit, 
			@dhlOverrideZ2 bit, 
			@dhlOverrideES bit, 
			@dhlOverrideRP bit, 
			@dhlDutiable bit, 
			@dhlDeclaredValue money, 
			@dhlOverrideZ5 bit, 
			@dhlCommerceLicensed bit, 
			@dhlDOSFlag bit, 
			@dhlFilingType smallint, 
			@dhlITN nvarchar(15), 
			@dhlFTSRCode nvarchar(15), 
			@dhlLabelImageLandscape nvarchar(350) 
		
		SELECT 
			@dhlShipmentID = [ShipmentID],       
			@dhlRowVersion = [RowVersion],       
			@dhlServiceType = [ServiceType],       
			@dhlHoldForPickup = [HoldForPickup],       
			@dhlHazardousMaterial = [HazardousMaterial],       
			@dhlLeaveAtDoor = [LeaveAtDoor],       
			@dhlReturnService = [ReturnService],       
			@dhlCodType = [CodType],       
			@dhlCodAmount = [CodAmount],       
			@dhlProtectionType = [ProtectionType],       
			@dhlDhlEmailRecipient = [DhlEmailRecipient],       
			@dhlDhlEmailOtherEnable = [DhlEmailOtherEnable],       
			@dhlDhlEmailOtherAddress = [DhlEmailOtherAddress],       
			@dhlDhlEmailMessage = [DhlEmailMessage],       
			@dhlShipToResidential = [ShipToResidential],       
			@dhlShipFromShipperID = [ShipFromShipperID],       
			@dhlShipFromContactName = [ShipFromContactName],       
			@dhlShipFromContactCompany = [ShipFromContactCompany],       
			@dhlShipFromAddress1 = [ShipFromAddress1],       
			@dhlShipFromAddress2 = [ShipFromAddress2],       
			@dhlShipFromCity = [ShipFromCity],       
			@dhlShipFromStateProvinceCode = [ShipFromStateProvinceCode],       
			@dhlShipFromPostalCode = [ShipFromPostalCode],       
			@dhlShipFromCountryCode = [ShipFromCountryCode],       
			@dhlShipFromContactEmail = [ShipFromContactEmail],       
			@dhlShipFromContactPhone = [ShipFromContactPhone],       
			@dhlShipFromContactFax = [ShipFromContactFax],       
			@dhlPackageType = [PackageType],       
			@dhlLength = [Length],       
			@dhlWidth = [Width],       
			@dhlHeight = [Height],       
			@dhlLabelImagePortrait = [LabelImagePortrait],       
			@dhlReferenceText = [ReferenceText],       
			@dhlDescription = [Description],       
			@dhlEmployerIDNumber = [EmployerIDNumber],       
			@dhlBillingCode = [BillingCode],       
			@dhlBillingAccountNumber = [BillingAccountNumber],       
			@dhlDutyPaymentCode = [DutyPaymentCode],       
			@dhlDutyPaymentAccountNumber = [DutyPaymentAccountNumber],       
			@dhlOverrideZ1 = [OverrideZ1],       
			@dhlOverrideZ2 = [OverrideZ2],       
			@dhlOverrideES = [OverrideES],       
			@dhlOverrideRP = [OverrideRP],       
			@dhlDutiable = [Dutiable],       
			@dhlDeclaredValue = [DeclaredValue],       
			@dhlOverrideZ5 = [OverrideZ5],       
			@dhlCommerceLicensed = [CommerceLicensed],       
			@dhlDOSFlag = [DOSFlag],       
			@dhlFilingType = [FilingType],       
			@dhlITN = [ITN],       
			@dhlFTSRCode = [FTSRCode],       
			@dhlLabelImageLandscape = [LabelImageLandscape]       
		FROM dbo.[v2m_DhlShipments]
		WHERE [ShipmentID] = @sShipmentID
		
		-- calculate the order insurance value
		SET @orderValue = 0
		IF @sInsured > 0 
		BEGIN
			SELECT @orderValue = COALESCE(SUM(i.Quantity * (i.UnitPrice + a.attribSum)), 0) 
			FROM {MASTERDATABASE}.dbo.OrderItem i,
				(SELECT a.orderitemid, SUM(UnitPrice) attribSum FROM {MASTERDATABASE}.dbo.OrderItemAttribute a
				WHERE a.OrderItemID in (SELECT orderitemid FROM {MASTERDATABASE}.dbo.OrderItem WHERE OrderID = @newOrderKey)
				group by a.OrderItemID)  a
			WHERE
				i.OrderItemID = a.OrderItemID
				AND i.OrderID = @newOrderKey
		END

		-- DHL
		INSERT INTO {MASTERDATABASE}.dbo.OtherShipment  (
		    [ShipmentID],
		    [Carrier],
		    [Service],
		    [InsuranceType],
		    [InsuranceValue]
		)
		VALUES
		(
		    @newShipmentKey,
		    'DHL',
		    CASE
				WHEN @dhlServiceType = 0 THEN 'Next Day 12:00pm'
				WHEN @dhlServiceType = 1 THEN 'Next Day 10:30am'
				WHEN @dhlServiceType = 2 THEN 'Next Day 3:00pm'
				WHEN @dhlServiceType = 3 THEN 'Express Saturday'
				WHEN @dhlServiceType = 4 THEN '2nd Day'
				WHEN @dhlServiceType = 5 THEN 'Ground'  
				WHEN @dhlServiceType = 6 THEN '@home Standard/Second Day'
				WHEN @dhlServiceType = 7 THEN '@home Deferred/Ground Delivery'
				WHEN @dhlServiceType = 8 THEN 'International Express'
				ELSE 'DHL'
		    END,
		    @sInsured,
		    @orderValue -- Insurance Value
		)         
	END
		
	-- update the original shipment with the origin data.  Skip if this shipment is a Custom/Other shipment
	IF (@sShipmentType <> 5)
	BEGIN
		UPDATE {MASTERDATABASE}.dbo.Shipment
		SET
			[CustomsValue] = @tCustomsValue,
			[OriginFirstName] = @tOriginFirstName,
			[OriginMiddleName] = @tOriginMiddleName,
			[OriginLastName] = @tOriginLastName,
			[OriginCompany] = @tOriginCompany,
			[OriginStreet1] = @tOriginStreet1,
			[OriginStreet2] = @tOriginStreet2,
			[OriginStreet3] = @tOriginStreet3,
			[OriginCity] = @tOriginCity,
			[OriginStateProvCode] = @tOriginStateProvCode,
			[OriginPostalCode] = @tOriginPostalCode,
			[OriginCountryCode] = @tOriginCountryCode,
			[OriginPhone] = @tOriginPhone,
			[OriginFax] = @tOriginFax,
			[OriginEmail] = @tOriginEmail,
			[OriginWebsite] = @tOriginWebsite,
			[ResidentialResult] = @tResidentialResult,
			[ThermalType] = @tThermalType
		WHERE [ShipmentID] = @newShipmentKey
	END	
	
SKIP_SHIPMENT:

	-- delete the old shipment
	DELETE FROM v2m_Shipments Where ShipmentID = @sShipmentID

-- fetch next row from source table
FETCH NEXT FROM workCursor
INTO
    @sShipmentID,
    @sRowVersion,
    @sStoreID,
    @sOrderID,
    @sCustomerID,
    @sShipmentType,
    @sProcessed,
    @sProcessedDate,
    @sShippedDate,
    @sVoided,
    @sVoidedDate,
    @sServiceUsed,
    @sTrackingNumber,
    @sNotes,
    @sCommoditiesCreated,
    @sTotalCharges,
    @sTotalWeight,
    @sToFirstName,
    @sToLastName,
    @sToCompany,
    @sToAddress1,
    @sToAddress2,
    @sToAddress3,
    @sToCity,
    @sToStateProvinceCode,
    @sToPostalCode,
    @sToCountryCode,
    @sToPhone,
    @sToFax,
    @sToEmail,
    @sInsured,
    @sInsuredCost
END
CLOSE workCursor
DEALLOCATE workCursor

-- data migration "protocol" demands we return the number of rows/work completed
SELECT @workCounter as WorkCompleted

--ROLLBACK TRANSACTION
--commit transaction
