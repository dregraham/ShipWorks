
-- ShipWorks V2 to V3 Database Migration Script, generated by CodeSmith
-- For table v2m_Stores

-- operational variables
DECLARE 
    @workCounter int,
    @newStoreKey bigint

-- source table variables
DECLARE
    -- @MasterDatabase will be generated at runtime
    -- @IsArchive will be generated at runtime    
    @sStoreID int, 
    @sRowVersion timestamp, 
    @sStoreType int, 
    @sStoreName nvarchar(75), 
    @sLicenseKey nvarchar(150), 
    @sCompanyName nvarchar(60), 
    @sCompanyAddress1 nvarchar(60), 
    @sCompanyAddress2 nvarchar(60), 
    @sCompanyAddress3 nvarchar(60), 
    @sCompanyCity nvarchar(50), 
    @sCompanyStateProvCode nvarchar(5), 
    @sCompanyPostalCode nvarchar(10), 
    @sCompanyCountryCode nvarchar(5), 
    @sCompanyUrl nvarchar(150), 
    @sCompanyFax nvarchar(50), 
    @sCompanyPhone nvarchar(50), 
    @sCompanyEmail nvarchar(50), 
    @sCompanyLogo nvarchar(300), 
    @sLastUpdateTime datetime, 
    @sDownloadAddressCasing bit, 
    @sEmailDefaultAccountID int, 
    @sEmailLogSaveMessage bit, 
    @sEmailLogSaveMessageImages bit, 
    @sFilterLayout varchar(max), 
    @sOrderStatusStrings nvarchar(500), 
    @sItemStatusStrings nvarchar(500), 
    @sOrderNumberPrefix nvarchar(10), 
    @sOrderNumberPostfix nvarchar(10), 
    @sStoreUsername nvarchar(50), 
    @sStorePassword nvarchar(80), 
    @sStoreSavePassword bit, 
    @sMivaPassphrase nvarchar(50), 
    @sMivaSiteID nchar, 
    @sMivaModuleUrl nvarchar(300), 
    @sMivaStoreCode nvarchar(50), 
    @sMivaConnectSecure bit, 
    @sMivaRemovedDeletedBatches bit, 
    @sMivaSebenzaExtraMsg bit, 
    @sMivaLiveManualOrderNumbers bit, 
    @sMivaStatusCodes varchar(max), 
    @sMivaSebenzaOrderStatus bit, 
    @sMivaSebenzaOrderStatusEmail bit, 
    @seBayUserID nvarchar(50), 
    @seBayToken varchar(max), 
    @seBayTokenExpire datetime, 
    @seBayDownloadItemDetails bit, 
    @seBayDownloadPayPalDetails bit, 
    @sPayPalApiUsername nvarchar(80), 
    @sPayPalApiPassword nvarchar(80), 
    @sPayPalApiSignature nvarchar(80), 
    @sPayPalApiCredentialType smallint, 
    @sShopSiteCgiUrl nvarchar(300), 
    @sShopSiteConnectSecure bit, 
    @sShopSiteTimeZoneID smallint, 
    @sYahooPopServer nvarchar(150), 
    @sYahooTrackingEmailAccountID int, 
    @sYahooTrackingEmailPassword varchar(30), 
    @sMarketWorksAccountType smallint, 
    @sMarketWorksDownloadFlags int, 
    @sosCommerceModuleUrl nvarchar(300), 
    @sosCommerceStatusCodes varchar(max), 
    @sProStoresStoreName varchar(30), 
    @sProStoresAdminUrl varchar(100), 
    @sProStoresXteUrl varchar(75), 
    @sProStoresPrefix varchar(30), 
    @sProStoresApiEntryPoint nvarchar(300), 
    @sProStoresApiXml nvarchar(300), 
    @sProStoresApiRestSecure nvarchar(300), 
    @sProStoresApiScriptSuffix nvarchar(50), 
    @sProStoresApiToken varchar(max), 
    @sChannelAdvisorProfileID int, 
    @sChannelAdvisorTimeZone int, 
    @sChannelAdvisorTimeZoneDst bit, 
    @sChannelAdvisorLastReportTime datetime, 
    @sChannelAdvisorXmlApiUsername varchar(50), 
    @sChannelAdvisorXmlApiPassword varchar(50), 
    @sChannelAdvisorDateFormat varchar(20), 
    @sChannelAdvisorWeightUnit smallint, 
    @sChannelAdvisorAccountKey varchar(50), 
    @sInfopiaToken varchar(128), 
    @sAmazonMerchantName varchar(64), 
    @sAmazonMerchantToken varchar(32), 
    @sAmazonAccessKeyID varchar(32), 
    @sAmazonCertificateName varchar(32), 
    @sAmazonCookie varchar(max), 
    @sAmazonCookieExpires datetime, 
    @sAmazonCookieWaitUntil datetime, 
    @sAmazonPublicKey varchar(max), 
    @sAmazonPrivateKey varchar(max), 
    @sAmazonWeightDownloads varchar(max), 
    @sXCartModuleUrl nvarchar(300), 
    @sXCartStatusCodes varchar(max), 
    @sOrderMotionPopServer nvarchar(150), 
    @sOrderMotionBizID varchar(max), 
    @sOrderMotionUrl nvarchar(300), 
    @sClickCartProUrl nvarchar(300), 
    @sClickCartProStatusCodes varchar(max), 
    @sPayPalLastTransactionDate datetime, 
    @sVolusionUrl nvarchar(300), 
    @sVolusionEncryptedPassword nvarchar(100), 
    @sVolusionPaymentMethods nvarchar(max), 
    @sVolusionShippingMethods nvarchar(max), 
    @sVolusionTimeZone int, 
    @sVolusionTimeZoneDst bit, 
    @sNetworkSolutionsUserToken varchar(50), 
    @sNetworkSolutionsStatusCodes varchar(max), 
    @sNetworkSolutionsDownloadStatus int, 
    @sMagentoModuleUrl nvarchar(300), 
    @sMagentoStatusCodes varchar(max), 
    @sMagentoStoreCode varchar(20), 
    @sMagentoTrackingEmails bit, 
    @sOrderDynamicsLicense varchar(40), 
    @sAuctionSoundClient varchar(20), 
    @sAmeriCommerceUrl varchar(300), 
    @sAmeriCommerceStatusCodes varchar(max), 
    @sAmeriCommerceStoreID int, 
    @sCommerceInterfaceUrl varchar(300), 
    @sCommerceInterfaceStatusCodes varchar(max) 


-- target table variables
DECLARE
    @tStoreID bigint, 
    @tRowVersion timestamp, 
    @tLicense nvarchar(150), 
    @tTypeCode int, 
    @tStoreName nvarchar(75), 
    @tCompany nvarchar(60), 
    @tStreet1 nvarchar(60), 
    @tStreet2 nvarchar(60), 
    @tStreet3 nvarchar(60), 
    @tCity nvarchar(50), 
    @tStateProvCode nvarchar(50), 
    @tPostalCode nvarchar(20), 
    @tCountryCode nvarchar(50), 
    @tPhone nvarchar(25), 
    @tFax nvarchar(35), 
    @tEmail nvarchar(50), 
    @tWebsite nvarchar(50), 
    @tIsSetupComplete bit, 
    @tAutoDownload bit, 
    @tAutoDownloadMinutes int, 
    @tAutoDownloadOnlyAway bit, 
    @tDefaultEmailAccountID bigint, 
    @tManualOrderPrefix nvarchar(10), 
    @tManualOrderPostfix nvarchar(10), 
    @tInitialDownloadDays int, 
    @tInitialDownloadOrder bigint 


-- Track Progress
SET @workCounter = 0

-- the cursor for cycling through the source table
DECLARE workCursor CURSOR FORWARD_ONLY FOR
SELECT TOP 1
    [StoreID],
    [RowVersion],
    [StoreType],
    [StoreName],
    [LicenseKey],
    [CompanyName],
    [CompanyAddress1],
    [CompanyAddress2],
    [CompanyAddress3],
    [CompanyCity],
    [CompanyStateProvCode],
    [CompanyPostalCode],
    [CompanyCountryCode],
    [CompanyUrl],
    [CompanyFax],
    [CompanyPhone],
    [CompanyEmail],
    [CompanyLogo],
    [LastUpdateTime],
    [DownloadAddressCasing],
    [EmailDefaultAccountID],
    [EmailLogSaveMessage],
    [EmailLogSaveMessageImages],
    [FilterLayout],
    [OrderStatusStrings],
    [ItemStatusStrings],
    [OrderNumberPrefix],
    [OrderNumberPostfix],
    [StoreUsername],
    [StorePassword],
    [StoreSavePassword],
    [MivaPassphrase],
    [MivaSiteID],
    [MivaModuleUrl],
    [MivaStoreCode],
    [MivaConnectSecure],
    [MivaRemovedDeletedBatches],
    [MivaSebenzaExtraMsg],
    [MivaLiveManualOrderNumbers],
    [MivaStatusCodes],
    [MivaSebenzaOrderStatus],
    [MivaSebenzaOrderStatusEmail],
    [eBayUserID],
    [eBayToken],
    [eBayTokenExpire],
    [eBayDownloadItemDetails],
    [eBayDownloadPayPalDetails],
    [PayPalApiUsername],
    [PayPalApiPassword],
    [PayPalApiSignature],
    [PayPalApiCredentialType],
    [ShopSiteCgiUrl],
    [ShopSiteConnectSecure],
    [ShopSiteTimeZoneID],
    [YahooPopServer],
    [YahooTrackingEmailAccountID],
    [YahooTrackingEmailPassword],
    [MarketWorksAccountType],
    [MarketWorksDownloadFlags],
    [osCommerceModuleUrl],
    [osCommerceStatusCodes],
    [ProStoresStoreName],
    [ProStoresAdminUrl],
    [ProStoresXteUrl],
    [ProStoresPrefix],
    [ProStoresApiEntryPoint],
    [ProStoresApiXml],
    [ProStoresApiRestSecure],
    [ProStoresApiScriptSuffix],
    [ProStoresApiToken],
    [ChannelAdvisorProfileID],
    [ChannelAdvisorTimeZone],
    [ChannelAdvisorTimeZoneDst],
    [ChannelAdvisorLastReportTime],
    [ChannelAdvisorXmlApiUsername],
    [ChannelAdvisorXmlApiPassword],
    [ChannelAdvisorDateFormat],
    [ChannelAdvisorWeightUnit],
    [ChannelAdvisorAccountKey],
    [InfopiaToken],
    [AmazonMerchantName],
    [AmazonMerchantToken],
    [AmazonAccessKeyID],
    [AmazonCertificateName],
    [AmazonCookie],
    [AmazonCookieExpires],
    [AmazonCookieWaitUntil],
    [AmazonPublicKey],
    [AmazonPrivateKey],
    [AmazonWeightDownloads],
    [XCartModuleUrl],
    [XCartStatusCodes],
    [OrderMotionPopServer],
    [OrderMotionBizID],
    [OrderMotionUrl],
    [ClickCartProUrl],
    [ClickCartProStatusCodes],
    [PayPalLastTransactionDate],
    [VolusionUrl],
    [VolusionEncryptedPassword],
    [VolusionPaymentMethods],
    [VolusionShippingMethods],
    [VolusionTimeZone],
    [VolusionTimeZoneDst],
    [NetworkSolutionsUserToken],
    [NetworkSolutionsStatusCodes],
    [NetworkSolutionsDownloadStatus],
    [MagentoModuleUrl],
    [MagentoStatusCodes],
    [MagentoStoreCode],
    [MagentoTrackingEmails],
    [OrderDynamicsLicense],
    [AuctionSoundClient],
    [AmeriCommerceUrl],
    [AmeriCommerceStatusCodes],
    [AmeriCommerceStoreID],
    [CommerceInterfaceUrl],
    [CommerceInterfaceStatusCodes]

    FROM v2m_Stores

-- open the source table cursor
OPEN workCursor

-- populate source table variables from the source cursor
FETCH NEXT FROM workCursor
INTO
    @sStoreID,
    @sRowVersion,
    @sStoreType,
    @sStoreName,
    @sLicenseKey,
    @sCompanyName,
    @sCompanyAddress1,
    @sCompanyAddress2,
    @sCompanyAddress3,
    @sCompanyCity,
    @sCompanyStateProvCode,
    @sCompanyPostalCode,
    @sCompanyCountryCode,
    @sCompanyUrl,
    @sCompanyFax,
    @sCompanyPhone,
    @sCompanyEmail,
    @sCompanyLogo,
    @sLastUpdateTime,
    @sDownloadAddressCasing,
    @sEmailDefaultAccountID,
    @sEmailLogSaveMessage,
    @sEmailLogSaveMessageImages,
    @sFilterLayout,
    @sOrderStatusStrings,
    @sItemStatusStrings,
    @sOrderNumberPrefix,
    @sOrderNumberPostfix,
    @sStoreUsername,
    @sStorePassword,
    @sStoreSavePassword,
    @sMivaPassphrase,
    @sMivaSiteID,
    @sMivaModuleUrl,
    @sMivaStoreCode,
    @sMivaConnectSecure,
    @sMivaRemovedDeletedBatches,
    @sMivaSebenzaExtraMsg,
    @sMivaLiveManualOrderNumbers,
    @sMivaStatusCodes,
    @sMivaSebenzaOrderStatus,
    @sMivaSebenzaOrderStatusEmail,
    @seBayUserID,
    @seBayToken,
    @seBayTokenExpire,
    @seBayDownloadItemDetails,
    @seBayDownloadPayPalDetails,
    @sPayPalApiUsername,
    @sPayPalApiPassword,
    @sPayPalApiSignature,
    @sPayPalApiCredentialType,
    @sShopSiteCgiUrl,
    @sShopSiteConnectSecure,
    @sShopSiteTimeZoneID,
    @sYahooPopServer,
    @sYahooTrackingEmailAccountID,
    @sYahooTrackingEmailPassword,
    @sMarketWorksAccountType,
    @sMarketWorksDownloadFlags,
    @sosCommerceModuleUrl,
    @sosCommerceStatusCodes,
    @sProStoresStoreName,
    @sProStoresAdminUrl,
    @sProStoresXteUrl,
    @sProStoresPrefix,
    @sProStoresApiEntryPoint,
    @sProStoresApiXml,
    @sProStoresApiRestSecure,
    @sProStoresApiScriptSuffix,
    @sProStoresApiToken,
    @sChannelAdvisorProfileID,
    @sChannelAdvisorTimeZone,
    @sChannelAdvisorTimeZoneDst,
    @sChannelAdvisorLastReportTime,
    @sChannelAdvisorXmlApiUsername,
    @sChannelAdvisorXmlApiPassword,
    @sChannelAdvisorDateFormat,
    @sChannelAdvisorWeightUnit,
    @sChannelAdvisorAccountKey,
    @sInfopiaToken,
    @sAmazonMerchantName,
    @sAmazonMerchantToken,
    @sAmazonAccessKeyID,
    @sAmazonCertificateName,
    @sAmazonCookie,
    @sAmazonCookieExpires,
    @sAmazonCookieWaitUntil,
    @sAmazonPublicKey,
    @sAmazonPrivateKey,
    @sAmazonWeightDownloads,
    @sXCartModuleUrl,
    @sXCartStatusCodes,
    @sOrderMotionPopServer,
    @sOrderMotionBizID,
    @sOrderMotionUrl,
    @sClickCartProUrl,
    @sClickCartProStatusCodes,
    @sPayPalLastTransactionDate,
    @sVolusionUrl,
    @sVolusionEncryptedPassword,
    @sVolusionPaymentMethods,
    @sVolusionShippingMethods,
    @sVolusionTimeZone,
    @sVolusionTimeZoneDst,
    @sNetworkSolutionsUserToken,
    @sNetworkSolutionsStatusCodes,
    @sNetworkSolutionsDownloadStatus,
    @sMagentoModuleUrl,
    @sMagentoStatusCodes,
    @sMagentoStoreCode,
    @sMagentoTrackingEmails,
    @sOrderDynamicsLicense,
    @sAuctionSoundClient,
    @sAmeriCommerceUrl,
    @sAmeriCommerceStatusCodes,
    @sAmeriCommerceStoreID,
    @sCommerceInterfaceUrl,
    @sCommerceInterfaceStatusCodes

WHILE @@FETCH_STATUS = 0
BEGIN
    SET @workCounter = @workCounter + 1

	-- do the insert into the Store table
	SET @tLicense = @sLicenseKey
	SET @tTypeCode = @sStoreType
	SET @tStoreName = @sStoreName
	SET @tCompany = @sCompanyName
	SET @tStreet1 = @sCompanyAddress1
	SET @tStreet2 = @sCompanyAddress2
	SET @tStreet3 = @sCompanyADdress3
	SET @tCity = @sCompanyCity
	SET @tStateProvCode = @sCompanyStateProvCode
	SET @tCountryCode = @sCompanyCountryCode
	SET @tPostalCode = @sCompanyPostalCode
	SET @tPhone = @sCompanyPhone
	SET @tFax = @sCompanyFax
	SET @tEmail = @sCompanyEmail
	SET @tWebsite = @sCompanyUrl
	SET @tIsSetupComplete = 1
	SET @tAutoDownload = 0 -- check for ANY ClientstoreSettings with this turned on, and pull from there
	SET @tAutoDownloadMinutes = 0 -- ditto
	SET @tAutoDownloadOnlyAway = 0
	SET @tDefaultEmailAccountID = @sEmailDefaultAccountID -- this needs to be translated once email accounts are migrated
	SET @tManualOrderPrefix = @sOrderNumberPrefix
	SET @tManualOrderPostfix = @sOrderNumberPostfix
	SET @tInitialDownloadDays = NULL
	SET @tInitialDownloadOrder = NULL

	-- Some store types in v2 do not set country code
	IF (LEN(@tCountryCode) = 0)
	BEGIN
		SET @tCountryCode = 'US'
	END

    /*  Template INSERT statement for the target table */
    INSERT INTO {MASTERDATABASE}.dbo.Store (
    [License],
    [TypeCode],
    [StoreName],
    [Company],
    [Street1],
    [Street2],
    [Street3],
    [City],
    [StateProvCode],
    [PostalCode],
    [CountryCode],
    [Phone],
    [Fax],
    [Email],
    [Website],
    [IsSetupComplete],
    [AutoDownload],
    [AutoDownloadMinutes],
    [AutoDownloadOnlyAway],
    [DefaultEmailAccountID],
    [ManualOrderPrefix],
    [ManualOrderPostfix],
    [InitialDownloadDays],
    [InitialDownloadOrder])
    VALUES
            (
    @tLicense,
    @tTypeCode,
    @tStoreName,
    @tCompany,
    @tStreet1,
    @tStreet2,
    @tStreet3,
    @tCity,
    @tStateProvCode,
    @tPostalCode,
    @tCountryCode,
    @tPhone,
    @tFax,
    @tEmail,
    @tWebsite,
    @tIsSetupComplete,
    @tAutoDownload,
    @tAutoDownloadMinutes,
    @tAutoDownloadOnlyAway,
    @tDefaultEmailAccountID,
    @tManualOrderPrefix,
    @tManualOrderPostfix,
    @tInitialDownloadDays,
    @tInitialDownloadOrder
            )             
     
    -- get the new key
	SET @newStoreKey = @@IDENTITY;
	
	-- record the translation
	exec dbo.v2m_RecordKey @sStoreID, 8 /* Store */, @newStoreKey

	-- record an object label
	exec dbo.v2m_RecordObjectLabel @newStoreKey, 5, NULL, @tStoreName

	-- move the order/item status strings to an intermediate table for further processing
	INSERT INTO {MASTERDATABASE}.dbo.[v2m_StoreStatusString] (
		[StoreID],
		[OrderStatusStrings],
		[ItemStatusStrings]
	)
	VALUES
	(
		@newStoreKey,
		@sOrderStatusStrings,
		@sItemStatusStrings
	)

	-- now determine what the store type is and insert into the appropriate child table	
	-- Miva
	IF @sStoreType = 0 
	BEGIN
		-- Miva stores are Generic stores + some
	    INSERT INTO {MASTERDATABASE}.dbo.GenericStore  (
			[StoreID],
			[Username],
			[Password],
			[ModuleUrl],
			[ModuleVersion],
			[ModulePlatform],
			[ModuleDeveloper],
			[OnlineStoreCode],
			[StatusCodes],
			[DownloadPageSize],
			[RequestTimeout],
			[DownloadStrategy],
			[OnlineStatusSupport],
			[OnlineStatusDataType],
			[OnlineCustomerSupport],
			[OnlineCustomerDataType],
			[OnlineShipmentDetails],
			[HttpExpect100Continue]
		 )
		VALUES 
		(
			@newStoreKey,
			@sStoreUsername,
			@sStorePassword,
			@sMivaModuleUrl,
			'3.0.0', 
			CASE
				WHEN @sMivaModuleUrl LIKE '%merchant2' THEN 'Miva Merchant 4'
				ELSE 'Miva Merchant 5'
			END,
			'Interapptive, Inc.',
			@sMivaStoreCode,
			'',		-- Status Codes - empty, gets converted later
			50,		-- download page size
			60,		-- request timeout
			0,		-- ByModifiedTime
			2,		-- StatusWithComment
			1,		-- text
			1,		-- Yes, customer id supported
			0,		-- numeric
			1,		-- Yes, shipment details supported
			1		-- HttpExpect100Continue
        )             
        
        -- MivaStore row
         INSERT INTO {MASTERDATABASE}.dbo.MivaStore  
         (
		    [StoreID],
		    [EncryptionPassphrase],
		    [LiveManualOrderNumbers],
		    [SebenzaCheckoutDataEnabled],
		    [OnlineUpdateStrategy],
		    [OnlineUpdateStatusChangeEmail]
		)
		VALUES
        (
		    @newStoreKey,
		    @sMivaPassphrase,
		    @sMivaLiveManualOrderNumbers,
		    @sMivaSebenzaExtraMsg,
		    @sMivaSebenzaOrderStatus,
		    @sMivaSebenzaOrderStatusEmail
        )

		-- move the status codes blob for later conversion
		INSERT INTO {MASTERDATABASE}.dbo.[v2m_StoreStatusTemp]
		(
			[StoreID],
			[TypeCode],
			[OnlineStatusCodes]
		)
		VALUES
		(
			@newStoreKey,
			@sStoreType,
			@sMivaStatusCodes
		)
	END 
	
	-- eBay
	IF @sStoreType = 1 
	BEGIN 
		INSERT INTO {MASTERDATABASE}.dbo.EbayStore  (
			[StoreID],
			[eBayUserID],
			[eBayToken],
			[eBayTokenExpire],
			[AcceptedPaymentList],
			[DownloadItemDetails],
			[DownloadPayPalDetails],
			[PayPalApiCredentialType],
			[PayPalApiUserName],
			[PayPalApiPassword],
			[PayPalApiSignature],
			[PayPalApiCertificate],
			[DomesticShippingService],
			[InternationalShippingService]
		)
		VALUES
		(
			@newStoreKey,
			@seBayUserID,
			@seBayToken,
			@seBayTokenExpire,
			'10,4',		-- CC and PayPal accepted
			@seBayDownloadItemDetails,
			@seBayDownloadPayPalDetails,
			@sPayPalApiCredentialType,
			@sPayPalApiUsername,
			@sPayPalApiPassword,
			@sPayPalApiSignature,
			NULL,	-- Certificate Data, to be converted later in the migration
			'USPSExpressFlatRateEnvelope',	-- new value in 3
			'USPSPriorityFlatRateEnvelope'	-- new value in 3
		)             
	END
	
	-- Yahoo
	IF @sStoreType = 2 
	BEGIN
		-- create an email account with sYahooPopServer, sStoreUsername, sStorePassword.  that is the new YahooEmailAccountID
		-- Note that the v2 referenced email account for tracking updates will eventually get converted
		-- but V3 doesn't use it.  It'll exist as an account in V3 but not be linked to this store.
		
		DECLARE 
			@linkedSmtpUsername nvarchar(50),
			@linkedSmtpPassword nvarchar(50),
			@linkedSmtpServer nvarchar(50),
			@linkedSmtpPort int,
			@linkedSmtpAuthenticateType int,
			@linkedSmtpSecurity int
			
		-- pull smtp info from the linked account
		SELECT @linkedSmtpUsername = Username,
			   @linkedSmtpPassword = [Password],
			   @linkedSmtpServer = SmtpServer,
			   @linkedSmtpPort = SmtpPort,
			   @linkedSmtpAuthenticateType = AuthenticateType,
			   @linkedSmtpSecurity = SmtpSecurity
			   
		FROM dbo.v2m_EmailAccounts
		WHERE AccountID = @sYahooTrackingEmailAccountID AND
			  StoreID = @sStoreID
			  
		-- if the usernames match we're going to assume it's the same account and put
		-- smtp info into the to-be-created EmailAccount assigned to the yahoo store
		IF (@linkedSmtpUsername <> @sStoreUsername OR @linkedSmtpUsername IS NULL)
		BEGIN
			SET @linkedSmtpUsername = ''
			SET @linkedSmtpPassword = ''
			SET @linkedSmtpServer = ''
			SET @linkedSmtpPort = 25
			SET @linkedSmtpAuthenticateType = 0
			SET @linkedSmtpSecurity = 0
		END
		
	    INSERT INTO {MASTERDATABASE}.dbo.EmailAccount  (
		    [AccountName],
		    [DisplayName],
		    [EmailAddress],
		    [IncomingServer],
		    [IncomingPort],
		    [IncomingSecurityType],
		    [IncomingUsername],
		    [IncomingPassword],
		    [OutgoingServer],
		    [OutgoingPort],
		    [OutgoingSecurityType],
		    [OutgoingCredentialSource],
		    [OutgoingUsername],
		    [OutgoingPassword],
		    [AutoSend],
		    [AutoSendMinutes],
		    [AutoSendLastTime],
		    [LimitMessagesPerConnection],
		    [LimitMessagesPerConnectionQuantity],
		    [LimitMessagesPerHour],
		    [LimitMessagesPerHourQuantity],
		    [LimitMessageInterval],
		    [LimitMessageIntervalSeconds],
		    [InternalOwnerID]
		)
	    VALUES
		(
		    'Yahoo Account ' + @sStoreName,
		    @sStoreName,
		    @sStoreUsername,
		    @sYahooPopServer,
		    110,		-- V2 yahoo account only supported 110
		    0,			-- IncomingSecurityType unsecure pop3
		    @sStoreUsername, 
		    @sStorePassword,
		    @linkedSmtpServer,	-- Outgoing Server, none
		    @linkedSmtpPort, -- Outgoing Port
			CASE	-- Smtp Security
				WHEN @linkedSmtpsecurity = 0 THEN 0  -- None -> Unsecured
				WHEN @linkedSmtpSecurity = 1 THEN 2	-- Explcit/TLS -> Explicit/Secure
				WHEN @linkedSmtpSecurity = 2 THEN 1	-- Implicit/SSL -> Implicit
			END,
			CASE
				WHEN @linkedSmtpAuthenticateType = 0 THEN 0 -- None -> OutgoingCredentialSource.None
				WHEN @linkedSmtpAuthenticateType = 1 THEN 2 -- smtp -> .Specify
				WHEN @linkedSmtpAuthenticateType = 2 THEN 3 -- popbeforesmtp -> .PopBeforeSmtp
			END,
		    @linkedSmtpUsername, -- smtp connection details
		    @linkedSmtpPassword, 
		    1,		-- AutoSend
		    5,		-- AutoSendMinutes, 5 is minimum allowed
		    '1900-01-01',
		    1,		-- Limit Messages
		    50,		-- 50 messages per connection
		    0,		-- Not limited per hour
		    1000,	-- 1000/hr if enabled
		    0,		-- no limit interval
		    5,		-- 5 second interval if enabled
		    @newStoreKey	-- the new store is the owner
	    )  
	    
	    DECLARE @newYahooEmailAccountID int
	    SET @newYahooEmailAccountID = @@IDENTITY
	
		INSERT INTO {MASTERDATABASE}.dbo.YahooStore  (
			[StoreID],
			[YahooEmailAccountID],
			[TrackingUpdatePassword]
		)
		VALUES
		(
			@newStoreKey,
			@newYahooEmailAccountID,
			@sYahooTrackingEmailPassword
		)             
	END
	
	-- ShopSite
	IF @sStoreType = 3 
	BEGIN
		PRINT 'Moving a ShopSite store...'
	    INSERT INTO {MASTERDATABASE}.dbo.ShopSiteStore  (
		    [StoreID],
		    [Username],
		    [Password],
		    [CgiUrl],
		    [RequireSSL],
		    [DownloadPageSize],
		    [RequestTimeout]
	    )
	    VALUES
	    (
		    @newStoreKey,
		    @sStoreUsername,
		    @sStorePassword,
		    @sShopSiteCgiUrl,
		    @sShopSiteConnectSecure,
		    50,
		    60
		)    
	END
	
	-- MarketWorks
	IF @sStoreType = 4 
	BEGIN
		PRINT 'Moving a MarketWorks store...'
	    INSERT INTO {MASTERDATABASE}.dbo.MarketplaceAdvisorStore  (
		    [StoreID],
		    [Username],
		    [Password],
		    [AccountType],
		    [DownloadFlags]
	    )
	    VALUES
	    (
		    @newStoreKey,
		    @sStoreUsername,
		    @sStorePassword,
		    @sMarketWorksAccountType,
		    @sMarketWorksDownloadFlags
	    )             
	END
	
	-- osCommerce (5), Cre (9), Zen (13), VirtueMart (16), OrderDynamics (22), AuctionSound (23)
	--   WebShopManager (24), 3DCart (29), BigCommerce (30)
	IF @sStoreType = 5 OR @sStoreType = 9 OR @sStoreType = 13 OR @sStoreType = 16
		OR @sStoreType = 22 OR @sStoreType = 23 OR @sStoreType = 24 OR @sStoreType = 29
		OR @sStoreType = 30
	BEGIN
		 INSERT INTO {MASTERDATABASE}.dbo.GenericStore  (
			[StoreID],
			[Username],
			[Password],
			[ModuleUrl],
			[ModuleVersion],
			[ModulePlatform],
			[ModuleDeveloper],
			[OnlineStoreCode],
			[StatusCodes],
			[DownloadPageSize],
			[RequestTimeout],
			[DownloadStrategy],
			[OnlineStatusSupport],
			[OnlineStatusDataType],
			[OnlineCustomerSupport],
			[OnlineCustomerDataType],
			[OnlineShipmentDetails],
			[HttpExpect100Continue]
		 )
		VALUES 
		(
			@newStoreKey,
			@sStoreUsername,
			@sStorePassword,
			@sosCommerceModuleUrl,
			'3.0.0', 
			CASE 
				WHEN @sStoreType = 5 THEN 'osCommerce'
				WHEN @sStoreType = 9 THEN 'CreLoaded'
				WHEN @sStoreType = 13 THEN 'ZenCart'
				WHEN @sStoreType = 16 THEN 'VirtueMart'
				WHEN @sStoreType = 22 THEN 'OrderDynamics'
				WHEN @sStoreType = 23 THEN 'AuctionSound'
				WHEN @sStoreType = 24 THEN 'Web Shop Manager'
				WHEN @sStoreType = 29 THEN '3DCart'
				WHEN @sStoreType = 30 THEN 'BigCommerce'
			END,  
			'Interapptive, Inc. (support@interapptive.com)',
			CASE
				WHEN @sStoreType = 22 THEN @sOrderDynamicsLicense
				WHEN @sStoreType = 23 THEN @sAuctionSoundClient
				ELSE ''
			END,
			'',		-- Status Codes - empty, gets converted later
			50,		-- download page size
			60,		-- request timeout
			0,		-- ByModifiedTime
			2,		-- StatusWithComment
			0,		-- numeric
			1,		-- Yes, customer id supported
			0,		-- numeric
			CASE
				WHEN @sStoreType = 24 THEN 1 -- WebShopManager support shipment details
				ELSE 0						 -- osc proper doesn't
			END,
			1		-- HttpExpect100Continue
        )             
        
        -- move the status codes blob for later conversion
		INSERT INTO {MASTERDATABASE}.dbo.[v2m_StoreStatusTemp]
		(
			[StoreID],
			[TypeCode],
			[OnlineStatusCodes]
		)
		VALUES
		(
			@newStoreKey,
			@sStoreType,
			@sosCommerceStatusCodes
		)
	END
	
	-- ProStores	
	IF @sStoreType = 6
	BEGIN
		PRINT 'Moving a ProStores store...'
	    INSERT INTO {MASTERDATABASE}.dbo.ProStoresStore  (
		    [StoreID],
		    [ShortName],
		    [Username],
		    [LoginMethod],
		    [ApiEntryPoint],
		    [ApiToken],
		    [ApiStorefrontUrl],
		    [ApiTokenLogonUrl],
		    [ApiXteUrl],
		    [ApiRestSecureUrl],
		    [ApiRestNonSecureUrl],
		    [ApiRestScriptSuffix],
		    [LegacyAdminUrl],
		    [LegacyXtePath],
		    [LegacyPrefix],
		    [LegacyPassword],
		    [LegacyCanUpgrade]
	    )
	    VALUES
	    (
		    @newStoreKey,
		    @sProStoresStoreName,
		    @sStoreUsername,
		    CASE
				WHEN @sProStoresApiToken = '' THEN 0
				ELSE 1
			END,
		    @sProStoresApiEntryPoint,
		    @sProStoresApiToken,
		    '',  -- storefront
		    '',  -- token logon url
		    @sProStoresApiXml,
		    @sProStoresApiRestSecure,
		    '', -- unsecure api unknown
		    @sProStoresApiScriptSuffix,
		    @sProStoresAdminUrl,
		    @sProStoresXteUrl,
		    @sProStoresPrefix,
		    @sStorePassword,
		    1		-- can upgrade??
	    )             

	END
	
	-- ChannelAdvisor
	IF @sStoreType = 7
	BEGIN
	    INSERT INTO {MASTERDATABASE}.dbo.ChannelAdvisorStore  (
		    [StoreID],
		    [AccountKey],
		    [DownloadCriteria],
		    [ProfileID],
		    [ProfileUsername],
		    [ProfilePassword]
	    )
	    VALUES
	    (
		    @newStoreKey,
		    @sChannelAdvisorAccountKey,
		    0,	-- ChannelAdvisorDownloadCriteria.All
		    @sChannelAdvisorProfileID,
		    @sStoreUsername,
		    @sStorePassword
	    )             
	END
	
	-- Infopia
	IF @sStoreType = 8
	BEGIN
	    INSERT INTO {MASTERDATABASE}.dbo.InfopiaStore  (
		    [StoreID],
		    [ApiToken]
	    )
	    VALUES
	    (
		    @newStoreKey,
		    @sInfopiaToken
	    )             
	END
	
	-- Amazon
	IF @sStoreType = 10
	BEGIN
	    INSERT INTO {MASTERDATABASE}.dbo.AmazonStore  (
		    [StoreID],
		    [SellerCentralUsername],
		    [SellerCentralPassword],
		    [MerchantName],
		    [MerchantToken],
		    [AccessKeyID],
		    [Cookie],
		    [CookieExpires],
		    [CookieWaitUntil],
		    [Certificate],
		    [WeightDownloads]
	    )
	    VALUES
	    (
		    @newStoreKey,
		    @sStoreUsername,
		    @sStorePassword,
		    @sAmazonMerchantName,
		    @sAmazonMerchantToken,
		    @sAmazonAccessKeyID,
		    @sAmazonCookie,
		    @sAmazonCookieExpires,
		    @sAmazonCookieWaitUntil,
		    CAST(@sAmazonCertificateName AS varbinary(2048)),
		    @sAmazonWeightDownloads
	    )             

		-- put the certificate in a table to be converted in C# later
	    INSERT INTO dbo.v2m_AmazonCertificateTemp  (
	        [StoreID],
	        [CertificateName],
	        [PublicKey],
	        [PrivateKey]
	    )
	    VALUES
	    (
	        @newStoreKey,
	        @sAmazonCertificateName,
	        @sAmazonPublicKey,
	        @sAmazonPrivateKey
	    )             
	END
	
	-- XCart, SearchFit, CartKeeper, EtailComplete
	IF @sStoreType = 11 OR @sStoreType = 27 OR @sStoreType = 14 OR (@sStoreType = 15)
	BEGIN
		-- xcart derivatives are now Generic
	    INSERT INTO {MASTERDATABASE}.dbo.GenericStore  (
			[StoreID],
			[Username],
			[Password],
			[ModuleUrl],
			[ModuleVersion],
			[ModulePlatform],
			[ModuleDeveloper],
			[OnlineStoreCode],
			[StatusCodes],
			[DownloadPageSize],
			[RequestTimeout],
			[DownloadStrategy],
			[OnlineStatusSupport],
			[OnlineStatusDataType],
			[OnlineCustomerSupport],
			[OnlineCustomerDataType],
			[OnlineShipmentDetails],
			[HttpExpect100Continue]
		 )
		VALUES 
		(
			@newStoreKey,
			@sStoreUsername,
			@sStorePassword,
			@sXCartModuleUrl,
			'3.0.0', 
			CASE
				WHEN @sStoreType = 11 THEN 'X-Cart'
				WHEN @sStoreType = 27 THEN 'SearchFit'
				WHEN @sStoreType = 14 THEN 'CartKeeper'
				WHEN @sStoreType = 15 THEN 'eTailComplete'
				ELSE 'Unknown'
			END,
			'Interapptive, Inc. (support@interapptive.com)',
			'',		-- no store code in xcart
			'',		-- status codes, to be converted later
			50,		-- download page size
			60,		-- request timeout
			1,		-- ByOrderNumber
			1,		-- StatusOnly
			1,		-- Text status codesj
			1,		-- Yes, customer id supported
			1,		-- text customer id
			1,		-- Yes, shipment details supported
			1		-- HttpExpect100Continue
        )            
        
         -- move the status codes blob for later conversion
		INSERT INTO {MASTERDATABASE}.dbo.[v2m_StoreStatusTemp]
		(
			[StoreID],
			[TypeCode],
			[OnlineStatusCodes]
		)
		VALUES
		(
			@newStoreKey,
			@sStoreType,
			@sXCartStatusCodes
		)
	END
	
	-- OrderMotion
	IF @sStoreType = 12
	BEGIN
	
		-- create a mail account based on the ordermotion credentials
	    INSERT INTO {MASTERDATABASE}.dbo.EmailAccount  (
		    [AccountName],
		    [DisplayName],
		    [EmailAddress],
		    [IncomingServer],
		    [IncomingPort],
		    [IncomingSecurityType],
		    [IncomingUsername],
		    [IncomingPassword],
		    [OutgoingServer],
		    [OutgoingPort],
		    [OutgoingSecurityType],
		    [OutgoingCredentialSource],
		    [OutgoingUsername],
		    [OutgoingPassword],
		    [AutoSend],
		    [AutoSendMinutes],
		    [AutoSendLastTime],
		    [LimitMessagesPerConnection],
		    [LimitMessagesPerConnectionQuantity],
		    [LimitMessagesPerHour],
		    [LimitMessagesPerHourQuantity],
		    [LimitMessageInterval],
		    [LimitMessageIntervalSeconds],
		    [InternalOwnerID]
		)
	    VALUES
		(
		    'OrderMotion Account ' + @sStoreName,
		    @sStoreName,
		    @sStoreUsername,
		    @sOrderMotionPopServer,
		    110,		-- V2 yahoo account only supported 110
		    0,			-- unsecure pop3
		    @sStoreUsername,
		    @sStorePassword,
		    '',
		    25,
		    0,	-- SmptSecurity.Unsecure
		    0,  -- EmailSmtpCredentialSource.None
		    '', -- smtp connection details
		    '', 
		    0,	
		    5,  -- autosend minutes
		    '1900-01-01',
		    1,		-- Limit Messages
		    50,		-- 50 messages per connection
		    0,		-- Not limited per hour
		    1000,	-- 1000/hr if enabled
		    0,		-- no limit interval
		    5,		-- 5 second interval if enabled
		    @newStoreKey	-- the new store is the owner
	    )  
	    
	    DECLARE @newOrderMotionEmailAccountID int
	    SET @newOrderMotionEmailAccountID = @@IDENTITY
	
	    INSERT INTO {MASTERDATABASE}.dbo.OrderMotionStore  (
		    [StoreID],
		    [OrderMotionEmailAccountID],
		    [OrderMotionBizID],
		    [OrderMotionCluster]
	    )
	    VALUES
	    (
		    @newStoreKey,
		    @newOrderMotionEmailAccountID,
		    @sOrderMotionBizID,
		    CASE 
				WHEN @sOrderMotionUrl LIKE '%eu.members.ordermotion.com' THEN 1
				ELSE 0
		    END
	    )             
	END
	
	-- ClickCartPro
	IF @sStoreType = 17 
	BEGIN
		INSERT INTO {MASTERDATABASE}.dbo.GenericStore  (
			[StoreID],
			[Username],
			[Password],
			[ModuleUrl],
			[ModuleVersion],
			[ModulePlatform],
			[ModuleDeveloper],
			[OnlineStoreCode],
			[StatusCodes],
			[DownloadPageSize],
			[RequestTimeout],
			[DownloadStrategy],
			[OnlineStatusSupport],
			[OnlineStatusDataType],
			[OnlineCustomerSupport],
			[OnlineCustomerDataType],
			[OnlineShipmentDetails],
			[HttpExpect100Continue]
		 )
		VALUES 
		(
			@newStoreKey,
			@sStoreUsername,
			@sStorePassword,
			@sClickCartProUrl,
			'3.0.0', 
			'ClickCartPro',  
			'',
			'',
			'',		-- status codes, to be converted later
			50,		-- download page size
			60,		-- request timeout
			0,		-- ByModifiedTime
			2,		-- StatusWithComment
			1,		-- text status codes
			1,		-- Yes, customer id supported
			0,		-- numeric
			1,		-- Yes, shipment details supported
			1		-- HttpExpect100Continue
        )             
        
        -- move the status codes blob for later conversion
		INSERT INTO {MASTERDATABASE}.dbo.[v2m_StoreStatusTemp]
		(
			[StoreID],
			[TypeCode],
			[OnlineStatusCodes]
		)
		VALUES
		(
			@newStoreKey,
			@sStoreType,
			@sClickCartProStatusCodes
		)
	END
	
	-- PayPal
	IF @sStoreType = 18
	BEGIN
	    INSERT INTO {MASTERDATABASE}.dbo.PayPalStore  (
		    [StoreID],
		    [ApiCredentialType],
		    [ApiUserName],
		    [ApiPassword],
		    [ApiSignature],
		    [ApiCertificate],
		    [LastTransactionDate],
		    [LastValidTransactionDate]
	    )
	    VALUES
	    (
		    @newStoreKey,
		    @sPayPalApiCredentialType,
		    @sPayPalApiUsername,
		    @sPayPalApiPassword,
		    @sPayPalApiSignature,
		    NULL,	-- Certificate Data
		    @sPayPalLastTransactionDate,
		    @sPayPalLastTransactionDate		-- assuming the last txn was valid
	    )             

	END
	
	-- Volusion
	IF @sStoreType = 19
	BEGIN
	    INSERT INTO {MASTERDATABASE}.dbo.VolusionStore  (
		    [StoreID],
		    [StoreUrl],
		    [WebUserName],
		    [WebPassword],
		    [ApiPassword],
		    [PaymentMethods],
		    [ShipmentMethods],
		    [ServerTimeZone],
		    [ServerTimeZoneDST]
	    )
	    VALUES
	    (
		    @newStoreKey,
		    @sVolusionUrl,
		    @sStoreUsername,
		    @sStorePassword,
		    @sVolusionEncryptedPassword,
		    @sVolusionPaymentMethods,
		    @sVolusionShippingMethods,
		    dbo.v2m_ConvertToV3TimeZone(@sVolusionTimeZone), 
		    @sVolusionTimeZoneDst
	    )     
	END
	
	-- NetworkSolutions
	IF @sStoreType = 20 
	BEGIN
	    INSERT INTO {MASTERDATABASE}.dbo.NetworkSolutionsStore  (
		    [StoreID],
		    [UserToken],
		    [DownloadOrderStatuses],
		    [StatusCodes],
		    [StoreUrl]
	    )
	    VALUES
	    (
		    @newStoreKey,
		    @sNetworkSolutionsUserToken,
		    @sNetworkSolutionsDownloadStatus,
		    '',	-- status codes, to be converted later
		    ''	--store url, using for licensing in 3.  didn't have in 2
	    )             

		-- move the status codes blob for later conversion
		INSERT INTO {MASTERDATABASE}.dbo.[v2m_StoreStatusTemp]
		(
			[StoreID],
			[TypeCode],
			[OnlineStatusCodes]
		)
		VALUES
		(
			@newStoreKey,
			@sStoreType,
			@sNetworkSolutionsStatusCodes
		)
	END
	
	-- Magento
	IF @sStoreType = 21
	BEGIN
		INSERT INTO {MASTERDATABASE}.dbo.GenericStore  (
			[StoreID],
			[Username],
			[Password],
			[ModuleUrl],
			[ModuleVersion],
			[ModulePlatform],
			[ModuleDeveloper],
			[OnlineStoreCode],
			[StatusCodes],
			[DownloadPageSize],
			[RequestTimeout],
			[DownloadStrategy],
			[OnlineStatusSupport],
			[OnlineStatusDataType],
			[OnlineCustomerSupport],
			[OnlineCustomerDataType],
			[OnlineShipmentDetails],
			[HttpExpect100Continue]
		 )
		VALUES 
		(
			@newStoreKey,
			@sStoreUsername,
			@sStorePassword,
			@sMagentoModuleUrl,
			'3.0.0', 
			'Magento',  
			'Interapptive, Inc. (support@interapptive.com)',
			@sMagentoStoreCode,
			'',		-- status codes, to be converted later
			50,		-- download page size
			60,		-- request timeout
			0,		-- ByModifiedTime
			2,		-- StatusWithComment
			1,		-- text status codes
			1,		-- Yes, customer id supported
			0,		-- numeric
			1,		-- Yes, shipment details supported
			1		-- HttpExpect100Continue
        )             
       
	    INSERT INTO {MASTERDATABASE}.dbo.MagentoStore  (
		    [StoreID],
		    [MagentoTrackingEmails]
	    )
	    VALUES
	    (
		    @newStoreKey,
		    @sMagentoTrackingEmails
	    )             

		-- move the status codes blob for later conversion
		INSERT INTO {MASTERDATABASE}.dbo.[v2m_StoreStatusTemp]
		(
			[StoreID],
			[TypeCode],
			[OnlineStatusCodes]
		)
		VALUES
		(
			@newStoreKey,
			@sStoreType,
			@sMagentoStatusCodes
		)
	END
	
	-- AmeriCommerce 25
	IF @sStoreType = 25
	BEGIN
		INSERT INTO {MASTERDATABASE}.dbo.AmeriCommerceStore  (
		    [StoreID],
		    [Username],
		    [Password],
		    [StoreUrl],
		    [StoreCode],
		    [StatusCodes]
	    )
	    VALUES
	    (
		    @newStoreKey,
		    @sStoreUsername,
		    @sStorePassword,
		    @sAmeriCommerceUrl,
		    @sAmeriCommerceStoreID,
		    ''	-- status codes, to be converted later
	    )      

		-- move the status codes blob for later conversion
		INSERT INTO {MASTERDATABASE}.dbo.[v2m_StoreStatusTemp]
		(
			[StoreID],
			[TypeCode],
			[OnlineStatusCodes]
		)
		VALUES
		(
			@newStoreKey,
			@sStoreType,
			@sAmeriCommerceStatusCodes
		)
	END
		
	-- CommerceInterface
	IF @sStoreType = 26
	BEGIN
		 INSERT INTO {MASTERDATABASE}.dbo.GenericStore  (
			[StoreID],
			[Username],
			[Password],
			[ModuleUrl],
			[ModuleVersion],
			[ModulePlatform],
			[ModuleDeveloper],
			[OnlineStoreCode],
			[StatusCodes],
			[DownloadPageSize],
			[RequestTimeout],
			[DownloadStrategy],
			[OnlineStatusSupport],
			[OnlineStatusDataType],
			[OnlineCustomerSupport],
			[OnlineCustomerDataType],
			[OnlineShipmentDetails],
			[HttpExpect100Continue]
		 )
		VALUES 
		(
			@newStoreKey,
			@sStoreUsername,
			@sStorePassword,
			@sCommerceInterfaceUrl,
			'3.0.0', 
			'CommerceInterface',  
			'',
			'',
			'',		-- status codes, to be converted later
			50,		-- download page size
			60,		-- request timeout
			0,		-- ByModifiedTime
			3,		-- Download only
			0,		-- numeric
			1,		-- Yes, customer id supported
			0,		-- numeric
			1,		-- shipment details
			1		-- HttpExpect100Continue
        )             
		
		-- move the status codes blob for later conversion
		INSERT INTO {MASTERDATABASE}.dbo.[v2m_StoreStatusTemp]
		(
			[StoreID],
			[TypeCode],
			[OnlineStatusCodes]
		)
		VALUES
		(
			@newStoreKey,
			@sStoreType,
			@sCommerceInterfaceStatusCodes
		)
	END
	
	-- SearchFit
	IF @sStoreType = 27
	BEGIN
		PRINT 'Moving a SearchFit store...'
	END
	
	-- Generic - doesn't exist in 2x.
	IF @sStoreType = 28
	BEGIN
		-- listed here for completeness/reference
		PRINT 'Invalid'
	END

	INSERT INTO {MASTERDATABASE}.dbo.[v2m_StoreFilterLayoutXml]
	(
		[FilterLayout]
	)
	VALUES
	(
		@sFilterLayout
	)
	
	-- now delete the original store record
	DELETE FROM v2m_Stores WHERE StoreID = @sStoreID

-- fetch next row from source table
FETCH NEXT FROM workCursor
INTO
    @sStoreID,
    @sRowVersion,
    @sStoreType,
    @sStoreName,
    @sLicenseKey,
    @sCompanyName,
    @sCompanyAddress1,
    @sCompanyAddress2,
    @sCompanyAddress3,
    @sCompanyCity,
    @sCompanyStateProvCode,
    @sCompanyPostalCode,
    @sCompanyCountryCode,
    @sCompanyUrl,
    @sCompanyFax,
    @sCompanyPhone,
    @sCompanyEmail,
    @sCompanyLogo,
    @sLastUpdateTime,
    @sDownloadAddressCasing,
    @sEmailDefaultAccountID,
    @sEmailLogSaveMessage,
    @sEmailLogSaveMessageImages,
    @sFilterLayout,
    @sOrderStatusStrings,
    @sItemStatusStrings,
    @sOrderNumberPrefix,
    @sOrderNumberPostfix,
    @sStoreUsername,
    @sStorePassword,
    @sStoreSavePassword,
    @sMivaPassphrase,
    @sMivaSiteID,
    @sMivaModuleUrl,
    @sMivaStoreCode,
    @sMivaConnectSecure,
    @sMivaRemovedDeletedBatches,
    @sMivaSebenzaExtraMsg,
    @sMivaLiveManualOrderNumbers,
    @sMivaStatusCodes,
    @sMivaSebenzaOrderStatus,
    @sMivaSebenzaOrderStatusEmail,
    @seBayUserID,
    @seBayToken,
    @seBayTokenExpire,
    @seBayDownloadItemDetails,
    @seBayDownloadPayPalDetails,
    @sPayPalApiUsername,
    @sPayPalApiPassword,
    @sPayPalApiSignature,
    @sPayPalApiCredentialType,
    @sShopSiteCgiUrl,
    @sShopSiteConnectSecure,
    @sShopSiteTimeZoneID,
    @sYahooPopServer,
    @sYahooTrackingEmailAccountID,
    @sYahooTrackingEmailPassword,
    @sMarketWorksAccountType,
    @sMarketWorksDownloadFlags,
    @sosCommerceModuleUrl,
    @sosCommerceStatusCodes,
    @sProStoresStoreName,
    @sProStoresAdminUrl,
    @sProStoresXteUrl,
    @sProStoresPrefix,
    @sProStoresApiEntryPoint,
    @sProStoresApiXml,
    @sProStoresApiRestSecure,
    @sProStoresApiScriptSuffix,
    @sProStoresApiToken,
    @sChannelAdvisorProfileID,
    @sChannelAdvisorTimeZone,
    @sChannelAdvisorTimeZoneDst,
    @sChannelAdvisorLastReportTime,
    @sChannelAdvisorXmlApiUsername,
    @sChannelAdvisorXmlApiPassword,
    @sChannelAdvisorDateFormat,
    @sChannelAdvisorWeightUnit,
    @sChannelAdvisorAccountKey,
    @sInfopiaToken,
    @sAmazonMerchantName,
    @sAmazonMerchantToken,
    @sAmazonAccessKeyID,
    @sAmazonCertificateName,
    @sAmazonCookie,
    @sAmazonCookieExpires,
    @sAmazonCookieWaitUntil,
    @sAmazonPublicKey,
    @sAmazonPrivateKey,
    @sAmazonWeightDownloads,
    @sXCartModuleUrl,
    @sXCartStatusCodes,
    @sOrderMotionPopServer,
    @sOrderMotionBizID,
    @sOrderMotionUrl,
    @sClickCartProUrl,
    @sClickCartProStatusCodes,
    @sPayPalLastTransactionDate,
    @sVolusionUrl,
    @sVolusionEncryptedPassword,
    @sVolusionPaymentMethods,
    @sVolusionShippingMethods,
    @sVolusionTimeZone,
    @sVolusionTimeZoneDst,
    @sNetworkSolutionsUserToken,
    @sNetworkSolutionsStatusCodes,
    @sNetworkSolutionsDownloadStatus,
    @sMagentoModuleUrl,
    @sMagentoStatusCodes,
    @sMagentoStoreCode,
    @sMagentoTrackingEmails,
    @sOrderDynamicsLicense,
    @sAuctionSoundClient,
    @sAmeriCommerceUrl,
    @sAmeriCommerceStatusCodes,
    @sAmeriCommerceStoreID,
    @sCommerceInterfaceUrl,
    @sCommerceInterfaceStatusCodes

END
CLOSE workCursor
DEALLOCATE workCursor

-- data migration "protocol" demands we return the number of rows/work completed
SELECT @workCounter as WorkCompleted