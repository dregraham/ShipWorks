
-- ShipWorks V2 to V3 Database Migration Script, generated by CodeSmith
-- For table v2m_Customers

-- operational variables
DECLARE 
    @workCounter int,
    @newCustomerKey bigint,
    @insertCustomer bit,
	@noteDate datetime,
	@unarchiveCustomerID int,
	@customerLabel varchar(100)
	

-- source table variables
DECLARE
    -- @MasterDatabase will be generated at runtime
    -- @IsArchive will be generated at runtime    
    @sCustomerID int, 
    @sRowVersion timestamp, 
    @sStoreID int, 
    @sShipEmail nvarchar(50), 
    @sShipFirstName nvarchar(30), 
    @sShipLastName nvarchar(30), 
    @sShipCompany nvarchar(30), 
    @sShipAddress1 nvarchar(60), 
    @sShipAddress2 nvarchar(60), 
    @sShipAddress3 nvarchar(60), 
    @sShipCity nvarchar(50), 
    @sShipStateProvinceCode nvarchar(25), 
    @sShipPostalCode nvarchar(10), 
    @sShipCountryCode nvarchar(5), 
    @sShipPhone nvarchar(25), 
    @sShipFax nvarchar(25), 
    @sBillEmail nvarchar(50), 
    @sBillFirstName nvarchar(30), 
    @sBillLastName nvarchar(30), 
    @sBillCompany nvarchar(30), 
    @sBillAddress1 nvarchar(60), 
    @sBillAddress2 nvarchar(60), 
    @sBillAddress3 nvarchar(60), 
    @sBillCity nvarchar(50), 
    @sBillStateProvinceCode nvarchar(25), 
    @sBillPostalCode nvarchar(10), 
    @sBillCountryCode nvarchar(5), 
    @sBillPhone nvarchar(25), 
    @sBillFax nvarchar(25), 
    @sNotes nvarchar(max), 
    @seBayBuyerID nvarchar(50), 
    @sMarketWorksBuyerNumber int, 
    @sosCommerceCustomerID int, 
    @sProStoresCustomerNumber varchar(20), 
    @sInfopiaCustomerID int, 
    @sMagentoCustomerID int, 
    @sAddressHash nvarchar(190) 

-- target table variables
DECLARE
    @tCustomerID bigint, 
    @tRowVersion timestamp, 
    @tBillFirstName nvarchar(30), 
    @tBillMiddleName nvarchar(30), 
    @tBillLastName nvarchar(30), 
    @tBillCompany nvarchar(60), 
    @tBillStreet1 nvarchar(60), 
    @tBillStreet2 nvarchar(60), 
    @tBillStreet3 nvarchar(60), 
    @tBillCity nvarchar(50), 
    @tBillStateProvCode nvarchar(50), 
    @tBillPostalCode nvarchar(20), 
    @tBillCountryCode nvarchar(50), 
    @tBillPhone nvarchar(25), 
    @tBillFax nvarchar(35), 
    @tBillEmail nvarchar(50), 
    @tBillWebsite nvarchar(50), 
    @tShipFirstName nvarchar(30), 
    @tShipMiddleName nvarchar(30), 
    @tShipLastName nvarchar(30), 
    @tShipCompany nvarchar(60), 
    @tShipStreet1 nvarchar(60), 
    @tShipStreet2 nvarchar(60), 
    @tShipStreet3 nvarchar(60), 
    @tShipCity nvarchar(50), 
    @tShipStateProvCode nvarchar(50), 
    @tShipPostalCode nvarchar(20), 
    @tShipCountryCode nvarchar(50), 
    @tShipPhone nvarchar(25), 
    @tShipFax nvarchar(35), 
    @tShipEmail nvarchar(50), 
    @tShipWebsite nvarchar(50), 
    @tRollupOrderCount int, 
    @tRollupOrderTotal money, 
    @tRollupNoteCount int 

-- Track Progress
SET @workCounter = 0

-- the cursor for cycling through the source table
DECLARE workCursor CURSOR FORWARD_ONLY FOR
SELECT TOP 1000
    [CustomerID],
    [RowVersion],
    [StoreID],
    [ShipEmail],
    [ShipFirstName],
    [ShipLastName],
    [ShipCompany],
    [ShipAddress1],
    [ShipAddress2],
    [ShipAddress3],
    [ShipCity],
    [ShipStateProvinceCode],
    [ShipPostalCode],
    [ShipCountryCode],
    [ShipPhone],
    [ShipFax],
    [BillEmail],
    [BillFirstName],
    [BillLastName],
    [BillCompany],
    [BillAddress1],
    [BillAddress2],
    [BillAddress3],
    [BillCity],
    [BillStateProvinceCode],
    [BillPostalCode],
    [BillCountryCode],
    [BillPhone],
    [BillFax],
    [Notes],
    [eBayBuyerID],
    [MarketWorksBuyerNumber],
    [osCommerceCustomerID],
    [ProStoresCustomerNumber],
    [InfopiaCustomerID],
    [MagentoCustomerID],
    [AddressHash]
    FROM v2m_Customers

-- open the source table cursor
OPEN workCursor

-- populate source table variables from the source cursor
FETCH NEXT FROM workCursor
INTO
    @sCustomerID,
    @sRowVersion,
    @sStoreID,
    @sShipEmail,
    @sShipFirstName,
    @sShipLastName,
    @sShipCompany,
    @sShipAddress1,
    @sShipAddress2,
    @sShipAddress3,
    @sShipCity,
    @sShipStateProvinceCode,
    @sShipPostalCode,
    @sShipCountryCode,
    @sShipPhone,
    @sShipFax,
    @sBillEmail,
    @sBillFirstName,
    @sBillLastName,
    @sBillCompany,
    @sBillAddress1,
    @sBillAddress2,
    @sBillAddress3,
    @sBillCity,
    @sBillStateProvinceCode,
    @sBillPostalCode,
    @sBillCountryCode,
    @sBillPhone,
    @sBillFax,
    @sNotes,
    @seBayBuyerID,
    @sMarketWorksBuyerNumber,
    @sosCommerceCustomerID,
    @sProStoresCustomerNumber,
    @sInfopiaCustomerID,
    @sMagentoCustomerID,
    @sAddressHash
WHILE @@FETCH_STATUS = 0
BEGIN
    SET @workCounter = @workCounter + 1
    SET @insertCustomer = 1
    
    SET @tBillFirstName = @sBillFirstName
    SET @tBillMiddleName = ''
    SET @tBillLastName = @sBillLastName
    SET @tBillCompany = @sBillCompany
    SET @tBillStreet1 = @sBillAddress1
    SET @tBillStreet2 = @sBillAddress2
    SET @tBillStreet3 = @sBillAddress3
    SET @tBillCity = @sBillCity
    SET @tBillStateProvCode = @sBillStateProvinceCode
    SET @tBillPostalCode = @sBillPostalCode
    SET @tBillCountryCode = @sBillCountryCode
    SET @tBillPhone = @sBillPhone
    SET @tBillFax = @sBillFax
    SET @tBillEmail = @sBillEmail
    SET @tBillWebsite = ''
    SET @tShipFirstName = @sShipFirstName
    SET @tShipMiddleName = ''
    SET @tShipLastName = @sShipLastName
    SET @tShipCompany = @sShipCompany
    SET @tShipStreet1 = @sShipAddress1
    SET @tShipStreet2 = @sShipAddress2
    SET @tShipStreet3 = @sShipAddress3
    SET @tShipCity = @sShipCity
    SET @tShipStateProvCode = @sShipStateProvinceCode
    SET @tShipPostalCode = @sShipPostalCode
    SET @tShipCountryCode = @sShipCountryCode
    SET @tShipPhone = @sShipPhone
    SET @tShipFax = @sShipFax
    SET @tShipEmail = @sShipEmail
    SET @tShipWebsite = ''
    SET @tRollupNoteCount = 0
    SET @tRollupOrderCount = NULL
    SET @tRollupOrderTotal = 0
    
    -- A customer can exist in multiple archive databases (+ the main db).
    if (@IsArchive = 1)
    BEGIN
		SET @unarchiveCustomerID = NULL 
		SELECT @unarchiveCustomerID = SourceKey
			FROM dbo.ArchiveLogs
			WHERE TargetKey = @sCustomerID
			AND [Type] = 2 /*customer*/
			
		-- rare chance unarchiveCustomerID is null, for unknown reason there have been a couple cuustomer records
		-- without an archivelog pointing to them.
		IF @unarchiveCustomerID IS NOT NULL
		BEGIN
			DECLARE @translatedKey bigint
			SET @translatedKey = NULL 
			
			-- Customers are special because they can exist in multiple databases, so we must 
			-- query the main database to see if it has been imported
			SELECT @translatedKey = NewKey
				 FROM {MASTERDATABASE}.dbo.v2m_MigrationKeys
				 WHERE OriginalKey = @unarchiveCustomerID
				 AND [KeyTypeCode] = 2 /* customer */
			
			-- see if the user has already been imported
			IF (@translatedKey IS NOT NULL)
			BEGIN
				SET @insertCustomer = 0
			END
		END
    END
    
    -- only insert the customer if it hasn't been inserted already
    IF (@insertCustomer = 1)
    BEGIN
	    INSERT INTO {MASTERDATABASE}.dbo.Customer  (
		    [BillFirstName],
		    [BillMiddleName],
		    [BillLastName],
		    [BillCompany],
		    [BillStreet1],
		    [BillStreet2],
		    [BillStreet3],
		    [BillCity],
		    [BillStateProvCode],
		    [BillPostalCode],
		    [BillCountryCode],
		    [BillPhone],
		    [BillFax],
		    [BillEmail],
		    [BillWebsite],
		    [ShipFirstName],
		    [ShipMiddleName],
		    [ShipLastName],
		    [ShipCompany],
		    [ShipStreet1],
		    [ShipStreet2],
		    [ShipStreet3],
		    [ShipCity],
		    [ShipStateProvCode],
		    [ShipPostalCode],
		    [ShipCountryCode],
		    [ShipPhone],
		    [ShipFax],
		    [ShipEmail],
		    [ShipWebsite],
		    [RollupOrderCount],
		    [RollupOrderTotal],
		    [RollupNoteCount]
	    )
	    VALUES
	    (
		    @tBillFirstName,
		    @tBillMiddleName,
		    @tBillLastName,
		    @tBillCompany,
		    @tBillStreet1,
		    @tBillStreet2,
		    @tBillStreet3,
		    @tBillCity,
		    @tBillStateProvCode,
		    @tBillPostalCode,
		    @tBillCountryCode,
		    @tBillPhone,
		    @tBillFax,
		    @tBillEmail,
		    @tBillWebsite,
		    @tShipFirstName,
		    @tShipMiddleName,
		    @tShipLastName,
		    @tShipCompany,
		    @tShipStreet1,
		    @tShipStreet2,
		    @tShipStreet3,
		    @tShipCity,
		    @tShipStateProvCode,
		    @tShipPostalCode,
		    @tShipCountryCode,
		    @tShipPhone,
		    @tShipFax,
		    @tShipEmail,
		    @tShipWebsite,
		    @tRollupOrderCount,
		    @tRollupOrderTotal,
		    @tRollupNoteCount
	    )             
	    
		-- get the new key
		SET @newCustomerKey = @@IDENTITY
		
		-- record the translation
		exec dbo.v2m_RecordKey @sCustomerID, 2 /* Customer */, @newCustomerKey
		
		-- record object label	
		SET @customerLabel = @tBillFirstName + ' ' + @tBillLastName
		EXEC dbo.v2m_RecordObjectLabel @newCustomerKey, 12, NULL, @customerLabel
		
		-- due to their shared nature, we need to record customers into the master db's Migration keys too
		IF (@IsArchive = 1)
		BEGIN
			-- I have run into a couple cases where an archived customer record had no associated ArchiveLogs entry.  we don't want to record that
			if (@unarchiveCustomerID IS NOT NULL)
			BEGIN
				-- insert the old->new mapping in the main SW database
				INSERT INTO {MASTERDATABASE}.dbo.v2m_MigrationKeys
				VALUES 
				(
					@unarchiveCustomerID,
					2 /* customer */,
					@newCustomerKey
				)
			END
		END
		
		-- copy the note
		if (LEN(@sNotes) > 0)
		BEGIN
			SET @noteDate = GETUTCDATE()
			exec v2m_CreateNote @newCustomerKey, @noteDate, @sNotes, 0 /* NoteSource.ShipWorksUser */, 0 /* NoteVisibliity.Internal */
		END		
	END
	
	-- delete the Customer
	DELETE FROM v2m_Customers WHERE CustomerID = @sCustomerID
	
-- fetch next row from source table
FETCH NEXT FROM workCursor
INTO
    @sCustomerID,
    @sRowVersion,
    @sStoreID,
    @sShipEmail,
    @sShipFirstName,
    @sShipLastName,
    @sShipCompany,
    @sShipAddress1,
    @sShipAddress2,
    @sShipAddress3,
    @sShipCity,
    @sShipStateProvinceCode,
    @sShipPostalCode,
    @sShipCountryCode,
    @sShipPhone,
    @sShipFax,
    @sBillEmail,
    @sBillFirstName,
    @sBillLastName,
    @sBillCompany,
    @sBillAddress1,
    @sBillAddress2,
    @sBillAddress3,
    @sBillCity,
    @sBillStateProvinceCode,
    @sBillPostalCode,
    @sBillCountryCode,
    @sBillPhone,
    @sBillFax,
    @sNotes,
    @seBayBuyerID,
    @sMarketWorksBuyerNumber,
    @sosCommerceCustomerID,
    @sProStoresCustomerNumber,
    @sInfopiaCustomerID,
    @sMagentoCustomerID,
    @sAddressHash
END
CLOSE workCursor
DEALLOCATE workCursor

-- data migration "protocol" demands we return the number of rows/work completed
SELECT @workCounter as WorkCompleted