<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="headerImage.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        8Qv/B+ejaeS9C3FGAAAAAElFTkSuQmCC
</value>
  </data>
</root>