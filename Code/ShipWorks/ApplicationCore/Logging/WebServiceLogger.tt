<#@ template language="C#" #>

<#@ assembly name="System.Core.dll" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>


<#
	var services = new object[]
	{
		"ShipWorks.Shipping.Carriers.Postal.Stamps.WebServices", "SwsimV29",
		"ShipWorks.Shipping.Carriers.Postal.Stamps.WebServices.Contract", "SwsimV39",
		"ShipWorks.Shipping.Carriers.Postal.Endicia.WebServices.LabelService", "EwsLabelService",
		"ShipWorks.Shipping.Carriers.Postal.Endicia.WebServices.AccountService", "ELSServicesService",
		"ShipWorks.Shipping.Carriers.Postal.Express1.WebServices.CustomerService", "CustomerService",
		"ShipWorks.Shipping.Carriers.Postal.Express1.WebServices.LabelService", "EwsLabelService",
		"ShipWorks.Shipping.Carriers.UPS.OnLineTools.WebServices.Registration", "RegisterMgrAcctService",
		"ShipWorks.Stores.Platforms.ChannelAdvisor.WebServices.Shipping", "ShippingService",
		"ShipWorks.Stores.Platforms.ChannelAdvisor.WebServices.Order", "OrderService",
		"ShipWorks.Stores.Platforms.ChannelAdvisor.WebServices.Inventory", "InventoryService",
		"ShipWorks.Stores.Platforms.ChannelAdvisor.WebServices.Admin", "AdminService",
		"ShipWorks.Shipping.Carriers.FedEx.WebServices.Registration", "RegistrationService",
		"ShipWorks.Shipping.Carriers.FedEx.WebServices.Rate", "RateService",
		"ShipWorks.Shipping.Carriers.FedEx.WebServices.Ship", "ShipService",
		"ShipWorks.Shipping.Carriers.FedEx.WebServices.Track", "TrackService",
		"ShipWorks.Shipping.Carriers.FedEx.WebServices.PackageMovement", "PackageMovementInformationService",
		"ShipWorks.Shipping.Carriers.FedEx.WebServices.AddressValidation", "AddressValidationService",
		"ShipWorks.Shipping.Carriers.FedEx.WebServices.Close", "CloseService",
		"ShipWorks.Shipping.Carriers.FedEx.WebServices.GlobalShipAddress", "GlobalShipAddressService",
		"ShipWorks.Stores.Platforms.Infopia.WebServices", "InfopiaWebService",
		"ShipWorks.Stores.Platforms.PayPal.WebServices", "PayPalAPISoapBinding",
		"ShipWorks.Stores.Platforms.Amazon.WebServices.SellerCentral", "merchantinterfacedime",
		"ShipWorks.Stores.Platforms.Ebay.WebServices", "eBayAPIInterfaceService",
		"ShipWorks.Stores.Platforms.MarketplaceAdvisor.WebServices.Oms", "OMService",
		"ShipWorks.Stores.Platforms.AmeriCommerce.WebServices", "AmeriCommerceDatabaseIO",
		"ShipWorks.Stores.Platforms.NetworkSolutions.WebServices", "NetSolEcomService",
		"ShipWorks.Stores.Platforms.Magento.WebServices", "MagentoService",		
		"ShipWorks.Shipping.Carriers.EquaShip.WebServices", "EquashipAPI",
		"ShipWorks.Stores.Platforms.ThreeDCart.WebServices.CartAdvanced", "cartAPIAdvanced",
		"ShipWorks.Stores.Platforms.ThreeDCart.WebServices.Cart", "cartAPI",
		"ShipWorks.Shipping.Carriers.iParcel.WebServices", "XMLSOAP",
		"ShipWorks.Shipping.Carriers.UPS.WebServices.OpenAccount", "OpenAccountService",
        "ShipWorks.Shipping.Carriers.Postal.Express1.WebServices.Stamps", "SDCV24Service"
	};
#>	

using System.Xml;
using System.Web.Services.Protocols;
using ShipWorks.ApplicationCore.Logging;
using Interapptive.Shared.Net;

<#
	for (int i = 0; i < services.Length; i += 2)
	{
		#>
namespace <#= services[i] #>
{
    /// <summary>
    /// Partial class for the webservices generated class, to help with logging
    /// </summary>
    partial class <#= services[i + 1] #>
    {
        WebServiceRawSoap rawSoap = new WebServiceRawSoap();
        IApiLogEntry logEntry;

        /// <summary>
        /// Constructor
        /// </summary>
        internal <#= services[i + 1] #>(IApiLogEntry logEntry)
            : this()
        {
            this.logEntry = logEntry;
        }

        /// <summary>
        /// Provides access to the raw soap XML sent and recieved
        /// </summary>
        public WebServiceRawSoap RawSoap
        {
            get { return rawSoap; }
        }
        
        /// <summary>
        /// The log entry being used to log the request and response
        /// </summary>
		public IApiLogEntry ApiLogEntry
        {
			get { return logEntry; }
		}

        /// <summary>
        /// Get the writer for the message
        /// </summary>
        protected override XmlWriter GetWriterForMessage(SoapClientMessage message, int bufferSize)
        {
            rawSoap.ReadOutgoingMessage(message);

            return base.GetWriterForMessage(message, bufferSize);
        }

        /// <summary>
        /// Get the response to the message that has been generated
        /// </summary>
        protected override System.Net.WebResponse GetWebResponse(System.Net.WebRequest request)
        {
            // At this point the message has been completely serialized and ready to be logged
            if (logEntry != null && rawSoap.RequestXml != null)
            {
                logEntry.LogRequest(rawSoap.RequestXml);
            }

			// get the reponse
            System.Net.WebResponse baseResponse = base.GetWebResponse(request);

			// check for Soap the same way the framework does
			if (!IsSoap(baseResponse.ContentType))
			{
				RaiseInvalidSoapException(baseResponse);
			}

			return baseResponse;
        }

        /// <summary>
        /// Get the XmlReader used to read the response message
        /// </summary>
        protected override XmlReader GetReaderForMessage(SoapClientMessage message, int bufferSize)
        {
            rawSoap.ReadIncomingMessage(message);

            // Response is now ready to be logged
            if (logEntry != null && rawSoap.ResponseXml != null)
            {
                logEntry.LogResponse(rawSoap.ResponseXml);
            }

            return base.GetReaderForMessage(message, bufferSize);
        }

        /// <summary>
        /// Checks the contentType to see if it is one that would indicate a SOAP response.
		/// This was pulled out of a .NET Framework internal class. 
        /// </summary>
		private bool IsSoap(string contentType)
        {
            if (!contentType.StartsWith("text/xml", System.StringComparison.InvariantCultureIgnoreCase))
            {
                return (contentType.StartsWith("application/soap+xml", System.StringComparison.OrdinalIgnoreCase));
            }

            return true;
        }

		/// <summary>
        /// Extract the response and raise an exception
        /// </summary>
        private void RaiseInvalidSoapException(System.Net.WebResponse response)
        {
            using (System.IO.Stream responseStream = response.GetResponseStream())
            {
                using (System.IO.StreamReader reader = new System.IO.StreamReader(responseStream))
                {
                    string responseContent = reader.ReadToEnd();

                    // http-specific properties
                    System.Net.HttpStatusCode statusCode = System.Net.HttpStatusCode.OK;
                    string statusDescription = "";

                    System.Net.HttpWebResponse httpWebResponse = response as System.Net.HttpWebResponse;
                    if (httpWebResponse != null)
                    {
                        statusCode = httpWebResponse.StatusCode;
                        statusDescription = httpWebResponse.StatusDescription;
                    }

                    throw new Interapptive.Shared.Net.InvalidSoapException(statusCode, statusDescription, responseContent);
                }
            }
        }
    }
}		

<#
	}
#>