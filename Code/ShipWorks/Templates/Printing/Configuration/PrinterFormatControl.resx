<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="picturePaper.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>