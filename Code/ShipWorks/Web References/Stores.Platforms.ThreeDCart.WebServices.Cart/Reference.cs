//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.269.
// 
#pragma warning disable 1591

namespace ShipWorks.Stores.Platforms.ThreeDCart.WebServices.Cart {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="cartAPISoap", Namespace="http://3dcart.com/")]
    public partial class cartAPI : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback getProductOperationCompleted;
        
        private System.Threading.SendOrPostCallback getCustomerOperationCompleted;
        
        private System.Threading.SendOrPostCallback editCustomerOperationCompleted;
        
        private System.Threading.SendOrPostCallback getProductCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback getCustomerCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback getOrderStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback getProductInventoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateProductInventoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateOrderStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateOrderShipmentOperationCompleted;
        
        private System.Threading.SendOrPostCallback getOrderOperationCompleted;
        
        private System.Threading.SendOrPostCallback getOrderCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback getCustomerLoginTokenOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public cartAPI() {
            this.Url = "http://api.3dcart.com/cart.asmx";
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event getProductCompletedEventHandler getProductCompleted;
        
        /// <remarks/>
        public event getCustomerCompletedEventHandler getCustomerCompleted;
        
        /// <remarks/>
        public event editCustomerCompletedEventHandler editCustomerCompleted;
        
        /// <remarks/>
        public event getProductCountCompletedEventHandler getProductCountCompleted;
        
        /// <remarks/>
        public event getCustomerCountCompletedEventHandler getCustomerCountCompleted;
        
        /// <remarks/>
        public event getOrderStatusCompletedEventHandler getOrderStatusCompleted;
        
        /// <remarks/>
        public event getProductInventoryCompletedEventHandler getProductInventoryCompleted;
        
        /// <remarks/>
        public event updateProductInventoryCompletedEventHandler updateProductInventoryCompleted;
        
        /// <remarks/>
        public event updateOrderStatusCompletedEventHandler updateOrderStatusCompleted;
        
        /// <remarks/>
        public event updateOrderShipmentCompletedEventHandler updateOrderShipmentCompleted;
        
        /// <remarks/>
        public event getOrderCompletedEventHandler getOrderCompleted;
        
        /// <remarks/>
        public event getOrderCountCompletedEventHandler getOrderCountCompleted;
        
        /// <remarks/>
        public event getCustomerLoginTokenCompletedEventHandler getCustomerLoginTokenCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://3dcart.com/getProduct", RequestNamespace="http://3dcart.com/", ResponseNamespace="http://3dcart.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode getProduct(string storeUrl, string userKey, int batchSize, int startNum, string productId, string callBackURL) {
            object[] results = this.Invoke("getProduct", new object[] {
                        storeUrl,
                        userKey,
                        batchSize,
                        startNum,
                        productId,
                        callBackURL});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void getProductAsync(string storeUrl, string userKey, int batchSize, int startNum, string productId, string callBackURL) {
            this.getProductAsync(storeUrl, userKey, batchSize, startNum, productId, callBackURL, null);
        }
        
        /// <remarks/>
        public void getProductAsync(string storeUrl, string userKey, int batchSize, int startNum, string productId, string callBackURL, object userState) {
            if ((this.getProductOperationCompleted == null)) {
                this.getProductOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetProductOperationCompleted);
            }
            this.InvokeAsync("getProduct", new object[] {
                        storeUrl,
                        userKey,
                        batchSize,
                        startNum,
                        productId,
                        callBackURL}, this.getProductOperationCompleted, userState);
        }
        
        private void OngetProductOperationCompleted(object arg) {
            if ((this.getProductCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getProductCompleted(this, new getProductCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://3dcart.com/getCustomer", RequestNamespace="http://3dcart.com/", ResponseNamespace="http://3dcart.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode getCustomer(string storeUrl, string userKey, int batchSize, int startNum, string customersFilter, string callBackURL) {
            object[] results = this.Invoke("getCustomer", new object[] {
                        storeUrl,
                        userKey,
                        batchSize,
                        startNum,
                        customersFilter,
                        callBackURL});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void getCustomerAsync(string storeUrl, string userKey, int batchSize, int startNum, string customersFilter, string callBackURL) {
            this.getCustomerAsync(storeUrl, userKey, batchSize, startNum, customersFilter, callBackURL, null);
        }
        
        /// <remarks/>
        public void getCustomerAsync(string storeUrl, string userKey, int batchSize, int startNum, string customersFilter, string callBackURL, object userState) {
            if ((this.getCustomerOperationCompleted == null)) {
                this.getCustomerOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCustomerOperationCompleted);
            }
            this.InvokeAsync("getCustomer", new object[] {
                        storeUrl,
                        userKey,
                        batchSize,
                        startNum,
                        customersFilter,
                        callBackURL}, this.getCustomerOperationCompleted, userState);
        }
        
        private void OngetCustomerOperationCompleted(object arg) {
            if ((this.getCustomerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCustomerCompleted(this, new getCustomerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://3dcart.com/editCustomer", RequestNamespace="http://3dcart.com/", ResponseNamespace="http://3dcart.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode editCustomer(string storeUrl, string userKey, string customerData, string action, string callBackURL) {
            object[] results = this.Invoke("editCustomer", new object[] {
                        storeUrl,
                        userKey,
                        customerData,
                        action,
                        callBackURL});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void editCustomerAsync(string storeUrl, string userKey, string customerData, string action, string callBackURL) {
            this.editCustomerAsync(storeUrl, userKey, customerData, action, callBackURL, null);
        }
        
        /// <remarks/>
        public void editCustomerAsync(string storeUrl, string userKey, string customerData, string action, string callBackURL, object userState) {
            if ((this.editCustomerOperationCompleted == null)) {
                this.editCustomerOperationCompleted = new System.Threading.SendOrPostCallback(this.OneditCustomerOperationCompleted);
            }
            this.InvokeAsync("editCustomer", new object[] {
                        storeUrl,
                        userKey,
                        customerData,
                        action,
                        callBackURL}, this.editCustomerOperationCompleted, userState);
        }
        
        private void OneditCustomerOperationCompleted(object arg) {
            if ((this.editCustomerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.editCustomerCompleted(this, new editCustomerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://3dcart.com/getProductCount", RequestNamespace="http://3dcart.com/", ResponseNamespace="http://3dcart.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode getProductCount(string storeUrl, string userKey, string callBackURL) {
            object[] results = this.Invoke("getProductCount", new object[] {
                        storeUrl,
                        userKey,
                        callBackURL});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void getProductCountAsync(string storeUrl, string userKey, string callBackURL) {
            this.getProductCountAsync(storeUrl, userKey, callBackURL, null);
        }
        
        /// <remarks/>
        public void getProductCountAsync(string storeUrl, string userKey, string callBackURL, object userState) {
            if ((this.getProductCountOperationCompleted == null)) {
                this.getProductCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetProductCountOperationCompleted);
            }
            this.InvokeAsync("getProductCount", new object[] {
                        storeUrl,
                        userKey,
                        callBackURL}, this.getProductCountOperationCompleted, userState);
        }
        
        private void OngetProductCountOperationCompleted(object arg) {
            if ((this.getProductCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getProductCountCompleted(this, new getProductCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://3dcart.com/getCustomerCount", RequestNamespace="http://3dcart.com/", ResponseNamespace="http://3dcart.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode getCustomerCount(string storeUrl, string userKey, string callBackURL) {
            object[] results = this.Invoke("getCustomerCount", new object[] {
                        storeUrl,
                        userKey,
                        callBackURL});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void getCustomerCountAsync(string storeUrl, string userKey, string callBackURL) {
            this.getCustomerCountAsync(storeUrl, userKey, callBackURL, null);
        }
        
        /// <remarks/>
        public void getCustomerCountAsync(string storeUrl, string userKey, string callBackURL, object userState) {
            if ((this.getCustomerCountOperationCompleted == null)) {
                this.getCustomerCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCustomerCountOperationCompleted);
            }
            this.InvokeAsync("getCustomerCount", new object[] {
                        storeUrl,
                        userKey,
                        callBackURL}, this.getCustomerCountOperationCompleted, userState);
        }
        
        private void OngetCustomerCountOperationCompleted(object arg) {
            if ((this.getCustomerCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCustomerCountCompleted(this, new getCustomerCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://3dcart.com/getOrderStatus", RequestNamespace="http://3dcart.com/", ResponseNamespace="http://3dcart.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode getOrderStatus(string storeUrl, string userKey, string invoiceNum, string callBackURL) {
            object[] results = this.Invoke("getOrderStatus", new object[] {
                        storeUrl,
                        userKey,
                        invoiceNum,
                        callBackURL});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void getOrderStatusAsync(string storeUrl, string userKey, string invoiceNum, string callBackURL) {
            this.getOrderStatusAsync(storeUrl, userKey, invoiceNum, callBackURL, null);
        }
        
        /// <remarks/>
        public void getOrderStatusAsync(string storeUrl, string userKey, string invoiceNum, string callBackURL, object userState) {
            if ((this.getOrderStatusOperationCompleted == null)) {
                this.getOrderStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetOrderStatusOperationCompleted);
            }
            this.InvokeAsync("getOrderStatus", new object[] {
                        storeUrl,
                        userKey,
                        invoiceNum,
                        callBackURL}, this.getOrderStatusOperationCompleted, userState);
        }
        
        private void OngetOrderStatusOperationCompleted(object arg) {
            if ((this.getOrderStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getOrderStatusCompleted(this, new getOrderStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://3dcart.com/getProductInventory", RequestNamespace="http://3dcart.com/", ResponseNamespace="http://3dcart.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode getProductInventory(string storeUrl, string userKey, string productId, string callBackURL) {
            object[] results = this.Invoke("getProductInventory", new object[] {
                        storeUrl,
                        userKey,
                        productId,
                        callBackURL});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void getProductInventoryAsync(string storeUrl, string userKey, string productId, string callBackURL) {
            this.getProductInventoryAsync(storeUrl, userKey, productId, callBackURL, null);
        }
        
        /// <remarks/>
        public void getProductInventoryAsync(string storeUrl, string userKey, string productId, string callBackURL, object userState) {
            if ((this.getProductInventoryOperationCompleted == null)) {
                this.getProductInventoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetProductInventoryOperationCompleted);
            }
            this.InvokeAsync("getProductInventory", new object[] {
                        storeUrl,
                        userKey,
                        productId,
                        callBackURL}, this.getProductInventoryOperationCompleted, userState);
        }
        
        private void OngetProductInventoryOperationCompleted(object arg) {
            if ((this.getProductInventoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getProductInventoryCompleted(this, new getProductInventoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://3dcart.com/updateProductInventory", RequestNamespace="http://3dcart.com/", ResponseNamespace="http://3dcart.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode updateProductInventory(string storeUrl, string userKey, string productId, int quantity, bool replaceStock, string callBackURL) {
            object[] results = this.Invoke("updateProductInventory", new object[] {
                        storeUrl,
                        userKey,
                        productId,
                        quantity,
                        replaceStock,
                        callBackURL});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void updateProductInventoryAsync(string storeUrl, string userKey, string productId, int quantity, bool replaceStock, string callBackURL) {
            this.updateProductInventoryAsync(storeUrl, userKey, productId, quantity, replaceStock, callBackURL, null);
        }
        
        /// <remarks/>
        public void updateProductInventoryAsync(string storeUrl, string userKey, string productId, int quantity, bool replaceStock, string callBackURL, object userState) {
            if ((this.updateProductInventoryOperationCompleted == null)) {
                this.updateProductInventoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateProductInventoryOperationCompleted);
            }
            this.InvokeAsync("updateProductInventory", new object[] {
                        storeUrl,
                        userKey,
                        productId,
                        quantity,
                        replaceStock,
                        callBackURL}, this.updateProductInventoryOperationCompleted, userState);
        }
        
        private void OnupdateProductInventoryOperationCompleted(object arg) {
            if ((this.updateProductInventoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateProductInventoryCompleted(this, new updateProductInventoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://3dcart.com/updateOrderStatus", RequestNamespace="http://3dcart.com/", ResponseNamespace="http://3dcart.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode updateOrderStatus(string storeUrl, string userKey, string invoiceNum, string newStatus, string callBackURL) {
            object[] results = this.Invoke("updateOrderStatus", new object[] {
                        storeUrl,
                        userKey,
                        invoiceNum,
                        newStatus,
                        callBackURL});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void updateOrderStatusAsync(string storeUrl, string userKey, string invoiceNum, string newStatus, string callBackURL) {
            this.updateOrderStatusAsync(storeUrl, userKey, invoiceNum, newStatus, callBackURL, null);
        }
        
        /// <remarks/>
        public void updateOrderStatusAsync(string storeUrl, string userKey, string invoiceNum, string newStatus, string callBackURL, object userState) {
            if ((this.updateOrderStatusOperationCompleted == null)) {
                this.updateOrderStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateOrderStatusOperationCompleted);
            }
            this.InvokeAsync("updateOrderStatus", new object[] {
                        storeUrl,
                        userKey,
                        invoiceNum,
                        newStatus,
                        callBackURL}, this.updateOrderStatusOperationCompleted, userState);
        }
        
        private void OnupdateOrderStatusOperationCompleted(object arg) {
            if ((this.updateOrderStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateOrderStatusCompleted(this, new updateOrderStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://3dcart.com/updateOrderShipment", RequestNamespace="http://3dcart.com/", ResponseNamespace="http://3dcart.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode updateOrderShipment(string storeUrl, string userKey, string invoiceNum, string shipmentID, string tracking, string shipmentDate, string callBackURL) {
            object[] results = this.Invoke("updateOrderShipment", new object[] {
                        storeUrl,
                        userKey,
                        invoiceNum,
                        shipmentID,
                        tracking,
                        shipmentDate,
                        callBackURL});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void updateOrderShipmentAsync(string storeUrl, string userKey, string invoiceNum, string shipmentID, string tracking, string shipmentDate, string callBackURL) {
            this.updateOrderShipmentAsync(storeUrl, userKey, invoiceNum, shipmentID, tracking, shipmentDate, callBackURL, null);
        }
        
        /// <remarks/>
        public void updateOrderShipmentAsync(string storeUrl, string userKey, string invoiceNum, string shipmentID, string tracking, string shipmentDate, string callBackURL, object userState) {
            if ((this.updateOrderShipmentOperationCompleted == null)) {
                this.updateOrderShipmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateOrderShipmentOperationCompleted);
            }
            this.InvokeAsync("updateOrderShipment", new object[] {
                        storeUrl,
                        userKey,
                        invoiceNum,
                        shipmentID,
                        tracking,
                        shipmentDate,
                        callBackURL}, this.updateOrderShipmentOperationCompleted, userState);
        }
        
        private void OnupdateOrderShipmentOperationCompleted(object arg) {
            if ((this.updateOrderShipmentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateOrderShipmentCompleted(this, new updateOrderShipmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://3dcart.com/getOrder", RequestNamespace="http://3dcart.com/", ResponseNamespace="http://3dcart.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode getOrder(string storeUrl, string userKey, int batchSize, int startNum, bool startFrom, string invoiceNum, string status, string dateFrom, string dateTo, string callBackURL) {
            object[] results = this.Invoke("getOrder", new object[] {
                        storeUrl,
                        userKey,
                        batchSize,
                        startNum,
                        startFrom,
                        invoiceNum,
                        status,
                        dateFrom,
                        dateTo,
                        callBackURL});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void getOrderAsync(string storeUrl, string userKey, int batchSize, int startNum, bool startFrom, string invoiceNum, string status, string dateFrom, string dateTo, string callBackURL) {
            this.getOrderAsync(storeUrl, userKey, batchSize, startNum, startFrom, invoiceNum, status, dateFrom, dateTo, callBackURL, null);
        }
        
        /// <remarks/>
        public void getOrderAsync(string storeUrl, string userKey, int batchSize, int startNum, bool startFrom, string invoiceNum, string status, string dateFrom, string dateTo, string callBackURL, object userState) {
            if ((this.getOrderOperationCompleted == null)) {
                this.getOrderOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetOrderOperationCompleted);
            }
            this.InvokeAsync("getOrder", new object[] {
                        storeUrl,
                        userKey,
                        batchSize,
                        startNum,
                        startFrom,
                        invoiceNum,
                        status,
                        dateFrom,
                        dateTo,
                        callBackURL}, this.getOrderOperationCompleted, userState);
        }
        
        private void OngetOrderOperationCompleted(object arg) {
            if ((this.getOrderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getOrderCompleted(this, new getOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://3dcart.com/getOrderCount", RequestNamespace="http://3dcart.com/", ResponseNamespace="http://3dcart.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode getOrderCount(string storeUrl, string userKey, bool startFrom, string invoiceNum, string status, string dateFrom, string dateTo, string callBackURL) {
            object[] results = this.Invoke("getOrderCount", new object[] {
                        storeUrl,
                        userKey,
                        startFrom,
                        invoiceNum,
                        status,
                        dateFrom,
                        dateTo,
                        callBackURL});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void getOrderCountAsync(string storeUrl, string userKey, bool startFrom, string invoiceNum, string status, string dateFrom, string dateTo, string callBackURL) {
            this.getOrderCountAsync(storeUrl, userKey, startFrom, invoiceNum, status, dateFrom, dateTo, callBackURL, null);
        }
        
        /// <remarks/>
        public void getOrderCountAsync(string storeUrl, string userKey, bool startFrom, string invoiceNum, string status, string dateFrom, string dateTo, string callBackURL, object userState) {
            if ((this.getOrderCountOperationCompleted == null)) {
                this.getOrderCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetOrderCountOperationCompleted);
            }
            this.InvokeAsync("getOrderCount", new object[] {
                        storeUrl,
                        userKey,
                        startFrom,
                        invoiceNum,
                        status,
                        dateFrom,
                        dateTo,
                        callBackURL}, this.getOrderCountOperationCompleted, userState);
        }
        
        private void OngetOrderCountOperationCompleted(object arg) {
            if ((this.getOrderCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getOrderCountCompleted(this, new getOrderCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://3dcart.com/getCustomerLoginToken", RequestNamespace="http://3dcart.com/", ResponseNamespace="http://3dcart.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode getCustomerLoginToken(string storeUrl, string userKey, string customerEmail, int timeToLive, string callBackURL) {
            object[] results = this.Invoke("getCustomerLoginToken", new object[] {
                        storeUrl,
                        userKey,
                        customerEmail,
                        timeToLive,
                        callBackURL});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void getCustomerLoginTokenAsync(string storeUrl, string userKey, string customerEmail, int timeToLive, string callBackURL) {
            this.getCustomerLoginTokenAsync(storeUrl, userKey, customerEmail, timeToLive, callBackURL, null);
        }
        
        /// <remarks/>
        public void getCustomerLoginTokenAsync(string storeUrl, string userKey, string customerEmail, int timeToLive, string callBackURL, object userState) {
            if ((this.getCustomerLoginTokenOperationCompleted == null)) {
                this.getCustomerLoginTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCustomerLoginTokenOperationCompleted);
            }
            this.InvokeAsync("getCustomerLoginToken", new object[] {
                        storeUrl,
                        userKey,
                        customerEmail,
                        timeToLive,
                        callBackURL}, this.getCustomerLoginTokenOperationCompleted, userState);
        }
        
        private void OngetCustomerLoginTokenOperationCompleted(object arg) {
            if ((this.getCustomerLoginTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCustomerLoginTokenCompleted(this, new getCustomerLoginTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getProductCompletedEventHandler(object sender, getProductCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getProductCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getProductCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getCustomerCompletedEventHandler(object sender, getCustomerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getCustomerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getCustomerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void editCustomerCompletedEventHandler(object sender, editCustomerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class editCustomerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal editCustomerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getProductCountCompletedEventHandler(object sender, getProductCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getProductCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getProductCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getCustomerCountCompletedEventHandler(object sender, getCustomerCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getCustomerCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getCustomerCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getOrderStatusCompletedEventHandler(object sender, getOrderStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getOrderStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getOrderStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getProductInventoryCompletedEventHandler(object sender, getProductInventoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getProductInventoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getProductInventoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void updateProductInventoryCompletedEventHandler(object sender, updateProductInventoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateProductInventoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateProductInventoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void updateOrderStatusCompletedEventHandler(object sender, updateOrderStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateOrderStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateOrderStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void updateOrderShipmentCompletedEventHandler(object sender, updateOrderShipmentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateOrderShipmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateOrderShipmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getOrderCompletedEventHandler(object sender, getOrderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getOrderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getOrderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getOrderCountCompletedEventHandler(object sender, getOrderCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getOrderCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getOrderCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getCustomerLoginTokenCompletedEventHandler(object sender, getCustomerLoginTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getCustomerLoginTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getCustomerLoginTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591