<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="/ShipWorks.UI;component/Styles/BlueSteel/Colors.xaml" />
        <ResourceDictionary Source="/ShipWorks.UI;component/Styles/BlueSteel/ComboBoxStyle.xaml" />
    </ResourceDictionary.MergedDictionaries>
    <ControlTemplate x:Key="OrderLookupEditableComboBoxTemplate" TargetType="{x:Type ComboBox}">
        <Grid x:Name="templateRoot" SnapsToDevicePixels="True">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="0" MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" />
            </Grid.ColumnDefinitions>
            <Popup
                x:Name="PART_Popup"
                Grid.ColumnSpan="2"
                Margin="1"
                AllowsTransparency="True"
                IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                Placement="Bottom"
                PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                <Themes:SystemDropShadowChrome
                    x:Name="shadow"
                    MinWidth="{Binding ActualWidth, ElementName=templateRoot}"
                    MaxHeight="{TemplateBinding MaxDropDownHeight}"
                    Color="Transparent">
                    <Border
                        x:Name="DropDownBorder"
                        Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"
                        BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}"
                        BorderThickness="1">
                        <ScrollViewer x:Name="DropDownScrollViewer">
                            <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                <Canvas
                                    x:Name="canvas"
                                    Width="0"
                                    Height="0"
                                    HorizontalAlignment="Left"
                                    VerticalAlignment="Top">
                                    <Rectangle
                                        x:Name="OpaqueRect"
                                        Width="{Binding ActualWidth, ElementName=DropDownBorder}"
                                        Height="{Binding ActualHeight, ElementName=DropDownBorder}"
                                        Fill="{Binding Background, ElementName=DropDownBorder}" />
                                </Canvas>
                                <ItemsPresenter
                                    x:Name="ItemsPresenter"
                                    KeyboardNavigation.DirectionalNavigation="Contained"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </Grid>
                        </ScrollViewer>
                    </Border>
                </Themes:SystemDropShadowChrome>
            </Popup>
            <ToggleButton
                x:Name="toggleButton"
                Grid.ColumnSpan="2"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                <ToggleButton.Style>
                    <Style TargetType="{x:Type ToggleButton}">
                        <Setter Property="OverridesDefaultStyle" Value="True" />
                        <Setter Property="IsTabStop" Value="False" />
                        <Setter Property="Focusable" Value="False" />
                        <Setter Property="ClickMode" Value="Press" />
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type ToggleButton}">
                                    <Border
                                        x:Name="templateRoot"
                                        Background="{StaticResource ButtonBackgroundGradient}"
                                        BorderBrush="{StaticResource BorderColor}"
                                        BorderThickness="{TemplateBinding BorderThickness}"
                                        CornerRadius="1"
                                        SnapsToDevicePixels="True">
                                        <Border
                                            x:Name="splitBorder"
                                            HorizontalAlignment="Right"
                                            SnapsToDevicePixels="True">
                                            <Path
                                                x:Name="Arrow"
                                                Width="6"
                                                Height="4"
                                                Margin="11,0,11,0"
                                                Data="M7,10L12,15L17,10H7Z"
                                                Fill="{StaticResource IconColor}"
                                                Stretch="Fill" />
                                        </Border>
                                    </Border>
                                    <ControlTemplate.Triggers>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="true" />
                                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="false" />
                                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="false" />
                                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="true" />
                                            </MultiDataTrigger.Conditions>
                                            <Setter TargetName="templateRoot" Property="Background" Value="{StaticResource ButtonBackgroundGradient}" />
                                            <Setter TargetName="templateRoot" Property="BorderBrush" Value="{StaticResource BorderColor}" />
                                            <Setter TargetName="splitBorder" Property="Background" Value="Transparent" />
                                            <Setter TargetName="splitBorder" Property="BorderBrush" Value="Transparent" />
                                        </MultiDataTrigger>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter TargetName="Arrow" Property="Fill" Value="Black" />
                                        </Trigger>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true" />
                                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="true" />
                                            </MultiDataTrigger.Conditions>
                                            <Setter TargetName="templateRoot" Property="BorderBrush" Value="#FF7EB4EA" />
                                        </MultiDataTrigger>
                                        <Trigger Property="IsPressed" Value="True">
                                            <Setter TargetName="Arrow" Property="Fill" Value="Black" />
                                        </Trigger>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true" />
                                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="true" />
                                            </MultiDataTrigger.Conditions>
                                            <Setter TargetName="templateRoot" Property="BorderBrush" Value="#FF569DE5" />
                                        </MultiDataTrigger>
                                        <Trigger Property="IsEnabled" Value="False">
                                            <Setter TargetName="Arrow" Property="Fill" Value="#FFBFBFBF" />
                                        </Trigger>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false" />
                                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="true" />
                                            </MultiDataTrigger.Conditions>
                                            <Setter TargetName="templateRoot" Property="Background" Value="#FFF0F0F0" />
                                            <Setter TargetName="templateRoot" Property="BorderBrush" Value="#FFD9D9D9" />
                                            <Setter TargetName="splitBorder" Property="Background" Value="Transparent" />
                                            <Setter TargetName="splitBorder" Property="BorderBrush" Value="Transparent" />
                                        </MultiDataTrigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </ToggleButton.Style>
            </ToggleButton>
            <Border x:Name="Border" Margin="{TemplateBinding BorderThickness}">
                <TextBox
                    x:Name="PART_EditableTextBox"
                    Margin="{TemplateBinding Padding}"
                    HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                    VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                    IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}">
                    <TextBox.Style>
                        <Style TargetType="{x:Type TextBox}">
                            <Setter Property="OverridesDefaultStyle" Value="True" />
                            <Setter Property="AllowDrop" Value="True" />
                            <Setter Property="MinWidth" Value="0" />
                            <Setter Property="MinHeight" Value="0" />
                            <Setter Property="FocusVisualStyle" Value="{x:Null}" />
                            <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
                            <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type TextBox}">
                                        <ScrollViewer
                                            x:Name="PART_ContentHost"
                                            Background="Transparent"
                                            Focusable="False"
                                            HorizontalScrollBarVisibility="Hidden"
                                            VerticalScrollBarVisibility="Hidden" />
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </TextBox.Style>
                </TextBox>
            </Border>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger SourceName="PART_Popup" Property="HasDropShadow" Value="True">
                <Setter TargetName="shadow" Property="Margin" Value="0,0,5,5" />
                <Setter TargetName="shadow" Property="Color" Value="#71000000" />
            </Trigger>
            <Trigger Property="HasItems" Value="False">
                <Setter TargetName="DropDownBorder" Property="Height" Value="95" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="True" />
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
            </MultiTrigger>
            <Trigger SourceName="DropDownScrollViewer" Property="CanContentScroll" Value="False">
                <Setter TargetName="OpaqueRect" Property="Canvas.Top" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}" />
                <Setter TargetName="OpaqueRect" Property="Canvas.Left" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.56" />
                <Setter Property="Foreground" Value="#FF838383" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style
        x:Key="EditableFormComboBox"
        BasedOn="{StaticResource FormComboBox}"
        TargetType="{x:Type ComboBox}">
        <Setter Property="Template" Value="{StaticResource OrderLookupEditableComboBoxTemplate}" />
        <Setter Property="IsEditable" Value="True" />
        <Setter Property="IsTextSearchEnabled" Value="True" />
    </Style>
</ResourceDictionary>