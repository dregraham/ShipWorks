using System;
using Autofac.Extras.Moq;
using CultureAttribute;
using Interapptive.Shared.Enums;
using Interapptive.Shared.Metrics;
using Moq;
using ShipWorks.Common.IO.Hardware.Printers;
using ShipWorks.Data.Model.EntityInterfaces;
using ShipWorks.Shipping.Carriers.FedEx.Api.Enums;
using ShipWorks.Shipping.Carriers.FedEx.Enums;
using ShipWorks.Shipping.FedEx;
using ShipWorks.Shipping.Services.Telemetry;
using ShipWorks.Tests.Shared;
using Xunit;

namespace ShipWorks.Shipping.Tests.Services.Telemetry
{
	[UseCulture("en-US")]
	public class FedExTelemetryMutatorTest
	{
		private readonly AutoMock mock;
		private readonly Mock<ITrackedDurationEvent> trackedDurationEventMock;
		private Mock<IShipmentEntity> shipment;
		private Mock<IFedExShipmentEntity> fedExShipment;
		private Mock<IFedExPackageEntity> package;
		private readonly DateTime testDateTime;
		private readonly DateTime testDateTime2;
		private readonly DateTime testDateTime3;

		public FedExTelemetryMutatorTest()
		{
			testDateTime = DateTime.Now;
			testDateTime2 = DateTime.Now;
			testDateTime3 = DateTime.Now;

			mock = AutoMockExtensions.GetLooseThatReturnsMocks();
			trackedDurationEventMock = mock.MockRepository.Create<ITrackedDurationEvent>();

			package = mock.MockRepository.Create<IFedExPackageEntity>();
			package.SetupGet(x => x.AlcoholRecipientType).Returns((int) ShipWorks.Shipping.Carriers.FedEx.WebServices.OpenShip.AlcoholRecipientType.CONSUMER);
			package.SetupGet(x => x.BatteryMaterial).Returns(FedExBatteryMaterialType.LithiumIon);
			package.SetupGet(x => x.BatteryPacking).Returns(FedExBatteryPackingType.ContainsInEquipement);
			package.SetupGet(x => x.BatteryRegulatorySubtype).Returns(FedExBatteryRegulatorySubType.IATASectionII);
			package.SetupGet(x => x.ContainsAlcohol).Returns(true);
			package.SetupGet(x => x.ContainerType).Returns("ContainerType");
			package.SetupGet(x => x.DangerousGoodsAccessibilityType).Returns((int) FedExDangerousGoodsAccessibilityType.Accessible);
			package.SetupGet(x => x.DangerousGoodsCargoAircraftOnly).Returns(true);
			package.SetupGet(x => x.DangerousGoodsEmergencyContactPhone).Returns("DangerousGoodsEm");
			package.SetupGet(x => x.DangerousGoodsEnabled).Returns(true);
			package.SetupGet(x => x.DangerousGoodsOfferor).Returns("DangerousGoodsOfferor");
			package.SetupGet(x => x.DangerousGoodsPackagingCount).Returns(1);
			package.SetupGet(x => x.DangerousGoodsType).Returns((int) FedExDangerousGoodsMaterialType.Batteries);
			package.SetupGet(x => x.DeclaredValue).Returns(2);
			package.SetupGet(x => x.DimsAddWeight).Returns(true);
			package.SetupGet(x => x.DimsHeight).Returns(3);
			package.SetupGet(x => x.DimsLength).Returns(4);
			package.SetupGet(x => x.DimsWeight).Returns(5);
			package.SetupGet(x => x.DimsWidth).Returns(6);
			package.SetupGet(x => x.DryIceWeight).Returns(7);
			package.SetupGet(x => x.FreightPackaging).Returns(FedExFreightPhysicalPackagingType.Bag);
			package.SetupGet(x => x.FreightPieces).Returns(8);
			package.SetupGet(x => x.HazardousMaterialClass).Returns("Hazardou");
			package.SetupGet(x => x.HazardousMaterialNumber).Returns("HazardousMateria");
			package.SetupGet(x => x.HazardousMaterialPackingGroup).Returns((int) FedExHazardousMaterialsPackingGroup.I);
			package.SetupGet(x => x.HazardousMaterialProperName).Returns("HazardousMaterialProperName");
			package.SetupGet(x => x.HazardousMaterialQuanityUnits).Returns((int) FedExHazardousMaterialsQuantityUnits.Gram);
			package.SetupGet(x => x.HazardousMaterialQuantityValue).Returns(9);
			package.SetupGet(x => x.HazardousMaterialTechnicalName).Returns("HazardousMaterialTechnicalName");
			package.SetupGet(x => x.Insurance).Returns(true);
			package.SetupGet(x => x.InsurancePennyOne).Returns(true);
			package.SetupGet(x => x.InsuranceValue).Returns(10);
			package.SetupGet(x => x.NumberOfContainers).Returns(11);
			package.SetupGet(x => x.PackingDetailsCargoAircraftOnly).Returns(true);
			package.SetupGet(x => x.PackingDetailsPackingInstructions).Returns("PackingDetailsPackingInstructions");
			package.SetupGet(x => x.DangerousGoodsAuthorization).Returns("DangerousGoodsAuthorization");
			package.SetupGet(x => x.PriorityAlert).Returns(true);
			package.SetupGet(x => x.PriorityAlertDetailContent).Returns("PriorityAlertDetailContent");
			package.SetupGet(x => x.PriorityAlertEnhancementType).Returns((int) FedExPriorityAlertEnhancementType.PriorityAlert);
			package.SetupGet(x => x.SignatoryContactName).Returns("SignatoryContactName");
			package.SetupGet(x => x.SignatoryPlace).Returns("SignatoryPlace");
			package.SetupGet(x => x.SignatoryTitle).Returns("SignatoryTitle");
			package.SetupGet(x => x.SkidPieces).Returns(12);
			package.SetupGet(x => x.TrackingNumber).Returns("TrackingNumber");
			package.SetupGet(x => x.Weight).Returns(13);

			fedExShipment = mock.MockRepository.Create<IFedExShipmentEntity>();
			fedExShipment.SetupGet(x => x.BrokerAccount).Returns("BrokerAccoun");
			fedExShipment.SetupGet(x => x.BrokerCity).Returns("BrokerCity");
			fedExShipment.SetupGet(x => x.BrokerCompany).Returns("BrokerCompany");
			fedExShipment.SetupGet(x => x.BrokerCountryCode).Returns("BrokerCountryCode");
			fedExShipment.SetupGet(x => x.BrokerEmail).Returns("BrokerEmail");
			fedExShipment.SetupGet(x => x.BrokerEnabled).Returns(true);
			fedExShipment.SetupGet(x => x.BrokerFirstName).Returns("BrokerFirstName");
			fedExShipment.SetupGet(x => x.BrokerLastName).Returns("BrokerLastName");
			fedExShipment.SetupGet(x => x.BrokerPhone).Returns("BrokerPhone");
			fedExShipment.SetupGet(x => x.BrokerPhoneExtension).Returns("BrokerPh");
			fedExShipment.SetupGet(x => x.BrokerPostalCode).Returns("BrokerPostalCode");
			fedExShipment.SetupGet(x => x.BrokerStateProvCode).Returns("BrokerStateProvCode");
			fedExShipment.SetupGet(x => x.BrokerStreet1).Returns("BrokerStreet1");
			fedExShipment.SetupGet(x => x.BrokerStreet2).Returns("BrokerStreet2");
			fedExShipment.SetupGet(x => x.BrokerStreet3).Returns("BrokerStreet3");
			fedExShipment.SetupGet(x => x.CodAccountNumber).Returns("CodAccountNumber");
			fedExShipment.SetupGet(x => x.CodAddFreight).Returns(true);
			fedExShipment.SetupGet(x => x.CodAmount).Returns(1);
			fedExShipment.SetupGet(x => x.CodChargeBasis).Returns((int) FedExCodAddTransportationChargeBasisType.NetCharge);
			fedExShipment.SetupGet(x => x.CodCity).Returns("CodCity");
			fedExShipment.SetupGet(x => x.CodCompany).Returns("CodCompany");
			fedExShipment.SetupGet(x => x.CodCountryCode).Returns("CodCountryCode");
			fedExShipment.SetupGet(x => x.CodEnabled).Returns(true);
			fedExShipment.SetupGet(x => x.CodFirstName).Returns("CodFirstName");
			fedExShipment.SetupGet(x => x.CodLastName).Returns("CodLastName");
			fedExShipment.SetupGet(x => x.CodOriginID).Returns(2);
			fedExShipment.SetupGet(x => x.CodPaymentType).Returns((int) FedExCodPaymentType.Any);
			fedExShipment.SetupGet(x => x.CodPhone).Returns("CodPhone");
			fedExShipment.SetupGet(x => x.CodPostalCode).Returns("CodPostalCode");
			fedExShipment.SetupGet(x => x.CodStateProvCode).Returns("CodStateProvCode");
			fedExShipment.SetupGet(x => x.CodStreet1).Returns("CodStreet1");
			fedExShipment.SetupGet(x => x.CodStreet2).Returns("CodStreet2");
			fedExShipment.SetupGet(x => x.CodStreet3).Returns("CodStreet3");
			fedExShipment.SetupGet(x => x.CodTIN).Returns("CodTIN");
			fedExShipment.SetupGet(x => x.CodTrackingFormID).Returns("CodT");
			fedExShipment.SetupGet(x => x.CodTrackingNumber).Returns("CodTrackingNumber");
			fedExShipment.SetupGet(x => x.CommercialInvoice).Returns(true);
			fedExShipment.SetupGet(x => x.CommercialInvoiceComments).Returns("CommercialInvoiceComments");
			fedExShipment.SetupGet(x => x.CommercialInvoiceFileElectronically).Returns(true);
			fedExShipment.SetupGet(x => x.CommercialInvoiceFreight).Returns(3);
			fedExShipment.SetupGet(x => x.CommercialInvoiceInsurance).Returns(4);
			fedExShipment.SetupGet(x => x.CommercialInvoiceOther).Returns(5);
			fedExShipment.SetupGet(x => x.CommercialInvoicePurpose).Returns((int) FedExCommercialInvoicePurpose.Gift);
			fedExShipment.SetupGet(x => x.CommercialInvoiceReference).Returns("CommercialInvoiceReference");
			fedExShipment.SetupGet(x => x.CommercialInvoiceTermsOfSale).Returns((int) FedExTermsOfSale.DAP);
			fedExShipment.SetupGet(x => x.Currency).Returns((int) CurrencyType.USD);
			fedExShipment.SetupGet(x => x.CustomsAdmissibilityPackaging).Returns((int) FedExPhysicalPackagingType.Bag);
			fedExShipment.SetupGet(x => x.CustomsAESEEI).Returns("CustomsAESEEI");
			fedExShipment.SetupGet(x => x.CustomsDocumentsDescription).Returns("CustomsDocumentsDescription");
			fedExShipment.SetupGet(x => x.CustomsDocumentsOnly).Returns(true);
			fedExShipment.SetupGet(x => x.CustomsExportFilingOption).Returns((int) FedExCustomsExportFilingOption.FiledElectonically);
			fedExShipment.SetupGet(x => x.CustomsNaftaDeterminationCode).Returns((int) FedExNaftaDeterminationCode.ProducerOfCommodity);
			fedExShipment.SetupGet(x => x.CustomsNaftaEnabled).Returns(true);
			fedExShipment.SetupGet(x => x.CustomsNaftaNetCostMethod).Returns((int) FedExNaftaNetCostMethod.NetCostMethod);
			fedExShipment.SetupGet(x => x.CustomsNaftaPreferenceType).Returns((int) FedExNaftaPreferenceCriteria.A);
			fedExShipment.SetupGet(x => x.CustomsNaftaProducerId).Returns("CustomsNaftaProducer");
			fedExShipment.SetupGet(x => x.CustomsOptionsDesription).Returns("CustomsOptionsDesription");
			fedExShipment.SetupGet(x => x.CustomsOptionsType).Returns((int) FedExCustomsOptionType.Other);
			fedExShipment.SetupGet(x => x.CustomsRecipientIdentificationType).Returns((int) FedExCustomsRecipientIdentificationType.Company);
			fedExShipment.SetupGet(x => x.CustomsRecipientIdentificationValue).Returns("CustomsRecipientIdentificationValue");
			fedExShipment.SetupGet(x => x.CustomsRecipientTIN).Returns("CustomsRecipientTIN");
			fedExShipment.SetupGet(x => x.DropoffType).Returns((int) FedExDropoffType.DropBox);
			fedExShipment.SetupGet(x => x.EmailNotifyBroker).Returns(1);
			fedExShipment.SetupGet(x => x.EmailNotifyMessage).Returns("EmailNotifyMessage");
			fedExShipment.SetupGet(x => x.EmailNotifyOther).Returns(1);
			fedExShipment.SetupGet(x => x.EmailNotifyOtherAddress).Returns("EmailNotifyOtherAddress");
			fedExShipment.SetupGet(x => x.EmailNotifyRecipient).Returns(1);
			fedExShipment.SetupGet(x => x.EmailNotifySender).Returns(1);
			fedExShipment.SetupGet(x => x.FedExAccountID).Returns(6);
			fedExShipment.SetupGet(x => x.FedExHoldAtLocationEnabled).Returns(true);
			fedExShipment.SetupGet(x => x.FimsAirWaybill).Returns("FimsAirWaybill");
			fedExShipment.SetupGet(x => x.FreightBookingNumber).Returns("FreightBooki");
			fedExShipment.SetupGet(x => x.FreightClass).Returns(FedEx.FedExFreightClassType.CLASS_050);
			fedExShipment.SetupGet(x => x.FreightCollectTerms).Returns(FedEx.FedExFreightCollectTermsType.Standard);
			fedExShipment.SetupGet(x => x.FreightGuaranteeDate).Returns(testDateTime);
			fedExShipment.SetupGet(x => x.FreightGuaranteeType).Returns(FedEx.FedExFreightGuaranteeType.Date);
			fedExShipment.SetupGet(x => x.FreightInsideDelivery).Returns(true);
			fedExShipment.SetupGet(x => x.FreightInsidePickup).Returns(true);
			fedExShipment.SetupGet(x => x.FreightLoadAndCount).Returns(7);
			fedExShipment.SetupGet(x => x.FreightRole).Returns(FedEx.FedExFreightShipmentRoleType.Consignee);
			fedExShipment.SetupGet(x => x.FreightSpecialServices).Returns((int) FedExFreightSpecialServicesType.Food);
			fedExShipment.SetupGet(x => x.FreightTotalHandlinUnits).Returns(8);
			fedExShipment.SetupGet(x => x.HoldCity).Returns("HoldCity");
			fedExShipment.SetupGet(x => x.HoldCompanyName).Returns("HoldCompanyName");
			fedExShipment.SetupGet(x => x.HoldContactId).Returns("HoldContactId");
			fedExShipment.SetupGet(x => x.HoldCountryCode).Returns("HoldCountryCode");
			fedExShipment.SetupGet(x => x.HoldEmailAddress).Returns("HoldEmailAddress");
			fedExShipment.SetupGet(x => x.HoldFaxNumber).Returns("HoldFaxNumber");
			fedExShipment.SetupGet(x => x.HoldLocationId).Returns("HoldLocationId");
			fedExShipment.SetupGet(x => x.HoldLocationType).Returns((int) FedExLocationType.FedExOffice);
			fedExShipment.SetupGet(x => x.HoldPagerNumber).Returns("HoldPagerNumber");
			fedExShipment.SetupGet(x => x.HoldPersonName).Returns("HoldPersonName");
			fedExShipment.SetupGet(x => x.HoldPhoneExtension).Returns("HoldPhoneE");
			fedExShipment.SetupGet(x => x.HoldPhoneNumber).Returns("HoldPhoneNumber");
			fedExShipment.SetupGet(x => x.HoldPostalCode).Returns("HoldPostalCode");
			fedExShipment.SetupGet(x => x.HoldResidential).Returns(true);
			fedExShipment.SetupGet(x => x.HoldStateOrProvinceCode).Returns("HoldStateOrProvinceCode");
			fedExShipment.SetupGet(x => x.HoldStreet1).Returns("HoldStreet1");
			fedExShipment.SetupGet(x => x.HoldStreet2).Returns("HoldStreet2");
			fedExShipment.SetupGet(x => x.HoldStreet3).Returns("HoldStreet3");
			fedExShipment.SetupGet(x => x.HoldTitle).Returns("HoldTitle");
			fedExShipment.SetupGet(x => x.HoldUrbanizationCode).Returns("HoldUrbanizationCode");
			fedExShipment.SetupGet(x => x.HomeDeliveryDate).Returns(testDateTime2);
			fedExShipment.SetupGet(x => x.HomeDeliveryInstructions).Returns("HomeDeliveryInstructions");
			fedExShipment.SetupGet(x => x.HomeDeliveryPhone).Returns("HomeDeliveryPhone");
			fedExShipment.SetupGet(x => x.HomeDeliveryType).Returns((int) FedExHomeDeliveryType.Appointment);
			fedExShipment.SetupGet(x => x.ImporterAccount).Returns("ImporterAcco");
			fedExShipment.SetupGet(x => x.ImporterCity).Returns("ImporterCity");
			fedExShipment.SetupGet(x => x.ImporterCompany).Returns("ImporterCompany");
			fedExShipment.SetupGet(x => x.ImporterCountryCode).Returns("ImporterCountryCode");
			fedExShipment.SetupGet(x => x.ImporterFirstName).Returns("ImporterFirstName");
			fedExShipment.SetupGet(x => x.ImporterLastName).Returns("ImporterLastName");
			fedExShipment.SetupGet(x => x.ImporterOfRecord).Returns(true);
			fedExShipment.SetupGet(x => x.ImporterPhone).Returns("ImporterPhone");
			fedExShipment.SetupGet(x => x.ImporterPostalCode).Returns("ImporterPo");
			fedExShipment.SetupGet(x => x.ImporterStateProvCode).Returns("ImporterStateProvCode");
			fedExShipment.SetupGet(x => x.ImporterStreet1).Returns("ImporterStreet1");
			fedExShipment.SetupGet(x => x.ImporterStreet2).Returns("ImporterStreet2");
			fedExShipment.SetupGet(x => x.ImporterStreet3).Returns("ImporterStreet3");
			fedExShipment.SetupGet(x => x.ImporterTIN).Returns("ImporterTIN");
			fedExShipment.SetupGet(x => x.InternationalTrafficInArmsService).Returns(true);
			fedExShipment.SetupGet(x => x.IntlExportDetailEntryNumber).Returns("IntlExportDetailEntr");
			fedExShipment.SetupGet(x => x.IntlExportDetailForeignTradeZoneCode).Returns("IntlExportDetailForeignTradeZoneCode");
			fedExShipment.SetupGet(x => x.IntlExportDetailLicenseOrPermitExpirationDate).Returns(testDateTime3);
			fedExShipment.SetupGet(x => x.IntlExportDetailLicenseOrPermitNumber).Returns("IntlExportDetailLicenseOrPermitNumber");
			fedExShipment.SetupGet(x => x.IntlExportDetailType).Returns((int) FedExInternationalControlledExportType.Dea036);
			fedExShipment.SetupGet(x => x.LinearUnitType).Returns((int) FedExLinearUnitOfMeasure.IN);
			fedExShipment.SetupGet(x => x.MaskedData).Returns((int) FedExMaskedDataType.SecondaryBarcode);
			fedExShipment.SetupGet(x => x.MasterFormID).Returns("Mast");
			fedExShipment.SetupGet(x => x.NonStandardContainer).Returns(true);
			fedExShipment.SetupGet(x => x.OriginResidentialDetermination).Returns((int) ResidentialDeterminationType.Commercial);
			fedExShipment.SetupGet(x => x.Packages).Returns(new[] { package.Object });
			fedExShipment.SetupGet(x => x.PackagingType).Returns((int) FedExPackagingType.Box);
			fedExShipment.SetupGet(x => x.PayorDutiesAccount).Returns("PayorDutiesA");
			fedExShipment.SetupGet(x => x.PayorDutiesCountryCode).Returns("PayorDutiesCountryCode");
			fedExShipment.SetupGet(x => x.PayorDutiesName).Returns("PayorDutiesName");
			fedExShipment.SetupGet(x => x.PayorDutiesType).Returns((int) FedExPayorType.Collect);
			fedExShipment.SetupGet(x => x.PayorTransportAccount).Returns("PayorTranspo");
			fedExShipment.SetupGet(x => x.PayorTransportName).Returns("PayorTransportName");
			fedExShipment.SetupGet(x => x.PayorTransportType).Returns((int) FedExPayorType.Sender);
			fedExShipment.SetupGet(x => x.ReferenceCustomer).Returns("ReferenceCustomer");
			fedExShipment.SetupGet(x => x.ReferenceFIMS).Returns("ReferenceFIMS");
			fedExShipment.SetupGet(x => x.ReferenceInvoice).Returns("ReferenceInvoice");
			fedExShipment.SetupGet(x => x.ReferencePO).Returns("ReferencePO");
			fedExShipment.SetupGet(x => x.ReferenceShipmentIntegrity).Returns("ReferenceShipmentIntegrity");
			fedExShipment.SetupGet(x => x.RequestedLabelFormat).Returns((int) ThermalLanguage.ZPL);
			fedExShipment.SetupGet(x => x.ReturnSaturdayPickup).Returns(true);
			fedExShipment.SetupGet(x => x.ReturnsClearance).Returns(true);
			fedExShipment.SetupGet(x => x.ReturnType).Returns((int) FedExReturnType.EmailReturnLabel);
			fedExShipment.SetupGet(x => x.RmaNumber).Returns("RmaNumber");
			fedExShipment.SetupGet(x => x.RmaReason).Returns("RmaReason");
			fedExShipment.SetupGet(x => x.SaturdayDelivery).Returns(true);
			fedExShipment.SetupGet(x => x.Service).Returns((int) FedExServiceType.FedExGround);
			fedExShipment.SetupGet(x => x.Signature).Returns((int) FedExSignatureType.Adult);
			fedExShipment.SetupGet(x => x.SmartPostConfirmation).Returns(true);
			fedExShipment.SetupGet(x => x.SmartPostCustomerManifest).Returns("SmartPostCustomerManifest");
			fedExShipment.SetupGet(x => x.SmartPostEndorsement).Returns((int) FedExSmartPostEndorsement.ChangeService);
			fedExShipment.SetupGet(x => x.SmartPostHubID).Returns("SmartPostH");
			fedExShipment.SetupGet(x => x.SmartPostIndicia).Returns((int) FedExSmartPostIndicia.MediaMail);
			fedExShipment.SetupGet(x => x.SmartPostUspsApplicationId).Returns("SmartPostU");
			fedExShipment.SetupGet(x => x.ThirdPartyConsignee).Returns(true);
			fedExShipment.SetupGet(x => x.TrafficInArmsLicenseNumber).Returns("TrafficInArmsLicenseNumber");
			fedExShipment.SetupGet(x => x.WeightUnitType).Returns((int) WeightUnitOfMeasure.Pounds);

			shipment = mock.MockRepository.Create<IShipmentEntity>();
			shipment.SetupGet(x => x.FedEx).Returns(fedExShipment.Object);
		}

		[Fact]
		public void MutateTelemetry_SetsTelemetryPropertiesFromShipment()
		{
			var testObject = new FedExTelemetryMutator();

			testObject.MutateTelemetry(trackedDurationEventMock.Object, shipment.Object);

			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.BrokerAccount", "BrokerAccoun"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.BrokerCity", "BrokerCity"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.BrokerCompany", "BrokerCompany"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.BrokerCountryCode", "BrokerCountryCode"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.BrokerEmail", "BrokerEmail"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.BrokerEnabled", "True"));
			fedExShipment.VerifyGet(x => x.BrokerEnabled, Times.Once);
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.BrokerFirstName", "BrokerFirstName"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.BrokerLastName", "BrokerLastName"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.BrokerPhone", "BrokerPhone"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.BrokerPhoneExtension", "BrokerPh"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.BrokerPostalCode", "BrokerPostalCode"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.BrokerStateProvCode", "BrokerStateProvCode"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.BrokerStreet1", "BrokerStreet1"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.BrokerStreet2", "BrokerStreet2"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.BrokerStreet3", "BrokerStreet3"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.CodAccountNumber", "CodAccountNumber"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.CodAddFreight", "True"));
			fedExShipment.VerifyGet(x => x.CodAddFreight, Times.Once);
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.CodAmount", "1"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.CodChargeBasis", "Net Charge"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.CodCity", "CodCity"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.CodCompany", "CodCompany"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.CodCountryCode", "CodCountryCode"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.CodEnabled", "True"));
			fedExShipment.VerifyGet(x => x.CodEnabled, Times.Once);
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.CodFirstName", "CodFirstName"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.CodLastName", "CodLastName"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.CodOriginID", "2"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.CodPaymentType", "Any"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.CodPhone", "CodPhone"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.CodPostalCode", "CodPostalCode"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.CodStateProvCode", "CodStateProvCode"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.CodStreet1", "CodStreet1"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.CodStreet2", "CodStreet2"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.CodStreet3", "CodStreet3"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.CodTIN", "CodTIN"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.CodTrackingFormID", "CodT"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.CodTrackingNumber", "CodTrackingNumber"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.CommercialInvoice", "True"));
			fedExShipment.VerifyGet(x => x.CommercialInvoice, Times.Once);
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.CommercialInvoiceComments", "CommercialInvoiceComments"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.CommercialInvoiceFileElectronically", "True"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.CommercialInvoiceFreight", "3"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.CommercialInvoiceInsurance", "4"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.CommercialInvoiceOther", "5"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.CommercialInvoicePurpose", "Gift"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.CommercialInvoiceReference", "CommercialInvoiceReference"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.CommercialInvoiceTermsOfSale", "Delivered at Place"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.Currency", "USD"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.CustomsAdmissibilityPackaging", "Bag"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.CustomsAESEEI", "CustomsAESEEI"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.CustomsDocumentsDescription", "CustomsDocumentsDescription"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.CustomsDocumentsOnly", "True"));
			fedExShipment.VerifyGet(x => x.CustomsDocumentsOnly, Times.Once);
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.CustomsExportFilingOption", "Filed Electronically"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.CustomsNaftaDeterminationCode", "Producer of the commodity"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.CustomsNaftaEnabled", "True"));
			fedExShipment.VerifyGet(x => x.CustomsNaftaEnabled, Times.Once);
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.CustomsNaftaNetCostMethod", "Calculated according to the net cost method"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.CustomsNaftaPreferenceType", "A (wholly obtained or produced entirely in US/CA/MX)"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.CustomsNaftaProducerId", "CustomsNaftaProducer"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.CustomsOptionsDescription", "CustomsOptionsDesription"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.CustomsOptionsType", "Other"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.CustomsRecipientIdentificationType", "Company"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.CustomsRecipientIdentificationValue", "CustomsRecipientIdentificationValue"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.CustomsRecipientTIN", "CustomsRecipientTIN"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.DropoffType", "Drop Box"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.EmailNotifyBroker", "True"));
			fedExShipment.VerifyGet(x => x.EmailNotifyBroker, Times.Once);
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.EmailNotifyMessage", "EmailNotifyMessage"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.EmailNotifyOther", "True"));
			fedExShipment.VerifyGet(x => x.EmailNotifyOther, Times.Once);
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.EmailNotifyOtherAddress", "EmailNotifyOtherAddress"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.EmailNotifyRecipient", "True"));
			fedExShipment.VerifyGet(x => x.EmailNotifyRecipient, Times.Once);
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.EmailNotifySender", "True"));
			fedExShipment.VerifyGet(x => x.EmailNotifySender, Times.Once);
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.FedExAccountID", "6"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.FedExHoldAtLocationEnabled", "True"));
			fedExShipment.VerifyGet(x => x.FedExHoldAtLocationEnabled, Times.Once);
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.FimsAirWaybill", "FimsAirWaybill"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.FreightBookingNumber", "FreightBooki"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.FreightClass", "Class 050"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.FreightCollectTerms", "Standard"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.FreightGuaranteeDate", testDateTime.ToShortDateString()));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.FreightGuaranteeType", "Date"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.FreightInsideDelivery", "True"));
			fedExShipment.VerifyGet(x => x.FreightInsideDelivery, Times.Once);
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.FreightInsidePickup", "True"));
			fedExShipment.VerifyGet(x => x.FreightInsidePickup, Times.Once);
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.FreightLoadAndCount", "7"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.FreightRole", "Consignee"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.FreightSpecialServices", "Food"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.FreightTotalHandlingUnits", "8"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.HoldCity", "HoldCity"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.HoldCompanyName", "HoldCompanyName"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.HoldContactId", "HoldContactId"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.HoldCountryCode", "HoldCountryCode"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.HoldEmailAddress", "HoldEmailAddress"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.HoldFaxNumber", "HoldFaxNumber"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.HoldLocationId", "HoldLocationId"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.HoldLocationType", "FEDEX_OFFICE"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.HoldPagerNumber", "HoldPagerNumber"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.HoldPersonName", "HoldPersonName"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.HoldPhoneExtension", "HoldPhoneE"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.HoldPhoneNumber", "HoldPhoneNumber"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.HoldPostalCode", "HoldPostalCode"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.HoldResidential", "True"));
			fedExShipment.VerifyGet(x => x.HoldResidential, Times.Once);
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.HoldStateOrProvinceCode", "HoldStateOrProvinceCode"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.HoldStreet1", "HoldStreet1"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.HoldStreet2", "HoldStreet2"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.HoldStreet3", "HoldStreet3"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.HoldTitle", "HoldTitle"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.HoldUrbanizationCode", "HoldUrbanizationCode"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.HomeDeliveryDate", testDateTime2.ToShortDateString()));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.HomeDeliveryInstructions", "HomeDeliveryInstructions"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.HomeDeliveryPhone", "HomeDeliveryPhone"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.HomeDeliveryType", "Appointment"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.ImporterAccount", "ImporterAcco"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.ImporterCity", "ImporterCity"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.ImporterCompany", "ImporterCompany"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.ImporterCountryCode", "ImporterCountryCode"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.ImporterFirstName", "ImporterFirstName"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.ImporterLastName", "ImporterLastName"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.ImporterOfRecord", "True"));
			fedExShipment.VerifyGet(x => x.ImporterOfRecord, Times.Once);
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.ImporterPhone", "ImporterPhone"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.ImporterPostalCode", "ImporterPo"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.ImporterStateProvCode", "ImporterStateProvCode"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.ImporterStreet1", "ImporterStreet1"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.ImporterStreet2", "ImporterStreet2"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.ImporterStreet3", "ImporterStreet3"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.ImporterTIN", "ImporterTIN"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.InternationalTrafficInArmsService", "True"));
			fedExShipment.VerifyGet(x => x.InternationalTrafficInArmsService, Times.Once);
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.IntlExportDetailEntryNumber", "IntlExportDetailEntr"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.IntlExpotDetailForeignTradeZoneCode", "IntlExportDetailForeignTradeZoneCode"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.IntlExportDetailLicenseOrPermitExpirationDate", testDateTime3.ToShortDateString()));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.IntlExportDetailLicenseOrPermitNumber", "IntlExportDetailLicenseOrPermitNumber"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.IntlExportDetailType", "DEA 036"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.LinearUnitType", "Inches"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.MaskedData", "Secondary Barcode"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.MasterFormID", "Mast"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.NonStandardContainer", "True"));
			fedExShipment.VerifyGet(x => x.NonStandardContainer, Times.Once);
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.OriginResidentialDetermination", "Commercial"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.PackagingType", "FedEx® Box"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.PayorDutiesAccount", "PayorDutiesA"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.PayorDutiesCountryCode", "PayorDutiesCountryCode"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.PayorDutiesName", "PayorDutiesName"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.PayorDutiesType", "Collect"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.PayorTransportAccount", "PayorTranspo"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.PayorTransportName", "PayorTransportName"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.PayorTransportType", "Sender"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.ReferenceCustomer", "ReferenceCustomer"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.ReferenceFIMS", "ReferenceFIMS"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.ReferenceInvoice", "ReferenceInvoice"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.ReferencePO", "ReferencePO"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.ReferenceShipmentIntegrity", "ReferenceShipmentIntegrity"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.RequestedLabelFormat", "Thermal - ZPL"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.ReturnSaturdayPickup", "True"));
			fedExShipment.VerifyGet(x => x.ReturnSaturdayPickup, Times.Once);
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.ReturnsClearance", "True"));
			fedExShipment.VerifyGet(x => x.ReturnsClearance, Times.Once);
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.ReturnType", "Email Return Label"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.RmaNumber", "RmaNumber"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.RmaReason", "RmaReason"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.SaturdayDelivery", "True"));
			fedExShipment.VerifyGet(x => x.SaturdayDelivery, Times.Once);
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.Signature", "Adult Signature Required"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.SmartPostConfirmation", "True"));
			fedExShipment.VerifyGet(x => x.SmartPostConfirmation, Times.Once);
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.SmartPostCustomerManifest", "SmartPostCustomerManifest"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.SmartPostEndorsement", "Change Service"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.SmartPostHubID", "SmartPostH"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.SmartPostIndicia", "FedEx Ground® Economy Media Mail"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.SmartPostUspsApplicationId", "SmartPostU"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.ThirdPartyConsignee", "True"));
			fedExShipment.VerifyGet(x => x.ThirdPartyConsignee, Times.Once);
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.TrafficInArmsLicenseNumber", "TrafficInArmsLicenseNumber"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.WeightUnitType", "Pounds"));

			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.Package.1.AlcoholRecipientType", "CONSUMER"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.Package.1.BatteryMaterial", "Lithium Ion"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.Package.1.BatteryPacking", "Contained in equipment"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.Package.1.BatteryRegulatorySubtype", "IATA section II"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.Package.1.ContainerType", "ContainerType"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.Package.1.ContainsAlcohol", "True"));
			package.VerifyGet(x => x.ContainsAlcohol, Times.Once);
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.Package.1.DangerousGoodsAccessibilityType", "Accessible"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.Package.1.DangerousGoodsCargoAircraftOnly", "True"));
			package.VerifyGet(x => x.DangerousGoodsCargoAircraftOnly, Times.Once);
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.Package.1.DangerousGoodsEmergencyContactPhone", "DangerousGoodsEm"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.Package.1.DangerousGoodsEnabled", "True"));
			package.VerifyGet(x => x.DangerousGoodsEnabled, Times.Once);
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.Package.1.DangerousGoodsOfferor", "DangerousGoodsOfferor"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.Package.1.DangerousGoodsPackagingCount", "1"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.Package.1.DangerousGoodsType", "Batteries"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.Package.1.DeclaredValue", "2"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.Package.1.DimsAddWeight", "True"));
			package.VerifyGet(x => x.DimsAddWeight, Times.Once);
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.Package.1.DimsHeight", "3"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.Package.1.DimsLength", "4"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.Package.1.DimsWeight", "5"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.Package.1.DimsWidth", "6"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.Package.1.DryIceWeight", "7"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.Package.1.FreightPackaging", "Bag"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.Package.1.FreightPieces", "8"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.Package.1.HazardousMaterialClass", "Hazardou"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.Package.1.HazardousMaterialNumber", "HazardousMateria"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.Package.1.HazardousMaterialPackingGroup", "I"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.Package.1.HazardousMaterialProperName", "HazardousMaterialProperName"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.Package.1.HazardousMaterialQuantityUnits", "G"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.Package.1.HazardousMaterialQuantityValue", "9"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.Package.1.HazardousMaterialTechnicalName", "HazardousMaterialTechnicalName"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.Package.1.Insurance", "True"));
			package.VerifyGet(x => x.Insurance, Times.Once);
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.Package.1.InsurancePennyOne", "True"));
			package.VerifyGet(x => x.InsurancePennyOne, Times.Once);
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.Package.1.InsuranceValue", "10"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.Package.1.NumberOfContainers", "11"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.Package.1.PackingDetailsCargoAircraftOnly", "True"));
			package.VerifyGet(x => x.PackingDetailsCargoAircraftOnly, Times.Once);
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.Package.1.PackingDetailsPackingInstructions", "PackingDetailsPackingInstructions"));
			trackedDurationEventMock.Verify(x => x.AddProperty($"Label.FedEx.Package.1.PackingDetailsDangerousGoodsAuthorization", "DangerousGoodsAuthorization"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.Package.1.PriorityAlert", "True"));
			package.VerifyGet(x => x.PriorityAlert, Times.Once);
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.Package.1.PriorityAlertDetailContent", "PriorityAlertDetailContent"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.Package.1.PriorityAlertEnhancementType", "FedEx Priority Alert®"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.Package.1.SignatoryContactName", "SignatoryContactName"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.Package.1.SignatoryPlace", "SignatoryPlace"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.Package.1.SignatoryTitle", "SignatoryTitle"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.Package.1.SkidPieces", "12"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.Package.1.TrackingNumber", "TrackingNumber"));
			trackedDurationEventMock.Verify(x => x.AddProperty("Label.FedEx.Package.1.Weight", "13"));
		}
	}
}
