using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using ShipWorks.SqlServer.General;
using ShipWorks.Users.Audit;
using Xunit;

namespace ShipWorks.Tests
{
    public class SqlUtilityFunctionsTest
    {
        [Fact]
        public void Test()
        {
            string userData

            Assert.NotNull(GetUserContext(userData));
        }

        /// <summary>
        /// Get user and computer information for who is currently running
        /// </summary>
        public static UserContext GetUserContext(string uData)
        {
            string errorMissingHostInfo = string.Empty;
            string contextInfo = uData;

            if (contextInfo == null)
            {
                throw new InvalidOperationException(errorMissingHostInfo + $" contextInfo was null.");
            }

            if (contextInfo.Substring(0, 10) == "0000000000")
            {
                throw new InvalidOperationException(errorMissingHostInfo + $" contextInfo(0, 10) was 0000000000 {contextInfo}.");
            }

            long computerID;
            if (!long.TryParse(contextInfo.Substring(5, 5), NumberStyles.AllowHexSpecifier, null, out computerID))
            {
                throw new InvalidOperationException(errorMissingHostInfo + $" Couldn't get computerID: {contextInfo.Substring(5, 5)}.");
            }

            computerID = (computerID * 1000) + 1;

            long userID;
            if (!long.TryParse(contextInfo.Substring(0, 5), NumberStyles.AllowHexSpecifier, null, out userID))
            {
                throw new InvalidOperationException(errorMissingHostInfo + $" Couldn't get userID: {contextInfo.Substring(0, 5)}.");
            }

            userID = (userID * 1000) + 2;

            int auditReasonType = 0;
            string auditReasonDetail = null;
            bool deletingStore = false;

            AuditState auditState = AuditState.Enabled;

            // See if the auditing byte is set
            if (contextInfo.Length >= 11 && (contextInfo[10] == 'E' || contextInfo[10] == 'D' || contextInfo[10] == 'S' || contextInfo[10] == 'P'))
            {
                // See if a store is being deleted
                deletingStore = contextInfo[10] == 'S';

                // Auditing is deleted for store deletions as well as when it's marked to be disabled
                if (deletingStore || contextInfo[10] == 'D')
                {
                    auditState = AuditState.Disabled;
                }
                else if (contextInfo[10] == 'P')
                {
                    auditState = AuditState.NoDetails;
                }

                // If auditing enabled is set, then audit reason may be set...
                if (contextInfo.Length >= 12)
                {
                    // The first byte is the type
                    if (!int.TryParse(contextInfo[11].ToString(), NumberStyles.AllowHexSpecifier, null, out auditReasonType))
                    {
                        throw new InvalidOperationException(errorMissingHostInfo);
                    }

                    int terminator = contextInfo.IndexOf("@;", 12);
                    if (terminator != -1)
                    {
                        if (terminator - 12 > 0)
                        {
                            auditReasonDetail = contextInfo.Substring(12, terminator - 12);
                        }
                    }
                }
            }

            return new UserContext(userID, computerID, auditReasonType, auditReasonDetail, auditState, deletingStore);
        }
    }
}
