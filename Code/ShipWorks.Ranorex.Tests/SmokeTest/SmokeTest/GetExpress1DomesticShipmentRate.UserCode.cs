///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

namespace SmokeTest
{
    public partial class GetExpress1DomesticShipmentRate
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }
        
        private void CheckPostageBalance()
        {        	
        	float ExpOneShipmentRateFloat = float.Parse(ExpOneShipmentRate.Remove(0,1));
        	float ExpOneAvailablePostageFloat = float.Parse(ExpOneAvailablePostage.Remove(0,1));
        	
        	if (ExpOneShipmentRateFloat>ExpOneAvailablePostageFloat)
        	{        		  
	            repo.ShippingDlg.Close.MoveTo();
	            Delay.Milliseconds(200);	            
	            
	            repo.ShippingDlg.Close.Click();
	            Delay.Milliseconds(200);
	            
	            TestSuite.Current.GetTestContainer("ProcessVoidExpress1DomesticShipment").Checked = false;
        	}
        }

        public void Get_value_Express1PostageBalance50(RepoItemInfo rawtextInfo)
        {
            Report.Log(ReportLevel.Info, "Get Value", "Get the postage value and store it in a variable\r\nGetting attribute 'RawText' from item 'rawtextInfo' and assigning its value to variable 'ExpOnePostage'.", rawtextInfo);
            ExpOneShipmentRate = rawtextInfo.FindAdapter<RawText>().Element.GetAttributeValueText("RawText");
        }

        public void Get_value_Express1PostageBalance501(RepoItemInfo rawtextInfo)
        {
            Report.Log(ReportLevel.Info, "Get Value", "Get the postage value and store it in a variable\r\nGetting attribute 'RawText' from item 'rawtextInfo' and assigning its value to variable 'ExpOnePostage'.", rawtextInfo);
            ExpOneShipmentRate = rawtextInfo.FindAdapter<RawText>().Element.GetAttributeValueText("RawText");
        }

        public void CheckRates()
        {
            Report.Log(ReportLevel.Info, "Wait", "Waiting 5s to exist. Associated repository item: 'ShipOrders1.SplitContainer.DomesticShipmentRate'", repo.ShipOrders1.SplitContainer.DomesticShipmentRateInfo, new ActionTimeout(5000), new RecordItemIndex(12));
            repo.ShipOrders1.SplitContainer.DomesticShipmentRateInfo.WaitForExists(5000);
            
            if (repo.ShipOrders1.SplitContainer.DomesticShipmentRateInfo.Exists(30000) == false)
            {
	            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Escape}{Escape}{Escape}{Escape}{Escape}{Escape}{Escape}{Escape}{Escape}{Escape}'.", new RecordItemIndex(13));
            	Keyboard.Press("{Escape}{Escape}{Escape}{Escape}{Escape}{Escape}{Escape}{Escape}{Escape}{Escape}");
            	Delay.Milliseconds(0);
            }
            else
            {
	            // Move mouse to check the shipment rate
	            Report.Log(ReportLevel.Info, "Mouse", "Move mouse to check the shipment rate\r\nMouse Left Move item 'ShipOrders1.SplitContainer.DomesticShipmentRate' at Center.", repo.ShipOrders1.SplitContainer.DomesticShipmentRateInfo, new RecordItemIndex(8));
	            repo.ShipOrders1.SplitContainer.DomesticShipmentRate.MoveTo();
	            Delay.Milliseconds(200);
	            
	            // Get the shipment rate and store it in a variable
	            Report.Log(ReportLevel.Info, "Get Value", "Get the shipment rate and store it in a variable\r\nGetting attribute 'RawText' from item 'ShipOrders1.SplitContainer.DomesticShipmentRate' and assigning its value to variable 'ExpOneShipmentRate'.", repo.ShipOrders1.SplitContainer.DomesticShipmentRateInfo, new RecordItemIndex(9));
	            ExpOneShipmentRate = repo.ShipOrders1.SplitContainer.DomesticShipmentRate.Element.GetAttributeValueText("RawText");
	            Delay.Milliseconds(0);
	            
	            // Compare the available postage with the shipment rate and, if there is enough postage available, process the shipment.
	            CheckPostageBalance();
	            Delay.Milliseconds(0);
            }
        }
    }
}
