///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;
using System.Linq;
using System.IO;
using System.IO.Compression;
using Ionic.Zip;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

namespace SmokeTest
{
    public partial class SetupDatabase
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        public void Key_sequence_DatabaseName(RepoItemInfo textInfo)
        {
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence 'PerformanceTest' with focus on 'textInfo'.", textInfo);
            textInfo.FindAdapter<Text>().PressKeys("Smoketest_" + System.DateTime.Now.ToString("yyyy_MM_dd_HH_mm_ss"));
        }

        public void Key_sequence()
        {
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence 'V-QA-AVG-CUSTOM\\SHIPWORKS{Return}' or 'v-qa-beefcake1{Return}'.");
            
            if(Environment.MachineName == "V-QA-AVG-CUSTOM")
            {
            Keyboard.Press("V-QA-AVG-CUSTOM\\SHIPWORKS{Return}");	
            }
            else if (Environment.MachineName == "V-QA-BEEFCAKE1")
            {
            Keyboard.Press("v-qa-beefcake1{Return}");
            }
            else if (Environment.MachineName == "KGICONA-4WX3JH2")
            {
            Keyboard.Press("KGICONA-4WX3JH2\\Development{Return}");
            }
            else if (Environment.MachineName == "jeman-pc")
            {
            Keyboard.Press("jeman-pc{Return}");
            }
            else if (Environment.MachineName == "BERGER-PC")
            {
            Keyboard.Press("BERGER-PC\\SQL2016{Return}");
            }
            else if (Environment.MachineName == "MADKE-PC")
            {
            Keyboard.Press("MADKE-PC\\SQL2016{Return}");
            }
            else
            {
            Keyboard.Press(SQLModuleVariable);
            }
        }

        public void UnzipDatabase()
        {
        	string smokeTestPath = System.IO.Path.GetFullPath(System.IO.Path.Combine(System.IO.Directory.GetCurrentDirectory(),@"..\..\"));
        	string userPath = Environment.GetFolderPath(Environment.SpecialFolder.UserProfile);
        	using(Ionic.Zip.ZipFile EmptyDatabase = Ionic.Zip.ZipFile.Read(smokeTestPath + @"\ZipFiles\Empty.zip"))
        	{
        		EmptyDatabase.ExtractAll(userPath + "\\Desktop\\",
        		                           Ionic.Zip.ExtractExistingFileAction.OverwriteSilently);
        	}
        }
    }
}       