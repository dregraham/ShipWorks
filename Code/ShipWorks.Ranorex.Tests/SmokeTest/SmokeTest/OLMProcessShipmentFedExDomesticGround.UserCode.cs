///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using System.Diagnostics;
using WinForms = System.Windows.Forms;


using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

namespace SmokeTest
{
    public partial class OLMProcessShipmentFedExDomesticGround
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        public void ProcessFedexDomesticGround()
        {            
            if (repo.ShipWorksSa.PanelDockingArea.FedExGroundRInfo.Exists(30000) == false)
            {   
	            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Move item 'ShipWorksSa.Application' at Center.", repo.ShipWorksSa.ApplicationInfo, new RecordItemIndex(1));
	            repo.ShipWorksSa.Application.MoveTo();
	            Delay.Milliseconds(200);
	            
	            // Clicks ShipWorks Logo
	            Report.Log(ReportLevel.Info, "Mouse", "Clicks ShipWorks Logo\r\nMouse Left Click item 'ShipWorksSa.Application' at Center.", repo.ShipWorksSa.ApplicationInfo, new RecordItemIndex(2));
	            repo.ShipWorksSa.Application.Click();
	            Delay.Milliseconds(200);
	            
	            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ShipWorks.ViewMode' at Center.", repo.ShipWorks.ViewModeInfo, new RecordItemIndex(3));
	            repo.ShipWorks.ViewMode.Click();
	            Delay.Milliseconds(200);
	            
	            Report.Log(ReportLevel.Info, "Delay", "Waiting for 3s.", new RecordItemIndex(4));
	            Delay.Duration(3000, false);
	            
	            // Selects Batch Grid Mode
	            Report.Log(ReportLevel.Info, "Keyboard", "Selects Batch Grid Mode\r\nKey sequence 'B'.", new RecordItemIndex(5));
	            Keyboard.Press("B");
	            Delay.Milliseconds(0);
	            
	            // Validates ShipWorks is in Batch Grid
	            Report.Log(ReportLevel.Info, "Validation", "Validates ShipWorks is in Batch Grid\r\nValidating AttributeEqual (ControlText='All') on item 'ShipWorksSa.PanelDockingArea.KryptonHeader'.", repo.ShipWorksSa.PanelDockingArea.KryptonHeaderInfo, new RecordItemIndex(6));
	            Validate.AttributeEqual(repo.ShipWorksSa.PanelDockingArea.KryptonHeaderInfo, "ControlText", "All");
	            Delay.Milliseconds(100);
            }
            else
            {	
	            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Move item 'ShipWorksSa.PanelDockingArea.FedExGroundR' at Center.", repo.ShipWorksSa.PanelDockingArea.FedExGroundRInfo, new RecordItemIndex(6));
	            repo.ShipWorksSa.PanelDockingArea.FedExGroundR.MoveTo();
	            Delay.Milliseconds(200);
	            
	            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Move item 'MainForm.PanelDockingArea.OLMCreateLabel' at Center.", repo.MainForm.PanelDockingArea.OLMCreateLabelInfo, new RecordItemIndex(7));
	            repo.MainForm.PanelDockingArea.OLMCreateLabel.MoveTo();
	            Delay.Milliseconds(200);
	            
	            // Clicks create label
	            Report.Log(ReportLevel.Info, "Mouse", "Clicks create label\r\nMouse Left Click item 'MainForm.PanelDockingArea.OLMCreateLabel' at Center.", repo.MainForm.PanelDockingArea.OLMCreateLabelInfo, new RecordItemIndex(8));
	            repo.MainForm.PanelDockingArea.OLMCreateLabel.Click();
	            Delay.Milliseconds(200);
	            
	            // Checks if the message is displayed
	            Report.Log(ReportLevel.Info, "Wait", "Checks if the message is displayed\r\nWaiting 30s to exist. Associated repository item: 'MainForm.PanelDockingArea.ThisOrdersShipmentHasBeenProcessed'", repo.MainForm.PanelDockingArea.ThisOrdersShipmentHasBeenProcessedInfo, new ActionTimeout(30000), new RecordItemIndex(9));
	            repo.MainForm.PanelDockingArea.ThisOrdersShipmentHasBeenProcessedInfo.WaitForExists(30000);
	            
	            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Move item 'MainForm.PanelDockingArea.ThisOrdersShipmentHasBeenProcessed' at CenterLeft.", repo.MainForm.PanelDockingArea.ThisOrdersShipmentHasBeenProcessedInfo, new RecordItemIndex(10));
	            repo.MainForm.PanelDockingArea.ThisOrdersShipmentHasBeenProcessed.MoveTo(Location.CenterLeft);
	            Delay.Milliseconds(200);
	            
	            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MainForm.PanelDockingArea.ThisOrdersShipmentHasBeenProcessed' at CenterLeft.", repo.MainForm.PanelDockingArea.ThisOrdersShipmentHasBeenProcessedInfo, new RecordItemIndex(11));
	            repo.MainForm.PanelDockingArea.ThisOrdersShipmentHasBeenProcessed.Click(Location.CenterLeft);
	            Delay.Milliseconds(200);
            }
        }
    }
}
