///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace SmokeTest
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The ProcessVoidShipment_Validate_CloseShipOrders recording.
    /// </summary>
    [TestModule("5430a58a-a09a-428f-8d27-84f9ea74f608", ModuleType.Recording, 1)]
    public partial class ProcessVoidShipment_Validate_CloseShipOrders : ITestModule
    {
        /// <summary>
        /// Holds an instance of the SmokeTestRepository repository.
        /// </summary>
        public static SmokeTestRepository repo = SmokeTestRepository.Instance;

        static ProcessVoidShipment_Validate_CloseShipOrders instance = new ProcessVoidShipment_Validate_CloseShipOrders();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public ProcessVoidShipment_Validate_CloseShipOrders()
        {
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static ProcessVoidShipment_Validate_CloseShipOrders Instance
        {
            get { return instance; }
        }

#region Variables

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "5.4.5")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "5.4.5")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 0;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 0.0;

            Init();

            // Click: Create Label
            Report.Log(ReportLevel.Info, "Mouse", "Click: Create Label\r\nMouse Left Click item 'ShippingDlg.ProcessDropDownButton' at Center.", repo.ShippingDlg.ProcessDropDownButtonInfo, new RecordItemIndex(0));
            repo.ShippingDlg.ProcessDropDownButton.Click();
            
            // Wait For: Processing Shipments UI to close
            Report.Log(ReportLevel.Info, "Wait", "Wait For: Processing Shipments UI to close\r\nWaiting 10s for item 'ProcessingShipments.ProcessingShipments' to not exist.", repo.ProcessingShipments.ProcessingShipmentsInfo, new ActionTimeout(10000), new RecordItemIndex(1));
            repo.ProcessingShipments.ProcessingShipmentsInfo.WaitForNotExists(10000);
            
            // Click: Void Label
            Report.Log(ReportLevel.Info, "Mouse", "Click: Void Label\r\nMouse Left Click item 'ShippingDlg.VoidSelected' at Center.", repo.ShippingDlg.VoidSelectedInfo, new RecordItemIndex(2));
            repo.ShippingDlg.VoidSelected.Click();
            
            // Click: OK
            Report.Log(ReportLevel.Info, "Mouse", "Click: OK\r\nMouse Left Click item 'ShipmentVoidConfirmDlg.ButtonOk' at Center.", repo.ShipmentVoidConfirmDlg.ButtonOkInfo, new RecordItemIndex(3));
            repo.ShipmentVoidConfirmDlg.ButtonOk.Click();
            
            // Wait For: Voiding Shipments UI to close
            Report.Log(ReportLevel.Info, "Wait", "Wait For: Voiding Shipments UI to close\r\nWaiting 10s for item 'ProcessingShipments.VoidingShipments' to not exist.", repo.ProcessingShipments.VoidingShipmentsInfo, new ActionTimeout(10000), new RecordItemIndex(4));
            repo.ProcessingShipments.VoidingShipmentsInfo.WaitForNotExists(10000);
            
            // Give Focus: Track button on Tracking tab
            //Report.Log(ReportLevel.Info, "Invoke Action", "Give Focus: Track button on Tracking tab\r\nInvoking Focus() on item 'ShippingDlg.SplitContainer.Track'.", repo.ShippingDlg.SplitContainer.TrackInfo, new RecordItemIndex(5));
            //repo.ShippingDlg.SplitContainer.Track.Focus();
            
            // Click: Track button
            //Report.Log(ReportLevel.Info, "Mouse", "Click: Track button\r\nMouse Left Click item 'ShippingDlg.SplitContainer.Track' at Center.", repo.ShippingDlg.SplitContainer.TrackInfo, new RecordItemIndex(6));
            //repo.ShippingDlg.SplitContainer.Track.Click();
            
            // Validate Shipment Voided, See text "The shipment has been voided."
            //Report.Log(ReportLevel.Info, "Validation", "Validate Shipment Voided, See text \"The shipment has been voided.\"\r\nValidating Exists on item 'TrackingTabTrackingDetails.TheShipmentHasBeenVoided'.", repo.TrackingTabTrackingDetails.TheShipmentHasBeenVoidedInfo, new RecordItemIndex(7));
            //Validate.Exists(repo.TrackingTabTrackingDetails.TheShipmentHasBeenVoidedInfo);
            
            // Click: Close
            Report.Log(ReportLevel.Info, "Mouse", "Click: Close\r\nMouse Left Click item 'ShippingDlg.Close' at Center.", repo.ShippingDlg.CloseInfo, new RecordItemIndex(8));
            repo.ShippingDlg.Close.Click();
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
