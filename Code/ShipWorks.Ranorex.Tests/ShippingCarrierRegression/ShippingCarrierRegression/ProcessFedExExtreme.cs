///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace ShippingCarrierRegression
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The ProcessFedExExtreme recording.
    /// </summary>
    [TestModule("9a078ec7-493a-4ebb-924f-2c8c535cf116", ModuleType.Recording, 1)]
    public partial class ProcessFedExExtreme : ITestModule
    {
        /// <summary>
        /// Holds an instance of the ShippingCarrierRegressionRepository repository.
        /// </summary>
        public static ShippingCarrierRegressionRepository repo = ShippingCarrierRegressionRepository.Instance;

        static ProcessFedExExtreme instance = new ProcessFedExExtreme();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public ProcessFedExExtreme()
        {
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static ProcessFedExExtreme Instance
        {
            get { return instance; }
        }

#region Variables

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "7.0")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "7.0")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            // Give Focus: Residential \ Commercial dropdown box
            //Report.Log(ReportLevel.Info, "Invoke Action", "Give Focus: Residential \\ Commercial dropdown box\r\nInvoking Focus() on item 'ShipOrders1.SplitContainer.ResidentialDetermination'.", repo.ShipOrders1.SplitContainer.ResidentialDeterminationInfo, new RecordItemIndex(0));
            //repo.ShipOrders1.SplitContainer.ResidentialDetermination.Focus();
            //Delay.Milliseconds(0);
            
            // Set Residential \ Commercial dropdown: Commercial
            //Report.Log(ReportLevel.Info, "Set Value", "Set Residential \\ Commercial dropdown: Commercial\r\nSetting attribute SelectedItemText to 'Commercial' on item 'ShipOrders1.SplitContainer.ResidentialDetermination'.", repo.ShipOrders1.SplitContainer.ResidentialDeterminationInfo, new RecordItemIndex(1));
            //repo.ShipOrders1.SplitContainer.ResidentialDetermination.Element.SetAttributeValue("SelectedItemText", "Commercial");
            //Delay.Milliseconds(0);
            
            // Give Focus: Service (Shipment Details Expander section)
            Report.Log(ReportLevel.Info, "Invoke Action", "Give Focus: Service (Shipment Details Expander section)\r\nInvoking Focus() on item 'ShippingDlg.SplitContainer.Service'.", repo.ShippingDlg.SplitContainer.ServiceInfo, new RecordItemIndex(2));
            repo.ShippingDlg.SplitContainer.Service.Focus();
            Delay.Milliseconds(0);
            
            // Move Fix
            Report.Log(ReportLevel.Info, "Mouse", "Move Fix\r\nMouse Left Move item 'ShippingDlg.SplitContainer.Service' at Center.", repo.ShippingDlg.SplitContainer.ServiceInfo, new RecordItemIndex(3));
            repo.ShippingDlg.SplitContainer.Service.MoveTo(1000);
            Delay.Milliseconds(0);
            
            // Set Service: FedEx Ground®
            Report.Log(ReportLevel.Info, "Set Value", "Set Service: FedEx Ground®\r\nSetting attribute SelectedItemText to 'FedEx Ground®' on item 'ShippingDlg.SplitContainer.Service'.", repo.ShippingDlg.SplitContainer.ServiceInfo, new RecordItemIndex(4));
            repo.ShippingDlg.SplitContainer.Service.Element.SetAttributeValue("SelectedItemText", "FedEx Ground®");
            Delay.Milliseconds(0);
            
            // Give Focus: Weight
            Report.Log(ReportLevel.Info, "Invoke Action", "Give Focus: Weight\r\nInvoking Focus() on item 'ShippingDlg.SplitContainer.Weight'.", repo.ShippingDlg.SplitContainer.WeightInfo, new RecordItemIndex(5));
            repo.ShippingDlg.SplitContainer.Weight.Focus();
            Delay.Milliseconds(0);
            
            // Move Fix
            Report.Log(ReportLevel.Info, "Mouse", "Move Fix\r\nMouse Left Move item 'ShippingDlg.SplitContainer.Weight' at Center.", repo.ShippingDlg.SplitContainer.WeightInfo, new RecordItemIndex(6));
            repo.ShippingDlg.SplitContainer.Weight.MoveTo(1000);
            Delay.Milliseconds(0);
            
            // Select All (CTRL+A)
            Report.Log(ReportLevel.Info, "Keyboard", "Select All (CTRL+A)\r\nKey 'Ctrl+A' Press with focus on 'ShippingDlg.SplitContainer.Weight'.", repo.ShippingDlg.SplitContainer.WeightInfo, new RecordItemIndex(7));
            Keyboard.PrepareFocus(repo.ShippingDlg.SplitContainer.Weight);
            Keyboard.Press(System.Windows.Forms.Keys.A | System.Windows.Forms.Keys.Control, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            // Set Weight: 1.5
            Report.Log(ReportLevel.Info, "Keyboard", "Set Weight: 1.5\r\nKey sequence '1.5' with focus on 'ShippingDlg.SplitContainer.Weight'.", repo.ShippingDlg.SplitContainer.WeightInfo, new RecordItemIndex(8));
            repo.ShippingDlg.SplitContainer.Weight.PressKeys("1.5");
            Delay.Milliseconds(0);
            
            // Give Focus: Length
            Report.Log(ReportLevel.Info, "Invoke Action", "Give Focus: Length\r\nInvoking Focus() on item 'ShippingDlg.DimensionsControl.Lengthiparcel'.", repo.ShippingDlg.DimensionsControl.LengthiparcelInfo, new RecordItemIndex(9));
            repo.ShippingDlg.DimensionsControl.Lengthiparcel.Focus();
            Delay.Milliseconds(0);
            
            // Move Fix
            Report.Log(ReportLevel.Info, "Mouse", "Move Fix\r\nMouse Left Move item 'ShippingDlg.DimensionsControl.Lengthiparcel' at Center.", repo.ShippingDlg.DimensionsControl.LengthiparcelInfo, new RecordItemIndex(10));
            repo.ShippingDlg.DimensionsControl.Lengthiparcel.MoveTo(1000);
            Delay.Milliseconds(0);
            
            // Set Length: 33
            Report.Log(ReportLevel.Info, "Keyboard", "Set Length: 33\r\nKey sequence '{LControlKey down}{Akey}{LControlKey up}33' with focus on 'ShippingDlg.DimensionsControl.Lengthiparcel'.", repo.ShippingDlg.DimensionsControl.LengthiparcelInfo, new RecordItemIndex(11));
            repo.ShippingDlg.DimensionsControl.Lengthiparcel.PressKeys("{LControlKey down}{Akey}{LControlKey up}33");
            Delay.Milliseconds(0);
            
            // Give Focus: Width
            Report.Log(ReportLevel.Info, "Invoke Action", "Give Focus: Width\r\nInvoking Focus() on item 'ShippingDlg.DimensionsControl.Widthiparcel'.", repo.ShippingDlg.DimensionsControl.WidthiparcelInfo, new RecordItemIndex(12));
            repo.ShippingDlg.DimensionsControl.Widthiparcel.Focus();
            Delay.Milliseconds(0);
            
            // Move Fix
            Report.Log(ReportLevel.Info, "Mouse", "Move Fix\r\nMouse Left Move item 'ShippingDlg.DimensionsControl.Widthiparcel' at Center.", repo.ShippingDlg.DimensionsControl.WidthiparcelInfo, new RecordItemIndex(13));
            repo.ShippingDlg.DimensionsControl.Widthiparcel.MoveTo(1000);
            Delay.Milliseconds(0);
            
            // Set Width: 33
            Report.Log(ReportLevel.Info, "Keyboard", "Set Width: 33\r\nKey sequence '{LControlKey down}{Akey}{LControlKey up}33' with focus on 'ShippingDlg.DimensionsControl.Widthiparcel'.", repo.ShippingDlg.DimensionsControl.WidthiparcelInfo, new RecordItemIndex(14));
            repo.ShippingDlg.DimensionsControl.Widthiparcel.PressKeys("{LControlKey down}{Akey}{LControlKey up}33");
            Delay.Milliseconds(0);
            
            // Give Focus: Height
            Report.Log(ReportLevel.Info, "Invoke Action", "Give Focus: Height\r\nInvoking Focus() on item 'ShippingDlg.DimensionsControl.Heightiparcel'.", repo.ShippingDlg.DimensionsControl.HeightiparcelInfo, new RecordItemIndex(15));
            repo.ShippingDlg.DimensionsControl.Heightiparcel.Focus();
            Delay.Milliseconds(0);
            
            // Move Fix
            Report.Log(ReportLevel.Info, "Mouse", "Move Fix\r\nMouse Left Move item 'ShippingDlg.DimensionsControl.Heightiparcel' at Center.", repo.ShippingDlg.DimensionsControl.HeightiparcelInfo, new RecordItemIndex(16));
            repo.ShippingDlg.DimensionsControl.Heightiparcel.MoveTo(1000);
            Delay.Milliseconds(0);
            
            // Set Height: 33
            Report.Log(ReportLevel.Info, "Keyboard", "Set Height: 33\r\nKey sequence '{LControlKey down}{Akey}{LControlKey up}33' with focus on 'ShippingDlg.DimensionsControl.Heightiparcel'.", repo.ShippingDlg.DimensionsControl.HeightiparcelInfo, new RecordItemIndex(17));
            repo.ShippingDlg.DimensionsControl.Heightiparcel.PressKeys("{LControlKey down}{Akey}{LControlKey up}33");
            Delay.Milliseconds(0);
            
            // Verify that FedEx services are all non-freight
            Report.Log(ReportLevel.Info, "Validation", "Verify that FedEx services are all non-freight\r\nValidating AttributeEqual (RawText='FedEx First Overnight®') on item 'ShippingDlg.SplitContainer.FedExFirstOvernightR'.", repo.ShippingDlg.SplitContainer.FedExFirstOvernightRInfo, new RecordItemIndex(18));
            Validate.Attribute(repo.ShippingDlg.SplitContainer.FedExFirstOvernightRInfo, "RawText", "FedEx First Overnight®");
            Delay.Milliseconds(100);
            
            // Verify that FedEx services are all non-freight
            Report.Log(ReportLevel.Info, "Validation", "Verify that FedEx services are all non-freight\r\nValidating AttributeEqual (RawText='FedEx Priority Overnight®') on item 'ShippingDlg.SplitContainer.FedExPriorityOvernightR'.", repo.ShippingDlg.SplitContainer.FedExPriorityOvernightRInfo, new RecordItemIndex(19));
            Validate.Attribute(repo.ShippingDlg.SplitContainer.FedExPriorityOvernightRInfo, "RawText", "FedEx Priority Overnight®");
            Delay.Milliseconds(100);
            
            // Verify that FedEx services are all non-freight
            Report.Log(ReportLevel.Info, "Validation", "Verify that FedEx services are all non-freight\r\nValidating AttributeEqual (RawText='FedEx Standard Overnight®') on item 'ShippingDlg.SplitContainer.FedExStandardOvernightR'.", repo.ShippingDlg.SplitContainer.FedExStandardOvernightRInfo, new RecordItemIndex(20));
            Validate.Attribute(repo.ShippingDlg.SplitContainer.FedExStandardOvernightRInfo, "RawText", "FedEx Standard Overnight®");
            Delay.Milliseconds(100);
            
            // Verify that FedEx services are all non-freight
            Report.Log(ReportLevel.Info, "Validation", "Verify that FedEx services are all non-freight\r\nValidating AttributeEqual (RawText='FedEx 2Day® A.M.') on item 'ShippingDlg.SplitContainer.FedEx2DayRAM'.", repo.ShippingDlg.SplitContainer.FedEx2DayRAMInfo, new RecordItemIndex(21));
            Validate.Attribute(repo.ShippingDlg.SplitContainer.FedEx2DayRAMInfo, "RawText", "FedEx 2Day® A.M.");
            Delay.Milliseconds(100);
            
            // Verify that FedEx services are all non-freight
            Report.Log(ReportLevel.Info, "Validation", "Verify that FedEx services are all non-freight\r\nValidating AttributeEqual (RawText='FedEx 2Day®') on item 'ShippingDlg.SplitContainer.FedEx2DayR'.", repo.ShippingDlg.SplitContainer.FedEx2DayRInfo, new RecordItemIndex(22));
            Validate.Attribute(repo.ShippingDlg.SplitContainer.FedEx2DayRInfo, "RawText", "FedEx 2Day®");
            Delay.Milliseconds(100);
            
            // Verify that FedEx services are all non-freight
            Report.Log(ReportLevel.Info, "Validation", "Verify that FedEx services are all non-freight\r\nValidating AttributeEqual (RawText='FedEx Express Saver®') on item 'ShippingDlg.SplitContainer.FedExExpressSaverR'.", repo.ShippingDlg.SplitContainer.FedExExpressSaverRInfo, new RecordItemIndex(23));
            Validate.Attribute(repo.ShippingDlg.SplitContainer.FedExExpressSaverRInfo, "RawText", "FedEx Express Saver®");
            Delay.Milliseconds(100);
            
            // Verify that FedEx services are all non-freight
            Report.Log(ReportLevel.Info, "Validation", "Verify that FedEx services are all non-freight\r\nValidating AttributeEqual (RawText='FedEx Ground®') on item 'ShippingDlg.SplitContainer.FedExGroundR'.", repo.ShippingDlg.SplitContainer.FedExGroundRInfo, new RecordItemIndex(24));
            Validate.Attribute(repo.ShippingDlg.SplitContainer.FedExGroundRInfo, "RawText", "FedEx Ground®");
            Delay.Milliseconds(100);
            
            // Give Focus: Weight
            Report.Log(ReportLevel.Info, "Invoke Action", "Give Focus: Weight\r\nInvoking Focus() on item 'ShippingDlg.SplitContainer.Weight'.", repo.ShippingDlg.SplitContainer.WeightInfo, new RecordItemIndex(25));
            repo.ShippingDlg.SplitContainer.Weight.Focus();
            Delay.Milliseconds(0);
            
            // Move Fix
            Report.Log(ReportLevel.Info, "Mouse", "Move Fix\r\nMouse Left Move item 'ShippingDlg.SplitContainer.Weight' at Center.", repo.ShippingDlg.SplitContainer.WeightInfo, new RecordItemIndex(26));
            repo.ShippingDlg.SplitContainer.Weight.MoveTo(1000);
            Delay.Milliseconds(0);
            
            // Select All (CTRL+A)
            Report.Log(ReportLevel.Info, "Keyboard", "Select All (CTRL+A)\r\nKey 'Ctrl+A' Press with focus on 'ShippingDlg.SplitContainer.Weight'.", repo.ShippingDlg.SplitContainer.WeightInfo, new RecordItemIndex(27));
            Keyboard.PrepareFocus(repo.ShippingDlg.SplitContainer.Weight);
            Keyboard.Press(System.Windows.Forms.Keys.A | System.Windows.Forms.Keys.Control, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            // Set Weight: 150
            Report.Log(ReportLevel.Info, "Keyboard", "Set Weight: 150\r\nKey sequence '150' with focus on 'ShippingDlg.SplitContainer.Weight'.", repo.ShippingDlg.SplitContainer.WeightInfo, new RecordItemIndex(28));
            repo.ShippingDlg.SplitContainer.Weight.PressKeys("150");
            Delay.Milliseconds(0);
            
            // Verify that FedEx services are all non-freight
            Report.Log(ReportLevel.Info, "Validation", "Verify that FedEx services are all non-freight\r\nValidating AttributeEqual (RawText='FedEx First Overnight®') on item 'ShippingDlg.SplitContainer.FedExFirstOvernightR'.", repo.ShippingDlg.SplitContainer.FedExFirstOvernightRInfo, new RecordItemIndex(29));
            Validate.Attribute(repo.ShippingDlg.SplitContainer.FedExFirstOvernightRInfo, "RawText", "FedEx First Overnight®");
            Delay.Milliseconds(100);
            
            // Verify that FedEx services are all non-freight
            Report.Log(ReportLevel.Info, "Validation", "Verify that FedEx services are all non-freight\r\nValidating AttributeEqual (RawText='FedEx Priority Overnight®') on item 'ShippingDlg.SplitContainer.FedExPriorityOvernightR'.", repo.ShippingDlg.SplitContainer.FedExPriorityOvernightRInfo, new RecordItemIndex(30));
            Validate.Attribute(repo.ShippingDlg.SplitContainer.FedExPriorityOvernightRInfo, "RawText", "FedEx Priority Overnight®");
            Delay.Milliseconds(100);
            
            // Verify that FedEx services are all non-freight
            Report.Log(ReportLevel.Info, "Validation", "Verify that FedEx services are all non-freight\r\nValidating AttributeEqual (RawText='FedEx Standard Overnight®') on item 'ShippingDlg.SplitContainer.FedExStandardOvernightR'.", repo.ShippingDlg.SplitContainer.FedExStandardOvernightRInfo, new RecordItemIndex(31));
            Validate.Attribute(repo.ShippingDlg.SplitContainer.FedExStandardOvernightRInfo, "RawText", "FedEx Standard Overnight®");
            Delay.Milliseconds(100);
            
            // Verify that FedEx services are all non-freight
            Report.Log(ReportLevel.Info, "Validation", "Verify that FedEx services are all non-freight\r\nValidating AttributeEqual (RawText='FedEx 2Day® A.M.') on item 'ShippingDlg.SplitContainer.FedEx2DayRAM'.", repo.ShippingDlg.SplitContainer.FedEx2DayRAMInfo, new RecordItemIndex(32));
            Validate.Attribute(repo.ShippingDlg.SplitContainer.FedEx2DayRAMInfo, "RawText", "FedEx 2Day® A.M.");
            Delay.Milliseconds(100);
            
            // Verify that FedEx services are all non-freight
            Report.Log(ReportLevel.Info, "Validation", "Verify that FedEx services are all non-freight\r\nValidating AttributeEqual (RawText='FedEx 2Day®') on item 'ShippingDlg.SplitContainer.FedEx2DayR'.", repo.ShippingDlg.SplitContainer.FedEx2DayRInfo, new RecordItemIndex(33));
            Validate.Attribute(repo.ShippingDlg.SplitContainer.FedEx2DayRInfo, "RawText", "FedEx 2Day®");
            Delay.Milliseconds(100);
            
            // Verify that FedEx services are all non-freight
            Report.Log(ReportLevel.Info, "Validation", "Verify that FedEx services are all non-freight\r\nValidating AttributeEqual (RawText='FedEx Express Saver®') on item 'ShippingDlg.SplitContainer.FedExExpressSaverR'.", repo.ShippingDlg.SplitContainer.FedExExpressSaverRInfo, new RecordItemIndex(34));
            Validate.Attribute(repo.ShippingDlg.SplitContainer.FedExExpressSaverRInfo, "RawText", "FedEx Express Saver®");
            Delay.Milliseconds(100);
            
            // Verify that FedEx services are all non-freight
            Report.Log(ReportLevel.Info, "Validation", "Verify that FedEx services are all non-freight\r\nValidating AttributeEqual (RawText='FedEx Ground®') on item 'ShippingDlg.SplitContainer.FedExGroundR'.", repo.ShippingDlg.SplitContainer.FedExGroundRInfo, new RecordItemIndex(35));
            Validate.Attribute(repo.ShippingDlg.SplitContainer.FedExGroundRInfo, "RawText", "FedEx Ground®");
            Delay.Milliseconds(100);
            
            // Give Focus: Weight
            Report.Log(ReportLevel.Info, "Invoke Action", "Give Focus: Weight\r\nInvoking Focus() on item 'ShippingDlg.SplitContainer.Weight'.", repo.ShippingDlg.SplitContainer.WeightInfo, new RecordItemIndex(36));
            repo.ShippingDlg.SplitContainer.Weight.Focus();
            Delay.Milliseconds(0);
            
            // Move Fix
            Report.Log(ReportLevel.Info, "Mouse", "Move Fix\r\nMouse Left Move item 'ShippingDlg.SplitContainer.Weight' at Center.", repo.ShippingDlg.SplitContainer.WeightInfo, new RecordItemIndex(37));
            repo.ShippingDlg.SplitContainer.Weight.MoveTo(1000);
            Delay.Milliseconds(0);
            
            // Select All (CTRL+A)
            Report.Log(ReportLevel.Info, "Keyboard", "Select All (CTRL+A)\r\nKey 'Ctrl+A' Press with focus on 'ShippingDlg.SplitContainer.Weight'.", repo.ShippingDlg.SplitContainer.WeightInfo, new RecordItemIndex(38));
            Keyboard.PrepareFocus(repo.ShippingDlg.SplitContainer.Weight);
            Keyboard.Press(System.Windows.Forms.Keys.A | System.Windows.Forms.Keys.Control, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            // Set Weight: 151
            Report.Log(ReportLevel.Info, "Keyboard", "Set Weight: 151\r\nKey sequence '151' with focus on 'ShippingDlg.SplitContainer.Weight'.", repo.ShippingDlg.SplitContainer.WeightInfo, new RecordItemIndex(39));
            repo.ShippingDlg.SplitContainer.Weight.PressKeys("151");
            Delay.Milliseconds(0);
            
            // Verify that FedEx services are all freight
            Report.Log(ReportLevel.Info, "Validation", "Verify that FedEx services are all freight\r\nValidating AttributeEqual (RawText='FedEx 1Day® Freight') on item 'ShippingDlg.SplitContainer.FedEx1DayRFreight'.", repo.ShippingDlg.SplitContainer.FedEx1DayRFreightInfo, new RecordItemIndex(40));
            Validate.Attribute(repo.ShippingDlg.SplitContainer.FedEx1DayRFreightInfo, "RawText", "FedEx 1Day® Freight");
            Delay.Milliseconds(100);
            
            // Verify that FedEx services are all freight
            Report.Log(ReportLevel.Info, "Validation", "Verify that FedEx services are all freight\r\nValidating AttributeEqual (RawText='FedEx 2Day® Freight') on item 'ShippingDlg.SplitContainer.FedEx2DayRFreight'.", repo.ShippingDlg.SplitContainer.FedEx2DayRFreightInfo, new RecordItemIndex(41));
            Validate.Attribute(repo.ShippingDlg.SplitContainer.FedEx2DayRFreightInfo, "RawText", "FedEx 2Day® Freight");
            Delay.Milliseconds(100);
            
            // Verify that FedEx services are all freight
            Report.Log(ReportLevel.Info, "Validation", "Verify that FedEx services are all freight\r\nValidating AttributeEqual (RawText='FedEx 3Day® Freight') on item 'ShippingDlg.SplitContainer.FedEx3DayRFreight'.", repo.ShippingDlg.SplitContainer.FedEx3DayRFreightInfo, new RecordItemIndex(42));
            Validate.Attribute(repo.ShippingDlg.SplitContainer.FedEx3DayRFreightInfo, "RawText", "FedEx 3Day® Freight");
            Delay.Milliseconds(100);
            
            // Give Focus: Weight
            Report.Log(ReportLevel.Info, "Invoke Action", "Give Focus: Weight\r\nInvoking Focus() on item 'ShippingDlg.SplitContainer.Weight'.", repo.ShippingDlg.SplitContainer.WeightInfo, new RecordItemIndex(43));
            repo.ShippingDlg.SplitContainer.Weight.Focus();
            Delay.Milliseconds(0);
            
            // Move Fix
            Report.Log(ReportLevel.Info, "Mouse", "Move Fix\r\nMouse Left Move item 'ShippingDlg.SplitContainer.Weight' at Center.", repo.ShippingDlg.SplitContainer.WeightInfo, new RecordItemIndex(44));
            repo.ShippingDlg.SplitContainer.Weight.MoveTo(1000);
            Delay.Milliseconds(0);
            
            // Select All (CTRL+A)
            Report.Log(ReportLevel.Info, "Keyboard", "Select All (CTRL+A)\r\nKey 'Ctrl+A' Press with focus on 'ShippingDlg.SplitContainer.Weight'.", repo.ShippingDlg.SplitContainer.WeightInfo, new RecordItemIndex(45));
            Keyboard.PrepareFocus(repo.ShippingDlg.SplitContainer.Weight);
            Keyboard.Press(System.Windows.Forms.Keys.A | System.Windows.Forms.Keys.Control, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            // Set Weight: 150
            Report.Log(ReportLevel.Info, "Keyboard", "Set Weight: 150\r\nKey sequence '150' with focus on 'ShippingDlg.SplitContainer.Weight'.", repo.ShippingDlg.SplitContainer.WeightInfo, new RecordItemIndex(46));
            repo.ShippingDlg.SplitContainer.Weight.PressKeys("150");
            Delay.Milliseconds(0);
            
            // Give Focus: Length
            Report.Log(ReportLevel.Info, "Invoke Action", "Give Focus: Length\r\nInvoking Focus() on item 'ShippingDlg.DimensionsControl.Lengthiparcel'.", repo.ShippingDlg.DimensionsControl.LengthiparcelInfo, new RecordItemIndex(47));
            repo.ShippingDlg.DimensionsControl.Lengthiparcel.Focus();
            Delay.Milliseconds(0);
            
            // Move Fix
            Report.Log(ReportLevel.Info, "Mouse", "Move Fix\r\nMouse Left Move item 'ShippingDlg.DimensionsControl.Lengthiparcel' at Center.", repo.ShippingDlg.DimensionsControl.LengthiparcelInfo, new RecordItemIndex(48));
            repo.ShippingDlg.DimensionsControl.Lengthiparcel.MoveTo(1000);
            Delay.Milliseconds(0);
            
            // Set Length: 34
            Report.Log(ReportLevel.Info, "Keyboard", "Set Length: 34\r\nKey sequence '{LControlKey down}{Akey}{LControlKey up}34' with focus on 'ShippingDlg.DimensionsControl.Lengthiparcel'.", repo.ShippingDlg.DimensionsControl.LengthiparcelInfo, new RecordItemIndex(49));
            repo.ShippingDlg.DimensionsControl.Lengthiparcel.PressKeys("{LControlKey down}{Akey}{LControlKey up}34");
            Delay.Milliseconds(0);
            
            // Give Focus: Width
            Report.Log(ReportLevel.Info, "Invoke Action", "Give Focus: Width\r\nInvoking Focus() on item 'ShippingDlg.DimensionsControl.Widthiparcel'.", repo.ShippingDlg.DimensionsControl.WidthiparcelInfo, new RecordItemIndex(50));
            repo.ShippingDlg.DimensionsControl.Widthiparcel.Focus();
            Delay.Milliseconds(0);
            
            // Move Fix
            Report.Log(ReportLevel.Info, "Mouse", "Move Fix\r\nMouse Left Move item 'ShippingDlg.DimensionsControl.Widthiparcel' at Center.", repo.ShippingDlg.DimensionsControl.WidthiparcelInfo, new RecordItemIndex(51));
            repo.ShippingDlg.DimensionsControl.Widthiparcel.MoveTo(1000);
            Delay.Milliseconds(0);
            
            // Set Width: 34
            Report.Log(ReportLevel.Info, "Keyboard", "Set Width: 34\r\nKey sequence '{LControlKey down}{Akey}{LControlKey up}34' with focus on 'ShippingDlg.DimensionsControl.Widthiparcel'.", repo.ShippingDlg.DimensionsControl.WidthiparcelInfo, new RecordItemIndex(52));
            repo.ShippingDlg.DimensionsControl.Widthiparcel.PressKeys("{LControlKey down}{Akey}{LControlKey up}34");
            Delay.Milliseconds(0);
            
            // Give Focus: Height
            Report.Log(ReportLevel.Info, "Invoke Action", "Give Focus: Height\r\nInvoking Focus() on item 'ShippingDlg.DimensionsControl.Heightiparcel'.", repo.ShippingDlg.DimensionsControl.HeightiparcelInfo, new RecordItemIndex(53));
            repo.ShippingDlg.DimensionsControl.Heightiparcel.Focus();
            Delay.Milliseconds(0);
            
            // Move Fix
            Report.Log(ReportLevel.Info, "Mouse", "Move Fix\r\nMouse Left Move item 'ShippingDlg.DimensionsControl.Heightiparcel' at Center.", repo.ShippingDlg.DimensionsControl.HeightiparcelInfo, new RecordItemIndex(54));
            repo.ShippingDlg.DimensionsControl.Heightiparcel.MoveTo(1000);
            Delay.Milliseconds(0);
            
            // Set Height: 34
            Report.Log(ReportLevel.Info, "Keyboard", "Set Height: 34\r\nKey sequence '{LControlKey down}{Akey}{LControlKey up}34' with focus on 'ShippingDlg.DimensionsControl.Heightiparcel'.", repo.ShippingDlg.DimensionsControl.HeightiparcelInfo, new RecordItemIndex(55));
            repo.ShippingDlg.DimensionsControl.Heightiparcel.PressKeys("{LControlKey down}{Akey}{LControlKey up}34");
            Delay.Milliseconds(0);
            
            // Verify that FedEx services are all freight
            Report.Log(ReportLevel.Info, "Validation", "Verify that FedEx services are all freight\r\nValidating AttributeEqual (RawText='FedEx 1Day® Freight') on item 'ShippingDlg.SplitContainer.FedEx1DayRFreight'.", repo.ShippingDlg.SplitContainer.FedEx1DayRFreightInfo, new RecordItemIndex(56));
            Validate.Attribute(repo.ShippingDlg.SplitContainer.FedEx1DayRFreightInfo, "RawText", "FedEx 1Day® Freight");
            Delay.Milliseconds(100);
            
            // Verify that FedEx services are all freight
            Report.Log(ReportLevel.Info, "Validation", "Verify that FedEx services are all freight\r\nValidating AttributeEqual (RawText='FedEx 2Day® Freight') on item 'ShippingDlg.SplitContainer.FedEx2DayRFreight'.", repo.ShippingDlg.SplitContainer.FedEx2DayRFreightInfo, new RecordItemIndex(57));
            Validate.Attribute(repo.ShippingDlg.SplitContainer.FedEx2DayRFreightInfo, "RawText", "FedEx 2Day® Freight");
            Delay.Milliseconds(100);
            
            // Verify that FedEx services are all freight
            Report.Log(ReportLevel.Info, "Validation", "Verify that FedEx services are all freight\r\nValidating AttributeEqual (RawText='FedEx 3Day® Freight') on item 'ShippingDlg.SplitContainer.FedEx3DayRFreight'.", repo.ShippingDlg.SplitContainer.FedEx3DayRFreightInfo, new RecordItemIndex(58));
            Validate.Attribute(repo.ShippingDlg.SplitContainer.FedEx3DayRFreightInfo, "RawText", "FedEx 3Day® Freight");
            Delay.Milliseconds(100);
            
            // Give Focus: Length
            Report.Log(ReportLevel.Info, "Invoke Action", "Give Focus: Length\r\nInvoking Focus() on item 'ShippingDlg.DimensionsControl.Lengthiparcel'.", repo.ShippingDlg.DimensionsControl.LengthiparcelInfo, new RecordItemIndex(59));
            repo.ShippingDlg.DimensionsControl.Lengthiparcel.Focus();
            Delay.Milliseconds(0);
            
            // Move Fix
            Report.Log(ReportLevel.Info, "Mouse", "Move Fix\r\nMouse Left Move item 'ShippingDlg.DimensionsControl.Lengthiparcel' at Center.", repo.ShippingDlg.DimensionsControl.LengthiparcelInfo, new RecordItemIndex(60));
            repo.ShippingDlg.DimensionsControl.Lengthiparcel.MoveTo(1000);
            Delay.Milliseconds(0);
            
            // Set Length: 71
            Report.Log(ReportLevel.Info, "Keyboard", "Set Length: 71\r\nKey sequence '{LControlKey down}{Akey}{LControlKey up}71' with focus on 'ShippingDlg.DimensionsControl.Lengthiparcel'.", repo.ShippingDlg.DimensionsControl.LengthiparcelInfo, new RecordItemIndex(61));
            repo.ShippingDlg.DimensionsControl.Lengthiparcel.PressKeys("{LControlKey down}{Akey}{LControlKey up}71");
            Delay.Milliseconds(0);
            
            // Give Focus: Width
            Report.Log(ReportLevel.Info, "Invoke Action", "Give Focus: Width\r\nInvoking Focus() on item 'ShippingDlg.DimensionsControl.Widthiparcel'.", repo.ShippingDlg.DimensionsControl.WidthiparcelInfo, new RecordItemIndex(62));
            repo.ShippingDlg.DimensionsControl.Widthiparcel.Focus();
            Delay.Milliseconds(0);
            
            // Move Fix
            Report.Log(ReportLevel.Info, "Mouse", "Move Fix\r\nMouse Left Move item 'ShippingDlg.DimensionsControl.Widthiparcel' at Center.", repo.ShippingDlg.DimensionsControl.WidthiparcelInfo, new RecordItemIndex(63));
            repo.ShippingDlg.DimensionsControl.Widthiparcel.MoveTo(1000);
            Delay.Milliseconds(0);
            
            // Set Width: 71
            Report.Log(ReportLevel.Info, "Keyboard", "Set Width: 71\r\nKey sequence '{LControlKey down}{Akey}{LControlKey up}71' with focus on 'ShippingDlg.DimensionsControl.Widthiparcel'.", repo.ShippingDlg.DimensionsControl.WidthiparcelInfo, new RecordItemIndex(64));
            repo.ShippingDlg.DimensionsControl.Widthiparcel.PressKeys("{LControlKey down}{Akey}{LControlKey up}71");
            Delay.Milliseconds(0);
            
            // Give Focus: Height
            Report.Log(ReportLevel.Info, "Invoke Action", "Give Focus: Height\r\nInvoking Focus() on item 'ShippingDlg.DimensionsControl.Heightiparcel'.", repo.ShippingDlg.DimensionsControl.HeightiparcelInfo, new RecordItemIndex(65));
            repo.ShippingDlg.DimensionsControl.Heightiparcel.Focus();
            Delay.Milliseconds(0);
            
            // Move Fix
            Report.Log(ReportLevel.Info, "Mouse", "Move Fix\r\nMouse Left Move item 'ShippingDlg.DimensionsControl.Heightiparcel' at Center.", repo.ShippingDlg.DimensionsControl.HeightiparcelInfo, new RecordItemIndex(66));
            repo.ShippingDlg.DimensionsControl.Heightiparcel.MoveTo(1000);
            Delay.Milliseconds(0);
            
            // Set Height: 71
            Report.Log(ReportLevel.Info, "Keyboard", "Set Height: 71\r\nKey sequence '{LControlKey down}{Akey}{LControlKey up}71' with focus on 'ShippingDlg.DimensionsControl.Heightiparcel'.", repo.ShippingDlg.DimensionsControl.HeightiparcelInfo, new RecordItemIndex(67));
            repo.ShippingDlg.DimensionsControl.Heightiparcel.PressKeys("{LControlKey down}{Akey}{LControlKey up}71");
            Delay.Milliseconds(0);
            
            // Move Fix
            Report.Log(ReportLevel.Info, "Mouse", "Move Fix\r\nMouse Left Move item 'ShippingDlg.SplitContainer.MoreInfo' at Center.", repo.ShippingDlg.SplitContainer.MoreInfoInfo, new RecordItemIndex(68));
            repo.ShippingDlg.SplitContainer.MoreInfo.MoveTo(1000);
            Delay.Milliseconds(0);
            
            // Click the "More info" link in the footer to get the error message
            Report.Log(ReportLevel.Info, "Mouse", "Click the \"More info\" link in the footer to get the error message\r\nMouse Left Click item 'ShippingDlg.SplitContainer.MoreInfo' at Center.", repo.ShippingDlg.SplitContainer.MoreInfoInfo, new RecordItemIndex(69));
            repo.ShippingDlg.SplitContainer.MoreInfo.Click();
            Delay.Milliseconds(200);
            
            // Verify the error message is correct
            Report.Log(ReportLevel.Info, "Validation", "Verify the error message is correct\r\nValidating AttributeEqual (RawText='There are no FedEx services available for the selected shipment options.') on item 'ShipWorks.ThereAreNoFedExServicesAvailableFo'.", repo.ShipWorks.ThereAreNoFedExServicesAvailableFoInfo, new RecordItemIndex(70));
            Validate.Attribute(repo.ShipWorks.ThereAreNoFedExServicesAvailableFoInfo, "RawText", "There are no FedEx services available for the selected shipment options.");
            Delay.Milliseconds(100);
            
            // Move Fix
            Report.Log(ReportLevel.Info, "Mouse", "Move Fix\r\nMouse Left Move item 'ShipWorks.ButtonOK' at Center.", repo.ShipWorks.ButtonOKInfo, new RecordItemIndex(71));
            repo.ShipWorks.ButtonOK.MoveTo(1000);
            Delay.Milliseconds(0);
            
            // Click ok on the error message box
            Report.Log(ReportLevel.Info, "Mouse", "Click ok on the error message box\r\nMouse Left Click item 'ShipWorks.ButtonOK' at Center.", repo.ShipWorks.ButtonOKInfo, new RecordItemIndex(72));
            repo.ShipWorks.ButtonOK.Click();
            Delay.Milliseconds(200);
            
            // Give Focus: Length
            Report.Log(ReportLevel.Info, "Invoke Action", "Give Focus: Length\r\nInvoking Focus() on item 'ShippingDlg.DimensionsControl.Lengthiparcel'.", repo.ShippingDlg.DimensionsControl.LengthiparcelInfo, new RecordItemIndex(73));
            repo.ShippingDlg.DimensionsControl.Lengthiparcel.Focus();
            Delay.Milliseconds(0);
            
            // Move Fix
            Report.Log(ReportLevel.Info, "Mouse", "Move Fix\r\nMouse Left Move item 'ShippingDlg.DimensionsControl.Lengthiparcel' at Center.", repo.ShippingDlg.DimensionsControl.LengthiparcelInfo, new RecordItemIndex(74));
            repo.ShippingDlg.DimensionsControl.Lengthiparcel.MoveTo(1000);
            Delay.Milliseconds(0);
            
            // Set Length: 34
            Report.Log(ReportLevel.Info, "Keyboard", "Set Length: 34\r\nKey sequence '{LControlKey down}{Akey}{LControlKey up}34' with focus on 'ShippingDlg.DimensionsControl.Lengthiparcel'.", repo.ShippingDlg.DimensionsControl.LengthiparcelInfo, new RecordItemIndex(75));
            repo.ShippingDlg.DimensionsControl.Lengthiparcel.PressKeys("{LControlKey down}{Akey}{LControlKey up}34");
            Delay.Milliseconds(0);
            
            // Give Focus: Width
            Report.Log(ReportLevel.Info, "Invoke Action", "Give Focus: Width\r\nInvoking Focus() on item 'ShippingDlg.DimensionsControl.Widthiparcel'.", repo.ShippingDlg.DimensionsControl.WidthiparcelInfo, new RecordItemIndex(76));
            repo.ShippingDlg.DimensionsControl.Widthiparcel.Focus();
            Delay.Milliseconds(0);
            
            // Move Fix
            Report.Log(ReportLevel.Info, "Mouse", "Move Fix\r\nMouse Left Move item 'ShippingDlg.DimensionsControl.Widthiparcel' at Center.", repo.ShippingDlg.DimensionsControl.WidthiparcelInfo, new RecordItemIndex(77));
            repo.ShippingDlg.DimensionsControl.Widthiparcel.MoveTo(1000);
            Delay.Milliseconds(0);
            
            // Set Width: 34
            Report.Log(ReportLevel.Info, "Keyboard", "Set Width: 34\r\nKey sequence '{LControlKey down}{Akey}{LControlKey up}34' with focus on 'ShippingDlg.DimensionsControl.Widthiparcel'.", repo.ShippingDlg.DimensionsControl.WidthiparcelInfo, new RecordItemIndex(78));
            repo.ShippingDlg.DimensionsControl.Widthiparcel.PressKeys("{LControlKey down}{Akey}{LControlKey up}34");
            Delay.Milliseconds(0);
            
            // Give Focus: Height
            Report.Log(ReportLevel.Info, "Invoke Action", "Give Focus: Height\r\nInvoking Focus() on item 'ShippingDlg.DimensionsControl.Heightiparcel'.", repo.ShippingDlg.DimensionsControl.HeightiparcelInfo, new RecordItemIndex(79));
            repo.ShippingDlg.DimensionsControl.Heightiparcel.Focus();
            Delay.Milliseconds(0);
            
            // Move Fix
            Report.Log(ReportLevel.Info, "Mouse", "Move Fix\r\nMouse Left Move item 'ShippingDlg.DimensionsControl.Heightiparcel' at Center.", repo.ShippingDlg.DimensionsControl.HeightiparcelInfo, new RecordItemIndex(80));
            repo.ShippingDlg.DimensionsControl.Heightiparcel.MoveTo(1000);
            Delay.Milliseconds(0);
            
            // Set Height: 34
            Report.Log(ReportLevel.Info, "Keyboard", "Set Height: 34\r\nKey sequence '{LControlKey down}{Akey}{LControlKey up}34' with focus on 'ShippingDlg.DimensionsControl.Heightiparcel'.", repo.ShippingDlg.DimensionsControl.HeightiparcelInfo, new RecordItemIndex(81));
            repo.ShippingDlg.DimensionsControl.Heightiparcel.PressKeys("{LControlKey down}{Akey}{LControlKey up}34");
            Delay.Milliseconds(0);
            
            // Give Focus: Weight
            Report.Log(ReportLevel.Info, "Invoke Action", "Give Focus: Weight\r\nInvoking Focus() on item 'ShippingDlg.SplitContainer.Weight'.", repo.ShippingDlg.SplitContainer.WeightInfo, new RecordItemIndex(82));
            repo.ShippingDlg.SplitContainer.Weight.Focus();
            Delay.Milliseconds(0);
            
            // Move Fix
            Report.Log(ReportLevel.Info, "Mouse", "Move Fix\r\nMouse Left Move item 'ShippingDlg.SplitContainer.Weight' at Center.", repo.ShippingDlg.SplitContainer.WeightInfo, new RecordItemIndex(83));
            repo.ShippingDlg.SplitContainer.Weight.MoveTo(1000);
            Delay.Milliseconds(0);
            
            // Select All (CTRL+A)
            Report.Log(ReportLevel.Info, "Keyboard", "Select All (CTRL+A)\r\nKey 'Ctrl+A' Press with focus on 'ShippingDlg.SplitContainer.Weight'.", repo.ShippingDlg.SplitContainer.WeightInfo, new RecordItemIndex(84));
            Keyboard.PrepareFocus(repo.ShippingDlg.SplitContainer.Weight);
            Keyboard.Press(System.Windows.Forms.Keys.A | System.Windows.Forms.Keys.Control, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            // Set Weight: 150
            Report.Log(ReportLevel.Info, "Keyboard", "Set Weight: 150\r\nKey sequence '2201' with focus on 'ShippingDlg.SplitContainer.Weight'.", repo.ShippingDlg.SplitContainer.WeightInfo, new RecordItemIndex(85));
            repo.ShippingDlg.SplitContainer.Weight.PressKeys("2201");
            Delay.Milliseconds(0);
            
            // Click the "More info" link in the footer to get the error message
            Report.Log(ReportLevel.Info, "Mouse", "Click the \"More info\" link in the footer to get the error message\r\nMouse Left Click item 'ShippingDlg.SplitContainer.MoreInfo' at Center.", repo.ShippingDlg.SplitContainer.MoreInfoInfo, new RecordItemIndex(86));
            repo.ShippingDlg.SplitContainer.MoreInfo.Click();
            Delay.Milliseconds(200);
            
            // Verify the error message is correct
            Report.Log(ReportLevel.Info, "Validation", "Verify the error message is correct\r\nValidating AttributeEqual (RawText='There are no FedEx services available for the selected shipment options.') on item 'ShipWorks.ThereAreNoFedExServicesAvailableFo'.", repo.ShipWorks.ThereAreNoFedExServicesAvailableFoInfo, new RecordItemIndex(87));
            Validate.Attribute(repo.ShipWorks.ThereAreNoFedExServicesAvailableFoInfo, "RawText", "There are no FedEx services available for the selected shipment options.");
            Delay.Milliseconds(100);
            
            // Move Fix
            Report.Log(ReportLevel.Info, "Mouse", "Move Fix\r\nMouse Left Move item 'ShipWorks.ButtonOK' at Center.", repo.ShipWorks.ButtonOKInfo, new RecordItemIndex(88));
            repo.ShipWorks.ButtonOK.MoveTo(1000);
            Delay.Milliseconds(0);
            
            // Click ok on the error message box
            Report.Log(ReportLevel.Info, "Mouse", "Click ok on the error message box\r\nMouse Left Click item 'ShipWorks.ButtonOK' at Center.", repo.ShipWorks.ButtonOKInfo, new RecordItemIndex(89));
            repo.ShipWorks.ButtonOK.Click();
            Delay.Milliseconds(200);
            
            // Move Fix
            Report.Log(ReportLevel.Info, "Mouse", "Move Fix\r\nMouse Left Move item 'ShippingDlg.Close' at Center.", repo.ShippingDlg.CloseInfo, new RecordItemIndex(90));
            repo.ShippingDlg.Close.MoveTo(1000);
            Delay.Milliseconds(0);
            
            // Close out of the ship order dialog
            Report.Log(ReportLevel.Info, "Mouse", "Close out of the ship order dialog\r\nMouse Left Click item 'ShippingDlg.Close' at Center.", repo.ShippingDlg.CloseInfo, new RecordItemIndex(91));
            repo.ShippingDlg.Close.Click();
            Delay.Milliseconds(200);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
