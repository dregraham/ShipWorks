///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.IO;
using System.ComponentModel;
using System.Windows.Forms;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using System.Diagnostics;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;
using Ionic.Zip;

namespace ProcessDHL
{
    public partial class diffpdfcCommands
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        public void diffpdfc()
        {
        	if(File.Exists(@"C:\Program Files (x86)\diffpdfc\diffpdfc.exe"))
        	{
        	string smokeTestPath = System.IO.Path.GetFullPath(System.IO.Path.Combine(System.IO.Directory.GetCurrentDirectory(),@"..\..\"));
        	string userPath = Environment.GetFolderPath(Environment.SpecialFolder.UserProfile);
        	using(Ionic.Zip.ZipFile sourcelabelszip = Ionic.Zip.ZipFile.Read(smokeTestPath + @"\ZipFiles\SourceLabels.zip"))
        	{
        		sourcelabelszip.ExtractAll("C:\\printpdflabels\\sourceLabels",
        		                           Ionic.Zip.ExtractExistingFileAction.OverwriteSilently);
        	}
        	
        	
        	
        	//newLabels is an array of strings. Each entry in the array is a the path and file name of a label created during the current run of the smoke test
			

        	string[] newLabels = Directory.GetFiles("C:\\printpdflabels\\" + FileName.pdfFolder + "\\");
        	
        	
           	Report.Log(ReportLevel.Info,"C:\\printpdflabels\\" + FileName.pdfFolder, "1\n");
        	
        	//sourceLabels is an array of strings. Each entry in the array is a the path and file name of a label from the source collection that we compare against       	
        	string[] sourceLabels = Directory.GetFiles("C:\\printpdflabels\\sourceLabels\\");
        	
        	//This is the name directory for the report
        	string report = "C:\\printpdflabels\\" + FileName.pdfFolder + "\\ComparisonReport\\";
        	       	
        	
        	Directory.CreateDirectory(report);
        	
        	//j is the index of the sourceLabels  
        	int j = 0;
			//for every label that was produced in this run of the smoketest...        	
        	for (int i = 0; i < newLabels.Length; i++)
        	{
        		Report.Log(ReportLevel.Info,newLabels[i], "1\n");
        		Report.Log(ReportLevel.Info,sourceLabels[j], "1\n");
	      		//while we still have source labels to compare to
      	    	while(j<sourceLabels.Length)
      	      			

      	      		{
      	    			Report.Log(ReportLevel.Info, "In Loop", "1\n");

      	      			
      	      			//extract the file name from the path      	      			
      	      			string NewLabelFileName = Path.GetFileNameWithoutExtension(newLabels[i]);
      	      			string SourceLabelFileName = Path.GetFileNameWithoutExtension(sourceLabels[j]);
      	      			
      				        				
      	      			//extract the label type from each label we want to compare
        				string[] NewLabelType = NewLabelFileName.Split('_');
      	      			string[] SourceLabelType = SourceLabelFileName.Split('_');
      	      			
      	      			
      	      			//if the label type of the newLabel is not the same as the label type of the sourceLabel
      	      		 	if(NewLabelType[0] != SourceLabelType[0])
        		      	{
      	      		  		//move on to the next source label (this allows people to run only a portion of the smoke test if they want to)
        		      		j++;
        		      		Report.Log(ReportLevel.Info, "Bad Match " + NewLabelType[0] + "does not match" + SourceLabelType[0] + ". Trying next source label.", "1\n");
        		      		
        		     	}
      	      		 	 //otherwise, create a compare report
        			 	else
        			 	{
        			 		string s = "diffpdfc -a -Hc -r " + report + NewLabelFileName + "_comparison_report.pdf " + newLabels[i] + " " + sourceLabels[j] + "  > diffpdfcoutput.txt 2>&1";
        			 		if(File.Exists("diffpdfc.bat"))
        			 		{
        			 		   	File.Delete("diffpdfcCommand.bat");
        			 		}
        			 		StreamWriter sw = new StreamWriter("diffpdfcCommand.bat");
        			 	  	sw.Write(s);
        			 		sw.Close();
        					System.Diagnostics.Process.Start("diffpdfcCommand.bat");
        					Report.Log(ReportLevel.Info, "Compared New Label " + NewLabelType[0] + " with Source Label " + SourceLabelType[0], "1\n");
        					break;
        			 	}
        			}
        	
        		j++;
        	
        	}
        	Report.Log(ReportLevel.Info, "Out of loop", "1\n");
        	//Open the file with the comparison report
        	Process.Start(report);
        	}
        	if(File.Exists("diffpdfcoutput.txt"))
        	{
        		Process.Start("diffpdfcoutput.txt");
        	}
        	//If the user doesn't have diffpdfc installed, it just skips the comparisons all together
        	else
        	{
        		Report.Log(ReportLevel.Info, "DIFFPDFC is not installed, so automatic label comparison did not occur. Please manually validate labels", "\n");
        	}
        }

    }
}
