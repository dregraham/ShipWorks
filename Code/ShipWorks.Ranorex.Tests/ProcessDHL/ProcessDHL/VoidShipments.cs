///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace ProcessDHL
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The VoidShipments recording.
    /// </summary>
    [TestModule("45f9ed43-a997-461f-960e-f577d1543657", ModuleType.Recording, 1)]
    public partial class VoidShipments : ITestModule
    {
        /// <summary>
        /// Holds an instance of the SmokeTestRepository repository.
        /// </summary>
        public static SmokeTestRepository repo = SmokeTestRepository.Instance;

        static VoidShipments instance = new VoidShipments();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public VoidShipments()
        {
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static VoidShipments Instance
        {
            get { return instance; }
        }

#region Variables

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.1")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.1")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            // Mouse Move to avoid click inconsistency
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Move to avoid click inconsistency\r\nMouse Left Move item 'ShipWorksSa.Orders' at Center.", repo.ShipWorksSa.OrdersInfo, new RecordItemIndex(0));
            repo.ShipWorksSa.Orders.MoveTo();
            Delay.Milliseconds(200);
            
            // Click the Orders tab in filter pnael in case user is on Customer tab of filters
            Report.Log(ReportLevel.Info, "Mouse", "Click the Orders tab in filter pnael in case user is on Customer tab of filters\r\nMouse Left Click item 'ShipWorksSa.Orders' at Center.", repo.ShipWorksSa.OrdersInfo, new RecordItemIndex(1));
            repo.ShipWorksSa.Orders.Click();
            Delay.Milliseconds(200);
            
            // Mouse Move to avoid click inconsistency
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Move to avoid click inconsistency\r\nMouse Left Move item 'MainForm.FilterAllOrders' at Center.", repo.MainForm.FilterAllOrdersInfo, new RecordItemIndex(2));
            repo.MainForm.FilterAllOrders.MoveTo();
            Delay.Milliseconds(200);
            
            // Click the All filter to view all orders
            Report.Log(ReportLevel.Info, "Mouse", "Click the All filter to view all orders\r\nMouse Left Click item 'MainForm.FilterAllOrders' at Center.", repo.MainForm.FilterAllOrdersInfo, new RecordItemIndex(3));
            repo.MainForm.FilterAllOrders.Click();
            Delay.Milliseconds(200);
            
            // Mouse Move to avoid click inconsistency
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Move to avoid click inconsistency\r\nMouse Left Move item 'MainForm.MainGridRow2Column1' at Center.", repo.MainForm.MainGridRow2Column1Info, new RecordItemIndex(4));
            repo.MainForm.MainGridRow2Column1.MoveTo();
            Delay.Milliseconds(200);
            
            // Click the 2nd row in the grid (in case multiples are highlighted already)
            Report.Log(ReportLevel.Info, "Mouse", "Click the 2nd row in the grid (in case multiples are highlighted already)\r\nMouse Left Click item 'MainForm.MainGridRow2Column1' at Center.", repo.MainForm.MainGridRow2Column1Info, new RecordItemIndex(5));
            repo.MainForm.MainGridRow2Column1.Click();
            Delay.Milliseconds(200);
            
            // Mouse Move to avoid click inconsistency
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Move to avoid click inconsistency\r\nMouse Right Move item 'MainForm.MainGridRow2Column1' at Center.", repo.MainForm.MainGridRow2Column1Info, new RecordItemIndex(6));
            repo.MainForm.MainGridRow2Column1.MoveTo();
            Delay.Milliseconds(200);
            
            // Right click the 2nd row in the grid
            Report.Log(ReportLevel.Info, "Mouse", "Right click the 2nd row in the grid\r\nMouse Right Click item 'MainForm.MainGridRow2Column1' at Center.", repo.MainForm.MainGridRow2Column1Info, new RecordItemIndex(7));
            repo.MainForm.MainGridRow2Column1.Click(System.Windows.Forms.MouseButtons.Right);
            Delay.Milliseconds(200);
            
            // Mouse Move to avoid click inconsistency
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Move to avoid click inconsistency\r\nMouse Left Move item 'ContextMenuOrderGrid.ShipOrders' at Center.", repo.ContextMenuOrderGrid.ShipOrdersInfo, new RecordItemIndex(8));
            repo.ContextMenuOrderGrid.ShipOrders.MoveTo();
            Delay.Milliseconds(200);
            
            // Click Ship Orders from the Context menu
            Report.Log(ReportLevel.Info, "Mouse", "Click Ship Orders from the Context menu\r\nMouse Left Click item 'ContextMenuOrderGrid.ShipOrders' at Center.", repo.ContextMenuOrderGrid.ShipOrdersInfo, new RecordItemIndex(9));
            repo.ContextMenuOrderGrid.ShipOrders.Click();
            Delay.Milliseconds(200);
            
            // move mouse to select the table
            Report.Log(ReportLevel.Info, "Mouse", "move mouse to select the table\r\nMouse Left Move item 'ShippingDlg.SplitContainer.OrderHash' at Center.", repo.ShippingDlg.SplitContainer.OrderHashInfo, new RecordItemIndex(10));
            repo.ShippingDlg.SplitContainer.OrderHash.MoveTo();
            Delay.Milliseconds(200);
            
            // click to focus the table
            Report.Log(ReportLevel.Info, "Mouse", "click to focus the table\r\nMouse Left Click item 'ShippingDlg.SplitContainer.OrderHash' at Center.", repo.ShippingDlg.SplitContainer.OrderHashInfo, new RecordItemIndex(11));
            repo.ShippingDlg.SplitContainer.OrderHash.Click();
            Delay.Milliseconds(200);
            
            // select all the shipments
            Report.Log(ReportLevel.Info, "Keyboard", "select all the shipments\r\nKey 'Ctrl+A' Press with focus on 'ShippingDlg.SplitContainer.EntityGrid'.", repo.ShippingDlg.SplitContainer.EntityGridInfo, new RecordItemIndex(12));
            Keyboard.PrepareFocus(repo.ShippingDlg.SplitContainer.EntityGrid);
            Keyboard.Press(System.Windows.Forms.Keys.A | System.Windows.Forms.Keys.Control, 30, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            // move mouse to void labels button
            Report.Log(ReportLevel.Info, "Mouse", "move mouse to void labels button\r\nMouse Left Move item 'ShippingDlg.VoidLabels' at Center.", repo.ShippingDlg.VoidLabelsInfo, new RecordItemIndex(13));
            repo.ShippingDlg.VoidLabels.MoveTo();
            Delay.Milliseconds(200);
            
            // click the void labels button
            Report.Log(ReportLevel.Info, "Mouse", "click the void labels button\r\nMouse Left Click item 'ShippingDlg.VoidLabels' at Center.", repo.ShippingDlg.VoidLabelsInfo, new RecordItemIndex(14));
            repo.ShippingDlg.VoidLabels.Click();
            Delay.Milliseconds(200);
            
            // move mouse to click the ok button to void shipments
            Report.Log(ReportLevel.Info, "Mouse", "move mouse to click the ok button to void shipments\r\nMouse Left Move item 'ShipmentVoidConfirmDlg.OKButton' at Center.", repo.ShipmentVoidConfirmDlg.OKButtonInfo, new RecordItemIndex(15));
            repo.ShipmentVoidConfirmDlg.OKButton.MoveTo();
            Delay.Milliseconds(200);
            
            // click the ok button to void shipments
            Report.Log(ReportLevel.Info, "Mouse", "click the ok button to void shipments\r\nMouse Left Click item 'ShipmentVoidConfirmDlg.OKButton' at Center.", repo.ShipmentVoidConfirmDlg.OKButtonInfo, new RecordItemIndex(16));
            repo.ShipmentVoidConfirmDlg.OKButton.Click();
            Delay.Milliseconds(200);
            
            try {
                Validate_ButtonOK(repo.ShipWorks.ButtonOKInfo);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(17)); }
            
            // Preparing
            try {
                Report.Log(ReportLevel.Info, "Wait", "(Optional Action)\r\nPreparing\r\nWaiting 5s to exist. Associated repository item: 'ProgressDlg'", repo.ProgressDlg.SelfInfo, new ActionTimeout(5000), new RecordItemIndex(18));
                repo.ProgressDlg.SelfInfo.WaitForExists(5000);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(18)); }
            
            // Preparing
            try {
                Report.Log(ReportLevel.Info, "Wait", "(Optional Action)\r\nPreparing\r\nWaiting 15m to not exist. Associated repository item: 'ProgressDlg'", repo.ProgressDlg.SelfInfo, new ActionTimeout(900000), new RecordItemIndex(19));
                repo.ProgressDlg.SelfInfo.WaitForNotExists(900000);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(19)); }
            
            try {
                Validate_ButtonOK(repo.ShipWorks.ButtonOKInfo);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(20)); }
            
            // Move to Close button (Ship Orders UI)
            Report.Log(ReportLevel.Info, "Mouse", "Move to Close button (Ship Orders UI)\r\nMouse Left Move item 'ShippingDlg.Close' at Center.", repo.ShippingDlg.CloseInfo, new RecordItemIndex(21));
            repo.ShippingDlg.Close.MoveTo();
            Delay.Milliseconds(200);
            
            // Click close button (Ship Orders UI)
            Report.Log(ReportLevel.Info, "Mouse", "Click close button (Ship Orders UI)\r\nMouse Left Click item 'ShippingDlg.Close' at Center.", repo.ShippingDlg.CloseInfo, new RecordItemIndex(22));
            repo.ShippingDlg.Close.Click();
            Delay.Milliseconds(200);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
