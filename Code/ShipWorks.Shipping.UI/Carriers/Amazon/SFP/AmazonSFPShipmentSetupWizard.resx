<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>